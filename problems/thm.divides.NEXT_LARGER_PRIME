include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/prelim.ax').
include('incl/quote.ax').
include('incl/semi_ring.ax').
include('incl/ring.ax').
include('incl/canonical.ax').
include('incl/ringNorm.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/quotient_option.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/integral.ax').
fof('thm.divides.divides_def', axiom, ![V_27a_27, V_27b_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) <=> ?[V_27q_27]: s('type.num.num',V_27b_27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',V_27q_27),s('type.num.num',V_27a_27))))).
fof('thm.divides.ALL_DIVIDES_|48|', axiom, ![V_27a_27]: p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.num.|48|_0'))))).
fof('thm.divides.ZERO_DIVIDES', axiom, ![V_27m_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27m_27)))) <=> s('type.num.num',V_27m_27) = s('type.num.num','const.num.|48|_0'))).
fof('thm.divides.DIVIDES_REFL', axiom, ![V_27a_27]: p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27a_27))))).
fof('thm.divides.DIVIDES_TRANS', axiom, ![V_27a_27, V_27b_27, V_27c_27]: ((p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27c_27))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27c_27)))))).
fof('thm.divides.ONE_DIVIDES_ALL', axiom, ![V_27a_27]: p(s('bool','const.divides.divides_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27a_27))))).
fof('thm.divides.DIVIDES_ONE', axiom, ![V_27x_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27x_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',V_27x_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))).
fof('thm.divides.DIVIDES_ADD_|49|', axiom, ![V_27a_27, V_27b_27, V_27c_27]: ((p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27c_27))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27c_27)))))))).
fof('thm.divides.DIVIDES_ADD_2', axiom, ![V_27a_27, V_27b_27, V_27c_27]: ((p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27c_27))))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27c_27)))))).
fof('thm.divides.DIVIDES_SUB', axiom, ![V_27a_27, V_27b_27, V_27c_27]: ((p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27c_27))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27c_27)))))))).
fof('thm.divides.DIVIDES_LE', axiom, ![V_27a_27, V_27b_27]: ((p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))))) => p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))))).
fof('thm.divides.DIVIDES_LEQ_OR_ZERO', axiom, ![V_27m_27, V_27n_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27)))) => (p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27)))) | s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0')))).
fof('thm.divides.NOT_LT_DIVIDES', axiom, ![V_27a_27, V_27b_27]: ((p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27)))) & p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27a_27))))) => ~ (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))))))).
fof('thm.divides.DIVIDES_ANTISYM', axiom, ![V_27a_27, V_27b_27]: ((p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27a_27))))) => s('type.num.num',V_27a_27) = s('type.num.num',V_27b_27))).
fof('thm.divides.DIVIDES_MULT', axiom, ![V_27a_27, V_27b_27, V_27c_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27)))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27c_27)))))))).
fof('thm.divides.DIVIDES_MULT_LEFT', axiom, ![V_27n_27, V_27m_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27m_27))),s('type.num.num',V_27m_27)))) <=> (s('type.num.num',V_27m_27) = s('type.num.num','const.num.|48|_0') | s('type.num.num',V_27n_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))).
fof('thm.divides.divides_|49|6_prove_ltb', axiom, ![V_27a_27, V_27b_27, V_27x_27]: ((p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27x_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num',V_27b_27))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27a_27),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27x_27)))))))).
fof('thm.divides.DIVIDES_FACT', axiom, ![V_27b_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27b_27)))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27b_27),s('type.num.num','const.arithmetic.FACT_1'(s('type.num.num',V_27b_27)))))))).
fof('thm.divides.LEQ_DIVIDES_FACT', axiom, ![V_27m_27, V_27n_27]: ((p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27m_27)))) & p(s('bool','const.arithmetic.<=_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27))))) => p(s('bool','const.divides.divides_2'(s('type.num.num',V_27m_27),s('type.num.num','const.arithmetic.FACT_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.divides.prime_def', axiom, ![V_27a_27]: (p(s('bool','const.divides.prime_1'(s('type.num.num',V_27a_27)))) <=> (~ (s('type.num.num',V_27a_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & ![V_27b_27]: (p(s('bool','const.divides.divides_2'(s('type.num.num',V_27b_27),s('type.num.num',V_27a_27)))) => (s('type.num.num',V_27b_27) = s('type.num.num',V_27a_27) | s('type.num.num',V_27b_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('thm.divides.NOT_PRIME_|48|', axiom, ~ (p(s('bool','const.divides.prime_1'(s('type.num.num','const.num.|48|_0')))))).
fof('thm.divides.NOT_PRIME_|49|', axiom, ~ (p(s('bool','const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('thm.divides.PRIME_2', axiom, p(s('bool','const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))).
fof('thm.divides.PRIME_3', axiom, p(s('bool','const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))).
fof('thm.divides.PRIME_POS', axiom, ![V_27p_27]: (p(s('bool','const.divides.prime_1'(s('type.num.num',V_27p_27)))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',V_27p_27)))))).
fof('thm.divides.ONE_LT_PRIME', axiom, ![V_27p_27]: (p(s('bool','const.divides.prime_1'(s('type.num.num',V_27p_27)))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27p_27)))))).
fof('thm.divides.prime_divides_only_self', axiom, ![V_27m_27, V_27n_27]: ((p(s('bool','const.divides.prime_1'(s('type.num.num',V_27m_27)))) & (p(s('bool','const.divides.prime_1'(s('type.num.num',V_27n_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27)))))) => s('type.num.num',V_27m_27) = s('type.num.num',V_27n_27))).
fof('thm.divides.PRIME_FACTOR', axiom, ![V_27n_27]: (~ (s('type.num.num',V_27n_27) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) => ?[V_27p_27]: (p(s('bool','const.divides.prime_1'(s('type.num.num',V_27p_27)))) & p(s('bool','const.divides.divides_2'(s('type.num.num',V_27p_27),s('type.num.num',V_27n_27))))))).
fof('thm.divides.EUCLID', axiom, ![V_27n_27]: ?[V_27p_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27p_27)))) & p(s('bool','const.divides.prime_1'(s('type.num.num',V_27p_27)))))).
fof('thm.divides.PRIMES_def|split|0', axiom, s('type.num.num','const.divides.PRIMES_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))).
fof('ARITY_0_1_const.divides.prime', axiom, ![VV0]: s('bool','happ'(s('fun'('type.num.num','bool'),'const.divides.prime_0'),s('type.num.num',VV0))) = s('bool','const.divides.prime_1'(s('type.num.num',VV0)))).
fof('thm.divides.PRIMES_def|split|1', axiom, ![V_27n_27]: s('type.num.num','const.divides.PRIMES_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.while.LEAST_1'(s('fun'('type.num.num','bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.num.num','bool'),'const.divides.prime_0'),s('fun'('type.num.num','bool'),'const.prim_rec.<_1'(s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27)))))))))).
fof('thm.divides.primePRIMES', axiom, ![V_27n_27]: p(s('bool','const.divides.prime_1'(s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27))))))).
fof('thm.divides.INFINITE_PRIMES', axiom, ![V_27n_27]: p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.divides.PRIMES_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))))))).
fof('thm.divides.LT_PRIMES', axiom, ![V_27m_27, V_27n_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27m_27),s('type.num.num',V_27n_27)))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27m_27))),s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27)))))))).
fof('thm.divides.PRIMES_|49||49|', axiom, ![V_27m_27, V_27n_27]: (s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27m_27))) = s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27))) => s('type.num.num',V_27m_27) = s('type.num.num',V_27n_27))).
fof('thm.divides.INDEX_LESS_PRIMES', axiom, ![V_27n_27]: p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27n_27))))))).
fof('thm.divides.EUCLID_PRIMES', axiom, ![V_27n_27]: ?[V_27i_27]: p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27i_27))))))).
fof('thm.divides.NEXT_LARGER_PRIME', conjecture, ![V_27n_27]: ?[V_27i_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27i_27)))))) & ![V_27j_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27j_27),s('type.num.num',V_27i_27)))) => p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.divides.PRIMES_1'(s('type.num.num',V_27j_27))),s('type.num.num',V_27n_27))))))).
