include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
fof('thm.numpair.tri_def|split|0', axiom, s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.|48|_0')).
fof('thm.numpair.tri_def|split|1', axiom, ![V_27n_27]: s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27)))))).
fof('thm.numpair.tri_def_compute|split|1', axiom, ![V_27n_27]: s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))).
fof('thm.numpair.tri_def_compute|split|2', axiom, ![V_27n_27]: s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',V_27n_27))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',V_27n_27)))))))))).
fof('thm.numpair.twotri_formula', axiom, ![V_27n_27]: s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))).
fof('thm.numpair.tri_formula', axiom, ![V_27n_27]: s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',V_27n_27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))).
fof('thm.numpair.tri_eq_|48||split|0', axiom, ![V_27n_27]: (s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27))) = s('type.num.num','const.num.|48|_0') <=> s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0'))).
fof('thm.numpair.tri_eq_|48||split|1', axiom, ![V_27n_27]: (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27))) <=> s('type.num.num',V_27n_27) = s('type.num.num','const.num.|48|_0'))).
fof('thm.numpair.tri_LT_I', conjecture, ![V_27n_27, V_27m_27]: (p(s('bool','const.prim_rec.<_2'(s('type.num.num',V_27n_27),s('type.num.num',V_27m_27)))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27n_27))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',V_27m_27)))))))).
