Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f515,plain,(
  $false),
  inference(subsumption_resolution,[],[f23,f395])).
fof(f395,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.integer.int_divides_2'(s('type.integer.int',X2),s('type.integer.int',X4))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X4)))))) )),
  inference(subsumption_resolution,[],[f385,f24])).
fof(f24,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.justify_divides3',aHL_TRUTH)).
fof(f385,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',X2),s('type.integer.int',X4))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X3))),s('type.integer.int',X4)))))) )),
  inference(superposition,[],[f30,f69])).
fof(f69,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))) )),
  inference(resolution,[],[f67,f33])).
fof(f33,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f25,f27])).
fof(f27,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.justify_divides3',aHL_BOOL_CASES)).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.int_arith.justify_divides3',aHL_FALSITY)).
fof(f67,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(subsumption_resolution,[],[f65,f24])).
fof(f65,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) )),
  inference(superposition,[],[f29,f38])).
fof(f38,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(subsumption_resolution,[],[f35,f25])).
fof(f35,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X0)))) )),
  inference(superposition,[],[f26,f27])).
fof(f26,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0] : p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X7),s('type.integer.int',X7))))),
  file('thm.int_arith.justify_divides3','thm.integer.INT_DIVIDES_REFL')).
fof(f29,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10,X11] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) => p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X10),s('type.integer.int',X11)))))))),
  file('thm.int_arith.justify_divides3','thm.integer.INT_DIVIDES_LMUL')).
fof(f30,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X10,X11] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X9),s('type.integer.int',X11))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int',X11))))))),
  file('thm.int_arith.justify_divides3','thm.integer.INT_DIVIDES_LADD')).
fof(f23,plain,(
  s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int',sK2)))))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int',sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2] : s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2] : s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X8)))))),
  file('thm.int_arith.justify_divides3','thm.int_arith.justify_divides3')).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 33
% Passive clauses: 124
% Generated clauses: 491
% Final active clauses: 20
% Final passive clauses: 56
% Input formulas: 8
% Initial clauses: 8
% 
% Duplicate literals: 69
% Trivial inequalities: 6
% Fw subsumption resolutions: 42
% Fw demodulations: 11
% Bw demodulations: 8
% 
% Simple tautologies: 21
% Equational tautologies: 14
% Forward subsumptions: 174
% 
% Binary resolution: 21
% Forward superposition: 139
% Backward superposition: 109
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 1
% 
% Split clauses: 22
% Split components: 46
% SAT solver clauses: 40
% SAT solver unit clauses: 5
% SAT solver binary clauses: 21
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 22
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 37
% TWLsolver calls for satisfiability: 15
% 
% Memory used [KB]: 1023
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 0.025 s
