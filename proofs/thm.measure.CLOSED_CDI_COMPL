Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% (117577)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 158
% Passive clauses: 1563
% Generated clauses: 18588
% Final active clauses: 137
% Final passive clauses: 1247
% Input formulas: 19
% Initial clauses: 65
% 
% Duplicate literals: 991
% Trivial inequalities: 276
% Fw subsumption resolutions: 3293
% Fw demodulations: 1937
% Bw demodulations: 17
% 
% Simple tautologies: 428
% Equational tautologies: 58
% Forward subsumptions: 8145
% 
% Binary resolution: 426
% Forward superposition: 4402
% Backward superposition: 7285
% Self superposition: 224
% Equality factoring: 173
% Equality resolution: 31
% 
% Split clauses: 1293
% Split components: 2678
% SAT solver clauses: 2055
% SAT solver unit clauses: 30
% SAT solver binary clauses: 194
% 
% Sat splits: 1293
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2054
% TWLsolver calls for satisfiability: 176
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f1211,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1210,f93,f178,f136,f207,f211,f214,f90,f176,f98,f182,f1196,f1198,f95,f180,f121,f199,f212,f216,f91,f174,f269,f274,f92,f172,f102,f184])).
fof(f184,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f184_D])).
fof(f184_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f102,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.measure.CLOSED_CDI_COMPL','thm.bool.EQ_CLAUSES|split|2')).
fof(f172,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) | $spl1),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))) & p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4])],[f45])).
fof(f45,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X2))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X2))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X2))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X2))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.DIFF_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(X6,bool),X8))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.DIFF_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(X6,bool),X8))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))),
  file('thm.measure.CLOSED_CDI_COMPL','thm.measure.CLOSED_CDI_COMPL')).
fof(f274,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) | $spl72),
  inference(cnf_transformation,[],[f274_D])).
fof(f274_D,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f269,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.DIFF_2'(s(fun(sK2,bool),'const.measure.space_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))),s(fun(sK2,bool),sK4))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) | ($spl1 | $spl16)),
  inference(resolution,[],[f172,f184])).
fof(f174,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) | $spl2),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f91,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(cnf_transformation,[],[f61])).
fof(f216,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) | $spl62),
  inference(cnf_transformation,[],[f216_D])).
fof(f216_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f212,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))) | ($spl2 | $spl12)),
  inference(resolution,[],[f182,f174])).
fof(f199,plain,(
  ( ! [X0,X1,X9] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~sP1(X0,X1)) ) | $spl38),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  ( ! [X0,X1,X9] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~sP1(X0,X1)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f121,plain,(
  ( ! [X0,X1,X9] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X9] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X6] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | (s('type.num.num',sK5(X6,X1,X0)) != s('type.num.num',sK6(X6,X1,X0)) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',sK5(X6,X1,X0)))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',sK6(X6,X1,X0)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK7(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),sK7(X1,X0)))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X9] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X6] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X7,X8] : (s('type.num.num',X7) != s('type.num.num',X8) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',X7))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',X8))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X5] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X5))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(rectify,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & ((~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | sP1(X0,X1)))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : (sP1(X0,X1) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f180,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f95,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.measure.CLOSED_CDI_COMPL',aHL_FALSITY)).
fof(f1198,plain,(
  ~sP1(sK2,sK3) | $spl149),
  inference(cnf_transformation,[],[f1198_D])).
fof(f1198_D,plain,(
  ~sP1(sK2,sK3) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f1196,plain,(
  ~sP1(sK2,sK3) | ($spl6 | $spl9 | $spl38 | $spl62 | $spl72)),
  inference(subsumption_resolution,[],[f1195,f178])).
fof(f1195,plain,(
  ~p(s(bool,'T_0')) | ~sP1(sK2,sK3) | ($spl9 | $spl38 | $spl62 | $spl72)),
  inference(forward_demodulation,[],[f1194,f216])).
fof(f1194,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) | ~sP1(sK2,sK3) | ($spl9 | $spl38 | $spl72)),
  inference(subsumption_resolution,[],[f1183,f180])).
fof(f1183,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),sK4),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))) | ~sP1(sK2,sK3) | ($spl38 | $spl72)),
  inference(superposition,[],[f199,f274])).
fof(f182,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f182_D])).
fof(f182_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.measure.CLOSED_CDI_COMPL','thm.bool.EQ_CLAUSES|split|1')).
fof(f176,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f90,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))),
  inference(cnf_transformation,[],[f61])).
fof(f214,plain,(
  s(bool,'T_0') = s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))) | $spl60),
  inference(cnf_transformation,[],[f214_D])).
fof(f214_D,plain,(
  s(bool,'T_0') = s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f211,plain,(
  s(bool,'T_0') = s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))) | ($spl4 | $spl12)),
  inference(resolution,[],[f182,f176])).
fof(f207,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | ~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))) ) | $spl54),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | ~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f136,plain,(
  ( ! [X0,X1] : (sP1(X0,X1) | ~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) | sP1(X0,X1)) & (~sP1(X0,X1) | p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> sP1(X0,X1))),
  inference(definition_folding,[],[f52,f59,f58])).
fof(f58,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f52,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) & ! [X6] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) & ! [X6] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (~s('type.num.num',X3) = s('type.num.num',X4) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))) & ! [X8] : (p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.DIFF_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(X6,bool),X8))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) & ! [X17] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X17),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X17),s('type.num.num','const.num.|48|_0'))) & ! [X18] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X17),s('type.num.num',X18))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X17),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) & ! [X17] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X17),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & ! [X19,X18] : (~s('type.num.num',X18) = s('type.num.num',X19) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X17),s('type.num.num',X19))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X17),s('type.num.num',X18)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X17),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))))),
  file('thm.measure.CLOSED_CDI_COMPL','thm.measure.closed_cdi_def')).
fof(f178,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f93,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.measure.CLOSED_CDI_COMPL',aHL_TRUTH)).
fof(f1210,plain,(
  $false | ($spl6 | $spl54 | $spl60 | $spl149)),
  inference(subsumption_resolution,[],[f1209,f178])).
fof(f1209,plain,(
  ~p(s(bool,'T_0')) | ($spl54 | $spl60 | $spl149)),
  inference(forward_demodulation,[],[f1208,f214])).
fof(f1208,plain,(
  ~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))) | ($spl54 | $spl149)),
  inference(resolution,[],[f1198,f207])).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 54
% Passive clauses: 102
% Generated clauses: 1116
% Final active clauses: 40
% Final passive clauses: 29
% Input formulas: 19
% Initial clauses: 65
% 
% Duplicate literals: 95
% Trivial inequalities: 24
% Fw subsumption resolutions: 105
% Fw demodulations: 41
% Bw demodulations: 30
% Condensations: 105
% Global subsumptions: 4
% 
% Simple tautologies: 74
% Equational tautologies: 17
% Forward subsumptions: 422
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 49
% Forward superposition: 257
% Backward superposition: 176
% Self superposition: 24
% Equality factoring: 28
% Equality resolution: 10
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 191
% SAT solver unit clauses: 70
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 9
% 
% Sat splits: 6
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 174
% TWLsolver calls for satisfiability: 611
% 
% Memory used [KB]: 1535
% Time elapsed: 0.037 s
% ------------------------------
% ------------------------------
% Success in time 0.651 s
