Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (73559)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 302
% Passive clauses: 4184
% Generated clauses: 31332
% Final active clauses: 240
% Final passive clauses: 3298
% Input formulas: 69
% Initial clauses: 106
% 
% Duplicate literals: 619
% Trivial inequalities: 268
% Fw subsumption resolutions: 1554
% Fw demodulations: 7310
% Bw demodulations: 46
% 
% Simple tautologies: 185
% Equational tautologies: 51
% Forward subsumptions: 17059
% Fw demodulations to eq. taut.: 27
% Bw demodulations to eq. taut.: 11
% 
% Binary resolution: 194
% Factoring: 1
% Forward superposition: 11535
% Backward superposition: 9337
% Self superposition: 162
% Equality factoring: 92
% Equality resolution: 17
% 
% Split clauses: 196
% Split components: 392
% SAT solver clauses: 528
% SAT solver unit clauses: 4
% SAT solver binary clauses: 28
% 
% Sat splits: 196
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 528
% TWLsolver calls for satisfiability: 82
% 
% Memory used [KB]: 21748
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (73628)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 869
% Generated clauses: 21716
% Final active clauses: 120
% Final passive clauses: 511
% Input formulas: 69
% Initial clauses: 106
% 
% Duplicate literals: 787
% Trivial inequalities: 213
% Fw subsumption resolutions: 1998
% Fw demodulations: 4482
% Bw demodulations: 192
% Condensations: 1429
% Global subsumptions: 5
% 
% Simple tautologies: 291
% Equational tautologies: 48
% Forward subsumptions: 9968
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 20
% 
% Binary resolution: 68
% Factoring: 1
% Forward superposition: 5703
% Backward superposition: 5415
% Self superposition: 190
% Equality factoring: 111
% Equality resolution: 29
% 
% Split clauses: 182
% Split components: 366
% SAT solver clauses: 1719
% SAT solver unit clauses: 143
% SAT solver binary clauses: 62
% SAT solver learnt clauses: 10
% 
% Sat splits: 182
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 1699
% TWLsolver calls for satisfiability: 464
% 
% Memory used [KB]: 12537
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f76768,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f195,f304,f303,f194,f306,f193,f308,f302,f439,f444,f442,f473,f475,f516,f730,f739,f731,f742,f733,f745,f743,f734,f746,f735,f747,f736,f741,f749,f737,f753,f751,f1125,f1131,f1135,f1133,f1386,f1390,f1388,f2590,f2624,f2622,f3296,f3348,f3448,f3449,f3553,f3554,f3555,f3556,f3560,f3573,f3574,f3575,f3576,f3577,f3578,f3579,f3580,f3581,f3582,f3583,f3584,f3585,f3586,f3587,f3588,f3614,f3615,f3617,f3618,f3619,f3620,f3621,f3622,f3623,f3624,f3625,f3626,f3627,f3628,f3629,f3630,f3631,f3632,f3633,f3634,f3635,f3636,f3637,f3638,f3639,f3640,f3641,f3642,f3643,f3644,f3645,f3646,f3647,f3648,f3649,f3650,f3651,f3652,f3653,f3654,f3655,f3656,f3657,f3658,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3669,f3670,f3671,f3672,f3673,f3674,f3675,f3676,f3677,f3678,f3679,f3680,f3681,f3682,f3683,f3684,f3685,f3686,f3687,f3688,f3689,f3690,f3691,f3692,f3693,f3694,f3695,f3696,f3697,f3698,f3699,f3700,f3701,f3702,f3703,f3704,f3705,f3706,f3707,f3708,f3709,f3710,f3711,f3712,f3720,f3726,f3728,f3730,f3732,f3736,f3738,f3740,f3742,f3744,f3746,f3748,f3750,f3752,f3754,f3758,f3760,f3762,f3764,f3766,f3768,f3770,f3774,f3776,f3778,f3796,f3810,f3812,f3814,f3816,f3822,f3824,f3859,f3860,f3861,f3865,f3867,f3872,f3877,f3878,f3879,f3880,f3883,f3884,f3885,f3886,f3887,f3888,f16165,f16303,f16301,f20776,f20779,f20807,f20777,f20809,f474,f20780,f22775,f23032,f23030,f22780,f23073,f23076,f23074,f23079,f23083,f23081,f23085,f23035,f23037,f23308,f23315,f23319,f23317,f23322,f23326,f23324,f23351,f23312,f23310,f23263,f23368,f23366,f23265,f23372,f23370,f23266,f23376,f23374,f23389,f23391,f23393,f23394,f23395,f23396,f23398,f23399,f23400,f23401,f23402,f23404,f23405,f23406,f23407,f23408,f23410,f23411,f23412,f23413,f23414,f23416,f23419,f23421,f23422,f23424,f23426,f23428,f23429,f23430,f23431,f23432,f23433,f23434,f23459,f23462,f23464,f23466,f23468,f23469,f23470,f23471,f23472,f23479,f23481,f23483,f23485,f23499,f23504,f23505,f23515,f23516,f23517,f23873,f15199,f23881,f23879,f24243,f24244,f24245,f24246,f24247,f24248,f24249,f24250,f24251,f24252,f24253,f24254,f24191,f24193,f24195,f24197,f24201,f24203,f24205,f24207,f24211,f25073,f25074,f25075,f25076,f25077,f25078,f25079,f25080,f25081,f25082,f25083,f25084,f25021,f25023,f25025,f25027,f25031,f25033,f25035,f25037,f25041,f39414,f39459,f39417,f39463,f39418,f39465,f39419,f39471,f39469,f39420,f39475,f39473,f39428,f39476,f39430,f39477,f39433,f39479,f39436,f39481,f39438,f39482,f39439,f39483,f39440,f39467,f39484,f39441,f39485,f39442,f39486,f39444,f39461,f39488,f39556,f65895,f65817,f65897,f65899,f76458,f66985,f76470,f76468,f59328,f76529,f76527,f55058,f76534,f76532,f54370,f76539,f76537,f45259,f76544,f76542,f44479,f76549,f76547,f42714,f76554,f76552,f76594,f76604,f76621,f76622,f76623,f76625,f76628,f76631,f76634,f76637,f76757,f76759])).
fof(f76759,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f76758,f196])).
fof(f196,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9',aHL_TRUTH)).
fof(f76758,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f76755,f76677])).
fof(f76677,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))),s('type.num.num',sK1))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f76607,f431])).
fof(f431,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f200,f224])).
fof(f224,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9',aHL_BOOL_CASES)).
fof(f200,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9',aHL_FALSITY)).
fof(f76607,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f76583,f2138])).
fof(f2138,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f2126,f321])).
fof(f321,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f318,f203])).
fof(f203,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.ADD|split|0')).
fof(f318,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f317,f315])).
fof(f315,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))))))) )),
  inference(backward_demodulation,[],[f270,f312])).
fof(f312,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))))))) )),
  inference(forward_demodulation,[],[f256,f199])).
fof(f199,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f47])).
fof(f47,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|13')).
fof(f256,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.quantHeuristics.LIST_LENGTH_|49||split|7')).
fof(f270,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.GREATER_EQ')).
fof(f317,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f274,f273])).
fof(f273,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X12))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.ADD_CLAUSES|split|2')).
fof(f274,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f2126,plain,(
  ( ! [X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f272,f270])).
fof(f272,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X11,X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.LESS_EQ')).
fof(f76583,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f76582,f2126])).
fof(f76582,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f76581,f33413])).
fof(f33413,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(backward_demodulation,[],[f33355,f4109])).
fof(f4109,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f2293,f3889])).
fof(f3889,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl16),
  inference(backward_demodulation,[],[f739,f204])).
fof(f204,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|6')).
fof(f2293,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f274,f214])).
fof(f214,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X11] : s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.ADD_|48|')).
fof(f33355,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(unit_resulting_resolution,[],[f4101,f4038])).
fof(f4038,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f1455,f3889])).
fof(f1455,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f289,f199])).
fof(f289,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X12,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num',X11) = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|19')).
fof(f4101,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f963,f3889])).
fof(f963,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f217,f768])).
fof(f768,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f756,f208])).
fof(f208,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|7')).
fof(f756,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f208,f229])).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|17')).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|14')).
fof(f76581,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f302,f33402])).
fof(f33402,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(backward_demodulation,[],[f33355,f4034])).
fof(f4034,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f199,f3889])).
fof(f76755,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(trivial_inequality_removal,[],[f76730])).
fof(f76730,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(superposition,[],[f76580,f76606])).
fof(f76606,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7(sK2,sK1,sK0)),s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f76583,f2136])).
fof(f2136,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f2126,f323])).
fof(f323,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f320,f203])).
fof(f320,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f317,f311])).
fof(f311,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f257,f199])).
fof(f257,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f176])).
fof(f76580,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f304,f270])).
fof(f76757,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f76756,f196])).
fof(f76756,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f76729,f76677])).
fof(f76729,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK2,sK1,sK0)))),s('type.num.num',sK1)))) | ($spl0 | $spl2 | $spl16)),
  inference(unit_resulting_resolution,[],[f76606,f76580])).
fof(f76637,plain,(
  $false | ($spl0 | $spl4 | $spl16 | $spl47 | $spl109)),
  inference(subsumption_resolution,[],[f76636,f200])).
fof(f76636,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl4 | $spl16 | $spl47 | $spl109)),
  inference(forward_demodulation,[],[f76635,f40168])).
fof(f40168,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | ($spl4 | $spl109)),
  inference(unit_resulting_resolution,[],[f200,f39618,f285])).
fof(f285,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X14,X15] : ((p(s(bool,X14)) => p(s(bool,X15))) => ((p(s(bool,X15)) => p(s(bool,X14))) => s(bool,X14) = s(bool,X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.bool.IMP_ANTISYM_AX')).
fof(f39618,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ($spl4 | $spl109)),
  inference(forward_demodulation,[],[f39559,f3298])).
fof(f3298,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f3297,f2126])).
fof(f3297,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f3254,f3252])).
fof(f3252,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f325,f199])).
fof(f325,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f277,f270])).
fof(f277,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|28')).
fof(f3254,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f325,f963])).
fof(f39559,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl4 | $spl109)),
  inference(unit_resulting_resolution,[],[f306,f39467,f2137])).
fof(f2137,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f2126,f322])).
fof(f322,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) )),
  inference(forward_demodulation,[],[f319,f203])).
fof(f319,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f317,f314])).
fof(f314,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f270,f310])).
fof(f310,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(forward_demodulation,[],[f258,f199])).
fof(f258,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f176])).
fof(f76635,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ($spl0 | $spl4 | $spl16 | $spl47 | $spl109)),
  inference(subsumption_resolution,[],[f76620,f2624])).
fof(f76620,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl4 | $spl16 | $spl109)),
  inference(superposition,[],[f76583,f40198])).
fof(f40198,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl109)),
  inference(subsumption_resolution,[],[f40171,f196])).
fof(f40171,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl109)),
  inference(superposition,[],[f39618,f427])).
fof(f427,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f224,f224])).
fof(f76634,plain,(
  $false | ($spl0 | $spl16 | $spl43 | $spl47)),
  inference(subsumption_resolution,[],[f76633,f200])).
fof(f76633,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl16 | $spl43 | $spl47)),
  inference(forward_demodulation,[],[f76632,f3943])).
fof(f3943,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl16 | $spl43)),
  inference(forward_demodulation,[],[f1396,f3889])).
fof(f1396,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl43),
  inference(unit_resulting_resolution,[],[f200,f1391,f285])).
fof(f1391,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1390,f232])).
fof(f232,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X12] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|30')).
fof(f76632,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl16 | $spl43 | $spl47)),
  inference(subsumption_resolution,[],[f76619,f2624])).
fof(f76619,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16 | $spl43)),
  inference(superposition,[],[f76583,f14992])).
fof(f14992,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl16 | $spl43)),
  inference(subsumption_resolution,[],[f14939,f200])).
fof(f14939,plain,(
  ( ! [X10] : (p(s(bool,'F_0')) | s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl16 | $spl43)),
  inference(superposition,[],[f472,f3943])).
fof(f472,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f455,f200])).
fof(f455,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f285,f224])).
fof(f76631,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76630,f2624])).
fof(f76630,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(condensation,[],[f76629])).
fof(f76629,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f76617,f431])).
fof(f76617,plain,(
  ( ! [X2] : (p(s(bool,X2)) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl0 | $spl16)),
  inference(superposition,[],[f76583,f427])).
fof(f76628,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76627,f2624])).
fof(f76627,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(condensation,[],[f76626])).
fof(f76626,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f76616,f431])).
fof(f76616,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl0 | $spl16)),
  inference(superposition,[],[f76583,f427])).
fof(f76625,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76624,f2624])).
fof(f76624,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f76614,f200])).
fof(f76614,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(superposition,[],[f76583,f224])).
fof(f76623,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76609,f2624])).
fof(f76609,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f196,f76583,f288])).
fof(f288,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f150])).
fof(f76622,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76611,f2624])).
fof(f76611,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f196,f76583,f288])).
fof(f76621,plain,(
  $false | ($spl0 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f76613,f2624])).
fof(f76613,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f76583,f431])).
fof(f76604,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f76603,f196])).
fof(f76603,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f76592,f440])).
fof(f440,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1))) | $spl6),
  inference(subsumption_resolution,[],[f433,f200])).
fof(f433,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1))) | $spl6),
  inference(superposition,[],[f329,f224])).
fof(f329,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f308,f270])).
fof(f76592,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f76591])).
fof(f76591,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | ($spl2 | $spl4)),
  inference(superposition,[],[f76580,f306])).
fof(f76594,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f76593,f196])).
fof(f76593,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f76584,f440])).
fof(f76584,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num',sK1)))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f306,f76580])).
fof(f76552,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl166),
  inference(cnf_transformation,[],[f76552_D])).
fof(f76552_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f76554,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl169),
  inference(cnf_transformation,[],[f76554_D])).
fof(f76554_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) <=> ~$spl169),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl169])])).
fof(f42714,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | ($spl4 | $spl109)),
  inference(equality_factoring,[],[f40198])).
fof(f76547,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl162),
  inference(cnf_transformation,[],[f76547_D])).
fof(f76547_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f76549,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl165),
  inference(cnf_transformation,[],[f76549_D])).
fof(f76549_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl165),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl165])])).
fof(f44479,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl109),
  inference(equality_factoring,[],[f39619])).
fof(f39619,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl109),
  inference(subsumption_resolution,[],[f39587,f196])).
fof(f39587,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl109),
  inference(superposition,[],[f39467,f427])).
fof(f76542,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl158),
  inference(cnf_transformation,[],[f76542_D])).
fof(f76542_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f76544,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl161),
  inference(cnf_transformation,[],[f76544_D])).
fof(f76544_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f45259,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | ($spl4 | $spl113)),
  inference(equality_factoring,[],[f40680])).
fof(f40680,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl113)),
  inference(subsumption_resolution,[],[f40649,f196])).
fof(f40649,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl113)),
  inference(superposition,[],[f40610,f427])).
fof(f40610,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ($spl4 | $spl113)),
  inference(forward_demodulation,[],[f40551,f2126])).
fof(f40551,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl4 | $spl113)),
  inference(unit_resulting_resolution,[],[f306,f39471,f2137])).
fof(f76537,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl154),
  inference(cnf_transformation,[],[f76537_D])).
fof(f76537_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f76539,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl157),
  inference(cnf_transformation,[],[f76539_D])).
fof(f76539_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl157),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl157])])).
fof(f54370,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl4 | $spl16)),
  inference(equality_factoring,[],[f52665])).
fof(f52665,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl16)),
  inference(subsumption_resolution,[],[f52616,f196])).
fof(f52616,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f52341,f427])).
fof(f52341,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f306,f52254,f2137])).
fof(f52254,plain,(
  ( ! [X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X9))))) ) | $spl16),
  inference(subsumption_resolution,[],[f52253,f200])).
fof(f52253,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X9))))) ) | $spl16),
  inference(forward_demodulation,[],[f52252,f3940])).
fof(f3940,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f210,f3889])).
fof(f210,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X12] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|20')).
fof(f52252,plain,(
  ( ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X9))))) ) | $spl16),
  inference(forward_demodulation,[],[f52251,f3298])).
fof(f52251,plain,(
  ( ! [X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X9))))) ) | $spl16),
  inference(forward_demodulation,[],[f52250,f3956])).
fof(f3956,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl16),
  inference(forward_demodulation,[],[f2201,f3889])).
fof(f2201,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f313,f270])).
fof(f313,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f270,f223])).
fof(f223,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X12] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|27')).
fof(f52250,plain,(
  ( ! [X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X9)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f52249,f2126])).
fof(f52249,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f52178,f33413])).
fof(f52178,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl16),
  inference(superposition,[],[f13095,f33402])).
fof(f13095,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))))) ) | $spl16),
  inference(superposition,[],[f297,f3895])).
fof(f3895,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f207])).
fof(f207,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X23),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(cnf_transformation,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) & ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) & ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))))) & ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) & ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))))),
  inference(nnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) <=> (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X11,X12,X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X13)))) <=> (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.SUB_RIGHT_GREATER_EQ')).
fof(f76532,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl150),
  inference(cnf_transformation,[],[f76532_D])).
fof(f76532_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f76534,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl153),
  inference(cnf_transformation,[],[f76534_D])).
fof(f76534_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) <=> ~$spl153),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl153])])).
fof(f55058,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | ($spl4 | $spl16)),
  inference(equality_factoring,[],[f53501])).
fof(f53501,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl16)),
  inference(subsumption_resolution,[],[f53453,f196])).
fof(f53453,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f53108,f427])).
fof(f53108,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | ($spl4 | $spl16)),
  inference(forward_demodulation,[],[f52955,f2126])).
fof(f52955,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) | ($spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f306,f52261,f2137])).
fof(f52261,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X16))))) ) | $spl16),
  inference(subsumption_resolution,[],[f52260,f200])).
fof(f52260,plain,(
  ( ! [X16] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X16))))) ) | $spl16),
  inference(forward_demodulation,[],[f52259,f3940])).
fof(f52259,plain,(
  ( ! [X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X16))))) ) | $spl16),
  inference(forward_demodulation,[],[f52258,f21133])).
fof(f21133,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f2126,f217])).
fof(f52258,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X16)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f52257,f33413])).
fof(f52257,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X16)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f52181,f21134])).
fof(f21134,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f2126,f274])).
fof(f52181,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl16),
  inference(superposition,[],[f13095,f33403])).
fof(f33403,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(backward_demodulation,[],[f33355,f4036])).
fof(f4036,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f962,f3889])).
fof(f962,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f217,f199])).
fof(f76527,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl146),
  inference(cnf_transformation,[],[f76527_D])).
fof(f76527_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f76529,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl149),
  inference(cnf_transformation,[],[f76529_D])).
fof(f76529_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f59328,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl11 | $spl16 | $spl60)),
  inference(equality_factoring,[],[f43110])).
fof(f43110,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16 | $spl60)),
  inference(subsumption_resolution,[],[f43078,f444])).
fof(f43078,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f42927,f427])).
fof(f42927,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl16 | $spl60)),
  inference(forward_demodulation,[],[f42887,f23035])).
fof(f42887,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f33392,f33404])).
fof(f33404,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(backward_demodulation,[],[f33355,f4037])).
fof(f4037,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f1086,f3889])).
fof(f1086,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f219,f199])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|16')).
fof(f33392,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl16),
  inference(backward_demodulation,[],[f33355,f3958])).
fof(f3958,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl16),
  inference(forward_demodulation,[],[f3131,f3889])).
fof(f3131,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f3127,f2648])).
fof(f2648,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f278,f199])).
fof(f278,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X12,X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|25')).
fof(f3127,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f3113,f2688])).
fof(f2688,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2650,f2648])).
fof(f2650,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f278,f963])).
fof(f3113,plain,(
  ( ! [X2,X3] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f324,f272])).
fof(f324,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f276,f270])).
fof(f276,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.LESS_EQ_MONO')).
fof(f76468,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl142),
  inference(cnf_transformation,[],[f76468_D])).
fof(f76468_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f76470,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl145),
  inference(cnf_transformation,[],[f76470_D])).
fof(f76470_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl145),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl145])])).
fof(f66985,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl11 | $spl16 | $spl68)),
  inference(equality_factoring,[],[f33596])).
fof(f33596,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl16 | $spl68)),
  inference(backward_demodulation,[],[f33355,f25836])).
fof(f25836,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl68)),
  inference(subsumption_resolution,[],[f25816,f444])).
fof(f25816,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl68),
  inference(superposition,[],[f23081,f427])).
fof(f76458,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f76457,f200])).
fof(f76457,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f76441,f2369])).
fof(f2369,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1),
  inference(unit_resulting_resolution,[],[f200,f2365])).
fof(f2365,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1),
  inference(forward_demodulation,[],[f2364,f2126])).
fof(f2364,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f2361,f200])).
fof(f2361,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X1) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl1),
  inference(superposition,[],[f285,f2349])).
fof(f2349,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl1),
  inference(backward_demodulation,[],[f2293,f467])).
fof(f467,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1),
  inference(backward_demodulation,[],[f451,f452])).
fof(f452,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f330,f316,f285])).
fof(f316,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(backward_demodulation,[],[f270,f249])).
fof(f249,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.NOT_SUC_LESS_EQ_|48|')).
fof(f330,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl1),
  inference(forward_demodulation,[],[f303,f199])).
fof(f451,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f200,f316,f285])).
fof(f76441,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f306,f14479])).
fof(f14479,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f14425,f196])).
fof(f14425,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0)))))) | s('type.list.list'(sK0),X0) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK3)))) ) | $spl6),
  inference(superposition,[],[f2137,f440])).
fof(f65899,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl140),
  inference(cnf_transformation,[],[f65899_D])).
fof(f65899_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f65897,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl138),
  inference(cnf_transformation,[],[f65897_D])).
fof(f65897_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f65817,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f3945,f33404])).
fof(f3945,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) ) | $spl16),
  inference(forward_demodulation,[],[f1854,f3889])).
fof(f1854,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f222,f224])).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|24')).
fof(f65895,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(forward_demodulation,[],[f65894,f33404])).
fof(f65894,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f65893,f33556])).
fof(f33556,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(backward_demodulation,[],[f33355,f22778])).
fof(f22778,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f4011,f4037])).
fof(f4011,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f222,f3889])).
fof(f65893,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f65781,f4011])).
fof(f65781,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(superposition,[],[f3945,f33404])).
fof(f39556,plain,(
  $false | ($spl4 | $spl103)),
  inference(subsumption_resolution,[],[f39555,f196])).
fof(f39555,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl103)),
  inference(forward_demodulation,[],[f39500,f3294])).
fof(f3294,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f3253,f206])).
fof(f206,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X12] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|26')).
fof(f3253,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f325,f768])).
fof(f39500,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl4 | $spl103)),
  inference(unit_resulting_resolution,[],[f306,f39461,f2137])).
fof(f39488,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl136),
  inference(cnf_transformation,[],[f39488_D])).
fof(f39488_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f39461,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl103),
  inference(cnf_transformation,[],[f39461_D])).
fof(f39461_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl103),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl103])])).
fof(f39444,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl4),
  inference(superposition,[],[f13399,f1300])).
fof(f1300,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f1112,f228])).
fof(f228,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f157])).
fof(f1112,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1087,f198])).
fof(f198,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f66])).
fof(f66,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.prim_rec.PRE|split|0')).
fof(f1087,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f219,f768])).
fof(f13399,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(forward_demodulation,[],[f13389,f306])).
fof(f13389,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f2136,f306])).
fof(f39486,plain,(
  ( ! [X32] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0))))) ) | $spl134),
  inference(cnf_transformation,[],[f39486_D])).
fof(f39486_D,plain,(
  ( ! [X32] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f39442,plain,(
  ( ! [X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X32)),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3897])).
fof(f3897,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f212])).
fof(f212,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.MULT|split|0')).
fof(f39485,plain,(
  ( ! [X31] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl132),
  inference(cnf_transformation,[],[f39485_D])).
fof(f39485_D,plain,(
  ( ! [X31] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f39441,plain,(
  ( ! [X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3893])).
fof(f3893,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f205])).
fof(f205,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|4')).
fof(f39484,plain,(
  ( ! [X30] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl130),
  inference(cnf_transformation,[],[f39484_D])).
fof(f39484_D,plain,(
  ( ! [X30] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f39467,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl109),
  inference(cnf_transformation,[],[f39467_D])).
fof(f39467_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl109),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl109])])).
fof(f39440,plain,(
  ( ! [X30] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f33414])).
fof(f33414,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f33355,f4115])).
fof(f4115,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f309,f3889])).
fof(f309,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f220,f199])).
fof(f220,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|11')).
fof(f39483,plain,(
  ( ! [X29] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0))))) ) | $spl128),
  inference(cnf_transformation,[],[f39483_D])).
fof(f39483_D,plain,(
  ( ! [X29] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f39439,plain,(
  ( ! [X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X29)))))),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3927])).
fof(f3927,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14)))))))) ) | $spl16),
  inference(forward_demodulation,[],[f3926,f3889])).
fof(f3926,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14)))))))) ) | $spl16),
  inference(subsumption_resolution,[],[f3925,f3905])).
fof(f3905,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(backward_demodulation,[],[f3889,f768])).
fof(f3925,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14)))))))) ) | $spl16),
  inference(forward_demodulation,[],[f1026,f3889])).
fof(f1026,plain,(
  ( ! [X14] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14)))))))) )),
  inference(superposition,[],[f228,f218])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|10')).
fof(f39482,plain,(
  ( ! [X28] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0))))) ) | $spl126),
  inference(cnf_transformation,[],[f39482_D])).
fof(f39482_D,plain,(
  ( ! [X28] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0))))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f39438,plain,(
  ( ! [X28] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3921])).
fof(f3921,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))) ) | $spl16),
  inference(forward_demodulation,[],[f3920,f3889])).
fof(f3920,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))) ) | $spl16),
  inference(subsumption_resolution,[],[f3919,f3905])).
fof(f3919,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))) ) | $spl16),
  inference(forward_demodulation,[],[f935,f3889])).
fof(f935,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f228,f216])).
fof(f216,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|9')).
fof(f39481,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl124),
  inference(cnf_transformation,[],[f39481_D])).
fof(f39481_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f39436,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f33355])).
fof(f39479,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)))) | $spl122),
  inference(cnf_transformation,[],[f39479_D])).
fof(f39479_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)))) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f39433,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.num.|48|_0',sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3889])).
fof(f39477,plain,(
  ( ! [X18] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0))))) ) | $spl120),
  inference(cnf_transformation,[],[f39477_D])).
fof(f39477_D,plain,(
  ( ! [X18] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f39430,plain,(
  ( ! [X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3903])).
fof(f3903,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f739])).
fof(f39476,plain,(
  ( ! [X16] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0))))) ) | $spl118),
  inference(cnf_transformation,[],[f39476_D])).
fof(f39476_D,plain,(
  ( ! [X16] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f39428,plain,(
  ( ! [X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3895])).
fof(f39473,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | $spl114),
  inference(cnf_transformation,[],[f39473_D])).
fof(f39473_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f39475,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl117),
  inference(cnf_transformation,[],[f39475_D])).
fof(f39475_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl117),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl117])])).
fof(f39420,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f33404])).
fof(f39469,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | $spl110),
  inference(cnf_transformation,[],[f39469_D])).
fof(f39469_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f39471,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl113),
  inference(cnf_transformation,[],[f39471_D])).
fof(f39471_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f39419,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f33403])).
fof(f39465,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl106),
  inference(cnf_transformation,[],[f39465_D])).
fof(f39465_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f39418,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f33402])).
fof(f39463,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl104),
  inference(cnf_transformation,[],[f39463_D])).
fof(f39463_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f39417,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3905])).
fof(f39459,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0))))) ) | $spl100),
  inference(cnf_transformation,[],[f39459_D])).
fof(f39459_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f39414,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK6('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),'const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK0))))) ) | ($spl4 | $spl16)),
  inference(superposition,[],[f13399,f3912])).
fof(f3912,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f1402])).
fof(f1402,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f253])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.list.LENGTH_NIL')).
fof(f25041,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3905,f24934,f3899])).
fof(f3899,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f228])).
fof(f24934,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl16 | $spl48)),
  inference(subsumption_resolution,[],[f24891,f200])).
fof(f24891,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl16 | $spl48)),
  inference(backward_demodulation,[],[f24855,f3967])).
fof(f3967,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl16),
  inference(forward_demodulation,[],[f3966,f3889])).
fof(f3966,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl16),
  inference(forward_demodulation,[],[f233,f3889])).
fof(f233,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f159])).
fof(f24855,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | ($spl16 | $spl48)),
  inference(backward_demodulation,[],[f24849,f326])).
fof(f326,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f279,f270])).
fof(f279,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|31')).
fof(f24849,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1)))) ) | ($spl16 | $spl48)),
  inference(backward_demodulation,[],[f24764,f3111])).
fof(f3111,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f324,f217])).
fof(f24764,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) ) | ($spl16 | $spl48)),
  inference(backward_demodulation,[],[f24690,f272])).
fof(f24690,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f200,f24548,f285])).
fof(f24548,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl48)),
  inference(subsumption_resolution,[],[f24547,f200])).
fof(f24547,plain,(
  ( ! [X8,X7] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl48)),
  inference(forward_demodulation,[],[f24546,f3940])).
fof(f24546,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl48)),
  inference(forward_demodulation,[],[f24545,f2126])).
fof(f24545,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl48)),
  inference(forward_demodulation,[],[f24291,f3113])).
fof(f24291,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl48)),
  inference(backward_demodulation,[],[f16301,f13172])).
fof(f13172,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) ) | $spl16),
  inference(forward_demodulation,[],[f13171,f2126])).
fof(f13171,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) ) | $spl16),
  inference(forward_demodulation,[],[f13170,f3892])).
fof(f3892,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f203])).
fof(f13170,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) ) | $spl16),
  inference(forward_demodulation,[],[f13169,f3905])).
fof(f13169,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) ) | $spl16),
  inference(forward_demodulation,[],[f13072,f2901])).
fof(f2901,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f317,f217])).
fof(f13072,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))))) ) | $spl16),
  inference(superposition,[],[f297,f4101])).
fof(f25037,plain,(
  $false | ($spl4 | $spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3898,f24934,f12708])).
fof(f12708,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK12(X1,X0,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl4),
  inference(superposition,[],[f267,f306])).
fof(f267,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK11(X3,X2,X1,X0)),s('type.list.list'(X0),sK12(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12])],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X8,X19,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))) <=> ? [X21,X22] : (s('type.num.num',X19) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X21))) & s('type.num.num',X20) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.list.LENGTH_EQ_SUM')).
fof(f3898,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f214])).
fof(f25035,plain,(
  $false | ($spl4 | $spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3892,f24934,f12474])).
fof(f12474,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(X1,X0,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0))))) ) | $spl4),
  inference(superposition,[],[f266,f306])).
fof(f266,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f25033,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3898,f24934,f267])).
fof(f25031,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3892,f24934,f266])).
fof(f25027,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3912,f24934,f3900])).
fof(f3900,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f229])).
fof(f25025,plain,(
  $false | ($spl4 | $spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f18025,f24934,f3902])).
fof(f3902,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f253])).
fof(f18025,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)) | ($spl4 | $spl16)),
  inference(unit_resulting_resolution,[],[f17109,f3901])).
fof(f3901,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl16),
  inference(backward_demodulation,[],[f3889,f252])).
fof(f252,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f171])).
fof(f17109,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.arithmetic.ZERO_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl16)),
  inference(superposition,[],[f12472,f306])).
fof(f12472,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.arithmetic.ZERO_0',X1,X0))))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f3892,f266])).
fof(f25023,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3905,f24934,f3899])).
fof(f25021,plain,(
  $false | ($spl16 | $spl48)),
  inference(unit_resulting_resolution,[],[f3912,f24934])).
fof(f25084,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25042])).
fof(f25042,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3912])).
fof(f25083,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25043])).
fof(f25043,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3905])).
fof(f25082,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25055])).
fof(f25055,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3895])).
fof(f25081,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25057])).
fof(f25057,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3903])).
fof(f25080,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25060])).
fof(f25060,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3889])).
fof(f25079,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25064])).
fof(f25064,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3935])).
fof(f3935,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f3934,f3889])).
fof(f3934,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl16),
  inference(subsumption_resolution,[],[f3933,f3905])).
fof(f3933,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl16),
  inference(forward_demodulation,[],[f1889,f3889])).
fof(f1889,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f228,f922])).
fof(f922,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f216,f199])).
fof(f25078,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25065])).
fof(f25065,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3921])).
fof(f25077,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25066])).
fof(f25066,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3927])).
fof(f25076,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25068])).
fof(f25068,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3893])).
fof(f25075,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25069])).
fof(f25069,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f3897])).
fof(f25074,plain,(
  $false | ($spl16 | $spl48)),
  inference(trivial_inequality_removal,[],[f25071])).
fof(f25071,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl16 | $spl48)),
  inference(superposition,[],[f24934,f1300])).
fof(f25073,plain,(
  $false | ($spl16 | $spl48)),
  inference(equality_resolution,[],[f24934])).
fof(f24211,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3905,f24104,f3899])).
fof(f24104,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl1 | $spl16 | $spl44)),
  inference(subsumption_resolution,[],[f24075,f200])).
fof(f24075,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl1 | $spl16 | $spl44)),
  inference(backward_demodulation,[],[f24048,f3967])).
fof(f24048,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | ($spl1 | $spl16 | $spl44)),
  inference(backward_demodulation,[],[f24043,f326])).
fof(f24043,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1)))) ) | ($spl1 | $spl16 | $spl44)),
  inference(backward_demodulation,[],[f23967,f3111])).
fof(f23967,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) ) | ($spl1 | $spl16 | $spl44)),
  inference(backward_demodulation,[],[f23886,f272])).
fof(f23886,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f200,f23866,f285])).
fof(f23866,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl1 | $spl16 | $spl44)),
  inference(subsumption_resolution,[],[f23598,f23856])).
fof(f23856,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) ) | ($spl1 | $spl44)),
  inference(subsumption_resolution,[],[f23855,f200])).
fof(f23855,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) ) | ($spl1 | $spl44)),
  inference(forward_demodulation,[],[f23550,f2369])).
fof(f23550,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) ) | $spl44),
  inference(backward_demodulation,[],[f2622,f2138])).
fof(f23598,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7))))) ) | ($spl16 | $spl44)),
  inference(backward_demodulation,[],[f2622,f13172])).
fof(f24207,plain,(
  $false | ($spl1 | $spl4 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3898,f24104,f12708])).
fof(f24205,plain,(
  $false | ($spl1 | $spl4 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3892,f24104,f12474])).
fof(f24203,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3898,f24104,f267])).
fof(f24201,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3892,f24104,f266])).
fof(f24197,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3912,f24104,f3900])).
fof(f24195,plain,(
  $false | ($spl1 | $spl4 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f18025,f24104,f3902])).
fof(f24193,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3905,f24104,f3899])).
fof(f24191,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(unit_resulting_resolution,[],[f3912,f24104])).
fof(f24254,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24212])).
fof(f24212,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3912])).
fof(f24253,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24213])).
fof(f24213,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3905])).
fof(f24252,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24225])).
fof(f24225,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3895])).
fof(f24251,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24227])).
fof(f24227,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3903])).
fof(f24250,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24230])).
fof(f24230,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3889])).
fof(f24249,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24234])).
fof(f24234,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3935])).
fof(f24248,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24235])).
fof(f24235,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3921])).
fof(f24247,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24236])).
fof(f24236,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3927])).
fof(f24246,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24238])).
fof(f24238,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3893])).
fof(f24245,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24239])).
fof(f24239,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f3897])).
fof(f24244,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(trivial_inequality_removal,[],[f24241])).
fof(f24241,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | ($spl1 | $spl16 | $spl44)),
  inference(superposition,[],[f24104,f1300])).
fof(f24243,plain,(
  $false | ($spl1 | $spl16 | $spl44)),
  inference(equality_resolution,[],[f24104])).
fof(f23879,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl96),
  inference(cnf_transformation,[],[f23879_D])).
fof(f23879_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f23881,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl99),
  inference(cnf_transformation,[],[f23881_D])).
fof(f23881_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl99),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl99])])).
fof(f15199,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl16 | $spl43)),
  inference(equality_factoring,[],[f14992])).
fof(f23873,plain,(
  $false | ($spl1 | $spl44 | $spl51)),
  inference(subsumption_resolution,[],[f23463,f2622])).
fof(f23463,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl1 | $spl51)),
  inference(subsumption_resolution,[],[f16325,f16303])).
fof(f16325,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl51)),
  inference(superposition,[],[f16303,f2394])).
fof(f2394,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f2370,f200])).
fof(f2370,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f2365,f224])).
fof(f23517,plain,(
  $false | ($spl44 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f2622,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f16313,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f16303,f224])).
fof(f16309,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f200,f16303,f472])).
fof(f23461,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl51),
  inference(subsumption_resolution,[],[f16326,f16303])).
fof(f16326,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(superposition,[],[f16303,f224])).
fof(f20477,plain,(
  ( ! [X238] : (s(bool,X238) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X238)) ) | $spl51),
  inference(trivial_inequality_removal,[],[f20276])).
fof(f20276,plain,(
  ( ! [X238] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X238) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X238)) ) | $spl51),
  inference(superposition,[],[f16303,f427])).
fof(f20448,plain,(
  ( ! [X238] : (s(bool,X238) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X238)) ) | $spl51),
  inference(trivial_inequality_removal,[],[f20393])).
fof(f20393,plain,(
  ( ! [X238] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X238) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X238)) ) | $spl51),
  inference(superposition,[],[f16303,f427])).
fof(f23427,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl51),
  inference(subsumption_resolution,[],[f21613,f21513])).
fof(f21613,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(superposition,[],[f21513,f224])).
fof(f23420,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl51),
  inference(subsumption_resolution,[],[f21696,f21612])).
fof(f21696,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(superposition,[],[f21612,f224])).
fof(f23388,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl80 | $spl92)),
  inference(backward_demodulation,[],[f23324,f23374])).
fof(f23384,plain,(
  ( ! [X43,X42] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X42))) = s(bool,sK8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42)))),X43,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X42)))) )),
  inference(forward_demodulation,[],[f23296,f215])).
fof(f23296,plain,(
  ( ! [X43,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,'T_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))))) = s(bool,sK8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42)))),X43,bool)) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X42)))) )),
  inference(superposition,[],[f260,f674])).
fof(f23383,plain,(
  ( ! [X39,X41,X40] : (s(bool,X41) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X39))) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X41)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X39)))) )),
  inference(forward_demodulation,[],[f23295,f215])).
fof(f23295,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X41)))) | s(bool,X41) != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X39)))) )),
  inference(superposition,[],[f259,f674])).
fof(f23380,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14))) | ~p(s(bool,X15)) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14)))) )),
  inference(forward_demodulation,[],[f23379,f215])).
fof(f23379,plain,(
  ( ! [X14,X15] : (~p(s(bool,X15)) | s(bool,X15) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14)))) )),
  inference(subsumption_resolution,[],[f23282,f196])).
fof(f23282,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | s(bool,X15) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X14)))) )),
  inference(superposition,[],[f288,f674])).
fof(f23378,plain,(
  ( ! [X6,X8,X7,X9] : (p(s(bool,happ(s(fun(X7,bool),X8),s(X7,sK10('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))),X8,X7))))) | ~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) )),
  inference(subsumption_resolution,[],[f23279,f196])).
fof(f23279,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X7,bool),X8),s(X7,sK10('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))),X8,X7))))) | ~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) )),
  inference(superposition,[],[f264,f674])).
fof(f23377,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),X4,X3))))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f23278,f196])).
fof(f23278,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),X4,X3))))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f262,f674])).
fof(f23362,plain,(
  ( ! [X30,X29] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',X30))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',X30)))))) )),
  inference(forward_demodulation,[],[f23361,f281])).
fof(f23361,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',X30))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30)))))))) )),
  inference(forward_demodulation,[],[f23360,f215])).
fof(f23360,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',X30))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30)))))))) )),
  inference(forward_demodulation,[],[f23259,f215])).
fof(f23259,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',X30))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30)))))))) )),
  inference(superposition,[],[f674,f281])).
fof(f23357,plain,(
  ( ! [X26,X25] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num',X26))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num',X26)))))) )),
  inference(forward_demodulation,[],[f23356,f283])).
fof(f23356,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num',X26))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))))) )),
  inference(forward_demodulation,[],[f23355,f215])).
fof(f23355,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num',X26))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))))) )),
  inference(forward_demodulation,[],[f23256,f215])).
fof(f23256,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X25),s('type.num.num',X26))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))))) )),
  inference(superposition,[],[f674,f283])).
fof(f23343,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16)))))) )),
  inference(forward_demodulation,[],[f23342,f282])).
fof(f23342,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))))) )),
  inference(forward_demodulation,[],[f23341,f215])).
fof(f23341,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))))) )),
  inference(forward_demodulation,[],[f23247,f215])).
fof(f23247,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f674,f282])).
fof(f23238,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f674,f271])).
fof(f21612,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(superposition,[],[f21513,f2126])).
fof(f21565,plain,(
  ( ! [X90,X91,X89] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X90),s('type.num.num',X89))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X89),s('type.num.num','const.num.SUC_1'(s('type.num.num',X90)))),X91,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X90),s('type.num.num',X89))))))) )),
  inference(forward_demodulation,[],[f21543,f3113])).
fof(f21543,plain,(
  ( ! [X90,X91,X89] : (~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X90),s('type.num.num',X89)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X89),s('type.num.num','const.num.SUC_1'(s('type.num.num',X90))))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X89),s('type.num.num','const.num.SUC_1'(s('type.num.num',X90)))),X91,bool))) )),
  inference(superposition,[],[f260,f3113])).
fof(f21524,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X33),s('type.num.num',X32)))) | p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK10('const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X35,X34))))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36))))) )),
  inference(superposition,[],[f264,f3113])).
fof(f21523,plain,(
  ( ! [X30,X28,X31,X29,X27] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X28),s('type.num.num',X27)))) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK9('const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28)))),X30,X29))))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31))))) )),
  inference(superposition,[],[f262,f3113])).
fof(f21513,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(superposition,[],[f16303,f3113])).
fof(f21492,plain,(
  ( ! [X28,X29,X27] : (s(bool,X29) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X28),s('type.num.num',X27))) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28)))))) )),
  inference(superposition,[],[f3113,f427])).
fof(f21491,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X25),s('type.num.num',X24))) | s(bool,X26) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f3113,f427])).
fof(f21472,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f3113,f274])).
fof(f21471,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f3113,f217])).
fof(f21219,plain,(
  ( ! [X85,X83,X84] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X84),s('type.num.num',X83))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num',X83),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84)))),X85,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,'const.prim_rec.<_2'(s('type.num.num',X84),s('type.num.num',X83))))))) )),
  inference(forward_demodulation,[],[f21177,f2126])).
fof(f21177,plain,(
  ( ! [X85,X83,X84] : (~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,'const.prim_rec.<_2'(s('type.num.num',X84),s('type.num.num',X83)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X83),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84))))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num',X83),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84)))),X85,bool))) )),
  inference(superposition,[],[f260,f2126])).
fof(f21158,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26)))) | p(s(bool,happ(s(fun(X28,bool),X29),s(X28,sK10('const.arithmetic.>=_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',X27)))),X29,X28))))) | ~p(s(bool,happ(s(fun(X28,bool),X29),s(X28,X30))))) )),
  inference(superposition,[],[f264,f2126])).
fof(f21157,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,happ(s(fun(X23,bool),X24),s(X23,sK9('const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))),X24,X23))))) | ~p(s(bool,happ(s(fun(X23,bool),X24),s(X23,X25))))) )),
  inference(superposition,[],[f262,f2126])).
fof(f21152,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK6(X6,'const.num.SUC_1'(s('type.num.num',X7)),X5))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))))))) )),
  inference(superposition,[],[f2138,f2126])).
fof(f21139,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f2126,f427])).
fof(f21138,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5))) | s(bool,X7) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2126,f427])).
fof(f21137,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f2126,f224])).
fof(f21189,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK6(X56,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54)))),X55))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))))))) )),
  inference(backward_demodulation,[],[f21134,f12384])).
fof(f21188,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),sK6(X30,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28)),X29))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))))))) )),
  inference(backward_demodulation,[],[f21134,f12376])).
fof(f21187,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))),s('type.num.num',X56))),s('type.num.num',X55)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))))),s('type.num.num',X56))))) )),
  inference(backward_demodulation,[],[f21134,f13190])).
fof(f21185,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num',X52))),s('type.num.num',X51)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))))),s('type.num.num',X52))))) )),
  inference(backward_demodulation,[],[f21134,f13189])).
fof(f21178,plain,(
  ( ! [X52,X50,X51] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),sK6(X52,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))))))) )),
  inference(backward_demodulation,[],[f21133,f12383])).
fof(f20292,plain,(
  ( ! [X277,X279,X276,X278] : (s(X278,f(s(bool,'T_0'))) != s(X278,g(s(bool,'T_0'))) | s(fun(bool,X278),X276) = s(fun(bool,X278),X277) | s(bool,X279) = s(bool,sK13(X276,X277,X278,bool)) | s(bool,'T_0') = s(bool,X279)) )),
  inference(superposition,[],[f295,f427])).
fof(f20291,plain,(
  ( ! [X273,X275,X274] : (p(s(bool,happ(s(fun(bool,bool),X274),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X274),s(bool,X273)))) | s(bool,X275) = s(bool,sK8(X273,X274,bool)) | s(bool,'T_0') = s(bool,X275)) )),
  inference(superposition,[],[f261,f427])).
fof(f20290,plain,(
  ( ! [X269,X271,X270,X272] : (s(bool,'T_0') != s(bool,f(s(X269,sK13(X270,X271,bool,X269)))) | s(fun(X269,bool),X270) = s(fun(X269,bool),X271) | s(bool,X272) = s(bool,g(s(X269,sK13(X270,X271,bool,X269)))) | s(bool,'T_0') = s(bool,X272)) )),
  inference(superposition,[],[f295,f427])).
fof(f20289,plain,(
  ( ! [X263,X265,X264] : (~p(s(bool,happ(s(fun(bool,bool),X264),s(bool,'T_0')))) | s(bool,X263) = s(bool,sK8(X263,X264,bool)) | s(bool,X263) = s(bool,X265) | s(bool,'T_0') = s(bool,X265)) )),
  inference(superposition,[],[f260,f427])).
fof(f20288,plain,(
  ( ! [X261,X259,X260,X262] : (~p(s(bool,happ(s(fun(bool,bool),X260),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X260),s(bool,X261)))) | s(bool,X259) != s(bool,X261) | s(bool,X259) = s(bool,X262) | s(bool,'T_0') = s(bool,X262)) )),
  inference(superposition,[],[f259,f427])).
fof(f20805,plain,(
  ( ! [X204,X202,X205,X203] : (s('type.list.list'(X203),X204) = s('type.list.list'(X203),'const.list.CONS_2'(s(X203,sK7(X204,X202,X203)),s('type.list.list'(X203),sK6(X204,X202,X203)))) | s(bool,X205) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X202),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))))) | s(bool,'T_0') = s(bool,X205)) )),
  inference(subsumption_resolution,[],[f20262,f196])).
fof(f20262,plain,(
  ( ! [X204,X202,X205,X203] : (~p(s(bool,'T_0')) | s('type.list.list'(X203),X204) = s('type.list.list'(X203),'const.list.CONS_2'(s(X203,sK7(X204,X202,X203)),s('type.list.list'(X203),sK6(X204,X202,X203)))) | s(bool,X205) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X202),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))))) | s(bool,'T_0') = s(bool,X205)) )),
  inference(superposition,[],[f2136,f427])).
fof(f20804,plain,(
  ( ! [X180,X178,X181,X179] : (s(X178,X180) = s(X178,sK8(X180,X179,X178)) | s(bool,X181) = s(bool,happ(s(fun(X178,bool),X179),s(X178,X180))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(subsumption_resolution,[],[f20255,f196])).
fof(f20255,plain,(
  ( ! [X180,X178,X181,X179] : (~p(s(bool,'T_0')) | s(X178,X180) = s(X178,sK8(X180,X179,X178)) | s(bool,X181) = s(bool,happ(s(fun(X178,bool),X179),s(X178,X180))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(superposition,[],[f260,f427])).
fof(f20803,plain,(
  ( ! [X177,X175,X173,X176,X174] : (p(s(bool,happ(s(fun(X173,bool),X174),s(X173,X176)))) | s(X173,X175) != s(X173,X176) | s(bool,X177) = s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(subsumption_resolution,[],[f20254,f196])).
fof(f20254,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X173,bool),X174),s(X173,X176)))) | s(X173,X175) != s(X173,X176) | s(bool,X177) = s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f259,f427])).
fof(f20794,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X78),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),X79)))))) | s('type.list.list'(X76),X79) != s('type.list.list'(X76),'const.list.CONS_2'(s(X76,X80),s('type.list.list'(X76),X77))) | s(bool,X81) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),X77))),s('type.num.num',X78))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f20217,f196])).
fof(f20217,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X78),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),X79)))))) | s('type.list.list'(X76),X79) != s('type.list.list'(X76),'const.list.CONS_2'(s(X76,X80),s('type.list.list'(X76),X77))) | s(bool,X81) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),X77))),s('type.num.num',X78))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f2137,f427])).
fof(f20789,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f20195,f196])).
fof(f20195,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f288,f427])).
fof(f20788,plain,(
  ( ! [X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK10(X7,X9,X8))))) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f20192,f196])).
fof(f20192,plain,(
  ( ! [X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK10(X7,X9,X8))))) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f264,f427])).
fof(f20787,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9(X2,X4,X3))))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X2) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f20191,f196])).
fof(f20191,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9(X2,X4,X3))))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X2) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f262,f427])).
fof(f20189,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,X65)))) | s(bool,'T_0') = s(bool,sK8('T_0',X66,bool)) | s(bool,X65) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f260,f427])).
fof(f20188,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,X61)))) | p(s(bool,happ(s(fun(bool,bool),X62),s(bool,X63)))) | s(bool,'T_0') != s(bool,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f259,f427])).
fof(f20060,plain,(
  ( ! [X300,X298,X301,X299] : (s(X300,f(s(bool,X301))) != s(X300,g(s(bool,X301))) | s(fun(bool,X300),X298) = s(fun(bool,X300),X299) | s(bool,'T_0') = s(bool,X301) | s(bool,'T_0') = s(bool,sK13(X298,X299,X300,bool))) )),
  inference(superposition,[],[f295,f427])).
fof(f20059,plain,(
  ( ! [X296,X295,X297] : (p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X297)))) | ~p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X295)))) | s(bool,'T_0') = s(bool,X297) | s(bool,'T_0') = s(bool,sK8(X295,X296,bool))) )),
  inference(superposition,[],[f261,f427])).
fof(f20058,plain,(
  ( ! [X292,X294,X293,X291] : (s(bool,X294) != s(bool,f(s(X291,sK13(X292,X293,bool,X291)))) | s(fun(X291,bool),X292) = s(fun(X291,bool),X293) | s(bool,'T_0') = s(bool,X294) | s(bool,'T_0') = s(bool,g(s(X291,sK13(X292,X293,bool,X291))))) )),
  inference(superposition,[],[f295,f427])).
fof(f20057,plain,(
  ( ! [X285,X284,X286] : (~p(s(bool,happ(s(fun(bool,bool),X286),s(bool,X285)))) | s(bool,X284) = s(bool,sK8(X284,X286,bool)) | s(bool,'T_0') = s(bool,X285) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f260,f427])).
fof(f20056,plain,(
  ( ! [X280,X282,X281,X283] : (~p(s(bool,happ(s(fun(bool,bool),X282),s(bool,X281)))) | p(s(bool,happ(s(fun(bool,bool),X282),s(bool,X283)))) | s(bool,X280) != s(bool,X283) | s(bool,'T_0') = s(bool,X281) | s(bool,'T_0') = s(bool,X280)) )),
  inference(superposition,[],[f259,f427])).
fof(f19881,plain,(
  ( ! [X147,X148] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X147))) | s(bool,X148) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X147))))) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f427,f215])).
fof(f19870,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X121),s('type.num.num',X122))) | s(bool,X123) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X121))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X122))))) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f427,f280])).
fof(f19859,plain,(
  ( ! [X94,X95,X96] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X95),s('type.num.num',X94))) | s(bool,X96) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))))) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f427,f278])).
fof(f19857,plain,(
  ( ! [X90,X88,X89] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X88),s('type.num.num',X89))) | s(bool,X90) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))),s('type.num.num',X89))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f427,f272])).
fof(f19856,plain,(
  ( ! [X85,X83,X84] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X84),s('type.num.num',X83))) | s(bool,X85) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X83))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84))))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f427,f324])).
fof(f19854,plain,(
  ( ! [X78,X76,X77] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X77),s('type.num.num',X76))) | s(bool,X78) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))))) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f427,f325])).
fof(f19853,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X73),s('type.num.num',X72))) | s(bool,X74) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f427,f270])).
fof(f19852,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X69),s('type.num.num',X70))) | s(bool,X71) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X70))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f427,f326])).
fof(f19818,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f427,f427])).
fof(f19743,plain,(
  ( ! [X165,X166] : (s(bool,X166) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X165))) | s(bool,'T_0') = s(bool,X166) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X165)))))) )),
  inference(superposition,[],[f427,f215])).
fof(f19730,plain,(
  ( ! [X138,X139,X137] : (s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X137),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X138)))))) )),
  inference(superposition,[],[f427,f280])).
fof(f19717,plain,(
  ( ! [X109,X110,X108] : (s(bool,X110) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X109),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X110) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X109)))))) )),
  inference(superposition,[],[f427,f278])).
fof(f19713,plain,(
  ( ! [X101,X102,X100] : (s(bool,X102) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num',X101))) | s(bool,'T_0') = s(bool,X102) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X100))),s('type.num.num',X101)))) )),
  inference(superposition,[],[f427,f272])).
fof(f19711,plain,(
  ( ! [X94,X95,X96] : (s(bool,X96) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X95),s('type.num.num',X94))) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X94))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X95)))))) )),
  inference(superposition,[],[f427,f324])).
fof(f19708,plain,(
  ( ! [X88,X87,X86] : (s(bool,X88) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X87),s('type.num.num',X86))) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X86))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X87)))))) )),
  inference(superposition,[],[f427,f325])).
fof(f19706,plain,(
  ( ! [X83,X81,X82] : (s(bool,X83) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X82),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num',X82)))) )),
  inference(superposition,[],[f427,f270])).
fof(f19705,plain,(
  ( ! [X80,X78,X79] : (s(bool,X80) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X78),s('type.num.num',X79))) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X79)))))) )),
  inference(superposition,[],[f427,f326])).
fof(f14993,plain,(
  ( ! [X12] : (s(bool,X12) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f14941,f200])).
fof(f14941,plain,(
  ( ! [X12] : (p(s(bool,'F_0')) | s(bool,X12) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f472,f2212])).
fof(f14652,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(equality_resolution,[],[f269])).
fof(f14651,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X1,X2,X3,X0)))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,X2,X3,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(superposition,[],[f269,f268])).
fof(f14650,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.list.list'(X4),X8) != s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),X9),s('type.list.list'(X4),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num',X11) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),sK11(X5,X6,X7,X4)),s('type.list.list'(X4),sK12(X5,X6,X7,X4)))))) | s('type.num.num',X10) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)))) )),
  inference(superposition,[],[f269,f268])).
fof(f14648,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.list.list'(X4),X8) != s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),X7),s('type.list.list'(X4),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num',X11) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X9))) | s('type.num.num',X10) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.APPEND_2'(s('type.list.list'(X4),sK11(X5,X6,X7,X4)),s('type.list.list'(X4),sK12(X5,X6,X7,X4)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)))) )),
  inference(superposition,[],[f269,f268])).
fof(f14646,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3,X9] : (s('type.list.list'(X2),X5) != s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),X6),s('type.list.list'(X2),X7))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.APPEND_2'(s('type.list.list'(X2),sK11(X3,X4,X5,X2)),s('type.list.list'(X2),sK12(X3,X4,X5,X2)))))) | s('type.num.num',X9) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X7))) | s('type.num.num',X8) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))) )),
  inference(superposition,[],[f269,f268])).
fof(f14404,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X26)))))) | s('type.list.list'(X24),X26) != s('type.list.list'(X24),'const.list.CONS_2'(s(X24,X27),s('type.list.list'(X24),X25)))) )),
  inference(superposition,[],[f2137,f271])).
fof(f14397,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X6))),s('type.num.num',X7)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X8)))))) | s('type.list.list'(X3),X8) != s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X9),s('type.list.list'(X3),'const.list.APPEND_2'(s('type.list.list'(X3),sK11(X4,X5,X6,X3)),s('type.list.list'(X3),sK12(X4,X5,X6,X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4)))) )),
  inference(superposition,[],[f2137,f268])).
fof(f13755,plain,(
  ( ! [X35,X33,X31,X34,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X31),bool),X35),s('type.list.list'(X31),X34)))) | s('type.list.list'(X31),'const.list.APPEND_2'(s('type.list.list'(X31),sK11(X32,X33,X34,X31)),s('type.list.list'(X31),sK12(X32,X33,X34,X31)))) = s('type.list.list'(X31),sK8('const.list.APPEND_2'(s('type.list.list'(X31),sK11(X32,X33,X34,X31)),s('type.list.list'(X31),sK12(X32,X33,X34,X31))),X35,'type.list.list'(X31))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X31),X34))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32)))) )),
  inference(superposition,[],[f260,f268])).
fof(f13754,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (~p(s(bool,happ(s(fun('type.list.list'(X25),bool),X29),s('type.list.list'(X25),X28)))) | p(s(bool,happ(s(fun('type.list.list'(X25),bool),X29),s('type.list.list'(X25),X30)))) | s('type.list.list'(X25),X30) != s('type.list.list'(X25),'const.list.APPEND_2'(s('type.list.list'(X25),sK11(X26,X27,X28,X25)),s('type.list.list'(X25),sK12(X26,X27,X28,X25)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X28))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X26)))) )),
  inference(superposition,[],[f259,f268])).
fof(f13751,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))) | s('type.num.num',X15) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),sK11(X16,X15,'const.list.APPEND_2'(s('type.list.list'(X11),sK11(X12,X13,X14,X11)),s('type.list.list'(X11),sK12(X12,X13,X14,X11))),X11)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12)))) )),
  inference(superposition,[],[f266,f268])).
fof(f13750,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK12(X10,X9,'const.list.APPEND_2'(s('type.list.list'(X5),sK11(X6,X7,X8,X5)),s('type.list.list'(X5),sK12(X6,X7,X8,X5))),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))) )),
  inference(superposition,[],[f267,f268])).
fof(f13749,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK11(X1,X2,X3,X0)),s('type.list.list'(X0),sK12(X1,X2,X3,X0)))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7('const.list.APPEND_2'(s('type.list.list'(X0),sK11(X1,X2,X3,X0)),s('type.list.list'(X0),sK12(X1,X2,X3,X0))),X4,X0)),s('type.list.list'(X0),sK6('const.list.APPEND_2'(s('type.list.list'(X0),sK11(X1,X2,X3,X0)),s('type.list.list'(X0),sK12(X1,X2,X3,X0))),X4,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(superposition,[],[f2136,f268])).
fof(f13388,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X78))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X79),X80)))))) | s('type.list.list'(X79),X80) = s('type.list.list'(X79),'const.list.CONS_2'(s(X79,sK7(X80,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.list.list'(X79),sK6(X80,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79))))) )),
  inference(superposition,[],[f2136,f219])).
fof(f13387,plain,(
  ( ! [X76,X77] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X76),X77)))))) | s('type.list.list'(X76),X77) = s('type.list.list'(X76),'const.list.CONS_2'(s(X76,sK7(X77,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X76)),s('type.list.list'(X76),sK6(X77,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X76))))) )),
  inference(superposition,[],[f2136,f1300])).
fof(f13386,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num',X73))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),X75)))))) | s('type.list.list'(X74),X75) = s('type.list.list'(X74),'const.list.CONS_2'(s(X74,sK7(X75,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))),X74)),s('type.list.list'(X74),sK6(X75,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))),X74))))) )),
  inference(superposition,[],[f2136,f281])).
fof(f13383,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X62),s('type.num.num',X63))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65)))))) | s('type.list.list'(X64),X65) = s('type.list.list'(X64),'const.list.CONS_2'(s(X64,sK7(X65,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X63)))),X64)),s('type.list.list'(X64),sK6(X65,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X63)))),X64))))) )),
  inference(superposition,[],[f2136,f283])).
fof(f13380,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56)))))) | s('type.list.list'(X55),X56) = s('type.list.list'(X55),'const.list.CONS_2'(s(X55,sK7(X56,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54)))),X55)),s('type.list.list'(X55),sK6(X56,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54)))),X55))))) )),
  inference(superposition,[],[f2136,f274])).
fof(f13379,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52)))))) | s('type.list.list'(X51),X52) = s('type.list.list'(X51),'const.list.CONS_2'(s(X51,sK7(X52,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51)),s('type.list.list'(X51),sK6(X52,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51))))) )),
  inference(superposition,[],[f2136,f217])).
fof(f13377,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X46),X47)))))) | s('type.list.list'(X46),X47) = s('type.list.list'(X46),'const.list.CONS_2'(s(X46,sK7(X47,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46)),s('type.list.list'(X46),sK6(X47,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46))))) )),
  inference(superposition,[],[f2136,f275])).
fof(f13376,plain,(
  ( ! [X43,X41,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num',X41))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43)))))) | s('type.list.list'(X42),X43) = s('type.list.list'(X42),'const.list.CONS_2'(s(X42,sK7(X43,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41)))),X42)),s('type.list.list'(X42),sK6(X43,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41)))),X42))))) )),
  inference(superposition,[],[f2136,f282])).
fof(f13372,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30)))))) | s('type.list.list'(X29),X30) = s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK7(X30,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28)),X29)),s('type.list.list'(X29),sK6(X30,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28)),X29))))) )),
  inference(superposition,[],[f2136,f317])).
fof(f13368,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15)))))) | s('type.list.list'(X14),X15) = s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK7(X15,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)),X14)),s('type.list.list'(X14),sK6(X15,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)),X14))))) )),
  inference(superposition,[],[f2136,f271])).
fof(f13105,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))))))) )),
  inference(superposition,[],[f297,f271])).
fof(f13208,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f13099,f317])).
fof(f13099,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X11)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11))))))) )),
  inference(superposition,[],[f297,f275])).
fof(f13098,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',X8)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num',X8))))))) )),
  inference(superposition,[],[f297,f282])).
fof(f13190,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X56)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))))),s('type.num.num',X56))))) )),
  inference(forward_demodulation,[],[f13086,f317])).
fof(f13086,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))))),s('type.num.num',X56)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',X56))))))) )),
  inference(superposition,[],[f297,f274])).
fof(f13189,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X52)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))))),s('type.num.num',X52))))) )),
  inference(forward_demodulation,[],[f13085,f317])).
fof(f13085,plain,(
  ( ! [X52,X50,X51] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))))),s('type.num.num',X52)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))))),s('type.num.num',X52))))))) )),
  inference(superposition,[],[f297,f217])).
fof(f13074,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))))),s('type.num.num',X15)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num',X15))))))) )),
  inference(superposition,[],[f297,f271])).
fof(f13048,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))),s('type.num.num',X14))),s('type.num.num',X15)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))))) )),
  inference(superposition,[],[f297,f271])).
fof(f12767,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | s('type.num.num',X19) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK12(X19,'const.num.SUC_1'(s('type.num.num',X18)),X21,X20))))) )),
  inference(superposition,[],[f267,f317])).
fof(f12763,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK12(X4,X3,X6,X5))))) )),
  inference(superposition,[],[f267,f271])).
fof(f12821,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK12('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X106,X105,X104)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103)))))))) )),
  inference(forward_demodulation,[],[f12761,f219])).
fof(f12761,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK12('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X106,X105,X104))))) )),
  inference(superposition,[],[f267,f219])).
fof(f12818,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK12('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X99,X98,X97)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96)))))))) )),
  inference(forward_demodulation,[],[f12759,f281])).
fof(f12759,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK12('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X99,X98,X97))))) )),
  inference(superposition,[],[f267,f281])).
fof(f12813,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK12('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X86,X85,X84)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83)))))))) )),
  inference(forward_demodulation,[],[f12756,f283])).
fof(f12756,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK12('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X86,X85,X84))))) )),
  inference(superposition,[],[f267,f283])).
fof(f12808,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X74,X73,X72)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))))) )),
  inference(forward_demodulation,[],[f12753,f274])).
fof(f12753,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X74,X73,X72))))) )),
  inference(superposition,[],[f267,f274])).
fof(f12807,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X69,X68,X67)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66)))))))) )),
  inference(forward_demodulation,[],[f12752,f217])).
fof(f12752,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X69,X68,X67))))) )),
  inference(superposition,[],[f267,f217])).
fof(f12804,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK12('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X62,X61,X60)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59)))))) )),
  inference(forward_demodulation,[],[f12750,f275])).
fof(f12750,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK12('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X62,X61,X60))))) )),
  inference(superposition,[],[f267,f275])).
fof(f12803,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK12('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X57,X56,X55)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54)))))))) )),
  inference(forward_demodulation,[],[f12749,f282])).
fof(f12749,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK12('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X57,X56,X55))))) )),
  inference(superposition,[],[f267,f282])).
fof(f12797,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X40,X39,X38)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))))))) )),
  inference(forward_demodulation,[],[f12745,f317])).
fof(f12745,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X40,X39,X38))))) )),
  inference(superposition,[],[f267,f317])).
fof(f12741,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK12('const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)),X21,X20,X19))))) )),
  inference(superposition,[],[f267,f271])).
fof(f12735,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))),s('type.num.num',X106))) | s('type.num.num',X106) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK12(X106,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X105,X104))))) )),
  inference(superposition,[],[f267,f219])).
fof(f12733,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))),s('type.num.num',X99))) | s('type.num.num',X99) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK12(X99,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X98,X97))))) )),
  inference(superposition,[],[f267,f281])).
fof(f12730,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))),s('type.num.num',X86))) | s('type.num.num',X86) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK12(X86,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X85,X84))))) )),
  inference(superposition,[],[f267,f283])).
fof(f12779,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X74))))) | s('type.num.num',X74) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK12(X74,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X73,X72))))) )),
  inference(forward_demodulation,[],[f12727,f2902])).
fof(f12727,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))),s('type.num.num',X74))) | s('type.num.num',X74) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK12(X74,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X73,X72))))) )),
  inference(superposition,[],[f267,f274])).
fof(f12778,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num',X69) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK12(X69,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X68,X67))))) )),
  inference(forward_demodulation,[],[f12726,f2901])).
fof(f12726,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))),s('type.num.num',X69))) | s('type.num.num',X69) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK12(X69,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X68,X67))))) )),
  inference(superposition,[],[f267,f217])).
fof(f12724,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num',X62))) | s('type.num.num',X62) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK12(X62,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X61,X60))))) )),
  inference(superposition,[],[f267,f275])).
fof(f12723,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',X57))) | s('type.num.num',X57) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK12(X57,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X56,X55))))) )),
  inference(superposition,[],[f267,f282])).
fof(f12774,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))))) | s('type.num.num',X40) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK12(X40,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X39,X38))))) )),
  inference(forward_demodulation,[],[f12719,f2902])).
fof(f12719,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))),s('type.num.num',X40))) | s('type.num.num',X40) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK12(X40,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X39,X38))))) )),
  inference(superposition,[],[f267,f317])).
fof(f12715,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK12(X21,'const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)),X20,X19))))) )),
  inference(superposition,[],[f267,f271])).
fof(f12533,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK11(X19,'const.num.SUC_1'(s('type.num.num',X18)),X21,X20))))) )),
  inference(superposition,[],[f266,f317])).
fof(f12529,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),sK11(X4,X3,X6,X5))))) )),
  inference(superposition,[],[f266,f271])).
fof(f12527,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))))) | s('type.num.num',X106) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X106,X105,X104))))) )),
  inference(superposition,[],[f266,f219])).
fof(f12525,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))))) | s('type.num.num',X99) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK11('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X99,X98,X97))))) )),
  inference(superposition,[],[f266,f281])).
fof(f12522,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))))) | s('type.num.num',X86) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X86,X85,X84))))) )),
  inference(superposition,[],[f266,f283])).
fof(f12519,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))))) | s('type.num.num',X74) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X74,X73,X72))))) )),
  inference(superposition,[],[f266,f274])).
fof(f12518,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))))) | s('type.num.num',X69) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X69,X68,X67))))) )),
  inference(superposition,[],[f266,f217])).
fof(f12516,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))))) | s('type.num.num',X62) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK11('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X62,X61,X60))))) )),
  inference(superposition,[],[f266,f275])).
fof(f12515,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))))) | s('type.num.num',X57) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK11('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X57,X56,X55))))) )),
  inference(superposition,[],[f266,f282])).
fof(f12511,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))))) | s('type.num.num',X40) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X40,X39,X38))))) )),
  inference(superposition,[],[f266,f317])).
fof(f12507,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))) | s('type.num.num',X21) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK11('const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)),X21,X20,X19))))) )),
  inference(superposition,[],[f266,f271])).
fof(f12575,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK11(X106,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X105,X104)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))),s('type.num.num',X106)))) )),
  inference(forward_demodulation,[],[f12501,f219])).
fof(f12501,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X103))))),s('type.num.num',X106))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK11(X106,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103)))),X105,X104))))) )),
  inference(superposition,[],[f266,f219])).
fof(f12572,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK11(X99,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X98,X97)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))),s('type.num.num',X99)))) )),
  inference(forward_demodulation,[],[f12499,f281])).
fof(f12499,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))))),s('type.num.num',X99))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),sK11(X99,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X96)))),X98,X97))))) )),
  inference(superposition,[],[f266,f281])).
fof(f12567,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK11(X86,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X85,X84)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))),s('type.num.num',X86)))) )),
  inference(forward_demodulation,[],[f12496,f283])).
fof(f12496,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),X85))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X82),s('type.num.num',X83))))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X84),sK11(X86,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X83)))),X85,X84))))) )),
  inference(superposition,[],[f266,f283])).
fof(f12561,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK11(X74,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X73,X72)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X74)))))) )),
  inference(forward_demodulation,[],[f12560,f274])).
fof(f12560,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X74))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK11(X74,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X73,X72))))) )),
  inference(forward_demodulation,[],[f12493,f2902])).
fof(f12493,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.SUC_1'(s('type.num.num',X71))))),s('type.num.num',X74))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),sK11(X74,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))),X73,X72))))) )),
  inference(superposition,[],[f266,f274])).
fof(f12559,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK11(X69,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X68,X67)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69)))))) )),
  inference(forward_demodulation,[],[f12558,f217])).
fof(f12558,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK11(X69,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X68,X67))))) )),
  inference(forward_demodulation,[],[f12492,f2901])).
fof(f12492,plain,(
  ( ! [X68,X66,X69,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X66))))),s('type.num.num',X69))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK11(X69,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))),X68,X67))))) )),
  inference(superposition,[],[f266,f217])).
fof(f12555,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK11(X62,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X61,X60)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num',X62)))) )),
  inference(forward_demodulation,[],[f12490,f275])).
fof(f12490,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num',X62))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK11(X62,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X59)))),X61,X60))))) )),
  inference(superposition,[],[f266,f275])).
fof(f12554,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK11(X57,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X56,X55)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',X57)))) )),
  inference(forward_demodulation,[],[f12489,f282])).
fof(f12489,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',X57))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK11(X57,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))),X56,X55))))) )),
  inference(superposition,[],[f266,f282])).
fof(f12548,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK11(X40,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X39,X38)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X40)))))) )),
  inference(forward_demodulation,[],[f12547,f317])).
fof(f12547,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X40))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK11(X40,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X39,X38))))) )),
  inference(forward_demodulation,[],[f12485,f2902])).
fof(f12485,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))),s('type.num.num',X40))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),sK11(X40,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num',X37)),X39,X38))))) )),
  inference(superposition,[],[f266,f317])).
fof(f12481,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',X21))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),sK11(X21,'const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)),X20,X19))))) )),
  inference(superposition,[],[f266,f271])).
fof(f12394,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X78))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X79),X80)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X79),sK6(X80,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X78))))))))) )),
  inference(forward_demodulation,[],[f12361,f219])).
fof(f12361,plain,(
  ( ! [X80,X78,X79] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X79),sK6(X80,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X78)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X79),X80))))))) )),
  inference(superposition,[],[f2138,f219])).
fof(f12392,plain,(
  ( ! [X74,X72,X75,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num',X73))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),X75)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),sK6(X75,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))),X74)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num',X73))))))))) )),
  inference(forward_demodulation,[],[f12359,f281])).
fof(f12359,plain,(
  ( ! [X74,X72,X75,X73] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),sK6(X75,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))),X74)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num',X73)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),X75))))))) )),
  inference(superposition,[],[f2138,f281])).
fof(f12389,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X62),s('type.num.num',X63))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),sK6(X65,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X63)))),X64)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X62),s('type.num.num',X63))))))))) )),
  inference(forward_demodulation,[],[f12356,f283])).
fof(f12356,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),sK6(X65,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X63)))),X64)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X62),s('type.num.num',X63)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X63))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X64),X65))))))) )),
  inference(superposition,[],[f2138,f283])).
fof(f12384,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK6(X56,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54)))),X55)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54))))))))) )),
  inference(forward_demodulation,[],[f12353,f274])).
fof(f12353,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),sK6(X56,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54)))),X55)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',X54)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X55),X56))))))) )),
  inference(superposition,[],[f2138,f274])).
fof(f12383,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),sK6(X52,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))))))) )),
  inference(forward_demodulation,[],[f12352,f217])).
fof(f12352,plain,(
  ( ! [X52,X50,X51] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),sK6(X52,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X51),X52))))))) )),
  inference(superposition,[],[f2138,f217])).
fof(f12381,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X46),X47)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X46),sK6(X47,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))))))) )),
  inference(forward_demodulation,[],[f12350,f275])).
fof(f12350,plain,(
  ( ! [X47,X45,X46,X44] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X46),sK6(X47,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X46),X47))))))) )),
  inference(superposition,[],[f2138,f275])).
fof(f12380,plain,(
  ( ! [X43,X41,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num',X41))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),sK6(X43,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41)))),X42)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num',X41))))))))) )),
  inference(forward_demodulation,[],[f12349,f282])).
fof(f12349,plain,(
  ( ! [X43,X41,X42,X40] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),sK6(X43,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41)))),X42)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num',X41)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X43))))))) )),
  inference(superposition,[],[f2138,f282])).
fof(f12376,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),sK6(X30,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28)),X29)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))))))))) )),
  inference(forward_demodulation,[],[f12345,f317])).
fof(f12345,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),sK6(X30,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28)),X29)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))))))) )),
  inference(superposition,[],[f2138,f317])).
fof(f12341,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),sK6(X15,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)),X14)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))))))) )),
  inference(superposition,[],[f2138,f271])).
fof(f11258,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X223)))) | p(s(bool,happ(s(fun(X224,bool),X225),s(X224,sK10('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X223)))),X225,X224))))) | ~p(s(bool,happ(s(fun(X224,bool),X225),s(X224,X226))))) )),
  inference(superposition,[],[f264,f215])).
fof(f11248,plain,(
  ( ! [X185,X182,X186,X184,X183] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X182),s('type.num.num',X183)))) | p(s(bool,happ(s(fun(X184,bool),X185),s(X184,sK10('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X182))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X183)))),X185,X184))))) | ~p(s(bool,happ(s(fun(X184,bool),X185),s(X184,X186))))) )),
  inference(superposition,[],[f264,f280])).
fof(f11236,plain,(
  ( ! [X134,X132,X130,X133,X131] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X131),s('type.num.num',X130)))) | p(s(bool,happ(s(fun(X132,bool),X133),s(X132,sK10('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X131)))),X133,X132))))) | ~p(s(bool,happ(s(fun(X132,bool),X133),s(X132,X134))))) )),
  inference(superposition,[],[f264,f278])).
fof(f11232,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X114),s('type.num.num',X115)))) | p(s(bool,happ(s(fun(X116,bool),X117),s(X116,sK10('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X114))),s('type.num.num',X115)),X117,X116))))) | ~p(s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))))) )),
  inference(superposition,[],[f264,f272])).
fof(f11230,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X105),s('type.num.num',X104)))) | p(s(bool,happ(s(fun(X106,bool),X107),s(X106,sK10('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))),X107,X106))))) | ~p(s(bool,happ(s(fun(X106,bool),X107),s(X106,X108))))) )),
  inference(superposition,[],[f264,f324])).
fof(f11227,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X91),s('type.num.num',X90)))) | p(s(bool,happ(s(fun(X92,bool),X93),s(X92,sK10('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X90))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X91)))),X93,X92))))) | ~p(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94))))) )),
  inference(superposition,[],[f264,f325])).
fof(f11225,plain,(
  ( ! [X85,X83,X81,X84,X82] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X82),s('type.num.num',X81)))) | p(s(bool,happ(s(fun(X83,bool),X84),s(X83,sK10('const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num',X82)),X84,X83))))) | ~p(s(bool,happ(s(fun(X83,bool),X84),s(X83,X85))))) )),
  inference(superposition,[],[f264,f270])).
fof(f11224,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X76),s('type.num.num',X77)))) | p(s(bool,happ(s(fun(X78,bool),X79),s(X78,sK10('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77)))),X79,X78))))) | ~p(s(bool,happ(s(fun(X78,bool),X79),s(X78,X80))))) )),
  inference(superposition,[],[f264,f326])).
fof(f11260,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK10('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),X14,X13))))) | ~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,X15))))) )),
  inference(subsumption_resolution,[],[f11208,f196])).
fof(f11208,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK10('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),X14,X13))))) | ~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,X15))))) )),
  inference(superposition,[],[f264,f3294])).
fof(f11061,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X223)))) | p(s(bool,happ(s(fun(X224,bool),X225),s(X224,sK9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X223)))),X225,X224))))) | ~p(s(bool,happ(s(fun(X224,bool),X225),s(X224,X226))))) )),
  inference(superposition,[],[f262,f215])).
fof(f11051,plain,(
  ( ! [X185,X182,X186,X184,X183] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X182),s('type.num.num',X183)))) | p(s(bool,happ(s(fun(X184,bool),X185),s(X184,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X182))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X183)))),X185,X184))))) | ~p(s(bool,happ(s(fun(X184,bool),X185),s(X184,X186))))) )),
  inference(superposition,[],[f262,f280])).
fof(f11039,plain,(
  ( ! [X134,X132,X130,X133,X131] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X131),s('type.num.num',X130)))) | p(s(bool,happ(s(fun(X132,bool),X133),s(X132,sK9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X131)))),X133,X132))))) | ~p(s(bool,happ(s(fun(X132,bool),X133),s(X132,X134))))) )),
  inference(superposition,[],[f262,f278])).
fof(f11035,plain,(
  ( ! [X118,X116,X114,X117,X115] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X114),s('type.num.num',X115)))) | p(s(bool,happ(s(fun(X116,bool),X117),s(X116,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X114))),s('type.num.num',X115)),X117,X116))))) | ~p(s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))))) )),
  inference(superposition,[],[f262,f272])).
fof(f11033,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X105),s('type.num.num',X104)))) | p(s(bool,happ(s(fun(X106,bool),X107),s(X106,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))),X107,X106))))) | ~p(s(bool,happ(s(fun(X106,bool),X107),s(X106,X108))))) )),
  inference(superposition,[],[f262,f324])).
fof(f11030,plain,(
  ( ! [X94,X92,X90,X93,X91] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X91),s('type.num.num',X90)))) | p(s(bool,happ(s(fun(X92,bool),X93),s(X92,sK9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X90))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X91)))),X93,X92))))) | ~p(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94))))) )),
  inference(superposition,[],[f262,f325])).
fof(f11028,plain,(
  ( ! [X85,X83,X81,X84,X82] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X82),s('type.num.num',X81)))) | p(s(bool,happ(s(fun(X83,bool),X84),s(X83,sK9('const.arithmetic.<=_2'(s('type.num.num',X81),s('type.num.num',X82)),X84,X83))))) | ~p(s(bool,happ(s(fun(X83,bool),X84),s(X83,X85))))) )),
  inference(superposition,[],[f262,f270])).
fof(f11027,plain,(
  ( ! [X80,X78,X76,X79,X77] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X76),s('type.num.num',X77)))) | p(s(bool,happ(s(fun(X78,bool),X79),s(X78,sK9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77)))),X79,X78))))) | ~p(s(bool,happ(s(fun(X78,bool),X79),s(X78,X80))))) )),
  inference(superposition,[],[f262,f326])).
fof(f11063,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK9('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),X14,X13))))) | ~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,X15))))) )),
  inference(subsumption_resolution,[],[f11011,f196])).
fof(f11011,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK9('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),X14,X13))))) | ~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,X15))))) )),
  inference(superposition,[],[f262,f3294])).
fof(f10645,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,happ(s(fun(bool,bool),X86),s(bool,X85)))) | p(s(bool,happ(s(fun(bool,bool),X86),s(bool,X87)))) | s(bool,'F_0') != s(bool,X87) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f259,f224])).
fof(f10624,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',X20)))) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)))) )),
  inference(superposition,[],[f259,f271])).
fof(f10479,plain,(
  ( ! [X370,X369,X371] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X369),s('type.num.num',X370))))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X369))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X370)))),X371,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X371),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X369),s('type.num.num',X370))))))))) )),
  inference(forward_demodulation,[],[f10448,f283])).
fof(f10448,plain,(
  ( ! [X370,X369,X371] : (~p(s(bool,happ(s(fun('type.num.num',bool),X371),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X369),s('type.num.num',X370)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X369))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X370))))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X369))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X370)))),X371,'type.num.num'))) )),
  inference(superposition,[],[f260,f283])).
fof(f10335,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X60),s('type.num.num',X61))))))) | s('type.num.num',X62) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X60))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61)))))) )),
  inference(superposition,[],[f289,f283])).
fof(f10124,plain,(
  ( ! [X352,X354,X353] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X352),s('type.num.num',X353))))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X352))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X353)))),X354,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X354),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X352),s('type.num.num',X353))))))))) )),
  inference(forward_demodulation,[],[f10090,f282])).
fof(f10090,plain,(
  ( ! [X352,X354,X353] : (~p(s(bool,happ(s(fun('type.num.num',bool),X354),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X352),s('type.num.num',X353)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X352))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X353))))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X352))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X353)))),X354,'type.num.num'))) )),
  inference(superposition,[],[f260,f282])).
fof(f9981,plain,(
  ( ! [X57,X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X55),s('type.num.num',X56))))))) | s('type.num.num',X57) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56)))))) )),
  inference(superposition,[],[f289,f282])).
fof(f9751,plain,(
  ( ! [X327,X329,X328] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X327),s('type.num.num',X328))))) = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X327))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X328)))),X329,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X329),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X327),s('type.num.num',X328))))))))) )),
  inference(forward_demodulation,[],[f9718,f281])).
fof(f9718,plain,(
  ( ! [X327,X329,X328] : (~p(s(bool,happ(s(fun('type.num.num',bool),X329),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X327),s('type.num.num',X328)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X327))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X328))))) = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X327))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X328)))),X329,'type.num.num'))) )),
  inference(superposition,[],[f260,f281])).
fof(f9614,plain,(
  ( ! [X50,X48,X49] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X48),s('type.num.num',X49))))))) | s('type.num.num',X50) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X49)))))) )),
  inference(superposition,[],[f289,f281])).
fof(f9062,plain,(
  ( ! [X26,X27,X25] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X25),s('type.num.num',X26))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X25),s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f9048,f326])).
fof(f9048,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X25),s('type.num.num',X26)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) )),
  inference(superposition,[],[f260,f326])).
fof(f275,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.SUB_MONO_EQ')).
fof(f271,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X11,X12] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.ADD_SYM')).
fof(f2928,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f317,f271])).
fof(f2902,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f317,f274])).
fof(f2472,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f275,f274])).
fof(f2447,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f275,f274])).
fof(f2294,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f274,f271])).
fof(f2302,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))))))) )),
  inference(superposition,[],[f1070,f274])).
fof(f1564,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f271,f290])).
fof(f2505,plain,(
  ( ! [X70,X71,X69] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X70))))) | s('type.num.num',X71) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X70)))))) )),
  inference(superposition,[],[f289,f275])).
fof(f2471,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f275,f217])).
fof(f2446,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f275,f217])).
fof(f1583,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9)))))) )),
  inference(superposition,[],[f290,f271])).
fof(f1441,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f289,f271])).
fof(f290,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f187])).
fof(f284,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|2')).
fof(f283,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|12')).
fof(f282,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|8')).
fof(f281,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|5')).
fof(f269,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f186])).
fof(f268,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK11(X3,X2,X1,X0)),s('type.list.list'(X0),sK12(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f186])).
fof(f1969,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1923,f673])).
fof(f1923,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f215,f963])).
fof(f215,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X12] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X12))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|32')).
fof(f2689,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f2676,f2674])).
fof(f2676,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f278,f963])).
fof(f280,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X12,X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|22')).
fof(f2527,plain,(
  ( ! [X105,X106,X104] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))),X106,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X106),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105))))))) )),
  inference(forward_demodulation,[],[f2520,f275])).
fof(f2520,plain,(
  ( ! [X105,X106,X104] : (~p(s(bool,happ(s(fun('type.num.num',bool),X106),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105))))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))),X106,'type.num.num'))) )),
  inference(superposition,[],[f260,f275])).
fof(f2357,plain,(
  ( ! [X116,X114,X115] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115)))),X116,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))))))))) )),
  inference(forward_demodulation,[],[f2347,f274])).
fof(f2347,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,happ(s(fun('type.num.num',bool),X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num','const.num.SUC_1'(s('type.num.num',X115)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115)))),X116,'type.num.num'))) )),
  inference(superposition,[],[f260,f274])).
fof(f2997,plain,(
  ( ! [X134,X132,X133] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133))))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))),s('type.num.num',X133)),X134,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X134),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133))))))))) )),
  inference(forward_demodulation,[],[f2987,f317])).
fof(f2987,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,happ(s(fun('type.num.num',bool),X134),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))),s('type.num.num',X133))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))),s('type.num.num',X133)),X134,'type.num.num'))) )),
  inference(superposition,[],[f260,f317])).
fof(f1985,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,'type.num.num'))) )),
  inference(superposition,[],[f260,f271])).
fof(f2037,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))))) = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))))))))) )),
  inference(forward_demodulation,[],[f1998,f219])).
fof(f1998,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))))) = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,'type.num.num'))) )),
  inference(superposition,[],[f260,f219])).
fof(f2029,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f1990,f217])).
fof(f1990,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,'type.num.num'))) )),
  inference(superposition,[],[f260,f217])).
fof(f2038,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X38,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f1999,f1300])).
fof(f1999,plain,(
  ( ! [X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X38,'type.num.num'))) )),
  inference(superposition,[],[f260,f1300])).
fof(f2052,plain,(
  ( ! [X66,X65] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X65))) = s(bool,sK8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65)))),X66,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X65))))))) )),
  inference(forward_demodulation,[],[f2015,f215])).
fof(f2015,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X65)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))))) = s(bool,sK8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65)))),X66,bool))) )),
  inference(superposition,[],[f260,f215])).
fof(f2144,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2135,f272])).
fof(f2135,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)),X19,bool))) )),
  inference(superposition,[],[f260,f272])).
fof(f2697,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))))))) )),
  inference(forward_demodulation,[],[f2686,f278])).
fof(f2686,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool))) )),
  inference(superposition,[],[f260,f278])).
fof(f2819,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2808,f280])).
fof(f2808,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool))) )),
  inference(superposition,[],[f260,f280])).
fof(f261,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK8(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6] : ! [X18,X24] : (? [X7] : (s(X6,X7) = s(X6,X24) & p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X24)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.bool.UNWIND_THM2')).
fof(f260,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK8(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f179])).
fof(f259,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f179])).
fof(f264,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK10(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK10(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X6] : ! [X18,X25] : (? [X7] : (p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X7)))) & p(s(bool,X25))) <=> (? [X7] : p(s(bool,happ(s(fun(X6,bool),X18),s(X6,X7)))) & p(s(bool,X25))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f262,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f2296,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f272,f274])).
fof(f2104,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f272,f217])).
fof(f3112,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f324,f274])).
fof(f3300,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f3281,f3279])).
fof(f3281,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f325,f963])).
fof(f3086,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f324,f274])).
fof(f3085,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f324,f217])).
fof(f3308,plain,(
  ( ! [X21,X19,X20] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X19))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))),X21,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X19))))))) )),
  inference(forward_demodulation,[],[f3293,f325])).
fof(f3293,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X19)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))),X21,bool))) )),
  inference(superposition,[],[f260,f325])).
fof(f3150,plain,(
  ( ! [X23,X21,X22] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num',X21))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num',X21))))))) )),
  inference(forward_demodulation,[],[f3149,f3113])).
fof(f3149,plain,(
  ( ! [X23,X21,X22] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num',X21))))))) )),
  inference(forward_demodulation,[],[f3126,f272])).
fof(f3126,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num',X21)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X22)))),X23,bool))) )),
  inference(superposition,[],[f260,f324])).
fof(f3114,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num',X4))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f324,f270])).
fof(f2046,plain,(
  ( ! [X54,X55,X53] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X54),s('type.num.num',X53))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X54)),X55,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X54),s('type.num.num',X53))))))) )),
  inference(forward_demodulation,[],[f2009,f270])).
fof(f2009,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X54),s('type.num.num',X53)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X54))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X54)),X55,bool))) )),
  inference(superposition,[],[f260,f270])).
fof(f2245,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X3,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2240,f2212])).
fof(f2240,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X3,bool))) )),
  inference(superposition,[],[f260,f2212])).
fof(f2212,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f2211,f210])).
fof(f2211,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f2198,f272])).
fof(f2198,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f313,f199])).
fof(f2127,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) )),
  inference(superposition,[],[f272,f224])).
fof(f2001,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,X41)))) | s(bool,'F_0') = s(bool,sK8('F_0',X42,bool)) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f260,f224])).
fof(f2000,plain,(
  ( ! [X39,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0')))) | s(bool,X39) = s(bool,sK8(X39,X40,bool)) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f260,f224])).
fof(f1173,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num',X3)))) )),
  inference(superposition,[],[f270,f224])).
fof(f674,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f215,f224])).
fof(f477,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f476,f202])).
fof(f476,plain,(
  ( ! [X8,X9] : (p(s(bool,X9)) | s(bool,X9) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) )),
  inference(subsumption_resolution,[],[f459,f200])).
fof(f459,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | p(s(bool,X9)) | s(bool,X9) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) )),
  inference(superposition,[],[f285,f202])).
fof(f936,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13)))))))))) )),
  inference(superposition,[],[f229,f216])).
fof(f1027,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15)))))))))) )),
  inference(superposition,[],[f229,f218])).
fof(f3871,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f3870,f1300])).
fof(f3870,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f3869,f196])).
fof(f3869,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1368,f3294])).
fof(f1368,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f232,f1300])).
fof(f1521,plain,(
  ( ! [X17] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))) )),
  inference(superposition,[],[f228,f1402])).
fof(f1890,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f229,f922])).
fof(f1448,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))))) )),
  inference(superposition,[],[f289,f216])).
fof(f868,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(subsumption_resolution,[],[f867,f200])).
fof(f867,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f834,f451])).
fof(f834,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f233,f199])).
fof(f728,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f228,f203])).
fof(f729,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f228,f214])).
fof(f732,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f228,f208])).
fof(f1439,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(superposition,[],[f289,f203])).
fof(f1440,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f289,f214])).
fof(f1443,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f289,f204])).
fof(f1444,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X14),s('type.num.num',X14)))) )),
  inference(superposition,[],[f289,f207])).
fof(f1445,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f289,f208])).
fof(f1447,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f289,f309])).
fof(f1449,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24)))))))) )),
  inference(superposition,[],[f289,f218])).
fof(f1450,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f289,f205])).
fof(f1451,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)))) )),
  inference(superposition,[],[f289,f212])).
fof(f1452,plain,(
  ( ! [X30] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))) | s('type.num.num',X30) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f289,f198])).
fof(f1529,plain,(
  ( ! [X30,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))) | s('type.num.num',X30) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),'const.list.NIL_0')))) )),
  inference(superposition,[],[f289,f1402])).
fof(f1897,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f289,f922])).
fof(f1929,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f289,f963])).
fof(f2059,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))))) )),
  inference(unit_resulting_resolution,[],[f1055,f289])).
fof(f2823,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(unit_resulting_resolution,[],[f1482,f289])).
fof(f2848,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f1431,f289])).
fof(f2999,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f2874,f289])).
fof(f1658,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f964,f289])).
fof(f2081,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))))) )),
  inference(superposition,[],[f1055,f217])).
fof(f2169,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))))) )),
  inference(superposition,[],[f1070,f217])).
fof(f2873,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) )),
  inference(superposition,[],[f1431,f274])).
fof(f2301,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) )),
  inference(superposition,[],[f1055,f274])).
fof(f2493,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X37),s('type.num.num',X38))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X38)))))) )),
  inference(superposition,[],[f228,f275])).
fof(f1431,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f886,f289])).
fof(f1482,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f1432,f309])).
fof(f1432,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f879,f289])).
fof(f2874,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f1431,f963])).
fof(f1055,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f988,f228])).
fof(f1070,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f988,f217])).
fof(f3027,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f2991,f217])).
fof(f1924,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f217,f963])).
fof(f1925,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f219,f963])).
fof(f2299,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))) )),
  inference(superposition,[],[f964,f274])).
fof(f2300,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f988,f274])).
fof(f3028,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f2991,f274])).
fof(f1260,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35)))) )),
  inference(superposition,[],[f228,f271])).
fof(f1261,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37)))))) )),
  inference(superposition,[],[f229,f271])).
fof(f964,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f886,f217])).
fof(f988,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) )),
  inference(subsumption_resolution,[],[f980,f964])).
fof(f980,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f229,f217])).
fof(f2298,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f886,f274])).
fof(f2303,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) )),
  inference(superposition,[],[f1655,f274])).
fof(f2991,plain,(
  ( ! [X50,X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num',X50)))) )),
  inference(subsumption_resolution,[],[f2990,f200])).
fof(f2990,plain,(
  ( ! [X50,X49] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num',X50)))) )),
  inference(forward_demodulation,[],[f2955,f2297])).
fof(f2955,plain,(
  ( ! [X50,X49] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num',X50)))) )),
  inference(superposition,[],[f233,f317])).
fof(f3133,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f3132,f2213])).
fof(f3132,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(backward_demodulation,[],[f3127,f1852])).
fof(f3279,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f325,f199])).
fof(f3299,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f3298,f3252])).
fof(f3193,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))))) )),
  inference(superposition,[],[f2217,f274])).
fof(f3192,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))))) )),
  inference(superposition,[],[f2217,f217])).
fof(f3166,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f200,f2217,f285])).
fof(f3167,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f2217,f2217,f285])).
fof(f3161,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')),X3,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f3158,f3133])).
fof(f3158,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')),X3,bool))) )),
  inference(superposition,[],[f260,f3133])).
fof(f2796,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f280,f199])).
fof(f2770,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f280,f199])).
fof(f2746,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')),X11,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2741,f2687])).
fof(f2741,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')),X11,bool))) )),
  inference(superposition,[],[f260,f2687])).
fof(f2674,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f278,f199])).
fof(f2687,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2649,f202])).
fof(f2649,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f278,f768])).
fof(f2297,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f451,f274])).
fof(f2234,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2231,f2213])).
fof(f2231,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool))) )),
  inference(superposition,[],[f260,f2213])).
fof(f2223,plain,(
  ( ! [X10,X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')),X11,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2210,f313])).
fof(f2210,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')),X11,bool))) )),
  inference(superposition,[],[f260,f313])).
fof(f2202,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f313,f224])).
fof(f2217,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(backward_demodulation,[],[f2201,f2057])).
fof(f2213,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2199,f206])).
fof(f2199,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f313,f768])).
fof(f2057,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))))) )),
  inference(unit_resulting_resolution,[],[f1055,f232])).
fof(f2051,plain,(
  ( ! [X64] : (s(bool,'F_0') = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X64,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2014,f1814])).
fof(f2014,plain,(
  ( ! [X64] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X64,bool))) )),
  inference(superposition,[],[f260,f1814])).
fof(f2050,plain,(
  ( ! [X62,X63] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X62))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62)))),X63,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X62))))))) )),
  inference(forward_demodulation,[],[f2013,f221])).
fof(f2013,plain,(
  ( ! [X62,X63] : (~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X62)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62))))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62)))),X63,bool))) )),
  inference(superposition,[],[f260,f221])).
fof(f2049,plain,(
  ( ! [X61,X60] : (s(bool,'F_0') = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0')),X61,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2012,f210])).
fof(f2012,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0'))) = s(bool,sK8('const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0')),X61,bool))) )),
  inference(superposition,[],[f260,f210])).
fof(f2048,plain,(
  ( ! [X59,X58] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X58))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.num.num','const.num.|48|_0')),X59,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X58))))))) )),
  inference(forward_demodulation,[],[f2011,f222])).
fof(f2011,plain,(
  ( ! [X59,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X58)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.num.num','const.num.|48|_0')),X59,bool))) )),
  inference(superposition,[],[f260,f222])).
fof(f2047,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)),X57,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2010,f202])).
fof(f2010,plain,(
  ( ! [X57,X56] : (~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) = s(bool,sK8('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)),X57,bool))) )),
  inference(superposition,[],[f260,f202])).
fof(f2045,plain,(
  ( ! [X52,X51] : (s(bool,'T_0') = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)),X52,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2008,f206])).
fof(f2008,plain,(
  ( ! [X52,X51] : (~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) = s(bool,sK8('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)),X52,bool))) )),
  inference(superposition,[],[f260,f206])).
fof(f2042,plain,(
  ( ! [X47,X48] : (s(bool,'F_0') = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X48,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2005,f451])).
fof(f2005,plain,(
  ( ! [X47,X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'F_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X48,bool))) )),
  inference(superposition,[],[f260,f451])).
fof(f2039,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')),X44,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2002,f201])).
fof(f2002,plain,(
  ( ! [X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0'))) = s(bool,sK8('const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')),X44,bool))) )),
  inference(superposition,[],[f260,f201])).
fof(f2036,plain,(
  ( ! [X35] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1997,f198])).
fof(f1997,plain,(
  ( ! [X35] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X35,'type.num.num'))) )),
  inference(superposition,[],[f260,f198])).
fof(f2035,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33)),X34,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1996,f212])).
fof(f1996,plain,(
  ( ! [X33,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33)),X34,'type.num.num'))) )),
  inference(superposition,[],[f260,f212])).
fof(f2034,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')),X32,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1995,f205])).
fof(f1995,plain,(
  ( ! [X31,X32] : (~p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')),X32,'type.num.num'))) )),
  inference(superposition,[],[f260,f205])).
fof(f2033,plain,(
  ( ! [X30] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X30,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1994,f922])).
fof(f1994,plain,(
  ( ! [X30] : (~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X30,'type.num.num'))) )),
  inference(superposition,[],[f260,f922])).
fof(f2032,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))),X29,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1993,f218])).
fof(f1993,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28))))))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))),X29,'type.num.num'))) )),
  inference(superposition,[],[f260,f218])).
fof(f2031,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))))),X27,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1992,f216])).
fof(f1992,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))))))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))))),X27,'type.num.num'))) )),
  inference(superposition,[],[f260,f216])).
fof(f2030,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1991,f309])).
fof(f1991,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,'type.num.num'))) )),
  inference(superposition,[],[f260,f309])).
fof(f2028,plain,(
  ( ! [X21,X20] : (s('type.num.num',X20) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f1989,f208])).
fof(f1989,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',X20)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num'))) )),
  inference(superposition,[],[f260,f208])).
fof(f2027,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1988,f207])).
fof(f1988,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num'))) )),
  inference(superposition,[],[f260,f207])).
fof(f2026,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)),X17,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1987,f204])).
fof(f1987,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)),X17,'type.num.num'))) )),
  inference(superposition,[],[f260,f204])).
fof(f2025,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f1984,f214])).
fof(f1984,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9,'type.num.num'))) )),
  inference(superposition,[],[f260,f214])).
fof(f2024,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)),X7,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f1983,f203])).
fof(f1983,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)),X7,'type.num.num'))) )),
  inference(superposition,[],[f260,f203])).
fof(f2023,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X5,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1982,f963])).
fof(f1982,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X5,'type.num.num'))) )),
  inference(superposition,[],[f260,f963])).
fof(f2022,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X4,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1981,f768])).
fof(f1981,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X4,'type.num.num'))) )),
  inference(superposition,[],[f260,f768])).
fof(f2021,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X3,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f1980,f199])).
fof(f1980,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X3,'type.num.num'))) )),
  inference(superposition,[],[f260,f199])).
fof(f2020,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f1979,f1402])).
fof(f1979,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.num.num',sK8('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'type.num.num'))) )),
  inference(superposition,[],[f260,f1402])).
fof(f1970,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1926,f1861])).
fof(f1926,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f221,f963])).
fof(f1861,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(backward_demodulation,[],[f1852,f1805])).
fof(f1852,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f222,f199])).
fof(f1807,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f221,f224])).
fof(f1814,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1806,f210])).
fof(f1806,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f221,f768])).
fof(f1805,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f221,f199])).
fof(f1685,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))))))) )),
  inference(superposition,[],[f328,f271])).
fof(f1655,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f964,f229])).
fof(f1494,plain,(
  ( ! [X33] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1454,f768])).
fof(f1454,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f289,f1300])).
fof(f1263,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) )),
  inference(superposition,[],[f233,f271])).
fof(f1262,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) )),
  inference(superposition,[],[f232,f271])).
fof(f991,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f868,f229])).
fof(f965,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f451,f217])).
fof(f887,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(subsumption_resolution,[],[f847,f200])).
fof(f847,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(superposition,[],[f233,f224])).
fof(f886,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f845,f200])).
fof(f845,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f233,f451])).
fof(f879,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f878,f200])).
fof(f878,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f841,f451])).
fof(f841,plain,(
  ( ! [X5] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f233,f309])).
fof(f807,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f215,f768])).
fof(f673,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f215,f199])).
fof(f202,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X12] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|23')).
fof(f328,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f327,f270])).
fof(f327,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f292,f270])).
fof(f292,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0,X1] : (((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X0,X1] : (((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))),
  inference(nnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X13,X11] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X11)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0'))))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.arithmetic.arithmetic_2|48|5_prove_ltb')).
fof(f296,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f192])).
fof(f227,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X0))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X0)))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f155])).
fof(f155,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f148])).
fof(f148,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f147])).
fof(f147,plain,(
  ! [X0] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) & ! [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) => p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) => ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X18] : ((p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num','const.num.|48|_0')))) & ! [X12] : (p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num',X12)))) => p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) => ! [X12] : p(s(bool,happ(s(fun('type.num.num',bool),X18),s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.num.INDUCTION')).
fof(f301,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(condensation,[],[f226])).
fof(f226,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f156])).
fof(f221,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|21')).
fof(f453,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f316,f316,f285])).
fof(f295,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK13(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK13(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK13(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK13(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13])],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9',aHL_EXT)).
fof(f201,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X12] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.numeral.numeral_distrib|split|29')).
fof(f23516,plain,(
  $false | ($spl11 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f444,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23515,plain,(
  $false | ($spl1 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f4285,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f4285,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1),
  inference(equality_factoring,[],[f2394])).
fof(f23505,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f5262,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f5262,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5261,f3940])).
fof(f5261,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5260,f3298])).
fof(f5260,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5233,f3956])).
fof(f5233,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f4034])).
fof(f5147,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5146,f4034])).
fof(f5146,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5145,f3958])).
fof(f5145,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5090,f4101])).
fof(f5090,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f2690,f4034])).
fof(f2690,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2)))) ) | $spl1),
  inference(forward_demodulation,[],[f2677,f2369])).
fof(f2677,plain,(
  ( ! [X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) ) | $spl1),
  inference(superposition,[],[f278,f2394])).
fof(f23504,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23503,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23503,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f23502,f3940])).
fof(f23502,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5234,f21133])).
fof(f5234,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f4101])).
fof(f23499,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f5280,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f5280,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5279,f3940])).
fof(f5279,plain,(
  ( ! [X6] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5241,f2126])).
fof(f5241,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f217])).
fof(f23485,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23484,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23484,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f6754,f2126])).
fof(f6754,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f6675,f5198])).
fof(f5198,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X3)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5197,f4034])).
fof(f5197,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X3))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5196,f4012])).
fof(f4012,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f2674,f3889])).
fof(f5196,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5110,f4101])).
fof(f5110,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3)))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f2690,f4034])).
fof(f6675,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl1),
  inference(superposition,[],[f272,f3137])).
fof(f3137,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | $spl1),
  inference(forward_demodulation,[],[f3115,f2369])).
fof(f3115,plain,(
  ( ! [X6,X7] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | $spl1),
  inference(superposition,[],[f324,f2394])).
fof(f23483,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23482,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23482,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f6763,f2126])).
fof(f6763,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f5198,f6675])).
fof(f23481,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f7421,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f7421,plain,(
  ( ! [X171,X172] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.num.SUC_1'(s('type.num.num',X172))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f7420,f3940])).
fof(f7420,plain,(
  ( ! [X171,X172] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.num.SUC_1'(s('type.num.num',X172))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f7386,f2126])).
fof(f7386,plain,(
  ( ! [X171,X172] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.num.SUC_1'(s('type.num.num',X172))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172)))))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f274])).
fof(f23479,plain,(
  $false | ($spl16 | $spl43 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f15199,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23472,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309,f16313])).
fof(f23471,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461,f16309])).
fof(f23470,plain,(
  $false | ($spl1 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f16306,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f16306,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl51)),
  inference(unit_resulting_resolution,[],[f196,f16303,f5230])).
fof(f5230,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8)))) ) | $spl1),
  inference(forward_demodulation,[],[f5229,f278])).
fof(f5229,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8)))) ) | $spl1),
  inference(subsumption_resolution,[],[f5133,f196])).
fof(f5133,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8)))) ) | $spl1),
  inference(superposition,[],[f288,f2690])).
fof(f23469,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f16319,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f16319,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16 | $spl51)),
  inference(superposition,[],[f16303,f5198])).
fof(f23468,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23467,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f23467,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl1 | $spl16 | $spl51)),
  inference(subsumption_resolution,[],[f16321,f21513])).
fof(f16321,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16 | $spl51)),
  inference(superposition,[],[f16303,f5147])).
fof(f23466,plain,(
  $false | ($spl16 | $spl43 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23465,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f23465,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl16 | $spl43 | $spl51)),
  inference(subsumption_resolution,[],[f16324,f16303])).
fof(f16324,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl16 | $spl43 | $spl51)),
  inference(superposition,[],[f16303,f14992])).
fof(f23464,plain,(
  $false | ($spl1 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23463,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f23462,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477,f23461])).
fof(f23459,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f16672,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477])).
fof(f16672,plain,(
  ( ! [X219] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X219))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X219)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f16671,f4109])).
fof(f16671,plain,(
  ( ! [X219] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X219))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f16670,f2126])).
fof(f16670,plain,(
  ( ! [X219] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f16502,f3113])).
fof(f16502,plain,(
  ( ! [X219] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X219))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f5198,f4109])).
fof(f23434,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448,f20477])).
fof(f23433,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427,f20448])).
fof(f23432,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f21544,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427])).
fof(f21544,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f21485,f2126])).
fof(f21485,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f3113,f5198])).
fof(f23431,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f21550,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427])).
fof(f21550,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f21516,f2126])).
fof(f21516,plain,(
  ( ! [X18] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f5198,f3113])).
fof(f23430,plain,(
  $false | ($spl1 | $spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f21567,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427])).
fof(f21567,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16 | $spl51)),
  inference(unit_resulting_resolution,[],[f21513,f5147])).
fof(f23429,plain,(
  $false | ($spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f21611,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427])).
fof(f21611,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl16 | $spl51)),
  inference(superposition,[],[f21513,f3941])).
fof(f3941,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl16),
  inference(forward_demodulation,[],[f451,f3889])).
fof(f23428,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420,f23427])).
fof(f23426,plain,(
  $false | ($spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23425,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420])).
fof(f23425,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl16 | $spl51)),
  inference(forward_demodulation,[],[f21672,f3940])).
fof(f21672,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f16303,f21612,f427])).
fof(f23424,plain,(
  $false | ($spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23423,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420])).
fof(f23423,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl16 | $spl51)),
  inference(forward_demodulation,[],[f21657,f3940])).
fof(f21657,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f16303,f21612,f427])).
fof(f23422,plain,(
  $false | ($spl16 | $spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f21695,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420])).
fof(f21695,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl16 | $spl51)),
  inference(superposition,[],[f21612,f3940])).
fof(f23421,plain,(
  $false | ($spl51 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f16303,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21513,f21523,f21524,f21565,f21612,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388,f23420])).
fof(f23419,plain,(
  $false | ($spl1 | $spl11 | $spl16 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23418,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23418,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f23417,f3940])).
fof(f23417,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22283,f21133])).
fof(f22283,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f4036])).
fof(f23416,plain,(
  $false | ($spl1 | $spl11 | $spl16 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23415,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23415,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22529,f4036])).
fof(f22529,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22528,f3294])).
fof(f22528,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22527,f3113])).
fof(f22527,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22526,f2126])).
fof(f22526,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22285,f3113])).
fof(f22285,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5198,f4036])).
fof(f23414,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23096,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23096,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f23094,f427])).
fof(f23094,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl16 | $spl60)),
  inference(backward_demodulation,[],[f23035,f22777])).
fof(f22777,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f3956,f4037])).
fof(f23413,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23099,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23099,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f23094,f427])).
fof(f23412,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23110,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23110,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f427,f23094])).
fof(f23411,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23113,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23113,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X13) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f427,f23094])).
fof(f23410,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23409,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23409,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl16 | $spl60)),
  inference(subsumption_resolution,[],[f23115,f200])).
fof(f23115,plain,(
  ( ! [X14] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f472,f23094])).
fof(f23408,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23131,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23131,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f23095,f427])).
fof(f23095,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl16 | $spl60)),
  inference(backward_demodulation,[],[f23035,f22776])).
fof(f22776,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl16),
  inference(superposition,[],[f3955,f4037])).
fof(f3955,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl16),
  inference(forward_demodulation,[],[f313,f3889])).
fof(f23407,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23134,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23134,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f23095,f427])).
fof(f23406,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23144,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23144,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f427,f23095])).
fof(f23405,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23147,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23147,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X12)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f427,f23095])).
fof(f23404,plain,(
  $false | ($spl11 | $spl16 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23403,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23403,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl16 | $spl60)),
  inference(subsumption_resolution,[],[f23149,f200])).
fof(f23149,plain,(
  ( ! [X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl16 | $spl60)),
  inference(superposition,[],[f472,f23095])).
fof(f23402,plain,(
  $false | ($spl11 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23189,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23189,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(superposition,[],[f23035,f427])).
fof(f23401,plain,(
  $false | ($spl11 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23192,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23192,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl60),
  inference(superposition,[],[f23035,f427])).
fof(f23400,plain,(
  $false | ($spl11 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23203,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23203,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl60),
  inference(superposition,[],[f427,f23035])).
fof(f23399,plain,(
  $false | ($spl11 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23206,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23206,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X13) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X13)) ) | $spl60),
  inference(superposition,[],[f427,f23035])).
fof(f23398,plain,(
  $false | ($spl11 | $spl60 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f23397,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23397,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X14)) ) | $spl60),
  inference(subsumption_resolution,[],[f23208,f200])).
fof(f23208,plain,(
  ( ! [X14] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X14)) ) | $spl60),
  inference(superposition,[],[f472,f23035])).
fof(f23396,plain,(
  $false | ($spl11 | $spl80 | $spl92)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23374,f23324,f23388])).
fof(f23395,plain,(
  $false | ($spl11 | $spl76 | $spl88)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23370,f23317,f23390])).
fof(f23390,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl76 | $spl88)),
  inference(backward_demodulation,[],[f23317,f23370])).
fof(f23394,plain,(
  $false | ($spl11 | $spl72 | $spl84)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f444,f453,f472,f473,f221,f222,f301,f227,f233,f232,f313,f321,f322,f323,f296,f328,f451,f210,f202,f673,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f2026,f2027,f2028,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2039,f2042,f2045,f2047,f2048,f2049,f2050,f2051,f2057,f2213,f2201,f2217,f2202,f2223,f2234,f2297,f2648,f2687,f2688,f2674,f2746,f2770,f2796,f3131,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3299,f3279,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f1261,f1260,f2293,f3028,f2300,f2299,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2873,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f1929,f1897,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1440,f1439,f732,f729,f728,f1455,f1086,f962,f868,f199,f216,f1448,f1890,f1889,f1521,f3871,f1027,f1026,f936,f935,f200,f477,f674,f1173,f2000,f2001,f2127,f2212,f2245,f270,f324,f325,f326,f2046,f3113,f3114,f3150,f3308,f3298,f3085,f3086,f297,f2126,f2137,f2138,f3127,f3300,f3111,f3112,f2104,f2296,f272,f262,f264,f259,f260,f261,f2819,f2697,f2144,f2052,f2038,f2029,f2037,f1985,f2997,f2357,f2527,f278,f280,f2136,f2689,f215,f1969,f266,f267,f268,f269,f217,f219,f281,f282,f283,f284,f289,f290,f1441,f1583,f2446,f2471,f2505,f2901,f1564,f2302,f274,f317,f2294,f2447,f2472,f2902,f2928,f271,f275,f9062,f9614,f9751,f9981,f10124,f10335,f10479,f10624,f10645,f11063,f11027,f11028,f11030,f11033,f11035,f11039,f11051,f11061,f11260,f11224,f11225,f11227,f11230,f11232,f11236,f11248,f11258,f12341,f12376,f12380,f12381,f12383,f12384,f12389,f12392,f12394,f12481,f12548,f12554,f12555,f12559,f12561,f12567,f12572,f12575,f12507,f12511,f12515,f12516,f12518,f12519,f12522,f12525,f12527,f12529,f12533,f12715,f12774,f12723,f12724,f12778,f12779,f12730,f12733,f12735,f12741,f12797,f12803,f12804,f12807,f12808,f12813,f12818,f12821,f12763,f12767,f13048,f13074,f13189,f13190,f13098,f13208,f13105,f13368,f13372,f13376,f13377,f13379,f13380,f13383,f13386,f13387,f13388,f13749,f13750,f13751,f13754,f13755,f14397,f14404,f14646,f14648,f14650,f14651,f14652,f14993,f19705,f19706,f19708,f19711,f19713,f19717,f19730,f19743,f19818,f19852,f19853,f19854,f19856,f19857,f19859,f19870,f19881,f20056,f20057,f20058,f20059,f20060,f20776,f20779,f20188,f20189,f20787,f20788,f20789,f20794,f20803,f20804,f20805,f20288,f20289,f20290,f20291,f20292,f20807,f20809,f21133,f21178,f21134,f21185,f21187,f21188,f21189,f21137,f21138,f21139,f21152,f21157,f21158,f21219,f21471,f21472,f21491,f21492,f21523,f21524,f21565,f23238,f23343,f23357,f23362,f23377,f23378,f23380,f23383,f23384,f23366,f23387,f23310,f23392])).
fof(f23392,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl72 | $spl84)),
  inference(backward_demodulation,[],[f23310,f23366])).
fof(f23387,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl84),
  inference(backward_demodulation,[],[f23366,f1969])).
fof(f23393,plain,(
  $false | ($spl47 | $spl72 | $spl84)),
  inference(subsumption_resolution,[],[f23392,f4119])).
fof(f4119,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl47),
  inference(subsumption_resolution,[],[f2707,f2624])).
fof(f2707,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl47),
  inference(superposition,[],[f2624,f224])).
fof(f23391,plain,(
  $false | ($spl47 | $spl76 | $spl88)),
  inference(subsumption_resolution,[],[f23390,f4119])).
fof(f23389,plain,(
  $false | ($spl47 | $spl80 | $spl92)),
  inference(subsumption_resolution,[],[f23388,f4119])).
fof(f23374,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl92),
  inference(cnf_transformation,[],[f23374_D])).
fof(f23374_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f23376,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl94),
  inference(cnf_transformation,[],[f23376_D])).
fof(f23376_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f23266,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f674,f4037])).
fof(f23370,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl88),
  inference(cnf_transformation,[],[f23370_D])).
fof(f23370_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f23372,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl90),
  inference(cnf_transformation,[],[f23372_D])).
fof(f23372_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f23265,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f674,f4036])).
fof(f23366,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl84),
  inference(cnf_transformation,[],[f23366_D])).
fof(f23366_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f23368,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl86),
  inference(cnf_transformation,[],[f23368_D])).
fof(f23368_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f23263,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(superposition,[],[f674,f4034])).
fof(f23310,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl72),
  inference(cnf_transformation,[],[f23310_D])).
fof(f23310_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f23312,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl74),
  inference(cnf_transformation,[],[f23312_D])).
fof(f23312_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f23351,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f23350,f4115])).
fof(f23350,plain,(
  ( ! [X22] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f23349,f1969])).
fof(f23349,plain,(
  ( ! [X22] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(forward_demodulation,[],[f23252,f215])).
fof(f23252,plain,(
  ( ! [X22] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl16),
  inference(superposition,[],[f674,f4115])).
fof(f23324,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl80),
  inference(cnf_transformation,[],[f23324_D])).
fof(f23324_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f23326,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl82),
  inference(cnf_transformation,[],[f23326_D])).
fof(f23326_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f23322,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f23321,f4037])).
fof(f23321,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f23320,f22750])).
fof(f22750,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f215,f4037])).
fof(f23320,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f23236,f4106])).
fof(f4106,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f1925,f3889])).
fof(f23236,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(superposition,[],[f674,f4037])).
fof(f23317,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl76),
  inference(cnf_transformation,[],[f23317_D])).
fof(f23317_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f23319,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl78),
  inference(cnf_transformation,[],[f23319_D])).
fof(f23319_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f23315,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f23314,f4036])).
fof(f23314,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f23313,f22155])).
fof(f22155,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f215,f4036])).
fof(f23313,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(forward_demodulation,[],[f23235,f4104])).
fof(f4104,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f1924,f3889])).
fof(f23235,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl16),
  inference(superposition,[],[f674,f4036])).
fof(f23308,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(forward_demodulation,[],[f23307,f4034])).
fof(f23307,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f23306,f1969])).
fof(f23306,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(forward_demodulation,[],[f23233,f4101])).
fof(f23233,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl16),
  inference(superposition,[],[f674,f4034])).
fof(f23037,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl62),
  inference(cnf_transformation,[],[f23037_D])).
fof(f23037_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f23035,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl60),
  inference(cnf_transformation,[],[f23035_D])).
fof(f23035_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f23085,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f23084,f3956])).
fof(f23084,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22879,f4106])).
fof(f22879,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5188,f4037])).
fof(f5188,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) ) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f5106,f3127])).
fof(f5106,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16)),
  inference(superposition,[],[f2690,f4034])).
fof(f23081,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl68),
  inference(cnf_transformation,[],[f23081_D])).
fof(f23081_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f23083,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl70),
  inference(cnf_transformation,[],[f23083_D])).
fof(f23083_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f23079,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16)),
  inference(forward_demodulation,[],[f22878,f3956])).
fof(f22878,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5147,f4037])).
fof(f23074,plain,(
  ( ! [X101,X100] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl64),
  inference(cnf_transformation,[],[f23074_D])).
fof(f23074_D,plain,(
  ( ! [X101,X100] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f23076,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl66),
  inference(cnf_transformation,[],[f23076_D])).
fof(f23076_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f23073,plain,(
  ( ! [X101,X100] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f23072,f3956])).
fof(f23072,plain,(
  ( ! [X101,X100] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl16),
  inference(forward_demodulation,[],[f22863,f4037])).
fof(f22863,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl16),
  inference(superposition,[],[f3954,f4037])).
fof(f3954,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))))) ) | $spl16),
  inference(forward_demodulation,[],[f296,f3889])).
fof(f22780,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl16)),
  inference(superposition,[],[f5188,f4037])).
fof(f23030,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl56),
  inference(cnf_transformation,[],[f23030_D])).
fof(f23030_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f23032,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl59),
  inference(cnf_transformation,[],[f23032_D])).
fof(f23032_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f22775,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl16),
  inference(superposition,[],[f3899,f4037])).
fof(f20780,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl54),
  inference(cnf_transformation,[],[f20780_D])).
fof(f20780_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f474,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f20809,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f20808])).
fof(f20808,plain,(
  ( ! [X30,X28,X26,X29,X27] : (p(s(bool,happ(s(fun(X27,bool),X28),s(X27,sK10('T_0',X28,X27))))) | ~p(s(bool,happ(s(fun(X27,bool),X28),s(X27,X29)))) | s(bool,X26) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f20296,f472])).
fof(f20296,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,X26)) | p(s(bool,happ(s(fun(X27,bool),X28),s(X27,sK10('T_0',X28,X27))))) | ~p(s(bool,happ(s(fun(X27,bool),X28),s(X27,X29)))) | s(bool,X26) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f264,f427])).
fof(f20777,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl52),
  inference(cnf_transformation,[],[f20777_D])).
fof(f20777_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f20807,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f20806])).
fof(f20806,plain,(
  ( ! [X24,X23,X21,X25,X22] : (p(s(bool,happ(s(fun(X22,bool),X23),s(X22,sK9('T_0',X23,X22))))) | ~p(s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) | s(bool,X21) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(subsumption_resolution,[],[f20295,f472])).
fof(f20295,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(X22,bool),X23),s(X22,sK9('T_0',X23,X22))))) | ~p(s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) | s(bool,X21) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f262,f427])).
fof(f20779,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK10('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f20778])).
fof(f20778,plain,(
  ( ! [X30,X28,X26,X29,X27] : (p(s(bool,happ(s(fun(X27,bool),X28),s(X27,sK10('T_0',X28,X27))))) | ~p(s(bool,happ(s(fun(X27,bool),X28),s(X27,X29)))) | s(bool,X26) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f20179,f472])).
fof(f20179,plain,(
  ( ! [X30,X28,X26,X29,X27] : (~p(s(bool,X26)) | p(s(bool,happ(s(fun(X27,bool),X28),s(X27,sK10('T_0',X28,X27))))) | ~p(s(bool,happ(s(fun(X27,bool),X28),s(X27,X29)))) | s(bool,X26) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f264,f427])).
fof(f20776,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK9('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f20775])).
fof(f20775,plain,(
  ( ! [X24,X23,X21,X25,X22] : (p(s(bool,happ(s(fun(X22,bool),X23),s(X22,sK9('T_0',X23,X22))))) | ~p(s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) | s(bool,X21) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(subsumption_resolution,[],[f20178,f472])).
fof(f20178,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(X22,bool),X23),s(X22,sK9('T_0',X23,X22))))) | ~p(s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) | s(bool,X21) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f262,f427])).
fof(f16301,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl48),
  inference(cnf_transformation,[],[f16301_D])).
fof(f16301_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f16303,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(cnf_transformation,[],[f16303_D])).
fof(f16303_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f16165,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl1 | $spl16 | $spl47)),
  inference(equality_factoring,[],[f15033])).
fof(f15033,plain,(
  ( ! [X117] : (s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X117)) ) | ($spl1 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f14984,f200])).
fof(f14984,plain,(
  ( ! [X117] : (p(s(bool,'F_0')) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X117)) ) | ($spl1 | $spl16 | $spl47)),
  inference(superposition,[],[f472,f5263])).
fof(f5263,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl16 | $spl47)),
  inference(subsumption_resolution,[],[f5262,f4119])).
fof(f3888,plain,(
  $false | ($spl8 | $spl16)),
  inference(global_subsumption,[],[f739,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3864,plain,(
  p(s(bool,'F_0')) | $spl8),
  inference(forward_demodulation,[],[f3863,f442])).
fof(f3863,plain,(
  ( ! [X35] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X35),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(subsumption_resolution,[],[f3862,f196])).
fof(f3862,plain,(
  ( ! [X35] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X35),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f1698,f3294])).
fof(f1698,plain,(
  ( ! [X35] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X35),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(superposition,[],[f328,f1300])).
fof(f3823,plain,(
  ~p(s(bool,'F_0')) | $spl8),
  inference(forward_demodulation,[],[f3193,f442])).
fof(f3821,plain,(
  ~p(s(bool,'F_0')) | $spl8),
  inference(forward_demodulation,[],[f3192,f442])).
fof(f3815,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl8),
  inference(forward_demodulation,[],[f232,f442])).
fof(f3813,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl8),
  inference(forward_demodulation,[],[f233,f442])).
fof(f3811,plain,(
  ( ! [X41,X40] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | $spl8),
  inference(forward_demodulation,[],[f1263,f442])).
fof(f3809,plain,(
  ( ! [X39,X38] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | $spl8),
  inference(forward_demodulation,[],[f1262,f442])).
fof(f3795,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK8(X2,X1,X0))) ) | $spl8),
  inference(forward_demodulation,[],[f260,f442])).
fof(f3777,plain,(
  ( ! [X21,X20] : (~p(s(bool,'F_0')) | s('type.num.num',X20) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2028,f442])).
fof(f3775,plain,(
  ( ! [X8,X9] : (~p(s(bool,'F_0')) | s('type.num.num',X8) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2025,f442])).
fof(f3773,plain,(
  ( ! [X6,X7] : (~p(s(bool,'F_0')) | s('type.num.num',X6) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)),X7,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2024,f442])).
fof(f3769,plain,(
  ( ! [X38] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X38,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2038,f442])).
fof(f3767,plain,(
  ( ! [X23,X22] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2029,f442])).
fof(f3765,plain,(
  ( ! [X37,X36] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X36))))) = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2037,f442])).
fof(f3763,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f1985,f442])).
fof(f3761,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133))))) = s('type.num.num',sK8('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))),s('type.num.num',X133)),X134,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2997,f442])).
fof(f3759,plain,(
  ( ! [X116,X114,X115] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num','const.num.SUC_1'(s('type.num.num',X115))))) = s('type.num.num',sK8('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115)))),X116,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2357,f442])).
fof(f3757,plain,(
  ( ! [X105,X106,X104] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105))) = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))),X106,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2527,f442])).
fof(f3753,plain,(
  ( ! [X2,X1] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0')),X2,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2020,f442])).
fof(f3751,plain,(
  ( ! [X4] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X4,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2022,f442])).
fof(f3749,plain,(
  ( ! [X17,X16] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)),X17,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2026,f442])).
fof(f3747,plain,(
  ( ! [X19,X18] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2027,f442])).
fof(f3745,plain,(
  ( ! [X26,X27] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))))),X27,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2031,f442])).
fof(f3743,plain,(
  ( ! [X28,X29] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))),X29,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2032,f442])).
fof(f3741,plain,(
  ( ! [X30] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X30,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2033,f442])).
fof(f3739,plain,(
  ( ! [X31,X32] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')),X32,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2034,f442])).
fof(f3737,plain,(
  ( ! [X33,X34] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33)),X34,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2035,f442])).
fof(f3735,plain,(
  ( ! [X35] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X35,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2036,f442])).
fof(f3731,plain,(
  ( ! [X24,X25] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2030,f442])).
fof(f3729,plain,(
  ( ! [X5] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X5,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2023,f442])).
fof(f3727,plain,(
  ( ! [X3] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK8('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X3,'type.num.num'))) ) | $spl8),
  inference(forward_demodulation,[],[f2021,f442])).
fof(f3719,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f2136,f442])).
fof(f3887,plain,(
  $false | ($spl8 | $spl18)),
  inference(global_subsumption,[],[f740,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f740,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(cnf_transformation,[],[f740_D])).
fof(f740_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f3886,plain,(
  $false | ($spl8 | $spl20)),
  inference(global_subsumption,[],[f742,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3885,plain,(
  $false | ($spl8 | $spl26)),
  inference(global_subsumption,[],[f746,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3884,plain,(
  $false | ($spl8 | $spl28)),
  inference(global_subsumption,[],[f747,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3883,plain,(
  $false | ($spl8 | $spl30)),
  inference(global_subsumption,[],[f749,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3880,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936,f935])).
fof(f3879,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026,f936])).
fof(f3878,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027,f1026])).
fof(f3877,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871,f1027])).
fof(f3872,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521,f3871])).
fof(f3867,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864,f1521])).
fof(f3865,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889,f3864])).
fof(f3861,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890,f1889])).
fof(f3616,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl8 | $spl47)),
  inference(subsumption_resolution,[],[f2707,f442])).
fof(f3860,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200,f1890])).
fof(f3859,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823,f200])).
fof(f3824,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821,f3823])).
fof(f3822,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815,f3821])).
fof(f3816,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813,f3815])).
fof(f3814,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811,f3813])).
fof(f3812,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809,f3811])).
fof(f3810,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795,f3809])).
fof(f3796,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777,f3795])).
fof(f3778,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775,f3777])).
fof(f3776,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773,f3775])).
fof(f3774,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769,f3773])).
fof(f3770,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767,f3769])).
fof(f3768,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765,f3767])).
fof(f3766,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763,f3765])).
fof(f3764,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761,f3763])).
fof(f3762,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759,f3761])).
fof(f3760,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757,f3759])).
fof(f3758,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753,f3757])).
fof(f3754,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751,f3753])).
fof(f3752,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749,f3751])).
fof(f3750,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747,f3749])).
fof(f3748,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745,f3747])).
fof(f3746,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743,f3745])).
fof(f3744,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741,f3743])).
fof(f3742,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739,f3741])).
fof(f3740,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737,f3739])).
fof(f3738,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735,f3737])).
fof(f3736,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731,f3735])).
fof(f3732,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729,f3731])).
fof(f3730,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727,f3729])).
fof(f3728,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719,f3727])).
fof(f3726,plain,(
  $false | ($spl4 | $spl8 | $spl47)),
  inference(global_subsumption,[],[f3725,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719])).
fof(f3725,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,'type.list.list'(sK0)))) ) | ($spl4 | $spl8)),
  inference(forward_demodulation,[],[f2019,f442])).
fof(f2019,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X0),s('type.list.list'(sK0),sK2)))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,'type.list.list'(sK0)))) ) | $spl4),
  inference(forward_demodulation,[],[f1978,f306])).
fof(f1978,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X0),s('type.list.list'(sK0),sK2)))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) = s('type.list.list'(sK0),sK8('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3)),X0,'type.list.list'(sK0)))) ) | $spl4),
  inference(superposition,[],[f260,f306])).
fof(f3720,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266,f3719])).
fof(f3712,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267,f266])).
fof(f3711,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268,f267])).
fof(f3710,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269,f268])).
fof(f3709,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624,f269])).
fof(f3708,plain,(
  $false | ($spl6 | $spl8 | $spl47)),
  inference(global_subsumption,[],[f440,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f3707,plain,(
  $false | ($spl8 | $spl43 | $spl47)),
  inference(global_subsumption,[],[f1426,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f1426,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1390,f289])).
fof(f3706,plain,(
  $false | ($spl8 | $spl43 | $spl47)),
  inference(global_subsumption,[],[f1501,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f1501,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1426,f289])).
fof(f3705,plain,(
  $false | ($spl8 | $spl43 | $spl47)),
  inference(global_subsumption,[],[f1654,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f1654,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1501,f289])).
fof(f3704,plain,(
  $false | ($spl8 | $spl43 | $spl47)),
  inference(global_subsumption,[],[f1832,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f1832,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1654,f289])).
fof(f3703,plain,(
  $false | ($spl1 | $spl8 | $spl47)),
  inference(global_subsumption,[],[f2394,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f3702,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448,f2624])).
fof(f3701,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216,f1448])).
fof(f3700,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199,f216])).
fof(f3699,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868,f199])).
fof(f3698,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962,f868])).
fof(f3697,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086,f962])).
fof(f3696,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455,f1086])).
fof(f3695,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217,f1455])).
fof(f3694,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219,f217])).
fof(f3693,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281,f219])).
fof(f3692,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282,f281])).
fof(f3691,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283,f282])).
fof(f3690,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284,f283])).
fof(f3689,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289,f284])).
fof(f3688,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290,f289])).
fof(f3687,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728,f290])).
fof(f3686,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729,f728])).
fof(f3685,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732,f729])).
fof(f3684,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439,f732])).
fof(f3683,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440,f1439])).
fof(f3682,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441,f1440])).
fof(f3681,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443,f1441])).
fof(f3680,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444,f1443])).
fof(f3679,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445,f1444])).
fof(f3678,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447,f1445])).
fof(f3677,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449,f1447])).
fof(f3676,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450,f1449])).
fof(f3675,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451,f1450])).
fof(f3674,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452,f1451])).
fof(f3673,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529,f1452])).
fof(f3672,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583,f1529])).
fof(f3671,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897,f1583])).
fof(f3670,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929,f1897])).
fof(f3669,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446,f1929])).
fof(f3668,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471,f2446])).
fof(f3667,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505,f2471])).
fof(f3666,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901,f2505])).
fof(f3665,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059,f2901])).
fof(f3664,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2901,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823,f2059])).
fof(f3663,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2901,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848,f2823])).
fof(f3662,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2901,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999,f2848])).
fof(f3661,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658,f2999])).
fof(f3660,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081,f1658])).
fof(f3659,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169,f2081])).
fof(f3658,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564,f2169])).
fof(f3657,plain,(
  $false | ($spl8 | $spl25 | $spl47)),
  inference(global_subsumption,[],[f1428,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564])).
fof(f1428,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl25),
  inference(unit_resulting_resolution,[],[f745,f289])).
fof(f3656,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873,f1564])).
fof(f3655,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302,f2873])).
fof(f3654,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301,f2302])).
fof(f3653,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2302,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493,f2301])).
fof(f3652,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431,f2493])).
fof(f3651,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482,f1431])).
fof(f3650,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874,f1482])).
fof(f3649,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055,f2874])).
fof(f3648,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070,f1055])).
fof(f3647,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1055,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027,f1070])).
fof(f3646,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963,f3027])).
fof(f3645,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924,f963])).
fof(f3644,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218,f1924])).
fof(f3643,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925,f218])).
fof(f3642,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274,f1925])).
fof(f3641,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317,f274])).
fof(f3640,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294,f317])).
fof(f3639,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299,f2294])).
fof(f3638,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300,f2299])).
fof(f3637,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447,f2300])).
fof(f3636,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472,f2447])).
fof(f3635,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902,f2472])).
fof(f3634,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928,f2902])).
fof(f3633,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028,f2928])).
fof(f3632,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293,f3028])).
fof(f3631,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271,f2293])).
fof(f3630,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260,f271])).
fof(f3629,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261,f1260])).
fof(f3628,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275,f1261])).
fof(f3627,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964,f275])).
fof(f3626,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988,f964])).
fof(f3625,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298,f988])).
fof(f3624,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303,f2298])).
fof(f3623,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991,f2303])).
fof(f3622,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309,f2991])).
fof(f3621,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2991,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922,f309])).
fof(f3620,plain,(
  $false | ($spl8 | $spl25 | $spl47)),
  inference(global_subsumption,[],[f745,f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f309,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2991,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922])).
fof(f3619,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f309,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2991,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133,f922])).
fof(f3618,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f309,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f922,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2991,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616,f3133])).
fof(f3617,plain,(
  $false | ($spl8 | $spl47)),
  inference(global_subsumption,[],[f195,f194,f193,f196,f198,f201,f203,f204,f205,f206,f207,f208,f212,f214,f223,f224,f229,f228,f249,f253,f252,f310,f311,f312,f314,f315,f316,f273,f288,f285,f295,f427,f431,f439,f453,f472,f473,f309,f275,f317,f274,f271,f218,f290,f289,f284,f283,f282,f281,f219,f217,f216,f199,f269,f268,f267,f266,f215,f221,f280,f278,f222,f261,f260,f259,f264,f262,f301,f227,f272,f233,f232,f313,f321,f322,f323,f297,f296,f270,f324,f325,f326,f328,f477,f451,f210,f202,f200,f673,f674,f728,f729,f730,f731,f732,f733,f734,f735,f736,f737,f768,f807,f868,f879,f886,f887,f922,f962,f963,f964,f965,f988,f991,f1055,f1070,f1086,f1112,f1125,f1131,f1173,f1260,f1261,f1262,f1263,f1300,f1402,f1482,f1431,f1439,f1440,f1441,f1443,f1444,f1445,f1447,f1448,f1449,f1450,f1451,f1452,f1494,f1455,f1529,f1564,f1583,f1658,f1655,f1685,f1805,f1814,f1807,f1852,f1861,f1854,f1897,f1969,f1924,f1925,f1970,f1929,f2020,f2021,f2022,f2023,f2024,f2025,f1985,f2026,f2027,f2028,f2029,f2030,f2031,f2032,f2033,f2034,f2035,f2036,f2037,f2038,f2000,f2001,f2039,f2042,f2045,f2046,f2047,f2048,f2049,f2050,f2051,f2052,f2059,f2057,f2081,f2104,f2126,f2136,f2137,f2138,f2127,f2144,f2169,f2212,f2213,f2201,f2217,f2202,f2223,f2234,f2245,f2293,f2294,f2296,f2297,f2298,f2299,f2300,f2301,f2302,f2303,f2357,f2446,f2447,f2471,f2472,f2493,f2505,f2527,f2624,f2648,f2687,f2688,f2674,f2689,f2697,f2746,f2770,f2796,f2819,f2823,f2848,f2873,f2874,f2901,f2902,f2928,f2991,f2997,f2999,f3027,f3028,f3085,f3086,f3111,f3112,f3113,f3127,f3131,f3133,f3114,f3150,f3161,f3167,f3166,f3192,f3193,f3252,f3294,f3298,f3299,f3279,f3300,f3308,f442,f3616])).
fof(f3615,plain,(
  $false | ($spl1 | $spl8 | $spl47)),
  inference(subsumption_resolution,[],[f2705,f442])).
fof(f2705,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl1 | $spl47)),
  inference(superposition,[],[f2624,f2369])).
fof(f3614,plain,(
  $false | ($spl1 | $spl19 | $spl47)),
  inference(subsumption_resolution,[],[f2705,f3295])).
fof(f3295,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl19),
  inference(backward_demodulation,[],[f3294,f905])).
fof(f905,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl19),
  inference(unit_resulting_resolution,[],[f200,f784,f285])).
fof(f784,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl19),
  inference(unit_resulting_resolution,[],[f781,f232])).
fof(f781,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl19),
  inference(unit_resulting_resolution,[],[f741,f229])).
fof(f3588,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3543,f3450])).
fof(f3450,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl19),
  inference(subsumption_resolution,[],[f3380,f196])).
fof(f3380,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl19),
  inference(backward_demodulation,[],[f3349,f232])).
fof(f3349,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl19),
  inference(subsumption_resolution,[],[f3313,f431])).
fof(f3313,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9) | p(s(bool,X9))) ) | $spl19),
  inference(backward_demodulation,[],[f3295,f477])).
fof(f3543,plain,(
  ( ! [X50] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50)))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f2991])).
fof(f3587,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3542,f3572])).
fof(f3572,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl19),
  inference(subsumption_resolution,[],[f3475,f3450])).
fof(f3475,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f289])).
fof(f3542,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f2303])).
fof(f3586,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3541,f3450])).
fof(f3541,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f2298])).
fof(f3585,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3540,f3572])).
fof(f3540,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f3450,f988])).
fof(f3584,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3533,f3450])).
fof(f3533,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f3028])).
fof(f3583,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3528,f3572])).
fof(f3528,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2300])).
fof(f3582,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3519,f3450])).
fof(f3519,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f3027])).
fof(f3581,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3518,f3572])).
fof(f3518,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f3450,f1070])).
fof(f3580,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3515,f3450])).
fof(f3515,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(backward_demodulation,[],[f3450,f1482])).
fof(f3579,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3514,f3450])).
fof(f3514,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f1431])).
fof(f3578,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3511,f3572])).
fof(f3511,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2302])).
fof(f3577,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3507,f3572])).
fof(f3507,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2169])).
fof(f3576,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3504,f3450])).
fof(f3504,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2999])).
fof(f3575,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3503,f3450])).
fof(f3503,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl19),
  inference(backward_demodulation,[],[f3450,f2848])).
fof(f3574,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3502,f3450])).
fof(f3502,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2823])).
fof(f3573,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3499,f3450])).
fof(f3499,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(backward_demodulation,[],[f3450,f2176])).
fof(f2176,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl19),
  inference(unit_resulting_resolution,[],[f1427,f289])).
fof(f1427,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl19),
  inference(unit_resulting_resolution,[],[f741,f289])).
fof(f3560,plain,(
  $false | ($spl19 | $spl47)),
  inference(subsumption_resolution,[],[f3461,f3311])).
fof(f3311,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl19),
  inference(backward_demodulation,[],[f3295,f210])).
fof(f3461,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl47)),
  inference(backward_demodulation,[],[f3450,f2624])).
fof(f3556,plain,(
  $false | ($spl19 | $spl43)),
  inference(trivial_inequality_removal,[],[f3456])).
fof(f3456,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl43)),
  inference(backward_demodulation,[],[f3450,f1426])).
fof(f3555,plain,(
  $false | ($spl19 | $spl43)),
  inference(trivial_inequality_removal,[],[f3457])).
fof(f3457,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl19 | $spl43)),
  inference(backward_demodulation,[],[f3450,f1501])).
fof(f3554,plain,(
  $false | ($spl19 | $spl43)),
  inference(trivial_inequality_removal,[],[f3458])).
fof(f3458,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl19 | $spl43)),
  inference(backward_demodulation,[],[f3450,f1654])).
fof(f3553,plain,(
  $false | ($spl19 | $spl43)),
  inference(trivial_inequality_removal,[],[f3459])).
fof(f3459,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl19 | $spl43)),
  inference(backward_demodulation,[],[f3450,f1832])).
fof(f3449,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3375,f196])).
fof(f3375,plain,(
  ~p(s(bool,'T_0')) | $spl19),
  inference(backward_demodulation,[],[f3349,f3192])).
fof(f3448,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3374,f196])).
fof(f3374,plain,(
  ~p(s(bool,'T_0')) | $spl19),
  inference(backward_demodulation,[],[f3349,f3193])).
fof(f3348,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f3309,f196])).
fof(f3309,plain,(
  ~p(s(bool,'T_0')) | $spl19),
  inference(backward_demodulation,[],[f3295,f200])).
fof(f3296,plain,(
  $false | ($spl11 | $spl19)),
  inference(subsumption_resolution,[],[f3295,f444])).
fof(f2622,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl44),
  inference(cnf_transformation,[],[f2622_D])).
fof(f2622_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2624,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl47),
  inference(cnf_transformation,[],[f2624_D])).
fof(f2624_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f2590,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1),
  inference(equality_factoring,[],[f2394])).
fof(f1388,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl40),
  inference(cnf_transformation,[],[f1388_D])).
fof(f1388_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1390,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl43),
  inference(cnf_transformation,[],[f1390_D])).
fof(f1390_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f1386,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(superposition,[],[f252,f306])).
fof(f1133,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl36),
  inference(cnf_transformation,[],[f1133_D])).
fof(f1133_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1135,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl38),
  inference(cnf_transformation,[],[f1135_D])).
fof(f1135_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1131,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f224,f807])).
fof(f1125,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f807,f224])).
fof(f751,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl32),
  inference(cnf_transformation,[],[f751_D])).
fof(f751_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f753,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl35),
  inference(cnf_transformation,[],[f753_D])).
fof(f753_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f737,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f228,f199])).
fof(f749,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(cnf_transformation,[],[f749_D])).
fof(f749_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f741,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(cnf_transformation,[],[f741_D])).
fof(f741_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f736,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f228,f198])).
fof(f747,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | $spl28),
  inference(cnf_transformation,[],[f747_D])).
fof(f747_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f735,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) )),
  inference(superposition,[],[f228,f212])).
fof(f746,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f746_D])).
fof(f746_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f734,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f228,f205])).
fof(f743,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f743_D])).
fof(f743_D,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f745,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl25),
  inference(cnf_transformation,[],[f745_D])).
fof(f745_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f733,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f228,f309])).
fof(f742,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) | $spl20),
  inference(cnf_transformation,[],[f742_D])).
fof(f742_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f731,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) )),
  inference(superposition,[],[f228,f207])).
fof(f739,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) | $spl16),
  inference(cnf_transformation,[],[f739_D])).
fof(f739_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f730,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(superposition,[],[f228,f204])).
fof(f516,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f484,f196])).
fof(f484,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f474,f200])).
fof(f475,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl14),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f473,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f456,f431])).
fof(f456,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f285,f224])).
fof(f442,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f444,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f439,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f224])).
fof(f302,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl0),
  inference(cnf_transformation,[],[f302_D])).
fof(f302_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f308,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | $spl6),
  inference(cnf_transformation,[],[f308_D])).
fof(f308_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f193,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f153])).
fof(f153,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f152])).
fof(f152,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X3,X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f145])).
fof(f145,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <~> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X3,X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|9','thm.quantHeuristics.LIST_LENGTH_|49||split|9')).
fof(f306,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(cnf_transformation,[],[f306_D])).
fof(f306_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f194,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(cnf_transformation,[],[f154])).
fof(f303,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl1),
  inference(cnf_transformation,[],[f303_D])).
fof(f303_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f304,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))))))) ) | $spl2),
  inference(cnf_transformation,[],[f304_D])).
fof(f304_D,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f195,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f154])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 662
% Passive clauses: 4414
% Generated clauses: 78533
% Final active clauses: 220
% Final passive clauses: 1756
% Input formulas: 69
% Initial clauses: 106
% 
% Duplicate literals: 1111
% Trivial inequalities: 243
% Fw subsumption resolutions: 1401
% Fw demodulations: 21290
% Bw demodulations: 1425
% Condensations: 479
% Global subsumptions: 196
% 
% Simple tautologies: 389
% Equational tautologies: 531
% Forward subsumptions: 47867
% Fw demodulations to eq. taut.: 272
% Bw demodulations to eq. taut.: 111
% 
% Unit resulting resolution: 6745
% Factoring: 1
% Forward superposition: 27311
% Backward superposition: 15800
% Self superposition: 180
% Equality factoring: 88
% Equality resolution: 24
% 
% Split clauses: 58
% Split components: 116
% SAT solver clauses: 5010
% SAT solver unit clauses: 399
% SAT solver binary clauses: 1171
% 
% Sat splits: 58
% Sat splitting refutations: 282
% 
% Memory used [KB]: 53474
% Time elapsed: 2.243 s
% ------------------------------
% ------------------------------
% Success in time 3.57 s
