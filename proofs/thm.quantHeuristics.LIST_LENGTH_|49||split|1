Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (85497)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 374
% Passive clauses: 5884
% Generated clauses: 33951
% Final active clauses: 275
% Final passive clauses: 4994
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 743
% Trivial inequalities: 522
% Fw subsumption resolutions: 1943
% Fw demodulations: 9682
% Bw demodulations: 77
% 
% Simple tautologies: 246
% Equational tautologies: 51
% Forward subsumptions: 14724
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 14
% 
% Binary resolution: 173
% Factoring: 1
% Forward superposition: 11177
% Backward superposition: 9118
% Self superposition: 168
% Equality factoring: 106
% Equality resolution: 37
% 
% Split clauses: 245
% Split components: 490
% SAT solver clauses: 551
% SAT solver unit clauses: 7
% SAT solver binary clauses: 62
% 
% Sat splits: 245
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 551
% TWLsolver calls for satisfiability: 81
% 
% Memory used [KB]: 22515
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (85520)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 248
% Passive clauses: 2398
% Generated clauses: 17649
% Final active clauses: 196
% Final passive clauses: 1651
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 118
% Trivial inequalities: 13
% Fw subsumption resolutions: 652
% Fw demodulations: 4790
% Bw demodulations: 534
% Condensations: 43
% 
% Simple tautologies: 26
% Equational tautologies: 18
% Forward subsumptions: 7012
% Fw demodulations to eq. taut.: 3
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 273
% Factoring: 1
% Forward superposition: 5175
% Backward superposition: 3345
% Self superposition: 73
% Equality factoring: 26
% Equality resolution: 12
% 
% Split clauses: 46
% Split components: 92
% SAT solver clauses: 2650
% SAT solver unit clauses: 140
% SAT solver binary clauses: 56
% 
% Sat splits: 46
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 2650
% TWLsolver calls for satisfiability: 647
% 
% Memory used [KB]: 19317
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f10014,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f203,f310,f309,f202,f312,f308,f431,f436,f434,f456,f458,f457,f502,f575,f758,f767,f759,f770,f761,f771,f762,f772,f763,f775,f773,f764,f769,f777,f765,f781,f779,f859,f1888,f1913,f1911,f2297,f2302,f2300,f2687,f2724,f2722,f2905,f2943,f2909,f2907,f2886,f2964,f2962,f2974,f2976,f2979,f2980,f2984,f2985,f3014,f2986,f3017,f2988,f3019,f2989,f3020,f2990,f3021,f2991,f3022,f2992,f3023,f2993,f3013,f3012,f3024,f3015,f2997,f3026,f3000,f3029,f3002,f3031,f3003,f3032,f3004,f3033,f3005,f3034,f3006,f3035,f3007,f3036,f3008,f3037,f3009,f3038,f3010,f3016,f3039,f4371,f4375,f4380,f4383,f4384,f4385,f4386,f4387,f4388,f4389,f4390,f4391,f4392,f4393,f4394,f4395,f4396,f4397,f4398,f4399,f4400,f4401,f4402,f4403,f4404,f4406,f5129,f5188,f5186,f5375,f5379,f5380,f5382,f5384,f5386,f5399,f5400,f5377,f9018,f9024,f9027,f9030,f9033,f9036,f9040,f9043,f9046,f9049,f9052,f9055,f9058,f9066,f9875,f9976,f9979,f9983,f9986,f9987])).
fof(f9987,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9870,f9067])).
fof(f9067,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl1 | $spl28)),
  inference(forward_demodulation,[],[f309,f875])).
fof(f875,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f874,f207])).
fof(f207,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f39])).
fof(f39,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|13')).
fof(f874,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl28),
  inference(backward_demodulation,[],[f777,f206])).
fof(f206,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f41])).
fof(f41,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.prim_rec.PRE|split|0')).
fof(f9870,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f2327,f312,f259])).
fof(f259,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK4(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X2,X1,X0)),s('type.list.list'(X0),sK4(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> ? [X21,X22] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_CONS')).
fof(f2327,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2322,f238])).
fof(f238,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X7)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.APPEND|split|0')).
fof(f2322,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f238,f893])).
fof(f893,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f240])).
fof(f240,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_NIL_SYM')).
fof(f9986,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9985,f9067])).
fof(f9985,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9984,f2327])).
fof(f9984,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9871,f876])).
fof(f876,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f210])).
fof(f210,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.ADD|split|0')).
fof(f9871,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f876,f312,f259])).
fof(f9983,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9982,f9067])).
fof(f9982,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9981,f2327])).
fof(f9981,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9980,f876])).
fof(f9980,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9872,f289])).
fof(f289,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.ADD_SYM')).
fof(f9872,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f877,f312,f259])).
fof(f877,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f211])).
fof(f211,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|1')).
fof(f9979,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9978,f9067])).
fof(f9978,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9977,f2327])).
fof(f9977,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl4 | $spl28)),
  inference(forward_demodulation,[],[f9873,f886])).
fof(f886,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f220])).
fof(f220,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|7')).
fof(f9873,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f886,f312,f259])).
fof(f9976,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(subsumption_resolution,[],[f9874,f2327])).
fof(f9874,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f9067,f312,f259])).
fof(f9875,plain,(
  $false | ($spl1 | $spl4 | $spl28)),
  inference(unit_resulting_resolution,[],[f2327,f9067,f312,f259])).
fof(f9066,plain,(
  $false | ($spl4 | $spl28 | $spl38 | $spl45)),
  inference(subsumption_resolution,[],[f9065,f878])).
fof(f878,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f212])).
fof(f212,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X10] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|26')).
fof(f9065,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl4 | $spl28 | $spl38 | $spl45)),
  inference(forward_demodulation,[],[f9064,f2327])).
fof(f9064,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl4 | $spl38 | $spl45)),
  inference(backward_demodulation,[],[f9063,f2724])).
fof(f9063,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | ($spl4 | $spl38)),
  inference(forward_demodulation,[],[f312,f2300])).
fof(f9058,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9057,f3040])).
fof(f3040,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f308,f875])).
fof(f9057,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9056,f914])).
fof(f914,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(backward_demodulation,[],[f874,f777])).
fof(f9056,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9000,f310])).
fof(f9000,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6008])).
fof(f6008,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5406,f892])).
fof(f892,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f239])).
fof(f239,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f5406,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5363,f914])).
fof(f5363,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5359])).
fof(f5359,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f914])).
fof(f4512,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4(X2,sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f257,f3040])).
fof(f257,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK4(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f174])).
fof(f258,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK3(X2,X1,X0)),s('type.list.list'(X0),sK4(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f9055,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9054,f3040])).
fof(f9054,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9053,f888])).
fof(f888,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f227])).
fof(f227,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|9')).
fof(f9053,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8999,f310])).
fof(f8999,plain,(
  ( ! [X6] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8704])).
fof(f8704,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5402,f892])).
fof(f5402,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5365,f888])).
fof(f5365,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5356])).
fof(f5356,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f888])).
fof(f9052,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9051,f3040])).
fof(f9051,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9050,f887])).
fof(f887,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f223])).
fof(f223,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|10')).
fof(f9050,plain,(
  ( ! [X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8998,f310])).
fof(f8998,plain,(
  ( ! [X5] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5)))))))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8299])).
fof(f8299,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5401,f892])).
fof(f5401,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5366,f887])).
fof(f5366,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5355])).
fof(f5355,plain,(
  ( ! [X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f887])).
fof(f9049,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9048,f3040])).
fof(f9048,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9047,f1935])).
fof(f1935,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f888,f875])).
fof(f9047,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8997,f310])).
fof(f8997,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f8097])).
fof(f8097,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5403,f892])).
fof(f5403,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5364,f1935])).
fof(f5364,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5357])).
fof(f5357,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f1935])).
fof(f9046,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9045,f3040])).
fof(f9045,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9044,f884])).
fof(f884,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f218])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|4')).
fof(f9044,plain,(
  ( ! [X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8996,f310])).
fof(f8996,plain,(
  ( ! [X4] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f7714])).
fof(f7714,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5396,f892])).
fof(f5396,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5367,f884])).
fof(f5367,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5352])).
fof(f5352,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f884])).
fof(f9043,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9042,f3040])).
fof(f9042,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9041,f883])).
fof(f883,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f217])).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.MULT|split|0')).
fof(f9041,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8995,f310])).
fof(f8995,plain,(
  ( ! [X3] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f7357])).
fof(f7357,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5395,f892])).
fof(f5395,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5368,f883])).
fof(f5368,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5351])).
fof(f5351,plain,(
  ( ! [X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f883])).
fof(f9040,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(trivial_inequality_removal,[],[f9039])).
fof(f9039,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9038,f874])).
fof(f9038,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9037,f3040])).
fof(f9037,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8994,f310])).
fof(f8994,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.num.|48|_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f5548])).
fof(f5548,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5394,f892])).
fof(f5394,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5369,f874])).
fof(f5369,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5350])).
fof(f5350,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.num.|48|_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f874])).
fof(f9036,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9035,f3040])).
fof(f9035,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9034,f885])).
fof(f885,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f219])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X10] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|6')).
fof(f9034,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8993,f310])).
fof(f8993,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f7000])).
fof(f7000,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5392,f892])).
fof(f5392,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5370,f885])).
fof(f5370,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5348])).
fof(f5348,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f885])).
fof(f9033,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9032,f3040])).
fof(f9032,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9031,f880])).
fof(f880,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f214])).
fof(f214,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X11] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f9031,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8992,f310])).
fof(f8992,plain,(
  ( ! [X1] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6669])).
fof(f6669,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5391,f892])).
fof(f5391,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5371,f880])).
fof(f5371,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5347])).
fof(f5347,plain,(
  ( ! [X8] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f880])).
fof(f9030,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9029,f3040])).
fof(f9029,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9028,f2327])).
fof(f9028,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8991,f310])).
fof(f8991,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f6191])).
fof(f6191,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))) ) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5383,f892])).
fof(f5383,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5372,f2327])).
fof(f5372,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5340])).
fof(f5340,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f2327])).
fof(f9027,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9026,f3040])).
fof(f9026,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(forward_demodulation,[],[f9025,f916])).
fof(f916,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(backward_demodulation,[],[f874,f797])).
fof(f797,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f784,f220])).
fof(f784,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f220,f233])).
fof(f233,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|18')).
fof(f9025,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8990,f310])).
fof(f8990,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f5825])).
fof(f5825,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f5374,f892])).
fof(f5374,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5373,f916])).
fof(f5373,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f5337])).
fof(f5337,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f916])).
fof(f9024,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9023,f3040])).
fof(f9023,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f8989,f310])).
fof(f8989,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f258,f4535])).
fof(f4535,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f4486,f892])).
fof(f4486,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3040,f257])).
fof(f9018,plain,(
  $false | ($spl0 | $spl2 | $spl28)),
  inference(subsumption_resolution,[],[f9017,f310])).
fof(f9017,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f8984,f4535])).
fof(f8984,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3('const.arithmetic.ZERO_0',sK1,sK0)),s('type.list.list'(sK0),sK4('const.arithmetic.ZERO_0',sK1,sK0)))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3040,f258])).
fof(f5377,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl99),
  inference(cnf_transformation,[],[f5377_D])).
fof(f5377_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl99),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl99])])).
fof(f5400,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | $spl106),
  inference(cnf_transformation,[],[f5400_D])).
fof(f5400_D,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f5399,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5354,f896])).
fof(f896,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f313])).
fof(f313,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f224,f207])).
fof(f224,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|11')).
fof(f5354,plain,(
  ( ! [X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0))))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f896])).
fof(f5386,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | $spl104),
  inference(cnf_transformation,[],[f5386_D])).
fof(f5386_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f5384,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5341,f3040])).
fof(f5341,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f3040])).
fof(f5382,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | $spl102),
  inference(cnf_transformation,[],[f5382_D])).
fof(f5382_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f5380,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5339,f1398])).
fof(f1398,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f226,f916])).
fof(f226,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|14')).
fof(f5339,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f1398])).
fof(f5379,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | $spl100),
  inference(cnf_transformation,[],[f5379_D])).
fof(f5379_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f5375,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f5338,f875])).
fof(f5338,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK1,sK0)))) | ($spl0 | $spl28)),
  inference(superposition,[],[f4512,f875])).
fof(f5186,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl94),
  inference(cnf_transformation,[],[f5186_D])).
fof(f5186_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f5188,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl97),
  inference(cnf_transformation,[],[f5188_D])).
fof(f5188_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f5129,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl0 | $spl28)),
  inference(equality_factoring,[],[f4360])).
fof(f4360,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f4348,f208])).
fof(f208,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1',aHL_FALSITY)).
fof(f4348,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f455,f4317])).
fof(f4317,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f208,f4296,f301])).
fof(f301,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.bool.IMP_ANTISYM_AX')).
fof(f4296,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4295,f3692])).
fof(f3692,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f3651,f3650])).
fof(f3650,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f329,f875])).
fof(f329,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f293,f290])).
fof(f290,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.GREATER_DEF')).
fof(f293,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X10,X9] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X9))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|22')).
fof(f3651,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(superposition,[],[f329,f1398])).
fof(f4295,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4284,f3040])).
fof(f4284,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3129,f3695])).
fof(f3695,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f3694,f898])).
fof(f898,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f315])).
fof(f315,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f251,f207])).
fof(f251,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f3694,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3676,f3675])).
fof(f3675,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f329,f875])).
fof(f3676,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f329,f1398])).
fof(f3129,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | ($spl0 | $spl28)),
  inference(unit_resulting_resolution,[],[f3127,f893])).
fof(f3127,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(subsumption_resolution,[],[f3126,f208])).
fof(f3126,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3125,f879])).
fof(f879,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f213])).
fof(f213,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X10] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|23')).
fof(f3125,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3112,f328])).
fof(f328,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f292,f290])).
fof(f292,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.LESS_EQ')).
fof(f3112,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(superposition,[],[f918,f3040])).
fof(f918,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl28),
  inference(forward_demodulation,[],[f904,f874])).
fof(f904,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f325])).
fof(f325,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f291,f237])).
fof(f237,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X10] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|30')).
fof(f291,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.arithmetic.GREATER_EQ')).
fof(f455,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f442,f208])).
fof(f442,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f301,f231])).
fof(f231,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1',aHL_BOOL_CASES)).
fof(f4406,plain,(
  $false | ($spl9 | $spl48 | $spl52)),
  inference(subsumption_resolution,[],[f4405,f436])).
fof(f4405,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl48 | $spl52)),
  inference(backward_demodulation,[],[f2964,f2909])).
fof(f4404,plain,(
  $false | ($spl28 | $spl30)),
  inference(subsumption_resolution,[],[f779,f1316])).
fof(f1316,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(unit_resulting_resolution,[],[f1296,f891])).
fof(f891,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f233])).
fof(f1296,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(subsumption_resolution,[],[f1295,f208])).
fof(f1295,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(forward_demodulation,[],[f1294,f879])).
fof(f1294,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(forward_demodulation,[],[f1258,f328])).
fof(f1258,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f918,f875])).
fof(f4403,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(subsumption_resolution,[],[f2301,f3127])).
fof(f2301,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl40),
  inference(cnf_transformation,[],[f2301_D])).
fof(f2301_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f4402,plain,(
  $false | ($spl0 | $spl28 | $spl40 | $spl51)),
  inference(global_subsumption,[],[f2961,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559,f3558,f3577,f2825])).
fof(f2825,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f902,f875])).
fof(f3577,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3557,f828])).
fof(f3557,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f295,f1841])).
fof(f3558,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f295,f231])).
fof(f3559,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f231,f295])).
fof(f3584,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f3566,f828])).
fof(f3566,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(superposition,[],[f1841,f295])).
fof(f3699,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3679,f828])).
fof(f3679,plain,(
  ( ! [X6,X7] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f329,f1841])).
fof(f3680,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f329,f231])).
fof(f3682,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f231,f329])).
fof(f3712,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X21),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))) )),
  inference(forward_demodulation,[],[f3689,f828])).
fof(f3689,plain,(
  ( ! [X21,X20] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X21),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))) )),
  inference(superposition,[],[f1841,f329])).
fof(f4067,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(forward_demodulation,[],[f4046,f828])).
fof(f4046,plain,(
  ( ! [X8,X9] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f330,f1841])).
fof(f4047,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X10),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f330,f231])).
fof(f4048,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f231,f330])).
fof(f4074,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(forward_demodulation,[],[f4055,f828])).
fof(f4055,plain,(
  ( ! [X19,X18] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X18),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))))) )),
  inference(superposition,[],[f1841,f330])).
fof(f4369,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f4368,f2327])).
fof(f4368,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f4363,f238])).
fof(f4363,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0'))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f238,f3696])).
fof(f4381,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f4366,f2327])).
fof(f4366,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl28),
  inference(equality_resolution,[],[f3696])).
fof(f4361,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f4355,f4317])).
fof(f4355,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4,bool))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f270,f4317])).
fof(f4079,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27))))))) )),
  inference(forward_demodulation,[],[f4059,f330])).
fof(f4059,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'const.arithmetic.>_2'(s('type.num.num',X26),s('type.num.num',X27)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))),X28,bool))) )),
  inference(superposition,[],[f270,f330])).
fof(f4041,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f330,f875])).
fof(f4016,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f330,f875])).
fof(f3716,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f3715,f330])).
fof(f3715,plain,(
  ( ! [X26,X24,X25] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f3691,f290])).
fof(f3691,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num',X24)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26,bool))) )),
  inference(superposition,[],[f270,f329])).
fof(f3696,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) ) | $spl28),
  inference(backward_demodulation,[],[f3694,f897])).
fof(f3587,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23))))))) )),
  inference(forward_demodulation,[],[f3568,f295])).
fof(f3568,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool))) )),
  inference(superposition,[],[f270,f295])).
fof(f3554,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f295,f875])).
fof(f3353,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f3352,f295])).
fof(f3352,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f3332,f291])).
fof(f3332,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24,bool))) )),
  inference(superposition,[],[f270,f294])).
fof(f3338,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3321,f828])).
fof(f3321,plain,(
  ( ! [X4,X5] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f294,f1841])).
fof(f3337,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(backward_demodulation,[],[f3336,f3318])).
fof(f3336,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3335,f328])).
fof(f3335,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) ) | $spl28),
  inference(forward_demodulation,[],[f3319,f3318])).
fof(f3319,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f294,f1398])).
fof(f3318,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f294,f875])).
fof(f3333,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f3294,f3293])).
fof(f3294,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(superposition,[],[f294,f1398])).
fof(f3293,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl28),
  inference(superposition,[],[f294,f875])).
fof(f3292,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(superposition,[],[f294,f916])).
fof(f3128,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),X12,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3118,f3040])).
fof(f3118,plain,(
  ( ! [X12] : (~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)),X12,'type.num.num'))) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f270,f3040])).
fof(f897,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f314])).
fof(f286,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0))))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19])],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X6,X7] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : ! [X10,X9,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X19,X20] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LENGTH_LE_PLUS')).
fof(f288,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f199])).
fof(f285,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f287,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f1519,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | $spl28),
  inference(superposition,[],[f918,f289])).
fof(f1518,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | $spl28),
  inference(superposition,[],[f917,f289])).
fof(f271,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK11(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X16,X18] : (? [X14] : (s(X6,X14) = s(X6,X18) & p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14))))) <=> p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X18)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.bool.UNWIND_THM2')).
fof(f272,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X16,X17] : (? [X14] : (p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))) <=> (? [X14] : p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f274,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f190])).
fof(f2505,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22))))))) )),
  inference(forward_demodulation,[],[f2494,f328])).
fof(f2494,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool))) )),
  inference(superposition,[],[f270,f328])).
fof(f2382,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2344,f290])).
fof(f2344,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) )),
  inference(superposition,[],[f270,f290])).
fof(f2859,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2858,f901])).
fof(f2858,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2841,f290])).
fof(f2841,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.>_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f902])).
fof(f2770,plain,(
  ( ! [X14,X13] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2759,f901])).
fof(f2759,plain,(
  ( ! [X14,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'const.arithmetic.>_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14,bool))) ) | $spl28),
  inference(superposition,[],[f270,f901])).
fof(f2387,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2348,f291])).
fof(f2348,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) )),
  inference(superposition,[],[f270,f291])).
fof(f2620,plain,(
  ( ! [X14,X15] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2609,f889])).
fof(f2609,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f889])).
fof(f2390,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))))))) )),
  inference(forward_demodulation,[],[f2351,f222])).
fof(f2351,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) )),
  inference(superposition,[],[f270,f222])).
fof(f2391,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f2352,f221])).
fof(f2352,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) )),
  inference(superposition,[],[f270,f221])).
fof(f2400,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))))))) )),
  inference(forward_demodulation,[],[f2363,f226])).
fof(f2363,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun('type.num.num',bool),X47),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) )),
  inference(superposition,[],[f270,f226])).
fof(f2412,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X68),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))))))) )),
  inference(forward_demodulation,[],[f2375,f225])).
fof(f2375,plain,(
  ( ! [X68,X67] : (~p(s(bool,happ(s(fun('type.num.num',bool),X68),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) )),
  inference(superposition,[],[f270,f225])).
fof(f2361,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X42),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) )),
  inference(superposition,[],[f270,f289])).
fof(f2407,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X60),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2370,f896])).
fof(f2370,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun('type.num.num',bool),X60),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f896])).
fof(f2397,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2358,f1398])).
fof(f2358,plain,(
  ( ! [X35] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f1398])).
fof(f2396,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2357,f875])).
fof(f2357,plain,(
  ( ! [X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f875])).
fof(f2394,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30))) | ~p(s(bool,happ(s(fun('type.list.list'(X30),bool),X32),s('type.list.list'(X30),X31))))) )),
  inference(forward_demodulation,[],[f2355,f238])).
fof(f2355,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun('type.list.list'(X30),bool),X32),s('type.list.list'(X30),X31)))) | s('type.list.list'(X30),'const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31))) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) )),
  inference(superposition,[],[f270,f238])).
fof(f2384,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2346,f1458])).
fof(f2346,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X15,bool))) ) | $spl28),
  inference(superposition,[],[f270,f1458])).
fof(f260,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK5(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X6] : ! [X10,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X19,X20] : (s('type.num.num',X10) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f261,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f262,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f177])).
fof(f895,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f250])).
fof(f894,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f249])).
fof(f2379,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2342,f879])).
fof(f2342,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,sK11('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7,bool))) ) | $spl28),
  inference(superposition,[],[f270,f879])).
fof(f2381,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2380,f879])).
fof(f2380,plain,(
  ( ! [X8,X9] : (s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2343,f290])).
fof(f2343,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')),X9,bool))) ) | $spl28),
  inference(superposition,[],[f270,f882])).
fof(f2383,plain,(
  ( ! [X14,X13] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)),X14,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2345,f878])).
fof(f2345,plain,(
  ( ! [X14,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))) = s(bool,sK11('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)),X14,bool))) ) | $spl28),
  inference(superposition,[],[f270,f878])).
fof(f2386,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2385,f878])).
fof(f2385,plain,(
  ( ! [X17,X16] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X16))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2347,f291])).
fof(f2347,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')),X17,bool))) ) | $spl28),
  inference(superposition,[],[f270,f881])).
fof(f2768,plain,(
  ( ! [X11] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2757,f828])).
fof(f2757,plain,(
  ( ! [X11] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f1841,f901])).
fof(f2856,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) ) | $spl28),
  inference(forward_demodulation,[],[f2839,f828])).
fof(f2839,plain,(
  ( ! [X12] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) ) | $spl28),
  inference(superposition,[],[f1841,f902])).
fof(f2746,plain,(
  s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(superposition,[],[f901,f875])).
fof(f2600,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl28),
  inference(superposition,[],[f917,f889])).
fof(f2599,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(superposition,[],[f918,f889])).
fof(f2612,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2597,f828])).
fof(f2597,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f889,f1841])).
fof(f2574,plain,(
  ( ! [X52,X53] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0')),X53,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2562,f2327])).
fof(f2562,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0'))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0')),X53,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f2327])).
fof(f2567,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2533,f916])).
fof(f2533,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))) ) | $spl28),
  inference(superposition,[],[f305,f2327])).
fof(f2495,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f2482,f828])).
fof(f2482,plain,(
  ( ! [X2,X3] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f328,f1841])).
fof(f2461,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f328,f226])).
fof(f2411,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X66,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2374,f914])).
fof(f2374,plain,(
  ( ! [X66] : (~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X66,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f914])).
fof(f2410,plain,(
  ( ! [X65] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X65,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X65),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2373,f1935])).
fof(f2373,plain,(
  ( ! [X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),X65),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X65,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f1935])).
fof(f2409,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63)))))),X64,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X64),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2372,f888])).
fof(f2372,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun('type.num.num',bool),X64),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63))))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X63)))))),X64,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f888])).
fof(f2408,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61)))))),X62,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2371,f887])).
fof(f2371,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun('type.num.num',bool),X62),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61))))))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X61)))))),X62,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f887])).
fof(f2406,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0')),X58,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X58),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2369,f884])).
fof(f2369,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun('type.num.num',bool),X58),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0')),X58,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f884])).
fof(f2405,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55)),X56,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X56),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2368,f883])).
fof(f2368,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun('type.num.num',bool),X56),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))) = s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55)),X56,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f883])).
fof(f2404,plain,(
  ( ! [X54] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.num.|48|_0',X54,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2367,f874])).
fof(f2367,plain,(
  ( ! [X54] : (~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK11('const.num.|48|_0',X54,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f874])).
fof(f2403,plain,(
  ( ! [X52,X53] : (s('type.num.num',X52) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0')),X53,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num',X52))))) ) | $spl28),
  inference(forward_demodulation,[],[f2366,f886])).
fof(f2366,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun('type.num.num',bool),X53),s('type.num.num',X52)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0')),X53,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f886])).
fof(f2402,plain,(
  ( ! [X50,X51] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50)),X51,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2365,f885])).
fof(f2365,plain,(
  ( ! [X50,X51] : (~p(s(bool,happ(s(fun('type.num.num',bool),X51),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X50)),X51,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f885])).
fof(f2401,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48)),X49,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X49),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2364,f880])).
fof(f2364,plain,(
  ( ! [X48,X49] : (~p(s(bool,happ(s(fun('type.num.num',bool),X49),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48))) = s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X48),s('type.num.num',X48)),X49,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f880])).
fof(f2399,plain,(
  ( ! [X39,X38] : (s('type.num.num',X38) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0')),X39,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X38))))) ) | $spl28),
  inference(forward_demodulation,[],[f2360,f877])).
fof(f2360,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X38)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.ZERO_0')),X39,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f877])).
fof(f2398,plain,(
  ( ! [X37,X36] : (s('type.num.num',X36) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',X36))))) ) | $spl28),
  inference(forward_demodulation,[],[f2359,f876])).
fof(f2359,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',X36)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)),X37,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f876])).
fof(f2395,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f2356,f916])).
fof(f2356,plain,(
  ( ! [X33] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num'))) ) | $spl28),
  inference(superposition,[],[f270,f916])).
fof(f2392,plain,(
  ( ! [X28] : (s(bool,'T_0') = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X28,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2353,f829])).
fof(f2353,plain,(
  ( ! [X28] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X28,bool))) )),
  inference(superposition,[],[f270,f829])).
fof(f2389,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2350,f828])).
fof(f2350,plain,(
  ( ! [X23] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X23,bool))) )),
  inference(superposition,[],[f270,f828])).
fof(f2388,plain,(
  ( ! [X21,X22] : (s(bool,'F_0') = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X22,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(forward_demodulation,[],[f2349,f828])).
fof(f2349,plain,(
  ( ! [X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X22,bool)) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f270,f1841])).
fof(f2341,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X4)))) | s(bool,'F_0') = s(bool,sK11('F_0',X5,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f270,f231])).
fof(f2378,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X0) = s(bool,sK11(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2339,f828])).
fof(f2339,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,X0) = s(bool,sK11(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f270,f1841])).
fof(f2298,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) ) | $spl28),
  inference(superposition,[],[f892,f238])).
fof(f2213,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f306,f289])).
fof(f2204,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f289,f306])).
fof(f2077,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f1398])).
fof(f2076,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f875])).
fof(f2145,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2073,f916])).
fof(f2073,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f914])).
fof(f2144,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(forward_demodulation,[],[f2072,f916])).
fof(f2072,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f305,f1935])).
fof(f2143,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2071,f916])).
fof(f2071,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30)))))))) ) | $spl28),
  inference(superposition,[],[f305,f888])).
fof(f2142,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f2070,f916])).
fof(f2070,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))))))) ) | $spl28),
  inference(superposition,[],[f305,f887])).
fof(f2141,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2069,f1398])).
fof(f2069,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f896])).
fof(f2140,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2068,f916])).
fof(f2068,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f884])).
fof(f2139,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) ) | $spl28),
  inference(forward_demodulation,[],[f2067,f916])).
fof(f2067,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) ) | $spl28),
  inference(superposition,[],[f305,f883])).
fof(f2065,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f886])).
fof(f2136,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) ) | $spl28),
  inference(forward_demodulation,[],[f2064,f916])).
fof(f2064,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) ) | $spl28),
  inference(superposition,[],[f305,f885])).
fof(f2135,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X15)))) ) | $spl28),
  inference(forward_demodulation,[],[f2063,f916])).
fof(f2063,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X15)))) ) | $spl28),
  inference(superposition,[],[f305,f880])).
fof(f2060,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))) )),
  inference(superposition,[],[f305,f289])).
fof(f2059,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f877])).
fof(f2058,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X3)))) ) | $spl28),
  inference(superposition,[],[f305,f876])).
fof(f2057,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(superposition,[],[f305,f1398])).
fof(f2132,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f2055,f916])).
fof(f2055,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f305,f916])).
fof(f1841,plain,(
  ( ! [X19] : (s(bool,X19) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f1832,f208])).
fof(f1832,plain,(
  ( ! [X19] : (p(s(bool,'F_0')) | s(bool,X19) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f455,f828])).
fof(f1839,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(subsumption_resolution,[],[f1829,f208])).
fof(f1829,plain,(
  ( ! [X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl28),
  inference(superposition,[],[f455,f1458])).
fof(f1837,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(subsumption_resolution,[],[f1826,f208])).
fof(f1826,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl28),
  inference(superposition,[],[f455,f882])).
fof(f1836,plain,(
  ( ! [X4,X5] : (s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(subsumption_resolution,[],[f1825,f208])).
fof(f1825,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(superposition,[],[f455,f879])).
fof(f1727,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1451,f890])).
fof(f1712,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f291,f231])).
fof(f1644,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f225,f1398])).
fof(f1643,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f226,f1398])).
fof(f1606,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f290,f231])).
fof(f1550,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1450,f891])).
fof(f1516,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X34))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35)))))) ) | $spl28),
  inference(superposition,[],[f891,f289])).
fof(f1515,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | $spl28),
  inference(superposition,[],[f890,f289])).
fof(f1458,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(unit_resulting_resolution,[],[f208,f1321,f301])).
fof(f1450,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(superposition,[],[f1431,f226])).
fof(f1449,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(superposition,[],[f1431,f875])).
fof(f1451,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(forward_demodulation,[],[f1433,f226])).
fof(f1433,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | $spl28),
  inference(unit_resulting_resolution,[],[f1431,f890])).
fof(f1431,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(subsumption_resolution,[],[f1430,f208])).
fof(f1430,plain,(
  ( ! [X18] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1429,f879])).
fof(f1429,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1428,f328])).
fof(f1428,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1418,f889])).
fof(f1418,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))))) ) | $spl28),
  inference(superposition,[],[f918,f226])).
fof(f1399,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f226,f875])).
fof(f1361,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f1360,f225])).
fof(f1360,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1354,f889])).
fof(f1354,plain,(
  ( ! [X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X17))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) ) | $spl28),
  inference(superposition,[],[f918,f225])).
fof(f1359,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl28),
  inference(forward_demodulation,[],[f1358,f225])).
fof(f1358,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) ) | $spl28),
  inference(forward_demodulation,[],[f1353,f889])).
fof(f1353,plain,(
  ( ! [X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X16))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) ) | $spl28),
  inference(superposition,[],[f917,f225])).
fof(f1336,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl28),
  inference(superposition,[],[f225,f875])).
fof(f1321,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(forward_demodulation,[],[f1317,f889])).
fof(f1317,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl28),
  inference(unit_resulting_resolution,[],[f1296,f917])).
fof(f1315,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f1270,f208])).
fof(f1270,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f918,f231])).
fof(f1312,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f1311,f208])).
fof(f1311,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f1310,f879])).
fof(f1310,plain,(
  ( ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f1267,f328])).
fof(f1267,plain,(
  ( ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(superposition,[],[f918,f896])).
fof(f921,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f912,f874])).
fof(f912,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f760])).
fof(f920,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(forward_demodulation,[],[f911,f874])).
fof(f911,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f757])).
fof(f919,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl28),
  inference(forward_demodulation,[],[f910,f874])).
fof(f910,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f756])).
fof(f909,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f874,f719])).
fof(f908,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl28),
  inference(backward_demodulation,[],[f874,f697])).
fof(f917,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl28),
  inference(forward_demodulation,[],[f903,f874])).
fof(f903,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f324])).
fof(f902,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f321])).
fof(f901,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f320])).
fof(f900,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f319])).
fof(f899,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f318])).
fof(f890,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl28),
  inference(backward_demodulation,[],[f874,f232])).
fof(f889,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f228])).
fof(f882,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f216])).
fof(f881,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl28),
  inference(backward_demodulation,[],[f874,f215])).
fof(f829,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f811,f432])).
fof(f811,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f221,f797])).
fof(f828,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f810,f439])).
fof(f810,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f222,f797])).
fof(f760,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f220])).
fof(f757,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f211])).
fof(f756,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f232,f210])).
fof(f720,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f222,f231])).
fof(f719,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f222,f207])).
fof(f698,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f221,f231])).
fof(f697,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f221,f207])).
fof(f216,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X10] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|20')).
fof(f439,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f208,f209,f301])).
fof(f460,plain,(
  ( ! [X5] : (p(s(bool,X5)) | s(bool,'F_0') = s(bool,X5)) )),
  inference(forward_demodulation,[],[f459,f213])).
fof(f459,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f444,f208])).
fof(f444,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,X5)) | s(bool,X5) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f301,f213])).
fof(f330,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f296,f290])).
fof(f296,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X10,X9] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|25')).
fof(f321,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f290,f229])).
fof(f320,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f290,f230])).
fof(f314,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f252,f207])).
fof(f252,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f295,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|28')).
fof(f294,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|31')).
fof(f228,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X10] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|27')).
fof(f324,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f291,f236])).
fof(f249,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f250,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f168])).
fof(f269,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f186])).
fof(f270,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK11(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f186])).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X10] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X10))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|32')).
fof(f221,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X10] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X10))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|33')).
fof(f276,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f129])).
fof(f129,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X19,X20,X21] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X19))),s('type.list.list'(X6),X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.APPEND|split|1')).
fof(f263,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK8(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))) <=> ? [X21,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_EQ_NUM_compute|split|2')).
fof(f264,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f266,f207])).
fof(f266,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) <=> ? [X21,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_EQ_NUM_compute|split|1')).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f277,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)),s('type.list.list'(X0),sK15(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X7,X23,X24] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))) <=> ? [X19,X20] : (s('type.num.num',X23) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.num.num',X24) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_EQ_SUM')).
fof(f279,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)),s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f193])).
fof(f278,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f281,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK16(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X0),sK17(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X23,X24] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))) <=> ? [X19,X20] : (s('type.num.num',X23) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.num.num',X24) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.list.LENGTH_EQ_SUM')).
fof(f283,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK16(X3,X2,X1,X0)),s('type.list.list'(X0),sK17(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f196])).
fof(f282,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK17(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f180])).
fof(f318,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f268,f207])).
fof(f268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f183])).
fof(f225,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X10] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|16')).
fof(f297,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|5')).
fof(f298,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|12')).
fof(f299,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|8')).
fof(f300,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X10,X9] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|2')).
fof(f305,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X10,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) <=> s('type.num.num',X9) = s('type.num.num',X10))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|19')).
fof(f306,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f280,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f193])).
fof(f432,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f429,f208])).
fof(f429,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f205,f231])).
fof(f424,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f208,f231])).
fof(f420,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f231,f231])).
fof(f307,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK20(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK20(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1',aHL_EXT)).
fof(f304,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f155])).
fof(f317,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f253,f207])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f316,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f254,f207])).
fof(f254,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f170])).
fof(f247,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f248,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f167])).
fof(f236,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f162])).
fof(f232,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f160])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|24')).
fof(f229,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X10] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|21')).
fof(f215,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X10] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|29')).
fof(f209,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f60])).
fof(f60,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|34')).
fof(f205,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f61])).
fof(f61,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.numeral.numeral_distrib|split|35')).
fof(f204,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1',aHL_TRUTH)).
fof(f2961,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(cnf_transformation,[],[f2961_D])).
fof(f2961_D,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f4401,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559,f3558,f3577,f2825])).
fof(f4400,plain,(
  $false | ($spl0 | $spl28 | $spl40 | $spl48)),
  inference(global_subsumption,[],[f2909,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559,f3558,f3577])).
fof(f4399,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559,f3558,f3577])).
fof(f4398,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559,f3558])).
fof(f4397,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584,f3559])).
fof(f4396,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699,f3584])).
fof(f4395,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680,f3699])).
fof(f4394,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682,f3680])).
fof(f4393,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712,f3682])).
fof(f4392,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067,f3712])).
fof(f4391,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047,f4067])).
fof(f4390,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048,f4047])).
fof(f4389,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074,f4048])).
fof(f4388,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369,f4074])).
fof(f4387,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381,f4369])).
fof(f4386,plain,(
  $false | ($spl0 | $spl28 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f4373,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381])).
fof(f4373,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4372,f2327])).
fof(f4372,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4362,f2300])).
fof(f4362,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(unit_resulting_resolution,[],[f2300,f3696])).
fof(f4385,plain,(
  $false | ($spl0 | $spl28 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f4378,f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381])).
fof(f4378,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4377,f2327])).
fof(f4377,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) | ($spl28 | $spl38)),
  inference(forward_demodulation,[],[f4367,f2300])).
fof(f4367,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(trivial_inequality_removal,[],[f4365])).
fof(f4365,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))))) | ($spl28 | $spl38)),
  inference(superposition,[],[f3696,f2300])).
fof(f4384,plain,(
  $false | ($spl0 | $spl28 | $spl40)),
  inference(global_subsumption,[],[f203,f202,f204,f205,f206,f209,f210,f211,f212,f214,f215,f217,f218,f219,f220,f229,f230,f231,f233,f232,f237,f236,f238,f240,f239,f248,f247,f316,f317,f304,f301,f307,f420,f424,f432,f431,f455,f456,f313,f289,f280,f259,f223,f306,f305,f300,f299,f298,f297,f226,f225,f318,f265,f227,f207,f282,f283,f281,f278,f279,f277,f267,f319,f264,f263,f258,f257,f276,f221,f222,f270,f269,f250,f249,f324,f325,f228,f291,f294,f295,f314,f315,f320,f321,f290,f328,f329,f330,f460,f439,f216,f213,f208,f697,f698,f719,f720,f756,f757,f758,f759,f760,f761,f762,f763,f764,f765,f797,f828,f829,f777,f874,f875,f876,f877,f878,f879,f880,f881,f882,f883,f884,f885,f886,f887,f888,f889,f890,f891,f892,f893,f896,f899,f900,f901,f902,f917,f918,f908,f909,f919,f920,f921,f914,f916,f1296,f1312,f1315,f1321,f1316,f1336,f1359,f1361,f1398,f1399,f1431,f1451,f1449,f1450,f1458,f1515,f1516,f1550,f1606,f1643,f1644,f1712,f1727,f1836,f1837,f1839,f1841,f1888,f1935,f2132,f2057,f2058,f2059,f2060,f2135,f2136,f2065,f2139,f2140,f2141,f2142,f2143,f2144,f2145,f2076,f2077,f2204,f2213,f2298,f2327,f2378,f2341,f2388,f2389,f2392,f2395,f2398,f2399,f2401,f2402,f2403,f2404,f2405,f2406,f2408,f2409,f2410,f2411,f2461,f2495,f2567,f2574,f2612,f2599,f2600,f2746,f2825,f2856,f2768,f2301,f3040,f2386,f2383,f2381,f2379,f894,f895,f262,f261,f260,f2384,f2394,f2396,f2397,f2407,f2361,f2412,f2400,f2391,f2390,f2620,f2387,f2770,f2859,f2382,f2505,f274,f272,f271,f1518,f1519,f287,f285,f288,f286,f897,f898,f3127,f3128,f3129,f3292,f3293,f3333,f3318,f3336,f3337,f3338,f3353,f3554,f3587,f3650,f3692,f3675,f3694,f3695,f3696,f3716,f4016,f4041,f4079,f4296,f4317,f4360,f4361,f4381])).
fof(f4383,plain,(
  $false | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f4382,f208])).
fof(f4382,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl50)),
  inference(forward_demodulation,[],[f4381,f2962])).
fof(f4380,plain,(
  $false | ($spl28 | $spl38 | $spl50)),
  inference(subsumption_resolution,[],[f4379,f208])).
fof(f4379,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl38 | $spl50)),
  inference(forward_demodulation,[],[f4378,f2962])).
fof(f4375,plain,(
  $false | ($spl28 | $spl38 | $spl50)),
  inference(subsumption_resolution,[],[f4374,f208])).
fof(f4374,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl38 | $spl50)),
  inference(forward_demodulation,[],[f4373,f2962])).
fof(f4371,plain,(
  $false | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f4370,f208])).
fof(f4370,plain,(
  p(s(bool,'F_0')) | ($spl28 | $spl50)),
  inference(forward_demodulation,[],[f4369,f2962])).
fof(f3039,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) | $spl92),
  inference(cnf_transformation,[],[f3039_D])).
fof(f3039_D,plain,(
  ( ! [X30,X31,X32] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f3016,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl57),
  inference(cnf_transformation,[],[f3016_D])).
fof(f3016_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f3010,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X30),X31) = s('type.list.list'(X30),sK11('const.list.APPEND_2'(s('type.list.list'(X30),'const.list.NIL_0'),s('type.list.list'(X30),X31)),X32,'type.list.list'(X30)))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2394])).
fof(f3038,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | $spl90),
  inference(cnf_transformation,[],[f3038_D])).
fof(f3038_D,plain,(
  ( ! [X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f3009,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X34,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f2396])).
fof(f3037,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | $spl88),
  inference(cnf_transformation,[],[f3037_D])).
fof(f3037_D,plain,(
  ( ! [X35] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f3008,plain,(
  ( ! [X35] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X35,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f2397])).
fof(f3036,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | $spl86),
  inference(cnf_transformation,[],[f3036_D])).
fof(f3036_D,plain,(
  ( ! [X59,X60] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f3007,plain,(
  ( ! [X59,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK11('const.arithmetic.EXP_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.ZERO_0')),X60,'type.num.num'))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f2407])).
fof(f3035,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) | $spl84),
  inference(cnf_transformation,[],[f3035_D])).
fof(f3035_D,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f3006,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)),X42,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2361])).
fof(f3034,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) | $spl82),
  inference(cnf_transformation,[],[f3034_D])).
fof(f3034_D,plain,(
  ( ! [X68,X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f3005,plain,(
  ( ! [X68,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X67))))) = s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))),X68,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2412])).
fof(f3033,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) | $spl80),
  inference(cnf_transformation,[],[f3033_D])).
fof(f3033_D,plain,(
  ( ! [X47,X46] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f3004,plain,(
  ( ! [X47,X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))))) = s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,'type.num.num'))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2400])).
fof(f3032,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) | $spl78),
  inference(cnf_transformation,[],[f3032_D])).
fof(f3032_D,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f3003,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X26))) = s(bool,sK11('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2391])).
fof(f3031,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) | $spl76),
  inference(cnf_transformation,[],[f3031_D])).
fof(f3031_D,plain,(
  ( ! [X24,X25] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f3002,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X24))) = s(bool,sK11('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),X25,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2390])).
fof(f3029,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) | $spl74),
  inference(cnf_transformation,[],[f3029_D])).
fof(f3029_D,plain,(
  ( ! [X19,X20,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f3000,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X18))) = s(bool,sK11('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num',X19)),X20,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2387])).
fof(f3026,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) | $spl72),
  inference(cnf_transformation,[],[f3026_D])).
fof(f3026_D,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f2997,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,sK11('const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11)),X12,bool))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f2382])).
fof(f3015,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl56),
  inference(cnf_transformation,[],[f3015_D])).
fof(f3015_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f3024,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl70),
  inference(cnf_transformation,[],[f3024_D])).
fof(f3024_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f3012,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl42),
  inference(condensation,[],[f2995])).
fof(f2995,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f274])).
fof(f3013,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl42),
  inference(condensation,[],[f2994])).
fof(f2994,plain,(
  ( ! [X6,X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2)) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f272])).
fof(f2993,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f271])).
fof(f3023,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | $spl68),
  inference(cnf_transformation,[],[f3023_D])).
fof(f3023_D,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f2992,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f1518])).
fof(f3022,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | $spl66),
  inference(cnf_transformation,[],[f3022_D])).
fof(f3022_D,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f2991,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f1519])).
fof(f3021,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) | $spl64),
  inference(cnf_transformation,[],[f3021_D])).
fof(f3021_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f2990,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f287])).
fof(f3020,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) | $spl62),
  inference(cnf_transformation,[],[f3020_D])).
fof(f3020_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f2989,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f285])).
fof(f3019,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))))))) ) | $spl60),
  inference(cnf_transformation,[],[f3019_D])).
fof(f3019_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f2988,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) ) | $spl42),
  inference(backward_demodulation,[],[f2722,f288])).
fof(f3017,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl58),
  inference(cnf_transformation,[],[f3017_D])).
fof(f3017_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f2986,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f897])).
fof(f3014,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl54),
  inference(cnf_transformation,[],[f3014_D])).
fof(f3014_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f2985,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | ($spl28 | $spl42)),
  inference(backward_demodulation,[],[f2722,f898])).
fof(f2984,plain,(
  $false | ($spl9 | $spl46 | $spl50)),
  inference(subsumption_resolution,[],[f2983,f436])).
fof(f2983,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl46 | $spl50)),
  inference(backward_demodulation,[],[f2907,f2962])).
fof(f2980,plain,(
  $false | ($spl2 | $spl4)),
  inference(subsumption_resolution,[],[f312,f310])).
fof(f2979,plain,(
  $false | ($spl0 | $spl28 | $spl33 | $spl40)),
  inference(subsumption_resolution,[],[f2978,f915])).
fof(f915,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl33)),
  inference(backward_demodulation,[],[f874,f781])).
fof(f2978,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl0 | $spl28 | $spl40)),
  inference(forward_demodulation,[],[f2977,f2301])).
fof(f2977,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f308,f875])).
fof(f2976,plain,(
  $false | ($spl9 | $spl28 | $spl40 | $spl45)),
  inference(subsumption_resolution,[],[f2975,f436])).
fof(f2975,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl28 | $spl40 | $spl45)),
  inference(forward_demodulation,[],[f2973,f878])).
fof(f2973,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl40 | $spl45)),
  inference(backward_demodulation,[],[f2301,f2968])).
fof(f2968,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(forward_demodulation,[],[f2773,f828])).
fof(f2773,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(unit_resulting_resolution,[],[f2724,f1841])).
fof(f2974,plain,(
  $false | ($spl28 | $spl40 | $spl45)),
  inference(subsumption_resolution,[],[f2972,f878])).
fof(f2972,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl40 | $spl45)),
  inference(backward_demodulation,[],[f2301,f2724])).
fof(f2962,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl50),
  inference(cnf_transformation,[],[f2962_D])).
fof(f2962_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2964,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl52),
  inference(cnf_transformation,[],[f2964_D])).
fof(f2964_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f2886,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(superposition,[],[f2760,f875])).
fof(f2760,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2747,f2315])).
fof(f2315,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(unit_resulting_resolution,[],[f208,f2303,f301])).
fof(f2303,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl28 | $spl41)),
  inference(unit_resulting_resolution,[],[f2302,f917])).
fof(f2747,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f901,f2429])).
fof(f2429,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl28 | $spl41)),
  inference(subsumption_resolution,[],[f2421,f208])).
fof(f2421,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f455,f2315])).
fof(f2907,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl46),
  inference(cnf_transformation,[],[f2907_D])).
fof(f2907_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2909,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl48),
  inference(cnf_transformation,[],[f2909_D])).
fof(f2909_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f2943,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2942,f896])).
fof(f2942,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2941,f2746])).
fof(f2941,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2879,f901])).
fof(f2879,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(superposition,[],[f2760,f896])).
fof(f2905,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2904,f875])).
fof(f2904,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2903,f2746])).
fof(f2903,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f2865,f1398])).
fof(f2865,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl28 | $spl41)),
  inference(superposition,[],[f2760,f875])).
fof(f2722,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl42),
  inference(cnf_transformation,[],[f2722_D])).
fof(f2722_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2724,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl45),
  inference(cnf_transformation,[],[f2724_D])).
fof(f2724_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f2687,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl28 | $spl41)),
  inference(equality_factoring,[],[f2429])).
fof(f2300,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl38),
  inference(cnf_transformation,[],[f2300_D])).
fof(f2300_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2302,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl41),
  inference(cnf_transformation,[],[f2302_D])).
fof(f2302_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f2297,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl4 | $spl28)),
  inference(superposition,[],[f892,f312])).
fof(f1911,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f1911_D])).
fof(f1911_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1913,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl37),
  inference(cnf_transformation,[],[f1913_D])).
fof(f1913_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f1888,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(equality_factoring,[],[f1841])).
fof(f859,plain,(
  $false | $spl17),
  inference(subsumption_resolution,[],[f858,f204])).
fof(f858,plain,(
  ~p(s(bool,'T_0')) | $spl17),
  inference(forward_demodulation,[],[f857,f212])).
fof(f857,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl17),
  inference(forward_demodulation,[],[f839,f228])).
fof(f839,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | $spl17),
  inference(unit_resulting_resolution,[],[f769,f324])).
fof(f779,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl30),
  inference(cnf_transformation,[],[f779_D])).
fof(f779_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f781,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl33),
  inference(cnf_transformation,[],[f781_D])).
fof(f781_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f765,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f232,f207])).
fof(f777,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl28),
  inference(cnf_transformation,[],[f777_D])).
fof(f777_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f769,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl17),
  inference(cnf_transformation,[],[f769_D])).
fof(f769_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f764,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f232,f206])).
fof(f773,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl24),
  inference(cnf_transformation,[],[f773_D])).
fof(f773_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f775,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl27),
  inference(cnf_transformation,[],[f775_D])).
fof(f775_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f763,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f313])).
fof(f772,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(cnf_transformation,[],[f772_D])).
fof(f772_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f762,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f232,f218])).
fof(f771,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) | $spl20),
  inference(cnf_transformation,[],[f771_D])).
fof(f771_D,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f761,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f232,f217])).
fof(f770,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) | $spl18),
  inference(cnf_transformation,[],[f770_D])).
fof(f770_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f759,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) )),
  inference(superposition,[],[f232,f219])).
fof(f767,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f767_D])).
fof(f767_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f758,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(superposition,[],[f232,f214])).
fof(f575,plain,(
  $false | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f554,f529])).
fof(f529,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl10),
  inference(subsumption_resolution,[],[f490,f204])).
fof(f490,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl10),
  inference(backward_demodulation,[],[f457,f324])).
fof(f554,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f529,f518])).
fof(f518,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f503,f331])).
fof(f331,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl1),
  inference(forward_demodulation,[],[f309,f207])).
fof(f503,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl10),
  inference(subsumption_resolution,[],[f478,f204])).
fof(f478,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl10),
  inference(backward_demodulation,[],[f457,f315])).
fof(f502,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f467,f204])).
fof(f467,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(backward_demodulation,[],[f457,f208])).
fof(f457,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f457_D])).
fof(f457_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f458,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl12),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f456,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f443,f424])).
fof(f443,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f301,f231])).
fof(f434,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f434_D])).
fof(f434_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f436,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(cnf_transformation,[],[f436_D])).
fof(f436_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f431,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f231])).
fof(f308,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(cnf_transformation,[],[f308_D])).
fof(f308_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f312,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(cnf_transformation,[],[f312_D])).
fof(f312_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f202,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f158])).
fof(f158,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f157])).
fof(f157,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ? [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <~> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f70])).
fof(f70,plain,(
  ~! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ~! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X8] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X8] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|1','thm.quantHeuristics.LIST_LENGTH_|49||split|1')).
fof(f309,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f310,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | $spl2),
  inference(cnf_transformation,[],[f310_D])).
fof(f310_D,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0')))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f203,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f159])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 227
% Passive clauses: 1310
% Generated clauses: 9977
% Final active clauses: 121
% Final passive clauses: 739
% Input formulas: 67
% Initial clauses: 106
% 
% Duplicate literals: 58
% Trivial inequalities: 98
% Fw subsumption resolutions: 277
% Fw demodulations: 2877
% Bw demodulations: 228
% Condensations: 11
% Global subsumptions: 19
% 
% Simple tautologies: 30
% Equational tautologies: 55
% Forward subsumptions: 5063
% Fw demodulations to eq. taut.: 82
% 
% Unit resulting resolution: 569
% Factoring: 1
% Forward superposition: 2759
% Backward superposition: 2631
% Self superposition: 65
% Equality factoring: 20
% Equality resolution: 9
% 
% Split clauses: 43
% Split components: 86
% SAT solver clauses: 1471
% SAT solver unit clauses: 82
% SAT solver binary clauses: 456
% 
% Sat splits: 43
% Sat splitting refutations: 54
% 
% Memory used [KB]: 9338
% Time elapsed: 0.221 s
% ------------------------------
% ------------------------------
% Success in time 1.543 s
