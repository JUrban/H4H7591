Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (61956)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 100
% Passive clauses: 2384
% Generated clauses: 19590
% Final active clauses: 91
% Final passive clauses: 2173
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 1029
% Trivial inequalities: 336
% Fw subsumption resolutions: 2555
% Fw demodulations: 2838
% Bw demodulations: 7
% 
% Simple tautologies: 349
% Equational tautologies: 63
% Forward subsumptions: 8422
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 30
% Forward superposition: 7833
% Backward superposition: 4328
% Self superposition: 246
% Equality factoring: 186
% Equality resolution: 21
% 
% Split clauses: 986
% Split components: 2003
% SAT solver clauses: 1571
% SAT solver unit clauses: 16
% SAT solver binary clauses: 181
% 
% Sat splits: 986
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1556
% TWLsolver calls for satisfiability: 109
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f400,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f399,f30,f38,f370,f372,f35,f49,f91,f92,f31,f44,f34,f48,f61,f63,f28,f42,f32,f46,f33,f47,f64,f66,f29,f40])).
fof(f40,plain,(
  p(s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) | $spl2),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  p(s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f29,plain,(
  p(s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1))))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) & p(s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) & s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) != s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f19])).
fof(f19,plain,(
  ? [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & ? [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ? [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) & (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & ? [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.operator.COMM_1'(s(fun(X6,fun(X6,X6)),X7)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X7)))) => ! [X8,X9] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),X9))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.operator.COMM_1'(s(fun(X6,fun(X6,X6)),X7)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X7)))) => ! [X8,X9] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),X9))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X9)))))))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE','thm.rich_list.COMM_ASSOC_FOLDR_REVERSE')).
fof(f66,plain,(
  s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | $spl24),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f64,plain,(
  s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | ($spl2 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f56,f46])).
fof(f56,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | ($spl2 | $spl10)),
  inference(superposition,[],[f40,f47])).
fof(f47,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f33,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE',aHL_BOOL_CASES)).
fof(f46,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE',aHL_FALSITY)).
fof(f42,plain,(
  p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) | $spl4),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f28,plain,(
  p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))))),
  inference(cnf_transformation,[],[f24])).
fof(f63,plain,(
  s(bool,'T_0') = s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | $spl22),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s(bool,'T_0') = s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f61,plain,(
  s(bool,'T_0') = s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | ($spl4 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f55,f46])).
fof(f55,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))) | ($spl4 | $spl10)),
  inference(superposition,[],[f42,f47])).
fof(f48,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ~p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1))))) ) | $spl12),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ~p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f34,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1))))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : (~p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : (~p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) | (~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4)))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4)))))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.operator.COMM_1'(s(fun(X6,fun(X6,X6)),X7)))) => (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X7)))) => ! [X10,X11,X12] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X10))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X11))),s(X6,X12))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X11))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X10))),s(X6,X12)))))))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE','thm.rich_list.rich_list_2|48||49|_prove_ltb')).
fof(f44,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f31,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE',aHL_TRUTH)).
fof(f92,plain,(
  ( ! [X2,X0,X1] : (s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2)))))) ) | $spl34),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X2,X0,X1] : (s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2)))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f91,plain,(
  ( ! [X2,X0,X1] : (s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2)))))) ) | ($spl6 | $spl12 | $spl22 | $spl24)),
  inference(subsumption_resolution,[],[f90,f44])).
fof(f90,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2)))))) ) | ($spl6 | $spl12 | $spl22 | $spl24)),
  inference(forward_demodulation,[],[f89,f63])).
fof(f89,plain,(
  ( ! [X2,X0,X1] : (s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2))))) | ~p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))))) ) | ($spl6 | $spl12 | $spl24)),
  inference(subsumption_resolution,[],[f87,f44])).
fof(f87,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,X2))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X1))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0))),s(sK0,X2))))) | ~p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1))))) ) | ($spl12 | $spl24)),
  inference(superposition,[],[f48,f66])).
fof(f49,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,sK6(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK6(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) | $spl14),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,sK6(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK6(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f35,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,sK6(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK6(X1,X0))))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,sK6(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK5(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK6(X1,X0)))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6])],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (? [X4,X5,X6] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,X6))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : (! [X10,X11,X12] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X10))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X11))),s(X6,X12))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X11))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X10))),s(X6,X12))))) => ! [X8,X9] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),X9))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X9))))))),
  file('thm.rich_list.COMM_ASSOC_FOLDR_REVERSE','thm.rich_list.rich_list_|49|97_prove_ltb')).
fof(f372,plain,(
  ( ! [X0,X1] : (s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),X1))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X1)))))) ) | $spl82),
  inference(cnf_transformation,[],[f372_D])).
fof(f372_D,plain,(
  ( ! [X0,X1] : (s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),X1))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X1)))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f370,plain,(
  ( ! [X0,X1] : (s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),X1))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X1)))))) ) | ($spl14 | $spl34)),
  inference(trivial_inequality_removal,[],[f367])).
fof(f367,plain,(
  ( ! [X0,X1] : (s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK4(sK1,sK0)))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK5(sK1,sK0)))),s(sK0,sK6(sK1,sK0)))))) != s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK4(sK1,sK0)))),s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK5(sK1,sK0)))),s(sK0,sK6(sK1,sK0)))))) | s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),X1))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X0),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),X1)))))) ) | ($spl14 | $spl34)),
  inference(superposition,[],[f49,f92])).
fof(f38,plain,(
  s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) != s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK3))))) | $spl1),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) != s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK3))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f30,plain,(
  s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) != s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK3)))))),
  inference(cnf_transformation,[],[f24])).
fof(f399,plain,(
  $false | ($spl1 | $spl82)),
  inference(trivial_inequality_removal,[],[f395])).
fof(f395,plain,(
  s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) != s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK3))) | ($spl1 | $spl82)),
  inference(superposition,[],[f38,f372])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 18
% Passive clauses: 46
% Generated clauses: 359
% Final active clauses: 16
% Final passive clauses: 24
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 52
% Trivial inequalities: 5
% Fw subsumption resolutions: 8
% Fw demodulations: 1
% Bw demodulations: 5
% Condensations: 44
% 
% Simple tautologies: 16
% Equational tautologies: 14
% Forward subsumptions: 101
% 
% Binary resolution: 4
% Forward superposition: 64
% Backward superposition: 58
% Self superposition: 33
% Equality factoring: 26
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 78
% SAT solver unit clauses: 14
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 77
% TWLsolver calls for satisfiability: 42
% 
% Memory used [KB]: 1279
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.632 s
