Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (128738)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 338
% Passive clauses: 3870
% Generated clauses: 31014
% Final active clauses: 278
% Final passive clauses: 3151
% Input formulas: 133
% Initial clauses: 229
% 
% Duplicate literals: 424
% Trivial inequalities: 166
% Fw subsumption resolutions: 1343
% Fw demodulations: 4513
% Bw demodulations: 52
% 
% Simple tautologies: 159
% Equational tautologies: 42
% Forward subsumptions: 20249
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 207
% Factoring: 1
% Forward superposition: 12941
% Backward superposition: 10825
% Self superposition: 155
% Equality factoring: 76
% Equality resolution: 8
% 
% Split clauses: 205
% Split components: 410
% SAT solver clauses: 452
% SAT solver unit clauses: 17
% SAT solver binary clauses: 66
% 
% Sat splits: 205
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 452
% TWLsolver calls for satisfiability: 67
% 
% Memory used [KB]: 23666
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (128759)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 165
% Passive clauses: 1126
% Generated clauses: 21803
% Final active clauses: 132
% Final passive clauses: 792
% Input formulas: 133
% Initial clauses: 229
% 
% Duplicate literals: 862
% Trivial inequalities: 294
% Fw subsumption resolutions: 1420
% Fw demodulations: 3992
% Bw demodulations: 201
% Condensations: 1361
% 
% Simple tautologies: 194
% Equational tautologies: 48
% Forward subsumptions: 10694
% 
% Binary resolution: 28
% Factoring: 1
% Forward superposition: 6111
% Backward superposition: 5788
% Self superposition: 207
% Equality factoring: 119
% Equality resolution: 25
% 
% Split clauses: 124
% Split components: 255
% SAT solver clauses: 1968
% SAT solver unit clauses: 288
% SAT solver binary clauses: 147
% 
% Sat splits: 124
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1968
% TWLsolver calls for satisfiability: 1225
% 
% Memory used [KB]: 15991
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f47118,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f490,f720,f719,f489,f722,f718,f931,f936,f934,f972,f974,f973,f1093,f1377,f1960,f1977,f1975,f1964,f1978,f1965,f1981,f1967,f1983,f1968,f1984,f1969,f1980,f1985,f1972,f1989,f1987,f3141,f3166,f3164,f4527,f4567,f4565,f6727,f6735,f6739,f6737,f6747,f6731,f6729,f6750,f6760,f6769,f6722,f6752,f6754,f7569,f7721,f7832,f7833,f8083,f8225,f8226,f8228,f8266,f8270,f8291,f8292,f8293,f8294,f8386,f8387,f8388,f8389,f8391,f8392,f8394,f8395,f8397,f8400,f8403,f8405,f8407,f8409,f8412,f8415,f8418,f8421,f8424,f8426,f8428,f8433,f8434,f8435,f8436,f8437,f8438,f8439,f8440,f8441,f8442,f8443,f8444,f8445,f8446,f8447,f8448,f8449,f8450,f8451,f8452,f8453,f8454,f8455,f8456,f8457,f8458,f8459,f8460,f8461,f8462,f8463,f8464,f8465,f8466,f8467,f8468,f8469,f8470,f8471,f8472,f8473,f8474,f8475,f8476,f8477,f8478,f8479,f8480,f8481,f8482,f8483,f8484,f8485,f8486,f8487,f8488,f8489,f8490,f8491,f8492,f8493,f8494,f8495,f8496,f8497,f8498,f8499,f8500,f8501,f8502,f8503,f8504,f8505,f8506,f8507,f8508,f8509,f8510,f8511,f8512,f8513,f8514,f8515,f8516,f8517,f8518,f8519,f8520,f8521,f8522,f8523,f8524,f8525,f8531,f8533,f8535,f8537,f8539,f8541,f8543,f8545,f8547,f8549,f8551,f8553,f8555,f8557,f8559,f8561,f8563,f8565,f8567,f8569,f8571,f8573,f8575,f8577,f8579,f8581,f8595,f8597,f8607,f8621,f8623,f8625,f8635,f8637,f8649,f8658,f8660,f8662,f8664,f8666,f8668,f8672,f8676,f8682,f8684,f8686,f8688,f8690,f8696,f8700,f8702,f8704,f8710,f8714,f8726,f8728,f8730,f8760,f8761,f8763,f8781,f8783,f8785,f8787,f8789,f8791,f8801,f8803,f8805,f8807,f8808,f8809,f8810,f8811,f8812,f8813,f8814,f8815,f8816,f8817,f8818,f8819,f8820,f8821,f8822,f8823,f8824,f8825,f8826,f8827,f8829,f8831,f8833,f8835,f8837,f8839,f8840,f8841,f8842,f8843,f8844,f8845,f8846,f8847,f8848,f8850,f8852,f8854,f8856,f8858,f8859,f8860,f8861,f8862,f8863,f8864,f8866,f8867,f8868,f8876,f8878,f8883,f8885,f8886,f8887,f8889,f8890,f8891,f8892,f8893,f8894,f8895,f8896,f8897,f8898,f8899,f8900,f8901,f8902,f8903,f8905,f8906,f8907,f8908,f8909,f8910,f8911,f8916,f8928,f8932,f8933,f8934,f8935,f8936,f8937,f8938,f9642,f9664,f9662,f9745,f9772,f9770,f21986,f22001,f21999,f41162,f41172,f41175,f41173,f41179,f41182,f41180,f41183,f41186,f41184,f36257,f41185,f41187,f41191,f41230,f29566,f41235,f41233,f41559,f41522,f44822,f45262,f45379,f45377,f47096])).
fof(f47096,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f47095,f491])).
fof(f491,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33',aHL_TRUTH)).
fof(f47095,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f47078,f41316])).
fof(f41316,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f718,f923])).
fof(f923,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f497,f530])).
fof(f530,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33',aHL_BOOL_CASES)).
fof(f497,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33',aHL_FALSITY)).
fof(f47078,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl2),
  inference(unit_resulting_resolution,[],[f720,f764])).
fof(f764,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK78(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK79(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK80(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK81(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK82(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK83(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK84(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK85(X1,X0)),s('type.list.list'(X0),sK77(X1,X0))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f566])).
fof(f566,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK78(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK79(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK80(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK81(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK82(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK83(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK84(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK85(X1,X0)),s('type.list.list'(X0),sK77(X1,X0)))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f366,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK78(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK79(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK80(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK81(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK82(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK83(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK84(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK85(X1,X0)),s('type.list.list'(X0),sK77(X1,X0))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK77,sK78,sK79,sK80,sK81,sK82,sK83,sK84,sK85])],[f365])).
fof(f365,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),X11)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f364])).
fof(f364,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(flattening,[],[f203])).
fof(f203,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X8))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|32')).
fof(f685,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X22,X23] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.GREATER_EQ')).
fof(f45377,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl84),
  inference(cnf_transformation,[],[f45377_D])).
fof(f45377_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f45379,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl87),
  inference(cnf_transformation,[],[f45379_D])).
fof(f45379_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f45262,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl18 | $spl65)),
  inference(equality_factoring,[],[f23056])).
fof(f23056,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl18 | $spl65)),
  inference(subsumption_resolution,[],[f23041,f497])).
fof(f23041,plain,(
  ( ! [X10] : (p(s(bool,'F_0')) | s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl18 | $spl65)),
  inference(superposition,[],[f971,f22668])).
fof(f22668,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl18 | $spl65)),
  inference(unit_resulting_resolution,[],[f497,f22016,f708])).
fof(f708,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f326])).
fof(f326,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f325])).
fof(f325,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X24,X25] : ((p(s(bool,X24)) => p(s(bool,X25))) => ((p(s(bool,X25)) => p(s(bool,X24))) => s(bool,X24) = s(bool,X25)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.bool.IMP_ANTISYM_AX')).
fof(f22016,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl18 | $spl65)),
  inference(unit_resulting_resolution,[],[f22009,f9195])).
fof(f9195,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl18),
  inference(backward_demodulation,[],[f495,f9100])).
fof(f9100,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl18),
  inference(forward_demodulation,[],[f727,f8939])).
fof(f8939,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl18),
  inference(backward_demodulation,[],[f1978,f506])).
fof(f506,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X34] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num',X34)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f727,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f548,f496])).
fof(f496,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f15])).
fof(f15,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|13')).
fof(f548,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f339])).
fof(f339,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f185])).
fof(f185,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f495,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f81])).
fof(f81,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_suc|split|0')).
fof(f22009,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | ($spl18 | $spl65)),
  inference(unit_resulting_resolution,[],[f22001,f8952])).
fof(f8952,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | $spl18),
  inference(backward_demodulation,[],[f8939,f539])).
fof(f539,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f334])).
fof(f334,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f175])).
fof(f175,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.LENGTH_NIL')).
fof(f971,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f953,f497])).
fof(f953,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f708,f530])).
fof(f44822,plain,(
  $false | ($spl18 | $spl76)),
  inference(subsumption_resolution,[],[f44816,f41185])).
fof(f44816,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl18),
  inference(unit_resulting_resolution,[],[f43115,f9088])).
fof(f9088,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl18),
  inference(forward_demodulation,[],[f9087,f8939])).
fof(f9087,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl18),
  inference(forward_demodulation,[],[f535,f8939])).
fof(f535,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f333])).
fof(f333,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X22] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X22))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|30')).
fof(f43115,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f42882,f495])).
fof(f42882,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl18),
  inference(superposition,[],[f42776,f520])).
fof(f520,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_suc|split|2')).
fof(f42776,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl18),
  inference(unit_resulting_resolution,[],[f42702,f8950])).
fof(f8950,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f8939,f532])).
fof(f532,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X22))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|17')).
fof(f42702,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl18),
  inference(superposition,[],[f12888,f519])).
fof(f519,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|14')).
fof(f12888,plain,(
  ( ! [X58] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))) ) | $spl18),
  inference(subsumption_resolution,[],[f12887,f497])).
fof(f12887,plain,(
  ( ! [X58] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))) ) | $spl18),
  inference(forward_demodulation,[],[f12886,f8994])).
fof(f8994,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f507,f8939])).
fof(f507,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X22] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|20')).
fof(f12886,plain,(
  ( ! [X58] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))) ) | $spl18),
  inference(forward_demodulation,[],[f12885,f5956])).
fof(f5956,plain,(
  ( ! [X4,X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f687,f685])).
fof(f687,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f97])).
fof(f97,axiom,(
  ! [X23,X22] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.LESS_EQ')).
fof(f12885,plain,(
  ( ! [X58] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))) ) | $spl18),
  inference(forward_demodulation,[],[f12840,f9084])).
fof(f9084,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6288,f8939])).
fof(f6288,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f730,f685])).
fof(f730,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f685,f527])).
fof(f527,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X22] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|27')).
fof(f12840,plain,(
  ( ! [X58] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))) ) | $spl18),
  inference(superposition,[],[f9090,f519])).
fof(f9090,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl18),
  inference(forward_demodulation,[],[f9089,f8939])).
fof(f9089,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl18),
  inference(forward_demodulation,[],[f536,f8939])).
fof(f536,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f333])).
fof(f41522,plain,(
  $false | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f722,f720])).
fof(f41559,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f41558])).
fof(f41558,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK1) | ($spl2 | $spl4)),
  inference(superposition,[],[f720,f722])).
fof(f41233,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl80),
  inference(cnf_transformation,[],[f41233_D])).
fof(f41233_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f41235,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl83),
  inference(cnf_transformation,[],[f41235_D])).
fof(f41235_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl83),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl83])])).
fof(f29566,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | ($spl18 | $spl65)),
  inference(equality_factoring,[],[f22710])).
fof(f22710,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl18 | $spl65)),
  inference(subsumption_resolution,[],[f22695,f497])).
fof(f22695,plain,(
  ( ! [X10] : (p(s(bool,'F_0')) | s(bool,X10) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl18 | $spl65)),
  inference(superposition,[],[f971,f22331])).
fof(f22331,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ($spl18 | $spl65)),
  inference(unit_resulting_resolution,[],[f497,f22010,f708])).
fof(f22010,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl18 | $spl65)),
  inference(unit_resulting_resolution,[],[f22001,f9088])).
fof(f41230,plain,(
  $false | ($spl0 | $spl18 | $spl41 | $spl65)),
  inference(subsumption_resolution,[],[f41229,f497])).
fof(f41229,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl18 | $spl41 | $spl65)),
  inference(forward_demodulation,[],[f718,f41189])).
fof(f41189,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl18 | $spl41 | $spl65)),
  inference(forward_demodulation,[],[f29334,f22331])).
fof(f29334,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl18 | $spl41 | $spl65)),
  inference(unit_resulting_resolution,[],[f4567,f22710])).
fof(f41191,plain,(
  $false | ($spl4 | $spl18 | $spl41 | $spl65)),
  inference(subsumption_resolution,[],[f41190,f497])).
fof(f41190,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl18 | $spl41 | $spl65)),
  inference(backward_demodulation,[],[f41189,f41112])).
fof(f41112,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f722,f765])).
fof(f765,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f567])).
fof(f567,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f41187,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) ) | $spl78),
  inference(cnf_transformation,[],[f41187_D])).
fof(f41187_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f41185,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl76),
  inference(cnf_transformation,[],[f41185_D])).
fof(f41185_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f36257,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f36232,f9084])).
fof(f36232,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) ) | $spl18),
  inference(superposition,[],[f563,f8963])).
fof(f8963,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f8939,f3967])).
fof(f3967,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f3962,f589])).
fof(f589,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f227])).
fof(f227,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6] : ! [X24,X25] : s(X6,X24) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X24),s(X6,X25)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.bool.COND_CLAUSES|split|0')).
fof(f3962,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))))) )),
  inference(unit_resulting_resolution,[],[f589,f539])).
fof(f563,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f360,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68(X1,X0)),s('type.list.list'(X0),sK65(X1,X0))))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65,sK66,sK67,sK68])],[f359])).
fof(f359,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X6)))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(rectify,[],[f358])).
fof(f358,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2)))))))) & (! [X2,X3,X4,X5] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(nnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f199])).
fof(f199,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X2,X3,X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f133])).
fof(f133,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X8,X9,X10,X11] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X8))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_3|split|5')).
fof(f41184,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68('const.list.NIL_0',X0)),s('type.list.list'(X0),sK65('const.list.NIL_0',X0))))))))) ) | $spl74),
  inference(cnf_transformation,[],[f41184_D])).
fof(f41184_D,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68('const.list.NIL_0',X0)),s('type.list.list'(X0),sK65('const.list.NIL_0',X0))))))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f41186,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl77),
  inference(cnf_transformation,[],[f41186_D])).
fof(f41186_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f41183,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68('const.list.NIL_0',X0)),s('type.list.list'(X0),sK65('const.list.NIL_0',X0))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f37669,f9084])).
fof(f37669,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67('const.list.NIL_0',X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68('const.list.NIL_0',X0)),s('type.list.list'(X0),sK65('const.list.NIL_0',X0))))))))) ) | $spl18),
  inference(superposition,[],[f562,f8963])).
fof(f562,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68(X1,X0)),s('type.list.list'(X0),sK65(X1,X0))))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f41180,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8)))))))))))))))) ) | $spl70),
  inference(cnf_transformation,[],[f41180_D])).
fof(f41180_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8)))))))))))))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f41182,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl72),
  inference(cnf_transformation,[],[f41182_D])).
fof(f41182_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f41179,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8)))))))))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f39375,f9084])).
fof(f39375,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8)))))))))))))))) ) | $spl18),
  inference(superposition,[],[f565,f8963])).
fof(f565,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2)))))))))))))))) )),
  inference(cnf_transformation,[],[f363])).
fof(f363,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK70(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK71(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK72(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK73(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK74(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK75(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK76(X1,X0)),s('type.list.list'(X0),sK69(X1,X0))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK69,sK70,sK71,sK72,sK73,sK74,sK75,sK76])],[f362])).
fof(f362,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),X10)))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f361])).
fof(f361,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2)))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2))))))))))))))))),
  inference(flattening,[],[f201])).
fof(f201,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2))))))))))))))))),
  inference(rectify,[],[f108])).
fof(f108,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X8))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_7|split|5')).
fof(f41173,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9)))))))))))))))))) ) | $spl66),
  inference(cnf_transformation,[],[f41173_D])).
fof(f41173_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9)))))))))))))))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f41175,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl68),
  inference(cnf_transformation,[],[f41175_D])).
fof(f41175_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f41172,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9)))))))))))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f41125,f9084])).
fof(f41125,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9)))))))))))))))))) ) | $spl18),
  inference(superposition,[],[f765,f8963])).
fof(f41162,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f41161,f497])).
fof(f41161,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f41112,f947])).
fof(f947,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f497,f719,f708])).
fof(f21999,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) | $spl62),
  inference(cnf_transformation,[],[f21999_D])).
fof(f21999_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f22001,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl65),
  inference(cnf_transformation,[],[f22001_D])).
fof(f22001_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f21986,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) | ($spl4 | $spl18)),
  inference(superposition,[],[f8951,f722])).
fof(f8951,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl18),
  inference(backward_demodulation,[],[f8939,f538])).
fof(f538,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f334])).
fof(f9770,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl58),
  inference(cnf_transformation,[],[f9770_D])).
fof(f9770_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f9772,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl61),
  inference(cnf_transformation,[],[f9772_D])).
fof(f9772_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f9745,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl18 | $spl47)),
  inference(equality_factoring,[],[f9247])).
fof(f9247,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl18 | $spl47)),
  inference(forward_demodulation,[],[f7441,f8939])).
fof(f7441,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl47),
  inference(subsumption_resolution,[],[f7425,f497])).
fof(f7425,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl47),
  inference(superposition,[],[f971,f7023])).
fof(f7023,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl47),
  inference(unit_resulting_resolution,[],[f497,f6793,f708])).
fof(f6793,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl47),
  inference(unit_resulting_resolution,[],[f6737,f535])).
fof(f9662,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl54),
  inference(cnf_transformation,[],[f9662_D])).
fof(f9662_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f9664,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl57),
  inference(cnf_transformation,[],[f9664_D])).
fof(f9664_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f9642,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl18 | $spl51)),
  inference(equality_factoring,[],[f9221])).
fof(f9221,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl18 | $spl51)),
  inference(forward_demodulation,[],[f7469,f8939])).
fof(f7469,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl51),
  inference(subsumption_resolution,[],[f7453,f497])).
fof(f7453,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl51),
  inference(superposition,[],[f971,f7044])).
fof(f7044,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f497,f6796,f708])).
fof(f6796,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl51),
  inference(unit_resulting_resolution,[],[f6752,f535])).
fof(f8938,plain,(
  $false | ($spl6 | $spl18)),
  inference(global_subsumption,[],[f1978,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8931,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f8930,f683])).
fof(f8930,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X5),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) )),
  inference(subsumption_resolution,[],[f8929,f491])).
fof(f8929,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X5),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) )),
  inference(forward_demodulation,[],[f2055,f7567])).
fof(f2055,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X5),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) )),
  inference(superposition,[],[f535,f683])).
fof(f8927,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f8926,f494])).
fof(f8926,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f8925,f491])).
fof(f8925,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2059,f7567])).
fof(f2059,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f535,f494])).
fof(f8915,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f8914,f2594])).
fof(f8914,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f8913,f491])).
fof(f8913,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2678,f7567])).
fof(f2678,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f535,f2594])).
fof(f2743,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))))) )),
  inference(superposition,[],[f531,f523])).
fof(f2744,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24)))))))))) )),
  inference(superposition,[],[f532,f523])).
fof(f2842,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24)))))))) )),
  inference(superposition,[],[f531,f524])).
fof(f2843,plain,(
  ( ! [X25] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25)))))))))) )),
  inference(superposition,[],[f532,f524])).
fof(f2883,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f531,f2817])).
fof(f2884,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f532,f2817])).
fof(f4001,plain,(
  ( ! [X26] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X26),'const.list.NIL_0')))) )),
  inference(superposition,[],[f531,f3967])).
fof(f525,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f88])).
fof(f88,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|7')).
fof(f526,plain,(
  ( ! [X0] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X22] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X22))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|2')).
fof(f588,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f225])).
fof(f225,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6] : ! [X24,X25] : s(X6,X25) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X24),s(X6,X25)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.bool.COND_CLAUSES|split|1')).
fof(f699,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f307])).
fof(f307,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|11')).
fof(f700,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0,X1] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f75])).
fof(f75,axiom,(
  ! [X22,X23] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|6')).
fof(f702,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f310,plain,(
  ! [X0,X1] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X22,X23] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|9')).
fof(f704,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|5')).
fof(f705,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f313])).
fof(f313,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f79])).
fof(f79,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|4')).
fof(f1970,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X12),s('type.num.num',X13)))) )),
  inference(superposition,[],[f531,f588])).
fof(f3839,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X4))) | s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X2),X3),s('type.list.list'(X2),X4)))) )),
  inference(superposition,[],[f538,f588])).
fof(f4132,plain,(
  ( ! [X54,X52,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))) | s('type.num.num',X54) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X52),s('type.num.num',X53)))) )),
  inference(superposition,[],[f712,f588])).
fof(f4628,plain,(
  ( ! [X25] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f531,f525])).
fof(f4639,plain,(
  ( ! [X43,X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X43))))) | s('type.num.num',X44) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f525])).
fof(f4949,plain,(
  ( ! [X26] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X26))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f531,f526])).
fof(f4960,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X45))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X44))))) | s('type.num.num',X45) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X44))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f526])).
fof(f8884,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s(X0,X3) = s(X0,sK396(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) ) | $spl6),
  inference(forward_demodulation,[],[f5717,f934])).
fof(f8882,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK396('const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)),X3,X0))) ) | $spl6),
  inference(forward_demodulation,[],[f5795,f934])).
fof(f8877,plain,(
  ( ! [X114,X115] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X114))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X114))),s('type.num.num','const.arithmetic.ZERO_0')),X115,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5846,f934])).
fof(f8875,plain,(
  ( ! [X116,X117] : (~p(s(bool,'F_0')) | s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X116))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X116))),s('type.num.num','const.arithmetic.ZERO_0')),X117,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5847,f934])).
fof(f521,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f93])).
fof(f93,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X22))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iDUB_removal|split|0')).
fof(f4889,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X1))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f526,f530])).
fof(f8865,plain,(
  ( ! [X127,X128] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X127))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X127)))),X128,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5853,f934])).
fof(f517,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iDUB_removal|split|1')).
fof(f706,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f314])).
fof(f314,plain,(
  ! [X0,X1] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X22,X23] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|10')).
fof(f701,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f309])).
fof(f309,plain,(
  ! [X0,X1] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X22,X23] : s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|3')).
fof(f550,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f341])).
fof(f341,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f340])).
fof(f340,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))),
  inference(flattening,[],[f187])).
fof(f187,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|29')).
fof(f551,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f552,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK21(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK22(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK23(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) )),
  inference(cnf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK19(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK20(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK21(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK22(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK23(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26])],[f344])).
fof(f344,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f343])).
fof(f343,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))),
  inference(flattening,[],[f189])).
fof(f189,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|28')).
fof(f8857,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK125(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK126(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK127(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK128(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK129(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK130(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK131(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK132(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK133(X1,X0)),s('type.list.list'(X0),sK124(X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f576,f934])).
fof(f8855,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f577,f934])).
fof(f8853,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK78(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK79(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK80(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK81(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK82(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK83(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK84(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK85(X1,X0)),s('type.list.list'(X0),sK77(X1,X0))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f764,f934])).
fof(f8851,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f765,f934])).
fof(f8849,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK120(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK121(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK122(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK123(X1,X0)),s('type.list.list'(X0),sK114(X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f793,f934])).
fof(f554,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK29(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK31(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK32(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK33(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK34(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK35(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f348])).
fof(f348,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK29(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK30(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK31(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK32(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK33(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK34(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK35(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35])],[f347])).
fof(f347,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f346])).
fof(f346,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f192])).
fof(f192,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))),
  inference(rectify,[],[f125])).
fof(f125,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|14')).
fof(f555,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f348])).
fof(f556,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK36(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK37(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK38(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK39(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK40(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK41(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK43(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK44(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f351])).
fof(f351,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK36(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK37(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK38(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK39(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK40(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK41(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK43(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK44(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK36,sK37,sK38,sK39,sK40,sK41,sK42,sK43,sK44])],[f350])).
fof(f350,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f349])).
fof(f349,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f194])).
fof(f194,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))),
  inference(flattening,[],[f193])).
fof(f193,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))),
  inference(rectify,[],[f130])).
fof(f130,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|15')).
fof(f558,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK45(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK46(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK47(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK48(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK49(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK50(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK51(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK52(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK53(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK54(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f354])).
fof(f354,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK45(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK46(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK47(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK48(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK49(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK50(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK51(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK52(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK53(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK54(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK45,sK46,sK47,sK48,sK49,sK50,sK51,sK52,sK53,sK54])],[f353])).
fof(f353,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f352])).
fof(f352,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))))),
  inference(rectify,[],[f115])).
fof(f115,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|0')).
fof(f559,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f354])).
fof(f560,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK55(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK56(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK57(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK58(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK59(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK60(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK61(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK62(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK63(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK64(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f357])).
fof(f357,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK55(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK56(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK57(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK58(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK59(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK60(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK61(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK62(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK63(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK64(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK55,sK56,sK57,sK58,sK59,sK60,sK61,sK62,sK63,sK64])],[f356])).
fof(f356,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f355])).
fof(f355,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))))),
  inference(flattening,[],[f197])).
fof(f197,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))))))))))))),
  inference(rectify,[],[f116])).
fof(f116,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|1')).
fof(f8838,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK135(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK136(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK137(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK138(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK139(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK140(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK141(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK142(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK143(X1,X0)),s('type.list.list'(X0),sK134(X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f578,f934])).
fof(f8836,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f579,f934])).
fof(f8834,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK156(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK157(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK158(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK159(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK160(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK161(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK162(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK163(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK164(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK165(X1,X0)),s('type.list.list'(X0),sK155(X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f582,f934])).
fof(f8832,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f583,f934])).
fof(f8830,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK167(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK168(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK169(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK170(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK171(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK172(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK173(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK174(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK175(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK176(X1,X0)),s('type.list.list'(X0),sK166(X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f584,f934])).
fof(f8828,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f585,f934])).
fof(f604,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK196(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f412,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK196(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK197(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK198(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK199(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK200(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK201(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK202(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK203(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK204(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK205(X2,X1,X0)),s('type.list.list'(X0),sK196(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK196,sK197,sK198,sK199,sK200,sK201,sK202,sK203,sK204,sK205])],[f411])).
fof(f411,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f410])).
fof(f410,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(nnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f239])).
fof(f239,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f128])).
fof(f128,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|27')).
fof(f605,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK197(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK198(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK199(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK200(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK201(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK202(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK203(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK204(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK205(X2,X1,X0)),s('type.list.list'(X0),sK196(X2,X1,X0)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f606,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f412])).
fof(f607,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK206(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f415])).
fof(f415,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK206(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK207(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK208(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK209(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK210(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK211(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK212(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK213(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK214(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK215(X2,X1,X0)),s('type.list.list'(X0),sK206(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK206,sK207,sK208,sK209,sK210,sK211,sK212,sK213,sK214,sK215])],[f414])).
fof(f414,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f413])).
fof(f413,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f241])).
fof(f241,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f129])).
fof(f129,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|24')).
fof(f608,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK207(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK208(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK209(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK210(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK211(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK212(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK213(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK214(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK215(X2,X1,X0)),s('type.list.list'(X0),sK206(X2,X1,X0)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f415])).
fof(f609,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f415])).
fof(f610,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK216(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f418])).
fof(f418,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK216(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK217(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK218(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK219(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK220(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK221(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK222(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK223(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK224(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK225(X2,X1,X0)),s('type.list.list'(X0),sK216(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK216,sK217,sK218,sK219,sK220,sK221,sK222,sK223,sK224,sK225])],[f417])).
fof(f417,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f416])).
fof(f416,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(nnf_transformation,[],[f244])).
fof(f244,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f243])).
fof(f243,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f126])).
fof(f126,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|26')).
fof(f611,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK217(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK218(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK219(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK220(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK221(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK222(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK223(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK224(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK225(X2,X1,X0)),s('type.list.list'(X0),sK216(X2,X1,X0)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(cnf_transformation,[],[f418])).
fof(f613,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK226(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f421])).
fof(f421,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK226(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK227(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK228(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK229(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK230(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK231(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK232(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK233(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK234(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK235(X2,X1,X0)),s('type.list.list'(X0),sK226(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK226,sK227,sK228,sK229,sK230,sK231,sK232,sK233,sK234,sK235])],[f420])).
fof(f420,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f419])).
fof(f419,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f246])).
fof(f246,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f245])).
fof(f245,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f127])).
fof(f127,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|25')).
fof(f614,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK227(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK228(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK229(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK230(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK231(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK232(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK233(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK234(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK235(X2,X1,X0)),s('type.list.list'(X0),sK226(X2,X1,X0)))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f421])).
fof(f616,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK236(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK236(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK237(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK238(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK239(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK240(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK241(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK242(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK243(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK244(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK245(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK246(X2,X1,X0)),s('type.list.list'(X0),sK236(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK236,sK237,sK238,sK239,sK240,sK241,sK242,sK243,sK244,sK245,sK246])],[f423])).
fof(f423,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f422])).
fof(f422,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(nnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f247])).
fof(f247,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f119])).
fof(f119,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|12')).
fof(f617,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK237(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK238(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK239(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK240(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK241(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK242(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK243(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK244(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK245(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK246(X2,X1,X0)),s('type.list.list'(X0),sK236(X2,X1,X0)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f618,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f424])).
fof(f619,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK247(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f427])).
fof(f427,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK247(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK248(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK249(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK250(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK251(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK252(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK253(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK254(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK255(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK256(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK257(X2,X1,X0)),s('type.list.list'(X0),sK247(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK247,sK248,sK249,sK250,sK251,sK252,sK253,sK254,sK255,sK256,sK257])],[f426])).
fof(f426,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f425])).
fof(f425,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f249])).
fof(f249,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f114])).
fof(f114,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|11')).
fof(f620,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK248(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK249(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK250(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK251(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK252(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK253(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK254(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK255(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK256(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK257(X2,X1,X0)),s('type.list.list'(X0),sK247(X2,X1,X0)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f427])).
fof(f621,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f427])).
fof(f622,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK258(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f430])).
fof(f430,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK258(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK259(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK260(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK261(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK262(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK263(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK264(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK265(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK266(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK267(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK268(X2,X1,X0)),s('type.list.list'(X0),sK258(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK258,sK259,sK260,sK261,sK262,sK263,sK264,sK265,sK266,sK267,sK268])],[f429])).
fof(f429,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f428])).
fof(f428,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(nnf_transformation,[],[f252])).
fof(f252,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f251])).
fof(f251,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f117])).
fof(f117,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|13')).
fof(f623,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK259(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK260(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK261(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK262(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK263(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK264(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK265(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK266(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK267(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK268(X2,X1,X0)),s('type.list.list'(X0),sK258(X2,X1,X0)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(cnf_transformation,[],[f430])).
fof(f625,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK269(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK269(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK270(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK271(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK272(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK273(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK274(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK275(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK276(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK277(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK278(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK279(X2,X1,X0)),s('type.list.list'(X0),sK269(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK269,sK270,sK271,sK272,sK273,sK274,sK275,sK276,sK277,sK278,sK279])],[f432])).
fof(f432,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f431])).
fof(f431,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f254])).
fof(f254,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f253])).
fof(f253,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f118])).
fof(f118,axiom,(
  ! [X6] : ! [X28,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (s('type.num.num',X28) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|10')).
fof(f626,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK270(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK271(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK272(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK273(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK274(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK275(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK276(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK277(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK278(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK279(X2,X1,X0)),s('type.list.list'(X0),sK269(X2,X1,X0)))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f433])).
fof(f8806,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK333(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK334(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK335(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK336(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK337(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK338(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK339(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK340(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK341(X2,X1,X0)),s('type.list.list'(X0),sK332(X2,X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f650,f934])).
fof(f8804,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK343(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK344(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK345(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK346(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK347(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK348(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK349(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK350(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK351(X2,X1,X0)),s('type.list.list'(X0),sK342(X2,X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f653,f934])).
fof(f8802,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK375(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK376(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK377(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK378(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK379(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK380(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK381(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK382(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK383(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK384(X2,X1,X0)),s('type.list.list'(X0),sK374(X2,X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f662,f934])).
fof(f8800,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK386(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK387(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK388(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK389(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK390(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK391(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK392(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK393(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK394(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK395(X2,X1,X0)),s('type.list.list'(X0),sK385(X2,X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f665,f934])).
fof(f8790,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK178(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK179(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK180(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK181(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK182(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK183(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK184(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK185(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK186(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK187(X1,X0)),s('type.list.list'(X0),sK177(X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f766,f934])).
fof(f8788,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK105(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK106(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK107(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK108(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK109(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK110(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK111(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK112(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK113(X1,X0)),s('type.list.list'(X0),sK104(X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f768,f934])).
fof(f8786,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK323(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK324(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK325(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK326(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK327(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK328(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK329(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK330(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK331(X2,X1,X0)),s('type.list.list'(X0),sK322(X2,X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f771,f934])).
fof(f8784,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK353(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK354(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK355(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK356(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK357(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK358(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK359(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK360(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK361(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK362(X2,X1,X0)),s('type.list.list'(X0),sK352(X2,X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f772,f934])).
fof(f8782,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK313(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK314(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK315(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK316(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK317(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK318(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK319(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK320(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK321(X2,X1,X0)),s('type.list.list'(X0),sK312(X2,X1,X0))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f773,f934])).
fof(f8780,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK364(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK365(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK366(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK367(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK368(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK369(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK370(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK371(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK372(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK373(X2,X1,X0)),s('type.list.list'(X0),sK363(X2,X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f774,f934])).
fof(f8762,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK145(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK146(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK147(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK148(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK149(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK150(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK151(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK152(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK153(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK154(X1,X0)),s('type.list.list'(X0),sK144(X1,X0))))))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f791,f934])).
fof(f8759,plain,(
  ( ! [X125,X126] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X125))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X125)))),X126,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5852,f934])).
fof(f8729,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK190(X2,X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f731,f934])).
fof(f8727,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK190(X2,X1,X0)),s('type.list.list'(X0),sK191(X2,X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f732,f934])).
fof(f8725,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) ) | $spl6),
  inference(forward_demodulation,[],[f733,f934])).
fof(f8713,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK297(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK298(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK299(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK300(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK301(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK302(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK303(X2,X1,X0)),s('type.list.list'(X0),sK296(X2,X1,X0))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f638,f934])).
fof(f8709,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK289(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK290(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK291(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK292(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK293(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK294(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK295(X2,X1,X0)),s('type.list.list'(X0),sK288(X2,X1,X0))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f770,f934])).
fof(f8703,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK285(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK286(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK287(X2,X1,X0)),s('type.list.list'(X0),sK284(X2,X1,X0))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f632,f934])).
fof(f8701,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)),s('type.list.list'(X0),sK402(X3,X2,X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f776,f934])).
fof(f8699,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'F_0')) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK401(X3,X2,X1,X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f775,f934])).
fof(f8695,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK305(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK306(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK307(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK308(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK309(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK310(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK311(X2,X1,X0)),s('type.list.list'(X0),sK304(X2,X1,X0))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f641,f934])).
fof(f8689,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK281(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK282(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK283(X2,X1,X0)),s('type.list.list'(X0),sK280(X2,X1,X0))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f629,f934])).
fof(f8687,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK70(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK71(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK72(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK73(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK74(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK75(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK76(X1,X0)),s('type.list.list'(X0),sK69(X1,X0))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f564,f934])).
fof(f8685,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X2)))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f565,f934])).
fof(f8683,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK66(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK67(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK68(X1,X0)),s('type.list.list'(X0),sK65(X1,X0))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f562,f934])).
fof(f8681,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X2)))))))) ) | $spl6),
  inference(forward_demodulation,[],[f563,f934])).
fof(f8675,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(duplicate_literal_removal,[],[f8674])).
fof(f8674,plain,(
  p(s(bool,'F_0')) | p(s(bool,'F_0')) | $spl6),
  inference(forward_demodulation,[],[f8673,f934])).
fof(f8673,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f5986,f934])).
fof(f8671,plain,(
  ~p(s(bool,'F_0')) | $spl6),
  inference(duplicate_literal_removal,[],[f8670])).
fof(f8670,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'F_0')) | $spl6),
  inference(forward_demodulation,[],[f8669,f934])).
fof(f8669,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f5985,f934])).
fof(f8667,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl6),
  inference(forward_demodulation,[],[f535,f934])).
fof(f8665,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl6),
  inference(forward_demodulation,[],[f536,f934])).
fof(f8663,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f542,f934])).
fof(f8661,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f543,f934])).
fof(f8659,plain,(
  ( ! [X59,X58] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59)))) ) | $spl6),
  inference(forward_demodulation,[],[f3027,f934])).
fof(f8657,plain,(
  ( ! [X57,X56] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X57)))) ) | $spl6),
  inference(forward_demodulation,[],[f3026,f934])).
fof(f8648,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f707,f934])).
fof(f8636,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f727,f934])).
fof(f8634,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f726,f934])).
fof(f8624,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK96(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK97(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK98(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK99(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK100(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK101(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK102(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK103(X1,X0)),s('type.list.list'(X0),sK95(X1,X0))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f570,f934])).
fof(f8622,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'F_0')) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f571,f934])).
fof(f8620,plain,(
  ( ! [X0,X1] : (~p(s(bool,'F_0')) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK87(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK88(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK89(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK90(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK91(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK92(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK93(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK94(X1,X0)),s('type.list.list'(X0),sK86(X1,X0))))))))))))))))))) ) | $spl6),
  inference(forward_demodulation,[],[f789,f934])).
fof(f8606,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK396(X2,X1,X0))) ) | $spl6),
  inference(forward_demodulation,[],[f668,f934])).
fof(f8596,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'F_0')) | s(X4,X7) = s(X4,sK396(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) ) | $spl6),
  inference(forward_demodulation,[],[f5718,f934])).
fof(f8594,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'F_0')) | s(X4,X5) = s(X4,sK396('const.bool.COND_3'(s(bool,'T_0'),s(X4,X5),s(X4,X6)),X7,X4))) ) | $spl6),
  inference(forward_demodulation,[],[f5796,f934])).
fof(f8580,plain,(
  ( ! [X118,X119] : (~p(s(bool,'F_0')) | s('type.num.num',X118) = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X118),s('type.num.num','const.num.|48|_0')),X119,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5848,f934])).
fof(f8578,plain,(
  ( ! [X109,X110] : (~p(s(bool,'F_0')) | s('type.num.num',X109) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X109),s('type.num.num','const.arithmetic.ZERO_0')),X110,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5844,f934])).
fof(f8576,plain,(
  ( ! [X94,X93] : (~p(s(bool,'F_0')) | s('type.num.num',X93) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93)),X94,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5835,f934])).
fof(f8574,plain,(
  ( ! [X85,X86] : (~p(s(bool,'F_0')) | s('type.num.num',X85) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')),X86,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5834,f934])).
fof(f8572,plain,(
  ( ! [X132] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X132,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5856,f934])).
fof(f8570,plain,(
  ( ! [X124] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')),X124,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5851,f934])).
fof(f8568,plain,(
  ( ! [X111,X112,X113] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,X111),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X112)),X113,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5845,f934])).
fof(f8566,plain,(
  ( ! [X95] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X95,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5836,f934])).
fof(f8564,plain,(
  ( ! [X99,X98] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X98)))),X99,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5838,f934])).
fof(f8562,plain,(
  ( ! [X97,X96] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X96))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X96)))),X97,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5837,f934])).
fof(f8560,plain,(
  ( ! [X101,X100] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X100))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100)))),X101,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5839,f934])).
fof(f8558,plain,(
  ( ! [X130,X131] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X130))))) = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130)))),X131,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5855,f934])).
fof(f8556,plain,(
  ( ! [X81,X82] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.list.LENGTH_1'(s('type.list.list'(X81),'const.list.NIL_0')),X82,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5831,f934])).
fof(f8554,plain,(
  ( ! [X84] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X84,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5833,f934])).
fof(f8552,plain,(
  ( ! [X105,X104] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X104)))))),X105,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5841,f934])).
fof(f8550,plain,(
  ( ! [X107,X106] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X106)))))),X107,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5842,f934])).
fof(f8548,plain,(
  ( ! [X108] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X108,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5843,f934])).
fof(f8546,plain,(
  ( ! [X121,X120] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X120)),X121,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5849,f934])).
fof(f8544,plain,(
  ( ! [X123,X122] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X122)),X123,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5850,f934])).
fof(f8542,plain,(
  ( ! [X129] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X129,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5854,f934])).
fof(f8540,plain,(
  ( ! [X134,X133] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num','const.num.|48|_0')),X134,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5857,f934])).
fof(f8538,plain,(
  ( ! [X136,X135] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135)),X136,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5858,f934])).
fof(f8536,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88)),X89,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5763,f934])).
fof(f8534,plain,(
  ( ! [X103,X102] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')),X103,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5840,f934])).
fof(f8532,plain,(
  ( ! [X83] : (~p(s(bool,'F_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X83,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f5832,f934])).
fof(f8530,plain,(
  ( ! [X138,X139,X137] : (~p(s(bool,'F_0')) | s('type.list.list'(X137),X138) = s('type.list.list'(X137),sK396('const.list.APPEND_2'(s('type.list.list'(X137),'const.list.NIL_0'),s('type.list.list'(X137),X138)),X139,'type.list.list'(X137)))) ) | $spl6),
  inference(forward_demodulation,[],[f5859,f934])).
fof(f592,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK189(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK189(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK188(X2,X1,X0)),s('type.list.list'(X0),sK189(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK188,sK189])],[f399])).
fof(f399,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f398])).
fof(f398,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f232])).
fof(f232,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f231])).
fof(f231,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f89])).
fof(f89,axiom,(
  ! [X6] : ! [X7,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> ? [X31,X8] : (s('type.num.num',X22) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X31),s('type.list.list'(X6),X8)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.LENGTH_CONS')).
fof(f593,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK188(X2,X1,X0)),s('type.list.list'(X0),sK189(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f400])).
fof(f594,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f400])).
fof(f598,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK193(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f406,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK193(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK192(X2,X1,X0)),s('type.list.list'(X0),sK193(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK192,sK193])],[f405])).
fof(f405,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f404])).
fof(f404,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f236])).
fof(f236,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f235])).
fof(f235,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f87])).
fof(f87,axiom,(
  ! [X6] : ! [X7,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))))) <=> ? [X31,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X31),s('type.list.list'(X6),X8)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.LENGTH_EQ_NUM_compute|split|2')).
fof(f599,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK192(X2,X1,X0)),s('type.list.list'(X0),sK193(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f600,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f602,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK194(X2,X1,X0)),s('type.list.list'(X0),sK195(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f409,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK195(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK194(X2,X1,X0)),s('type.list.list'(X0),sK195(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK194,sK195])],[f408])).
fof(f408,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f407])).
fof(f407,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f237])).
fof(f237,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))) <=> ? [X31,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X31),s('type.list.list'(X6),X8)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.LENGTH_EQ_NUM_compute|split|1')).
fof(f675,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK399(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f482])).
fof(f482,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK399(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK400(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK399(X3,X2,X1,X0)),s('type.list.list'(X0),sK400(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK399,sK400])],[f481])).
fof(f481,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f480])).
fof(f480,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f288])).
fof(f288,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f287])).
fof(f287,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X7,X18,X19] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))) <=> ? [X20,X21] : (s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.num.num',X19) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X21))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.LENGTH_EQ_SUM')).
fof(f676,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK400(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f482])).
fof(f677,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK399(X3,X2,X1,X0)),s('type.list.list'(X0),sK400(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f482])).
fof(f678,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f482])).
fof(f728,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f603,f496])).
fof(f603,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f729,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK195(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f601,f496])).
fof(f601,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK195(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f3838,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f538,f537])).
fof(f3840,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X5),X6))) | s('type.list.list'(X5),'const.list.NIL_0') = s('type.list.list'(X5),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(X5),X6),s('type.list.list'(X5),X7)))) )),
  inference(superposition,[],[f538,f589])).
fof(f514,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X22] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|0')).
fof(f515,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f71])).
fof(f71,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_suc|split|1')).
fof(f524,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X22] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|9')).
fof(f703,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f77])).
fof(f77,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|8')).
fof(f1959,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f531,f515])).
fof(f4112,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15))))) | s('type.num.num',X16) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f712,f515])).
fof(f4117,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25)))))))) )),
  inference(superposition,[],[f712,f524])).
fof(f4570,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f525,f530])).
fof(f2554,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f522,f496])).
fof(f4134,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f496])).
fof(f512,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f94])).
fof(f94,axiom,(
  ! [X22] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|1')).
fof(f523,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X22] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|10')).
fof(f4116,plain,(
  ( ! [X24,X23] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))))) )),
  inference(superposition,[],[f712,f523])).
fof(f2347,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f2316,f515])).
fof(f2316,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f519,f496])).
fof(f522,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X22))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|16')).
fof(f695,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f303])).
fof(f303,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|12')).
fof(f696,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f304])).
fof(f304,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|5')).
fof(f697,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f305])).
fof(f305,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|8')).
fof(f698,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|2')).
fof(f712,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f486])).
fof(f486,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X22,X23] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) <=> s('type.num.num',X22) = s('type.num.num',X23))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|19')).
fof(f713,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f486])).
fof(f1956,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f531,f504])).
fof(f1957,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(superposition,[],[f531,f505])).
fof(f1961,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f531,f516])).
fof(f1963,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f531,f501])).
fof(f1971,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X14),s('type.num.num',X15)))) )),
  inference(superposition,[],[f531,f589])).
fof(f4104,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f712,f3967])).
fof(f4107,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f712,f504])).
fof(f4108,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f712,f684])).
fof(f4110,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f712,f505])).
fof(f4115,plain,(
  ( ! [X21,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f712,f723])).
fof(f4118,plain,(
  ( ! [X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f712,f2817])).
fof(f4119,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X28),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f516])).
fof(f4121,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f712,f501])).
fof(f4122,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) | s('type.num.num',X36) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X35)))) )),
  inference(superposition,[],[f712,f506])).
fof(f4123,plain,(
  ( ! [X37,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)))) )),
  inference(superposition,[],[f712,f510])).
fof(f4127,plain,(
  ( ! [X44] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44))) | s('type.num.num',X44) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f712,f493])).
fof(f4130,plain,(
  ( ! [X48,X49] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X49))) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f712,f499])).
fof(f4131,plain,(
  ( ! [X50,X51] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51))) | s('type.num.num',X51) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50)))) )),
  inference(superposition,[],[f712,f502])).
fof(f4133,plain,(
  ( ! [X57,X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))) | s('type.num.num',X57) = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',X55),s('type.num.num',X56)))) )),
  inference(superposition,[],[f712,f589])).
fof(f4271,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f713,f684])).
fof(f4258,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f684,f713])).
fof(f684,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f292])).
fof(f292,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X23,X22] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.ADD_SYM')).
fof(f3024,plain,(
  ( ! [X52,X53] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X52))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',X53)))) )),
  inference(superposition,[],[f531,f684])).
fof(f3025,plain,(
  ( ! [X54,X55] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X54))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55)))))) )),
  inference(superposition,[],[f532,f684])).
fof(f723,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f518,f496])).
fof(f518,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X22] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|11')).
fof(f2817,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f524,f496])).
fof(f5205,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f5175,f514])).
fof(f5175,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f528,f496])).
fof(f674,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f285])).
fof(f285,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6] : ! [X20,X21,X31] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X31),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),X21))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X31),s('type.list.list'(X6),X20))),s('type.list.list'(X6),X21)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.APPEND|split|1')).
fof(f7584,plain,(
  ( ! [X43,X44,X42] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num',X42))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43)))),X44,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num',X42))))))) )),
  inference(forward_demodulation,[],[f7562,f797])).
fof(f7562,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X43),s('type.num.num',X42)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43)))),X44,bool))) )),
  inference(superposition,[],[f668,f797])).
fof(f7537,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f797,f496])).
fof(f7567,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f7504,f500])).
fof(f7504,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f797,f2018])).
fof(f7503,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f797,f496])).
fof(f7414,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f7393,f693])).
fof(f7393,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40,bool))) )),
  inference(superposition,[],[f668,f693])).
fof(f7372,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f693,f496])).
fof(f7398,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f7338,f5984])).
fof(f7338,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f693,f496])).
fof(f7296,plain,(
  ( ! [X43,X44,X42] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X42))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43)))),X44,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X42))))))) )),
  inference(forward_demodulation,[],[f7275,f692])).
fof(f7275,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X42)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43)))),X44,bool))) )),
  inference(superposition,[],[f668,f692])).
fof(f7281,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f7250,f5984])).
fof(f7250,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f692,f496])).
fof(f7216,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f692,f496])).
fof(f7159,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39)))),X40,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f7140,f691])).
fof(f7140,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39)))),X40,bool))) )),
  inference(superposition,[],[f668,f691])).
fof(f7014,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39)))),X40,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f6995,f690])).
fof(f6995,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X39)))),X40,bool))) )),
  inference(superposition,[],[f668,f690])).
fof(f6901,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X39)))),X40,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f6882,f689])).
fof(f6882,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X39))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X39)))),X40,bool))) )),
  inference(superposition,[],[f668,f689])).
fof(f6359,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,sK396('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X10,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f6348,f6317])).
fof(f6348,plain,(
  ( ! [X10] : (~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK396('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X10,bool))) )),
  inference(superposition,[],[f668,f6317])).
fof(f6332,plain,(
  ( ! [X26,X27] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X26))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.num.|48|_0')),X27,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X26))))))) )),
  inference(forward_demodulation,[],[f6310,f730])).
fof(f6310,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X26)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.num.|48|_0')),X27,bool))) )),
  inference(superposition,[],[f668,f730])).
fof(f6317,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f6286,f500])).
fof(f6286,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f730,f2018])).
fof(f6316,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6315,f507])).
fof(f6315,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f6285,f687])).
fof(f6285,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f730,f496])).
fof(f6009,plain,(
  ( ! [X47,X45,X46] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X46))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))),s('type.num.num',X46)),X47,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X46))))))) )),
  inference(forward_demodulation,[],[f5979,f687])).
fof(f5979,plain,(
  ( ! [X47,X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X46)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))),s('type.num.num',X46))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))),s('type.num.num',X46)),X47,bool))) )),
  inference(superposition,[],[f668,f687])).
fof(f5922,plain,(
  ( ! [X6,X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f687,f519])).
fof(f5921,plain,(
  ( ! [X4,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f687,f520])).
fof(f5986,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(backward_demodulation,[],[f5984,f715])).
fof(f5985,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(backward_demodulation,[],[f5984,f714])).
fof(f5984,plain,(
  ( ! [X2,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f5920,f685])).
fof(f5920,plain,(
  ( ! [X2,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f687,f515])).
fof(f5919,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f687,f495])).
fof(f5859,plain,(
  ( ! [X138,X139,X137] : (s('type.list.list'(X137),X138) = s('type.list.list'(X137),sK396('const.list.APPEND_2'(s('type.list.list'(X137),'const.list.NIL_0'),s('type.list.list'(X137),X138)),X139,'type.list.list'(X137))) | ~p(s(bool,happ(s(fun('type.list.list'(X137),bool),X139),s('type.list.list'(X137),X138))))) )),
  inference(forward_demodulation,[],[f5789,f537])).
fof(f5789,plain,(
  ( ! [X138,X139,X137] : (~p(s(bool,happ(s(fun('type.list.list'(X137),bool),X139),s('type.list.list'(X137),X138)))) | s('type.list.list'(X137),'const.list.APPEND_2'(s('type.list.list'(X137),'const.list.NIL_0'),s('type.list.list'(X137),X138))) = s('type.list.list'(X137),sK396('const.list.APPEND_2'(s('type.list.list'(X137),'const.list.NIL_0'),s('type.list.list'(X137),X138)),X139,'type.list.list'(X137)))) )),
  inference(superposition,[],[f668,f537])).
fof(f5858,plain,(
  ( ! [X136,X135] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135)),X136,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X136),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5788,f502])).
fof(f5788,plain,(
  ( ! [X136,X135] : (~p(s(bool,happ(s(fun('type.num.num',bool),X136),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135))) = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135)),X136,'type.num.num'))) )),
  inference(superposition,[],[f668,f502])).
fof(f5857,plain,(
  ( ! [X134,X133] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num','const.num.|48|_0')),X134,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X134),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5787,f499])).
fof(f5787,plain,(
  ( ! [X134,X133] : (~p(s(bool,happ(s(fun('type.num.num',bool),X134),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num','const.num.|48|_0')),X134,'type.num.num'))) )),
  inference(superposition,[],[f668,f499])).
fof(f5856,plain,(
  ( ! [X132] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X132,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X132),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f5786,f2594])).
fof(f5786,plain,(
  ( ! [X132] : (~p(s(bool,happ(s(fun('type.num.num',bool),X132),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X132,'type.num.num'))) )),
  inference(superposition,[],[f668,f2594])).
fof(f5855,plain,(
  ( ! [X130,X131] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X130))))) = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130)))),X131,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X131),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X130))))))))) )),
  inference(forward_demodulation,[],[f5785,f522])).
fof(f5785,plain,(
  ( ! [X130,X131] : (~p(s(bool,happ(s(fun('type.num.num',bool),X131),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X130)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130))))) = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X130)))),X131,'type.num.num'))) )),
  inference(superposition,[],[f668,f522])).
fof(f5854,plain,(
  ( ! [X129] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X129,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X129),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5784,f493])).
fof(f5784,plain,(
  ( ! [X129] : (~p(s(bool,happ(s(fun('type.num.num',bool),X129),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X129,'type.num.num'))) )),
  inference(superposition,[],[f668,f493])).
fof(f5853,plain,(
  ( ! [X127,X128] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X127))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X127)))),X128,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X128),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X127))))))))) )),
  inference(forward_demodulation,[],[f5783,f521])).
fof(f5783,plain,(
  ( ! [X127,X128] : (~p(s(bool,happ(s(fun('type.num.num',bool),X128),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X127)))))))) | s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X127))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X127)))),X128,'type.num.num'))) )),
  inference(superposition,[],[f668,f521])).
fof(f5852,plain,(
  ( ! [X125,X126] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X125))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X125)))),X126,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X126),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X125))))))))) )),
  inference(forward_demodulation,[],[f5782,f517])).
fof(f5782,plain,(
  ( ! [X125,X126] : (~p(s(bool,happ(s(fun('type.num.num',bool),X126),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X125)))))))) | s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X125))))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X125)))),X126,'type.num.num'))) )),
  inference(superposition,[],[f668,f517])).
fof(f5851,plain,(
  ( ! [X124] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')),X124,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X124),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f5781,f494])).
fof(f5781,plain,(
  ( ! [X124] : (~p(s(bool,happ(s(fun('type.num.num',bool),X124),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')),X124,'type.num.num'))) )),
  inference(superposition,[],[f668,f494])).
fof(f5850,plain,(
  ( ! [X123,X122] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X122)),X123,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X123),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5780,f510])).
fof(f5780,plain,(
  ( ! [X123,X122] : (~p(s(bool,happ(s(fun('type.num.num',bool),X123),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X122))) = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X122)),X123,'type.num.num'))) )),
  inference(superposition,[],[f668,f510])).
fof(f5849,plain,(
  ( ! [X121,X120] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X120)),X121,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X121),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5779,f506])).
fof(f5779,plain,(
  ( ! [X121,X120] : (~p(s(bool,happ(s(fun('type.num.num',bool),X121),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X120))) = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X120),s('type.num.num',X120)),X121,'type.num.num'))) )),
  inference(superposition,[],[f668,f506])).
fof(f5848,plain,(
  ( ! [X118,X119] : (s('type.num.num',X118) = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X118),s('type.num.num','const.num.|48|_0')),X119,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X119),s('type.num.num',X118))))) )),
  inference(forward_demodulation,[],[f5778,f501])).
fof(f5778,plain,(
  ( ! [X118,X119] : (~p(s(bool,happ(s(fun('type.num.num',bool),X119),s('type.num.num',X118)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X118),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.-_2'(s('type.num.num',X118),s('type.num.num','const.num.|48|_0')),X119,'type.num.num'))) )),
  inference(superposition,[],[f668,f501])).
fof(f5847,plain,(
  ( ! [X116,X117] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X116))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X116))),s('type.num.num','const.arithmetic.ZERO_0')),X117,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X117),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X116))))))) )),
  inference(forward_demodulation,[],[f5777,f526])).
fof(f5777,plain,(
  ( ! [X116,X117] : (~p(s(bool,happ(s(fun('type.num.num',bool),X117),s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X116)))))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X116))),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X116))),s('type.num.num','const.arithmetic.ZERO_0')),X117,'type.num.num'))) )),
  inference(superposition,[],[f668,f526])).
fof(f5846,plain,(
  ( ! [X114,X115] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X114))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X114))),s('type.num.num','const.arithmetic.ZERO_0')),X115,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X115),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X114))))))) )),
  inference(forward_demodulation,[],[f5776,f525])).
fof(f5776,plain,(
  ( ! [X114,X115] : (~p(s(bool,happ(s(fun('type.num.num',bool),X115),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X114)))))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X114))),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X114))),s('type.num.num','const.arithmetic.ZERO_0')),X115,'type.num.num'))) )),
  inference(superposition,[],[f668,f525])).
fof(f5845,plain,(
  ( ! [X111,X112,X113] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,X111),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X112)),X113,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X113),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f5775,f683])).
fof(f5775,plain,(
  ( ! [X111,X112,X113] : (~p(s(bool,happ(s(fun('type.num.num',bool),X113),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,X111),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X112))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,X111),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X112)),X113,'type.num.num'))) )),
  inference(superposition,[],[f668,f683])).
fof(f5844,plain,(
  ( ! [X109,X110] : (s('type.num.num',X109) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X109),s('type.num.num','const.arithmetic.ZERO_0')),X110,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X110),s('type.num.num',X109))))) )),
  inference(forward_demodulation,[],[f5774,f516])).
fof(f5774,plain,(
  ( ! [X109,X110] : (~p(s(bool,happ(s(fun('type.num.num',bool),X110),s('type.num.num',X109)))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X109),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X109),s('type.num.num','const.arithmetic.ZERO_0')),X110,'type.num.num'))) )),
  inference(superposition,[],[f668,f516])).
fof(f5843,plain,(
  ( ! [X108] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X108,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X108),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5773,f2817])).
fof(f5773,plain,(
  ( ! [X108] : (~p(s(bool,happ(s(fun('type.num.num',bool),X108),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X108,'type.num.num'))) )),
  inference(superposition,[],[f668,f2817])).
fof(f5842,plain,(
  ( ! [X107,X106] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X106)))))),X107,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X107),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5772,f524])).
fof(f5772,plain,(
  ( ! [X107,X106] : (~p(s(bool,happ(s(fun('type.num.num',bool),X107),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X106))))))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X106)))))),X107,'type.num.num'))) )),
  inference(superposition,[],[f668,f524])).
fof(f5841,plain,(
  ( ! [X105,X104] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X104)))))),X105,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X105),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5771,f523])).
fof(f5771,plain,(
  ( ! [X105,X104] : (~p(s(bool,happ(s(fun('type.num.num',bool),X105),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X104))))))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X104)))))),X105,'type.num.num'))) )),
  inference(superposition,[],[f668,f523])).
fof(f5840,plain,(
  ( ! [X103,X102] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')),X103,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X103),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5770,f723])).
fof(f5770,plain,(
  ( ! [X103,X102] : (~p(s(bool,happ(s(fun('type.num.num',bool),X103),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.EXP_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')),X103,'type.num.num'))) )),
  inference(superposition,[],[f668,f723])).
fof(f5839,plain,(
  ( ! [X101,X100] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X100))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100)))),X101,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X100))))))))) )),
  inference(forward_demodulation,[],[f5769,f519])).
fof(f5769,plain,(
  ( ! [X101,X100] : (~p(s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X100)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100)))),X101,'type.num.num'))) )),
  inference(superposition,[],[f668,f519])).
fof(f5838,plain,(
  ( ! [X99,X98] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X98)))),X99,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X99),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98))))))))) )),
  inference(forward_demodulation,[],[f5768,f520])).
fof(f5768,plain,(
  ( ! [X99,X98] : (~p(s(bool,happ(s(fun('type.num.num',bool),X99),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X98)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X98))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X98)))),X99,'type.num.num'))) )),
  inference(superposition,[],[f668,f520])).
fof(f5837,plain,(
  ( ! [X97,X96] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X96))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X96)))),X97,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X97),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X96))))))) )),
  inference(forward_demodulation,[],[f5767,f515])).
fof(f5767,plain,(
  ( ! [X97,X96] : (~p(s(bool,happ(s(fun('type.num.num',bool),X97),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X96)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X96))))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X96)))),X97,'type.num.num'))) )),
  inference(superposition,[],[f668,f515])).
fof(f5836,plain,(
  ( ! [X95] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X95,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X95),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f5766,f495])).
fof(f5766,plain,(
  ( ! [X95] : (~p(s(bool,happ(s(fun('type.num.num',bool),X95),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X95,'type.num.num'))) )),
  inference(superposition,[],[f668,f495])).
fof(f5835,plain,(
  ( ! [X94,X93] : (s('type.num.num',X93) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93)),X94,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X94),s('type.num.num',X93))))) )),
  inference(forward_demodulation,[],[f5765,f505])).
fof(f5765,plain,(
  ( ! [X94,X93] : (~p(s(bool,happ(s(fun('type.num.num',bool),X94),s('type.num.num',X93)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93))) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93)),X94,'type.num.num'))) )),
  inference(superposition,[],[f668,f505])).
fof(f5763,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,happ(s(fun('type.num.num',bool),X89),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num',X87)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88)),X89,'type.num.num'))) )),
  inference(superposition,[],[f668,f684])).
fof(f5834,plain,(
  ( ! [X85,X86] : (s('type.num.num',X85) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')),X86,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X86),s('type.num.num',X85))))) )),
  inference(forward_demodulation,[],[f5762,f504])).
fof(f5762,plain,(
  ( ! [X85,X86] : (~p(s(bool,happ(s(fun('type.num.num',bool),X86),s('type.num.num',X85)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')),X86,'type.num.num'))) )),
  inference(superposition,[],[f668,f504])).
fof(f5833,plain,(
  ( ! [X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X84,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5761,f2018])).
fof(f5761,plain,(
  ( ! [X84] : (~p(s(bool,happ(s(fun('type.num.num',bool),X84),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X84,'type.num.num'))) )),
  inference(superposition,[],[f668,f2018])).
fof(f5832,plain,(
  ( ! [X83] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X83,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X83),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5760,f496])).
fof(f5760,plain,(
  ( ! [X83] : (~p(s(bool,happ(s(fun('type.num.num',bool),X83),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK396('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X83,'type.num.num'))) )),
  inference(superposition,[],[f668,f496])).
fof(f5831,plain,(
  ( ! [X81,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK396('const.list.LENGTH_1'(s('type.list.list'(X81),'const.list.NIL_0')),X82,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X82),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5759,f3967])).
fof(f5759,plain,(
  ( ! [X81,X82] : (~p(s(bool,happ(s(fun('type.num.num',bool),X82),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X81),'const.list.NIL_0'))) = s('type.num.num',sK396('const.list.LENGTH_1'(s('type.list.list'(X81),'const.list.NIL_0')),X82,'type.num.num'))) )),
  inference(superposition,[],[f668,f3967])).
fof(f5830,plain,(
  ( ! [X80] : (s(bool,'T_0') = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X80,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5758,f2109])).
fof(f5758,plain,(
  ( ! [X80] : (~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X80,bool))) )),
  inference(superposition,[],[f668,f2109])).
fof(f5829,plain,(
  ( ! [X78,X79] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X78))) = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X79),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X78))))))) )),
  inference(forward_demodulation,[],[f5757,f513])).
fof(f5757,plain,(
  ( ! [X78,X79] : (~p(s(bool,happ(s(fun(bool,bool),X79),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X78)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))) = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79,bool))) )),
  inference(superposition,[],[f668,f513])).
fof(f5828,plain,(
  ( ! [X77] : (s(bool,'T_0') = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X77,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5756,f932])).
fof(f5756,plain,(
  ( ! [X77] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X77,bool))) )),
  inference(superposition,[],[f668,f932])).
fof(f5825,plain,(
  ( ! [X72,X73] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X72))) = s(bool,sK396('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72)))),X73,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X72))))))) )),
  inference(forward_demodulation,[],[f5753,f511])).
fof(f5753,plain,(
  ( ! [X72,X73] : (~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X72)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72))))) = s(bool,sK396('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X72)))),X73,bool))) )),
  inference(superposition,[],[f668,f511])).
fof(f5822,plain,(
  ( ! [X68,X66,X67] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X67),s('type.num.num',X66))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num',X67)),X68,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X67),s('type.num.num',X66))))))) )),
  inference(forward_demodulation,[],[f5750,f685])).
fof(f5750,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X67),s('type.num.num',X66)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num',X67))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num',X67)),X68,bool))) )),
  inference(superposition,[],[f668,f685])).
fof(f5820,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X61)),X62,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5748,f500])).
fof(f5748,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X61))) = s(bool,sK396('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X61)),X62,bool))) )),
  inference(superposition,[],[f668,f500])).
fof(f5819,plain,(
  ( ! [X59,X60] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X59))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.num.|48|_0')),X60,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X59))))))) )),
  inference(forward_demodulation,[],[f5747,f528])).
fof(f5747,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X59)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.num.|48|_0')),X60,bool))) )),
  inference(superposition,[],[f668,f528])).
fof(f5817,plain,(
  ( ! [X54,X56,X55] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num',X54))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num',X54),s('type.num.num',X55)),X56,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num',X54))))))) )),
  inference(forward_demodulation,[],[f5745,f686])).
fof(f5745,plain,(
  ( ! [X54,X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num',X54)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X54),s('type.num.num',X55))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num',X54),s('type.num.num',X55)),X56,bool))) )),
  inference(superposition,[],[f668,f686])).
fof(f5815,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)),X50,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5814,f507])).
fof(f5814,plain,(
  ( ! [X50,X49] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)),X50,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5743,f686])).
fof(f5743,plain,(
  ( ! [X50,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) = s(bool,sK396('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)),X50,bool))) )),
  inference(superposition,[],[f668,f503])).
fof(f5811,plain,(
  ( ! [X45,X44] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X44))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X44))))))) )),
  inference(forward_demodulation,[],[f5740,f529])).
fof(f5740,plain,(
  ( ! [X45,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X44)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,bool))) )),
  inference(superposition,[],[f668,f529])).
fof(f5809,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X40)))),X41,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5738,f514])).
fof(f5738,plain,(
  ( ! [X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),X41),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X40))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X40)))),X41,bool))) )),
  inference(superposition,[],[f668,f514])).
fof(f5808,plain,(
  ( ! [X39,X38] : (s(bool,'T_0') = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5737,f512])).
fof(f5737,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,bool))) )),
  inference(superposition,[],[f668,f512])).
fof(f5807,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.ZERO_0')),X37,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5736,f509])).
fof(f5736,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.ZERO_0')),X37,bool))) )),
  inference(superposition,[],[f668,f509])).
fof(f5806,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5735,f507])).
fof(f5735,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35,bool))) )),
  inference(superposition,[],[f668,f507])).
fof(f5800,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,sK396('const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0')),X22,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f5727,f508])).
fof(f5727,plain,(
  ( ! [X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0'))) = s(bool,sK396('const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0')),X22,bool))) )),
  inference(superposition,[],[f668,f508])).
fof(f5726,plain,(
  ( ! [X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,X19)))) | s(bool,'F_0') = s(bool,sK396('F_0',X20,bool)) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f668,f530])).
fof(f5796,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,X5) = s(X4,sK396('const.bool.COND_3'(s(bool,'T_0'),s(X4,X5),s(X4,X6)),X7,X4)) | ~p(s(bool,happ(s(fun(X4,bool),X7),s(X4,X5))))) )),
  inference(forward_demodulation,[],[f5720,f589])).
fof(f5720,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X7),s(X4,X5)))) | s(X4,'const.bool.COND_3'(s(bool,'T_0'),s(X4,X5),s(X4,X6))) = s(X4,sK396('const.bool.COND_3'(s(bool,'T_0'),s(X4,X5),s(X4,X6)),X7,X4))) )),
  inference(superposition,[],[f668,f589])).
fof(f5795,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK396('const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)),X3,X0)) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f5719,f588])).
fof(f5719,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X2)))) | s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2))) = s(X0,sK396('const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)),X3,X0))) )),
  inference(superposition,[],[f668,f588])).
fof(f5718,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(X4,X7) = s(X4,sK396(X7,'const.bool.COND_3'(s(bool,'T_0'),s(fun(X4,bool),X5),s(fun(X4,bool),X6)),X4))) )),
  inference(superposition,[],[f668,f589])).
fof(f5717,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | s(X0,X3) = s(X0,sK396(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) )),
  inference(superposition,[],[f668,f588])).
fof(f4189,plain,(
  ( ! [X47] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X47))) | s('type.num.num',X47) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f4129,f2018])).
fof(f4129,plain,(
  ( ! [X47] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X47))) | s('type.num.num',X47) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f2594])).
fof(f4185,plain,(
  ( ! [X39] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))) | s('type.num.num',X39) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f4124,f2018])).
fof(f4124,plain,(
  ( ! [X39] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))) | s('type.num.num',X39) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f712,f494])).
fof(f4184,plain,(
  ( ! [X30,X31,X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X30),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X31)))) )),
  inference(forward_demodulation,[],[f4120,f2018])).
fof(f4120,plain,(
  ( ! [X30,X31,X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X30),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X31)))) )),
  inference(superposition,[],[f712,f683])).
fof(f3027,plain,(
  ( ! [X59,X58] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X58)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59)))) )),
  inference(superposition,[],[f536,f684])).
fof(f3026,plain,(
  ( ! [X57,X56] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X56)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X57)))) )),
  inference(superposition,[],[f535,f684])).
fof(f2928,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f2912,f497])).
fof(f2912,plain,(
  ( ! [X19,X18] : (p(s(bool,'F_0')) | s(bool,X19) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f971,f503])).
fof(f2927,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f2909,f497])).
fof(f2909,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f971,f509])).
fof(f2926,plain,(
  ( ! [X10,X11] : (s(bool,X11) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f2908,f497])).
fof(f2908,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | s(bool,X11) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f971,f507])).
fof(f2594,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f2589,f531])).
fof(f2589,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f2555,f493])).
fof(f2555,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f522,f2018])).
fof(f2194,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f2142,f497])).
fof(f2142,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f536,f530])).
fof(f2109,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2080,f932])).
fof(f2080,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f513,f2018])).
fof(f2018,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1997,f589])).
fof(f1997,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f589,f532])).
fof(f1829,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f589,f530])).
fof(f1741,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1)))) )),
  inference(superposition,[],[f588,f530])).
fof(f1683,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f588,f530])).
fof(f1593,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f513,f530])).
fof(f1592,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f513,f496])).
fof(f1549,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f511,f530])).
fof(f1548,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f511,f496])).
fof(f503,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X22] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|23')).
fof(f509,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X22] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|2')).
fof(f976,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,X7)) )),
  inference(forward_demodulation,[],[f975,f507])).
fof(f975,plain,(
  ( ! [X6,X7] : (p(s(bool,X7)) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f956,f497])).
fof(f956,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | p(s(bool,X7)) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f708,f507])).
fof(f798,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f694,f685])).
fof(f694,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X22,X23] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|31')).
fof(f797,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f688,f685])).
fof(f688,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f296])).
fof(f296,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X22,X23] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|28')).
fof(f564,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK70(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK71(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK72(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK73(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK74(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK75(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK76(X1,X0)),s('type.list.list'(X0),sK69(X1,X0))))))))))))))))) )),
  inference(cnf_transformation,[],[f363])).
fof(f768,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK105(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK106(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK107(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK108(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK109(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK110(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK111(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK112(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK113(X1,X0)),s('type.list.list'(X0),sK104(X1,X0))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f572])).
fof(f578,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK135(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK136(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK137(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK138(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK139(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK140(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK141(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK142(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK143(X1,X0)),s('type.list.list'(X0),sK134(X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f384])).
fof(f384,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK135(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK136(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK137(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK138(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK139(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK140(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK141(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK142(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK143(X1,X0)),s('type.list.list'(X0),sK134(X1,X0))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK134,sK135,sK136,sK137,sK138,sK139,sK140,sK141,sK142,sK143])],[f383])).
fof(f383,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f382])).
fof(f382,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f215])).
fof(f215,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f105])).
fof(f105,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|19')).
fof(f579,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(cnf_transformation,[],[f384])).
fof(f766,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK178(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK179(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK180(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK181(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK182(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK183(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK184(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK185(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK186(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK187(X1,X0)),s('type.list.list'(X0),sK177(X1,X0))))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f586])).
fof(f584,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK167(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK168(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK169(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK170(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK171(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK172(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK173(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK174(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK175(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK176(X1,X0)),s('type.list.list'(X0),sK166(X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f393])).
fof(f393,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK167(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK168(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK169(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK170(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK171(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK172(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK173(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK174(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK175(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK176(X1,X0)),s('type.list.list'(X0),sK166(X1,X0))))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK166,sK167,sK168,sK169,sK170,sK171,sK172,sK173,sK174,sK175,sK176])],[f392])).
fof(f392,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),X13)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f391])).
fof(f391,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(flattening,[],[f221])).
fof(f221,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(rectify,[],[f100])).
fof(f100,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|5')).
fof(f585,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f393])).
fof(f748,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK280(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f628])).
fof(f734,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) )),
  inference(backward_demodulation,[],[f685,f630])).
fof(f629,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK281(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK282(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK283(X2,X1,X0)),s('type.list.list'(X0),sK280(X2,X1,X0))))))))) )),
  inference(cnf_transformation,[],[f436])).
fof(f436,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK280(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK281(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK282(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK283(X2,X1,X0)),s('type.list.list'(X0),sK280(X2,X1,X0)))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK280,sK281,sK282,sK283])],[f435])).
fof(f435,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X7))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f434])).
fof(f434,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f256])).
fof(f256,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(flattening,[],[f255])).
fof(f255,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(rectify,[],[f131])).
fof(f131,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X8)))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_3|split|9')).
fof(f752,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK304(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f640])).
fof(f738,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f642])).
fof(f641,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK305(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK306(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK307(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK308(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK309(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK310(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK311(X2,X1,X0)),s('type.list.list'(X0),sK304(X2,X1,X0)))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f448])).
fof(f448,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK304(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK305(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK306(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK307(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK308(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK309(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK310(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK311(X2,X1,X0)),s('type.list.list'(X0),sK304(X2,X1,X0)))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK304,sK305,sK306,sK307,sK308,sK309,sK310,sK311])],[f447])).
fof(f447,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X11)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X11))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(rectify,[],[f446])).
fof(f446,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(nnf_transformation,[],[f264])).
fof(f264,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(rectify,[],[f107])).
fof(f107,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X8)))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_7|split|9')).
fof(f773,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK313(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK314(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK315(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK316(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK317(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK318(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK319(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK320(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK321(X2,X1,X0)),s('type.list.list'(X0),sK312(X2,X1,X0))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f644])).
fof(f755,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK332(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f649])).
fof(f784,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK312(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f753,f685])).
fof(f753,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK312(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f685,f643])).
fof(f778,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) )),
  inference(forward_demodulation,[],[f739,f685])).
fof(f739,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f645])).
fof(f650,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK333(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK334(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK335(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK336(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK337(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK338(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK339(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK340(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK341(X2,X1,X0)),s('type.list.list'(X0),sK332(X2,X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f457])).
fof(f457,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK332(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK333(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK334(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK335(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK336(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK337(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK338(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK339(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK340(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK341(X2,X1,X0)),s('type.list.list'(X0),sK332(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK332,sK333,sK334,sK335,sK336,sK337,sK338,sK339,sK340,sK341])],[f456])).
fof(f456,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(rectify,[],[f455])).
fof(f455,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(nnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f269])).
fof(f269,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|23')).
fof(f774,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK364(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK365(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK366(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK367(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK368(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK369(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK370(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK371(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK372(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK373(X2,X1,X0)),s('type.list.list'(X0),sK363(X2,X1,X0))))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f659])).
fof(f760,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK385(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f664])).
fof(f787,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK363(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f758,f685])).
fof(f758,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK363(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f685,f658])).
fof(f781,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f744,f685])).
fof(f744,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f660])).
fof(f665,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK386(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK387(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK388(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK389(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK390(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK391(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK392(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK393(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK394(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK395(X2,X1,X0)),s('type.list.list'(X0),sK385(X2,X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f472,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK385(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK386(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK387(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK388(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK389(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK390(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK391(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK392(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK393(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK394(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK395(X2,X1,X0)),s('type.list.list'(X0),sK385(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK385,sK386,sK387,sK388,sK389,sK390,sK391,sK392,sK393,sK394,sK395])],[f471])).
fof(f471,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(rectify,[],[f470])).
fof(f470,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(nnf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f279])).
fof(f279,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f101])).
fof(f101,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|9')).
fof(f776,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)),s('type.list.list'(X0),sK402(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f685,f681])).
fof(f775,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK401(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f685,f679])).
fof(f788,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK402(X3,X2,X1,X0)))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f761,f685])).
fof(f761,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK402(X3,X2,X1,X0)))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(backward_demodulation,[],[f685,f680])).
fof(f782,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f747,f685])).
fof(f747,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(backward_demodulation,[],[f685,f682])).
fof(f749,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK284(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f631])).
fof(f735,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) )),
  inference(backward_demodulation,[],[f685,f633])).
fof(f632,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK285(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK286(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK287(X2,X1,X0)),s('type.list.list'(X0),sK284(X2,X1,X0))))))))) )),
  inference(cnf_transformation,[],[f439])).
fof(f439,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK284(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK285(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK286(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK287(X2,X1,X0)),s('type.list.list'(X0),sK284(X2,X1,X0)))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK284,sK285,sK286,sK287])],[f438])).
fof(f438,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | ? [X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X7))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f437])).
fof(f437,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))) & (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(flattening,[],[f257])).
fof(f257,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(rectify,[],[f132])).
fof(f132,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X28)))))) <=> ? [X8,X9,X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X8)))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_3|split|7')).
fof(f770,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK289(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK290(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK291(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK292(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK293(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK294(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK295(X2,X1,X0)),s('type.list.list'(X0),sK288(X2,X1,X0))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f635])).
fof(f751,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK296(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f637])).
fof(f783,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK288(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f750,f685])).
fof(f750,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK288(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f685,f634])).
fof(f777,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) )),
  inference(forward_demodulation,[],[f736,f685])).
fof(f736,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f636])).
fof(f638,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK297(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK298(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK299(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK300(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK301(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK302(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK303(X2,X1,X0)),s('type.list.list'(X0),sK296(X2,X1,X0)))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f445])).
fof(f445,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK296(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK297(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK298(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK299(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK300(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK301(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK302(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK303(X2,X1,X0)),s('type.list.list'(X0),sK296(X2,X1,X0)))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK296,sK297,sK298,sK299,sK300,sK301,sK302,sK303])],[f444])).
fof(f444,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X11)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X11))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f443])).
fof(f443,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f262])).
fof(f262,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(flattening,[],[f261])).
fof(f261,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X8)))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_7|split|7')).
fof(f771,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK323(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK324(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK325(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK326(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK327(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK328(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK329(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK330(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK331(X2,X1,X0)),s('type.list.list'(X0),sK322(X2,X1,X0))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f647])).
fof(f756,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK342(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f652])).
fof(f785,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK322(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f754,f685])).
fof(f754,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK322(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f685,f646])).
fof(f779,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) )),
  inference(forward_demodulation,[],[f740,f685])).
fof(f740,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f648])).
fof(f653,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK343(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK344(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK345(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK346(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK347(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK348(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK349(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK350(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK351(X2,X1,X0)),s('type.list.list'(X0),sK342(X2,X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f460,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK342(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK343(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK344(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK345(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK346(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK347(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK348(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK349(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK350(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK351(X2,X1,X0)),s('type.list.list'(X0),sK342(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK342,sK343,sK344,sK345,sK346,sK347,sK348,sK349,sK350,sK351])],[f459])).
fof(f459,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f458])).
fof(f458,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f272])).
fof(f272,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f271])).
fof(f271,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|21')).
fof(f772,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK353(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK354(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK355(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK356(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK357(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK358(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK359(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK360(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK361(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK362(X2,X1,X0)),s('type.list.list'(X0),sK352(X2,X1,X0))))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f656])).
fof(f759,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK374(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(backward_demodulation,[],[f685,f661])).
fof(f786,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK352(X2,X1,X0)))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f757,f685])).
fof(f757,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK352(X2,X1,X0)))),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(backward_demodulation,[],[f685,f655])).
fof(f780,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f743,f685])).
fof(f743,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f685,f657])).
fof(f662,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK375(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK376(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK377(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK378(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK379(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK380(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK381(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK382(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK383(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK384(X2,X1,X0)),s('type.list.list'(X0),sK374(X2,X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f469,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK374(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK375(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK376(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK377(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK378(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK379(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK380(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK381(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK382(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK383(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK384(X2,X1,X0)),s('type.list.list'(X0),sK374(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK374,sK375,sK376,sK377,sK378,sK379,sK380,sK381,sK382,sK383,sK384])],[f468])).
fof(f468,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(rectify,[],[f467])).
fof(f467,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f277])).
fof(f277,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f102])).
fof(f102,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|7')).
fof(f731,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK190(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f685,f595])).
fof(f732,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK190(X2,X1,X0)),s('type.list.list'(X0),sK191(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f685,f596])).
fof(f733,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f685,f597])).
fof(f542,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f336])).
fof(f336,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f179])).
fof(f179,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f543,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f336])).
fof(f686,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f294])).
fof(f294,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X23,X22] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.GREATER_DEF')).
fof(f689,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X22,X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|4')).
fof(f690,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f298])).
fof(f298,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X22,X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|3')).
fof(f691,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X22,X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|6')).
fof(f692,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f300])).
fof(f300,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f73])).
fof(f73,axiom,(
  ! [X22,X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|25')).
fof(f693,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f301])).
fof(f301,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f74])).
fof(f74,axiom,(
  ! [X22,X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|22')).
fof(f707,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X22,X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_sub')).
fof(f714,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f487])).
fof(f487,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f319])).
fof(f319,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f318])).
fof(f318,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X22,X23] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_lt|split|5')).
fof(f715,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f487])).
fof(f726,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f549,f496])).
fof(f549,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f339])).
fof(f529,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f95])).
fof(f95,axiom,(
  ! [X22] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|21')).
fof(f528,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X22] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|24')).
fof(f789,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK87(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK88(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK89(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK90(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK91(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK92(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK93(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK94(X1,X0)),s('type.list.list'(X0),sK86(X1,X0))))))))))))))))))) )),
  inference(backward_demodulation,[],[f686,f568])).
fof(f570,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK96(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK97(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK98(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK99(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK100(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK101(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK102(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK103(X1,X0)),s('type.list.list'(X0),sK95(X1,X0))))))))))))))))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f372,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK96(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK97(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK98(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK99(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK100(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK101(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK102(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK103(X1,X0)),s('type.list.list'(X0),sK95(X1,X0))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK95,sK96,sK97,sK98,sK99,sK100,sK101,sK102,sK103])],[f371])).
fof(f371,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),X11)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f370])).
fof(f370,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f208])).
fof(f208,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(flattening,[],[f207])).
fof(f207,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(rectify,[],[f109])).
fof(f109,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X8))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|30')).
fof(f571,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f791,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK145(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK146(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK147(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK148(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK149(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK150(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK151(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK152(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK153(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK154(X1,X0)),s('type.list.list'(X0),sK144(X1,X0))))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f686,f580])).
fof(f582,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK156(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK157(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK158(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK159(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK160(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK161(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK162(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK163(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK164(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK165(X1,X0)),s('type.list.list'(X0),sK155(X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK156(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK157(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK158(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK159(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK160(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK161(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK162(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK163(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK164(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK165(X1,X0)),s('type.list.list'(X0),sK155(X1,X0))))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK155,sK156,sK157,sK158,sK159,sK160,sK161,sK162,sK163,sK164,sK165])],[f389])).
fof(f389,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),X13)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f388])).
fof(f388,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(flattening,[],[f219])).
fof(f219,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(rectify,[],[f121])).
fof(f121,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|2')).
fof(f583,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f793,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK120(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK121(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK122(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK123(X1,X0)),s('type.list.list'(X0),sK114(X1,X0))))))))))))))))))))) )),
  inference(backward_demodulation,[],[f686,f574])).
fof(f576,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK125(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK126(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK127(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK128(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK129(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK130(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK131(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK132(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK133(X1,X0)),s('type.list.list'(X0),sK124(X1,X0)))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f381,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK125(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK126(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK127(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK128(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK129(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK130(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK131(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK132(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK133(X1,X0)),s('type.list.list'(X0),sK124(X1,X0))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK124,sK125,sK126,sK127,sK128,sK129,sK130,sK131,sK132,sK133])],[f380])).
fof(f380,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f379])).
fof(f379,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f214])).
fof(f214,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f213])).
fof(f213,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|16')).
fof(f577,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f670,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK397(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f479])).
fof(f479,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK397(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK398(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK397,sK398])],[f478])).
fof(f478,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f477])).
fof(f477,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f476])).
fof(f476,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f283])).
fof(f283,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X6] : ! [X32,X33] : (? [X28] : (p(s(bool,happ(s(fun(X6,bool),X32),s(X6,X28)))) & p(s(bool,X33))) <=> (? [X28] : p(s(bool,happ(s(fun(X6,bool),X32),s(X6,X28)))) & p(s(bool,X33))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f672,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK398(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f479])).
fof(f667,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f475])).
fof(f475,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK396(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK396(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK396])],[f474])).
fof(f474,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f473])).
fof(f473,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f281])).
fof(f281,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f99])).
fof(f99,axiom,(
  ! [X6] : ! [X32,X35] : (? [X28] : (s(X6,X28) = s(X6,X35) & p(s(bool,happ(s(fun(X6,bool),X32),s(X6,X28))))) <=> p(s(bool,happ(s(fun(X6,bool),X32),s(X6,X35)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.bool.UNWIND_THM2')).
fof(f668,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK396(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f475])).
fof(f669,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK396(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f511,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X22] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X22))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|32')).
fof(f513,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X22] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X22))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|33')).
fof(f932,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f929,f497])).
fof(f929,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f492,f530])).
fof(f919,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f530,f530])).
fof(f717,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK403(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK403(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f488])).
fof(f488,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK403(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK403(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK403])],[f327])).
fof(f327,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f322])).
fof(f322,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33',aHL_EXT)).
fof(f711,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f326])).
fof(f683,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X1),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X1),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X28,X29] : s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X29),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iSUB_THM|split|0')).
fof(f679,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f485])).
fof(f485,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK402(X3,X2,X1,X0))))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)),s('type.list.list'(X0),sK402(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK401,sK402])],[f484])).
fof(f484,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X6,X7] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f483])).
fof(f483,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f290])).
fof(f290,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f289])).
fof(f289,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X22,X23,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X20,X21] : (s('type.num.num',X22) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X21)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LENGTH_LE_PLUS')).
fof(f680,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK402(X3,X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f485])).
fof(f681,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK401(X3,X2,X1,X0)),s('type.list.list'(X0),sK402(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f485])).
fof(f682,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f485])).
fof(f664,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK385(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f666,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f661,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK374(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f663,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f658,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK363(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f466,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK363(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK364(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK365(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK366(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK367(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK368(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK369(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK370(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK371(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK372(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK373(X2,X1,X0)),s('type.list.list'(X0),sK363(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK363,sK364,sK365,sK366,sK367,sK368,sK369,sK370,sK371,sK372,sK373])],[f465])).
fof(f465,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f464])).
fof(f464,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f276])).
fof(f276,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f275])).
fof(f275,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f111])).
fof(f111,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|8')).
fof(f659,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK364(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK365(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK366(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK367(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK368(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK369(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK370(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK371(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK372(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK373(X2,X1,X0)),s('type.list.list'(X0),sK363(X2,X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f660,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f655,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK352(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f463,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK352(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK353(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK354(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK355(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK356(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK357(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK358(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK359(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK360(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK361(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK362(X2,X1,X0)),s('type.list.list'(X0),sK352(X2,X1,X0)))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK352,sK353,sK354,sK355,sK356,sK357,sK358,sK359,sK360,sK361,sK362])],[f462])).
fof(f462,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X14)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X24),s('type.list.list'(X0),X14))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f461])).
fof(f461,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(flattening,[],[f273])).
fof(f273,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3)))))))))))))))))))))))),
  inference(rectify,[],[f112])).
fof(f112,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8)))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|6')).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK353(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK354(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK355(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK356(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK357(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK358(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK359(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK360(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK361(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK362(X2,X1,X0)),s('type.list.list'(X0),sK352(X2,X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f657,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X3))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f652,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK342(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f654,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f649,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK332(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f457])).
fof(f651,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f457])).
fof(f646,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK322(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f454])).
fof(f454,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK322(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK323(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK324(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK325(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK326(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK327(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK328(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK329(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK330(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK331(X2,X1,X0)),s('type.list.list'(X0),sK322(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK322,sK323,sK324,sK325,sK326,sK327,sK328,sK329,sK330,sK331])],[f453])).
fof(f453,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f452])).
fof(f452,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f268])).
fof(f268,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f267])).
fof(f267,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f122])).
fof(f122,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|20')).
fof(f647,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK323(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK324(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK325(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK326(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK327(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK328(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK329(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK330(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK331(X2,X1,X0)),s('type.list.list'(X0),sK322(X2,X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f454])).
fof(f648,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f454])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK312(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f451])).
fof(f451,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK312(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK313(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK314(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK315(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK316(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK317(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK318(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK319(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK320(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK321(X2,X1,X0)),s('type.list.list'(X0),sK312(X2,X1,X0)))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK312,sK313,sK314,sK315,sK316,sK317,sK318,sK319,sK320,sK321])],[f450])).
fof(f450,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X13)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),X13))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f449])).
fof(f449,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f266])).
fof(f266,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(flattening,[],[f265])).
fof(f265,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3)))))))))))))))))))))),
  inference(rectify,[],[f120])).
fof(f120,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8)))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|22')).
fof(f644,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK313(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK314(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK315(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK316(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK317(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK318(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK319(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK320(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK321(X2,X1,X0)),s('type.list.list'(X0),sK312(X2,X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f451])).
fof(f645,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X3))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f451])).
fof(f640,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK304(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) )),
  inference(cnf_transformation,[],[f448])).
fof(f642,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f448])).
fof(f637,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK296(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f445])).
fof(f639,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f445])).
fof(f634,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK288(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f442])).
fof(f442,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK288(X2,X1,X0))))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK289(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK290(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK291(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK292(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK293(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK294(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK295(X2,X1,X0)),s('type.list.list'(X0),sK288(X2,X1,X0)))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK288,sK289,sK290,sK291,sK292,sK293,sK294,sK295])],[f441])).
fof(f441,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X11)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X11))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f440])).
fof(f440,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(flattening,[],[f259])).
fof(f259,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(rectify,[],[f134])).
fof(f134,axiom,(
  ! [X6] : ! [X28,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X28))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X8)))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_7|split|6')).
fof(f635,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK289(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK290(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK291(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK292(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK293(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK294(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK295(X2,X1,X0)),s('type.list.list'(X0),sK288(X2,X1,X0)))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f442])).
fof(f636,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f442])).
fof(f631,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK284(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f439])).
fof(f633,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f439])).
fof(f628,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK280(X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f436])).
fof(f630,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f436])).
fof(f595,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK190(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK190(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK190(X2,X1,X0)),s('type.list.list'(X0),sK191(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK190,sK191])],[f402])).
fof(f402,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f401])).
fof(f401,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f233])).
fof(f233,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6] : ! [X22,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X20,X21] : (s('type.num.num',X22) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X20),s('type.list.list'(X6),X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f596,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK190(X2,X1,X0)),s('type.list.list'(X0),sK191(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f597,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f403])).
fof(f586,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK178(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK179(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK180(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK181(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK182(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK183(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK184(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK185(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK186(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK187(X1,X0)),s('type.list.list'(X0),sK177(X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f396])).
fof(f396,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK178(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK179(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK180(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK181(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK182(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK183(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK184(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK185(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK186(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK187(X1,X0)),s('type.list.list'(X0),sK177(X1,X0))))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK177,sK178,sK179,sK180,sK181,sK182,sK183,sK184,sK185,sK186,sK187])],[f395])).
fof(f395,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),X13)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f394])).
fof(f394,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(flattening,[],[f223])).
fof(f223,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(rectify,[],[f113])).
fof(f113,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|4')).
fof(f587,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f396])).
fof(f580,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK145(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK146(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK147(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK148(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK149(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK150(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK151(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK152(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK153(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK154(X1,X0)),s('type.list.list'(X0),sK144(X1,X0)))))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f387])).
fof(f387,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK145(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK146(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK147(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK148(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK149(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK150(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK151(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK152(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK153(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK154(X1,X0)),s('type.list.list'(X0),sK144(X1,X0))))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK144,sK145,sK146,sK147,sK148,sK149,sK150,sK151,sK152,sK153,sK154])],[f386])).
fof(f386,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X22),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X23),s('type.list.list'(X0),X13)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f385])).
fof(f385,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(flattening,[],[f217])).
fof(f217,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2))))))))))))))))))))))),
  inference(rectify,[],[f123])).
fof(f123,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X36] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X36),s('type.list.list'(X6),X8))))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|3')).
fof(f581,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),X2)))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f387])).
fof(f574,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK120(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK121(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK122(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK123(X1,X0)),s('type.list.list'(X0),sK114(X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f378,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK120(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK121(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK122(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK123(X1,X0)),s('type.list.list'(X0),sK114(X1,X0))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK114,sK115,sK116,sK117,sK118,sK119,sK120,sK121,sK122,sK123])],[f377])).
fof(f377,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f376])).
fof(f376,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f211])).
fof(f211,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|17')).
fof(f575,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f572,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK105(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK106(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK107(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK108(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK109(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK110(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK111(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK112(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK113(X1,X0)),s('type.list.list'(X0),sK104(X1,X0)))))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f375,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK105(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK106(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK107(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK108(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK109(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK110(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK111(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK112(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK113(X1,X0)),s('type.list.list'(X0),sK104(X1,X0))))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK104,sK105,sK106,sK107,sK108,sK109,sK110,sK111,sK112,sK113])],[f374])).
fof(f374,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X12,X13,X14,X15,X16,X17,X18,X19,X20,X21] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X20),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X21),s('type.list.list'(X0),X12)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f373])).
fof(f373,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f210])).
fof(f210,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(flattening,[],[f209])).
fof(f209,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2))))))))))))))))))))),
  inference(rectify,[],[f124])).
fof(f124,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X17),s('type.list.list'(X6),X8))))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|18')).
fof(f573,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),X2)))))))))))))))))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f568,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK87(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK88(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK89(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK90(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK91(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK92(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK93(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK94(X1,X0)),s('type.list.list'(X0),sK86(X1,X0)))))))))))))))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f369,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK87(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK88(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK89(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK90(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK91(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK92(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK93(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK94(X1,X0)),s('type.list.list'(X0),sK86(X1,X0))))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK86,sK87,sK88,sK89,sK90,sK91,sK92,sK93,sK94])],[f368])).
fof(f368,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),X11)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f367])).
fof(f367,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(flattening,[],[f205])).
fof(f205,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(rectify,[],[f110])).
fof(f110,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X8))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|31')).
fof(f569,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f725,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f546,f496])).
fof(f546,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f338])).
fof(f338,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f184])).
fof(f184,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f183])).
fof(f183,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f724,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f547,f496])).
fof(f547,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f338])).
fof(f544,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f337])).
fof(f337,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f181])).
fof(f181,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f83])).
fof(f83,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f545,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f337])).
fof(f537,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f173])).
fof(f173,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X7)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.list.APPEND|split|0')).
fof(f531,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f331])).
fof(f516,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X22] : s('type.num.num',X22) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_22_prove_ltb|split|1')).
fof(f510,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f72])).
fof(f72,axiom,(
  ! [X22] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|6')).
fof(f508,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X22] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|29')).
fof(f505,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f98])).
fof(f98,axiom,(
  ! [X22] : s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.ADD|split|0')).
fof(f504,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X22] : s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|1')).
fof(f502,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X22] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.arithmetic.MULT|split|0')).
fof(f501,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X22] : s('type.num.num',X22) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|7')).
fof(f500,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X22] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|26')).
fof(f499,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f96])).
fof(f96,axiom,(
  ! [X22] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|4')).
fof(f498,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f34])).
fof(f34,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|34')).
fof(f494,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f25])).
fof(f25,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.iDUB_removal|split|2')).
fof(f493,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f33])).
fof(f33,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.prim_rec.PRE|split|0')).
fof(f492,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f55])).
fof(f55,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.numeral.numeral_distrib|split|35')).
fof(f8937,plain,(
  $false | ($spl6 | $spl20)),
  inference(global_subsumption,[],[f1979,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f1979,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl20),
  inference(cnf_transformation,[],[f1979_D])).
fof(f1979_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f8936,plain,(
  $false | ($spl6 | $spl22)),
  inference(global_subsumption,[],[f1981,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8935,plain,(
  $false | ($spl6 | $spl24)),
  inference(global_subsumption,[],[f1983,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8934,plain,(
  $false | ($spl6 | $spl26)),
  inference(global_subsumption,[],[f1984,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8933,plain,(
  $false | ($spl6 | $spl28)),
  inference(global_subsumption,[],[f1985,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8932,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927,f8931])).
fof(f8928,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915,f8927])).
fof(f8916,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743,f8915])).
fof(f8911,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744,f2743])).
fof(f8910,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842,f2744])).
fof(f8909,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843,f2842])).
fof(f8908,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883,f2843])).
fof(f8907,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884,f2883])).
fof(f8906,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001,f2884])).
fof(f8905,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497,f4001])).
fof(f8903,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525,f497])).
fof(f8902,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526,f525])).
fof(f8901,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588,f526])).
fof(f8900,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699,f588])).
fof(f8899,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700,f699])).
fof(f8898,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702,f700])).
fof(f8897,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704,f702])).
fof(f8896,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705,f704])).
fof(f8895,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970,f705])).
fof(f8894,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839,f1970])).
fof(f8893,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132,f3839])).
fof(f8892,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628,f4132])).
fof(f8891,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f4465,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628])).
fof(f4465,plain,(
  ( ! [X26,X27] : (s(bool,X27) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X26),s(bool,X27)))) ) | $spl1),
  inference(superposition,[],[f2922,f588])).
fof(f2922,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(subsumption_resolution,[],[f2904,f497])).
fof(f2904,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(superposition,[],[f971,f947])).
fof(f8890,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639,f4628])).
fof(f8889,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949,f4639])).
fof(f8887,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960,f4949])).
fof(f8886,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884,f4960])).
fof(f8885,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882,f8884])).
fof(f8883,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877,f8882])).
fof(f8878,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875,f8877])).
fof(f8876,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521,f8875])).
fof(f8868,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889,f521])).
fof(f8867,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865,f4889])).
fof(f8866,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517,f8865])).
fof(f8864,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706,f517])).
fof(f8863,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701,f706])).
fof(f8862,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550,f701])).
fof(f8861,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551,f550])).
fof(f8860,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552,f551])).
fof(f8859,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857,f552])).
fof(f8858,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855,f8857])).
fof(f8856,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853,f8855])).
fof(f8854,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851,f8853])).
fof(f8852,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849,f8851])).
fof(f8850,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554,f8849])).
fof(f8848,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f2922,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554])).
fof(f8847,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f4466,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554])).
fof(f4466,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'T_0'),s(bool,X28),s(bool,X29)))) ) | $spl1),
  inference(superposition,[],[f2922,f589])).
fof(f8846,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f4567,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554])).
fof(f8845,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555,f554])).
fof(f8844,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556,f555])).
fof(f8843,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558,f556])).
fof(f8842,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559,f558])).
fof(f8841,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560,f559])).
fof(f8840,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838,f560])).
fof(f8839,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836,f8838])).
fof(f8837,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834,f8836])).
fof(f8835,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832,f8834])).
fof(f8833,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830,f8832])).
fof(f8831,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828,f8830])).
fof(f8829,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f8828])).
fof(f8827,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604])).
fof(f8826,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605])).
fof(f8825,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606])).
fof(f8824,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607])).
fof(f8823,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608])).
fof(f8822,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609])).
fof(f8821,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610])).
fof(f8820,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611])).
fof(f8819,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613])).
fof(f8818,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614])).
fof(f8817,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616])).
fof(f8816,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618,f617])).
fof(f8815,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619,f618])).
fof(f8814,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620,f619])).
fof(f8813,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621,f620])).
fof(f8812,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622,f621])).
fof(f8811,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623,f622])).
fof(f8810,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625,f623])).
fof(f8809,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626,f625])).
fof(f8808,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806,f626])).
fof(f8807,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804,f8806])).
fof(f8805,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802,f8804])).
fof(f8803,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800,f8802])).
fof(f8801,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790,f8800])).
fof(f8791,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788,f8790])).
fof(f8789,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786,f8788])).
fof(f8787,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784,f8786])).
fof(f8785,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782,f8784])).
fof(f8783,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780,f8782])).
fof(f8781,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762,f8780])).
fof(f8763,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759,f8762])).
fof(f8761,plain,(
  $false | ($spl1 | $spl6)),
  inference(global_subsumption,[],[f6763,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759])).
fof(f6763,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21)))))) ) | $spl1),
  inference(forward_demodulation,[],[f6762,f517])).
fof(f6762,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6761,f515])).
fof(f6761,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6713,f520])).
fof(f6713,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f517])).
fof(f6683,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(subsumption_resolution,[],[f6557,f497])).
fof(f6557,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f536,f5955])).
fof(f5955,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) ) | $spl1),
  inference(superposition,[],[f687,f3258])).
fof(f3258,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num',X3)))) ) | $spl1),
  inference(forward_demodulation,[],[f3242,f968])).
fof(f968,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(backward_demodulation,[],[f947,f948])).
fof(f948,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f498,f719,f708])).
fof(f3242,plain,(
  ( ! [X4,X3] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) ) | $spl1),
  inference(superposition,[],[f685,f2929])).
fof(f2929,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X22)) ) | $spl1),
  inference(subsumption_resolution,[],[f2914,f497])).
fof(f2914,plain,(
  ( ! [X22] : (p(s(bool,'F_0')) | s(bool,X22) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X22)) ) | $spl1),
  inference(superposition,[],[f971,f968])).
fof(f8760,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729,f8759])).
fof(f8730,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727,f8729])).
fof(f8728,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725,f8727])).
fof(f8726,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713,f8725])).
fof(f8714,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709,f8713])).
fof(f8710,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703,f8709])).
fof(f8704,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701,f8703])).
fof(f8702,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699,f8701])).
fof(f8700,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695,f8699])).
fof(f8696,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689,f8695])).
fof(f8690,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687,f8689])).
fof(f8688,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685,f8687])).
fof(f8686,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683,f8685])).
fof(f8684,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681,f8683])).
fof(f8682,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675,f8681])).
fof(f8676,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671,f8675])).
fof(f8672,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667,f8671])).
fof(f8396,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl6 | $spl41)),
  inference(subsumption_resolution,[],[f4685,f934])).
fof(f4685,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl41),
  inference(superposition,[],[f4567,f530])).
fof(f8668,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665,f8667])).
fof(f8666,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663,f8665])).
fof(f8664,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661,f8663])).
fof(f8662,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659,f8661])).
fof(f8660,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657,f8659])).
fof(f8658,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648,f8657])).
fof(f8649,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636,f8648])).
fof(f8637,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634,f8636])).
fof(f8635,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624,f8634])).
fof(f8625,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622,f8624])).
fof(f8623,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620,f8622])).
fof(f8621,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606,f8620])).
fof(f8607,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596,f8606])).
fof(f8597,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594,f8596])).
fof(f8595,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580,f8594])).
fof(f8581,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578,f8580])).
fof(f8579,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576,f8578])).
fof(f8577,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574,f8576])).
fof(f8575,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572,f8574])).
fof(f8573,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570,f8572])).
fof(f8571,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568,f8570])).
fof(f8569,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566,f8568])).
fof(f8567,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564,f8566])).
fof(f8565,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562,f8564])).
fof(f8563,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560,f8562])).
fof(f8561,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558,f8560])).
fof(f8559,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556,f8558])).
fof(f8557,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554,f8556])).
fof(f8555,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552,f8554])).
fof(f8553,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550,f8552])).
fof(f8551,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548,f8550])).
fof(f8549,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546,f8548])).
fof(f8547,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544,f8546])).
fof(f8545,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542,f8544])).
fof(f8543,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540,f8542])).
fof(f8541,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538,f8540])).
fof(f8539,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536,f8538])).
fof(f8537,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534,f8536])).
fof(f8535,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532,f8534])).
fof(f8533,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530,f8532])).
fof(f8531,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f8530])).
fof(f8525,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592])).
fof(f8524,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593])).
fof(f8523,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594])).
fof(f8522,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598])).
fof(f8521,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600,f599])).
fof(f8520,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602,f600])).
fof(f8519,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675,f602])).
fof(f8518,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676,f675])).
fof(f8517,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677,f676])).
fof(f8516,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678,f677])).
fof(f8515,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728,f678])).
fof(f8514,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729,f728])).
fof(f8513,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838,f729])).
fof(f8512,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840,f3838])).
fof(f8511,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514,f3840])).
fof(f8510,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515,f514])).
fof(f8509,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524,f515])).
fof(f8508,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703,f524])).
fof(f8507,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959,f703])).
fof(f8506,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112,f1959])).
fof(f8505,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117,f4112])).
fof(f8504,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570,f4117])).
fof(f8503,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495,f4570])).
fof(f8502,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6756,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495])).
fof(f6756,plain,(
  ( ! [X16] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))) ) | $spl1),
  inference(forward_demodulation,[],[f6755,f525])).
fof(f6755,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6707,f515])).
fof(f6707,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f525])).
fof(f8501,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496,f495])).
fof(f8500,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554,f496])).
fof(f8499,plain,(
  $false | ($spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f2168,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554])).
fof(f2168,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl33),
  inference(subsumption_resolution,[],[f2123,f2077])).
fof(f2077,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl33),
  inference(unit_resulting_resolution,[],[f1989,f535])).
fof(f2123,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f536,f496])).
fof(f8498,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134,f2554])).
fof(f8497,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520,f4134])).
fof(f8496,plain,(
  $false | ($spl6 | $spl41 | $spl51)),
  inference(global_subsumption,[],[f6798,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520])).
fof(f6798,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl51),
  inference(unit_resulting_resolution,[],[f6752,f712])).
fof(f8495,plain,(
  $false | ($spl6 | $spl41 | $spl51)),
  inference(global_subsumption,[],[f7469,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520])).
fof(f8494,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512,f520])).
fof(f8493,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6741,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512])).
fof(f6741,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) ) | $spl1),
  inference(forward_demodulation,[],[f6740,f515])).
fof(f6740,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6698,f520])).
fof(f6698,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f515])).
fof(f8492,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6743,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512])).
fof(f6743,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) ) | $spl1),
  inference(forward_demodulation,[],[f6742,f520])).
fof(f6742,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6699,f515])).
fof(f6699,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f520])).
fof(f8491,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523,f512])).
fof(f8490,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116,f523])).
fof(f8489,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347,f4116])).
fof(f8488,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519,f2347])).
fof(f8487,plain,(
  $false | ($spl6 | $spl41 | $spl43)),
  inference(global_subsumption,[],[f6729,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f8486,plain,(
  $false | ($spl6 | $spl41 | $spl47)),
  inference(global_subsumption,[],[f6795,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f6795,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl47),
  inference(unit_resulting_resolution,[],[f6737,f712])).
fof(f8485,plain,(
  $false | ($spl6 | $spl41 | $spl43)),
  inference(global_subsumption,[],[f6905,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f6905,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl43),
  inference(unit_resulting_resolution,[],[f6729,f712])).
fof(f8484,plain,(
  $false | ($spl6 | $spl41 | $spl47)),
  inference(global_subsumption,[],[f7183,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f7183,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl47),
  inference(unit_resulting_resolution,[],[f6795,f712])).
fof(f8483,plain,(
  $false | ($spl6 | $spl41 | $spl47)),
  inference(global_subsumption,[],[f7441,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f8482,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522,f519])).
fof(f8481,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695,f522])).
fof(f8480,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696,f695])).
fof(f8479,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697,f696])).
fof(f8478,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698,f697])).
fof(f8477,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712,f698])).
fof(f8476,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713,f712])).
fof(f8475,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956,f713])).
fof(f8474,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957,f1956])).
fof(f8473,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961,f1957])).
fof(f8472,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963,f1961])).
fof(f8471,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971,f1963])).
fof(f8470,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104,f1971])).
fof(f8469,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107,f4104])).
fof(f8468,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108,f4107])).
fof(f8467,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110,f4108])).
fof(f8466,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115,f4110])).
fof(f8465,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118,f4115])).
fof(f8464,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119,f4118])).
fof(f8463,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121,f4119])).
fof(f8462,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122,f4121])).
fof(f8461,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123,f4122])).
fof(f8460,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127,f4123])).
fof(f8459,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130,f4127])).
fof(f8458,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131,f4130])).
fof(f8457,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133,f4131])).
fof(f8456,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271,f4133])).
fof(f8455,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258,f4271])).
fof(f8454,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6725,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f6725,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f519])).
fof(f8453,plain,(
  $false | ($spl6 | $spl41 | $spl51)),
  inference(global_subsumption,[],[f7302,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f7302,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl51),
  inference(forward_demodulation,[],[f7300,f496])).
fof(f7300,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl51),
  inference(unit_resulting_resolution,[],[f6798,f712])).
fof(f8452,plain,(
  $false | ($spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f4204,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f4204,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl33),
  inference(unit_resulting_resolution,[],[f4172,f712])).
fof(f4172,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl33),
  inference(forward_demodulation,[],[f4100,f723])).
fof(f4100,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) ) | $spl33),
  inference(unit_resulting_resolution,[],[f2175,f712])).
fof(f2175,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) ) | $spl33),
  inference(subsumption_resolution,[],[f2129,f2077])).
fof(f2129,plain,(
  ( ! [X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f536,f723])).
fof(f8451,plain,(
  $false | ($spl6 | $spl17 | $spl41)),
  inference(global_subsumption,[],[f4097,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f4097,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl17),
  inference(unit_resulting_resolution,[],[f1977,f712])).
fof(f8450,plain,(
  $false | ($spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f4172,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f8449,plain,(
  $false | ($spl6 | $spl41 | $spl51)),
  inference(global_subsumption,[],[f7301,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f7301,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl51),
  inference(superposition,[],[f6798,f496])).
fof(f8448,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684,f4258])).
fof(f8447,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6745,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684])).
fof(f6745,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))) ) | $spl1),
  inference(forward_demodulation,[],[f6744,f519])).
fof(f6744,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6700,f519])).
fof(f6700,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f519])).
fof(f8446,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6767,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684])).
fof(f6767,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X23))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X23)))))))) ) | $spl1),
  inference(forward_demodulation,[],[f6766,f522])).
fof(f6766,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X23))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6716,f519])).
fof(f6716,plain,(
  ( ! [X23] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X23))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f522])).
fof(f8445,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024,f684])).
fof(f8444,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025,f3024])).
fof(f8443,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723,f3025])).
fof(f8442,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6694,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723])).
fof(f6694,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f684])).
fof(f8441,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f6683,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723])).
fof(f8440,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817,f723])).
fof(f8439,plain,(
  $false | ($spl6 | $spl17 | $spl41)),
  inference(global_subsumption,[],[f1977,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817])).
fof(f8438,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205,f2817])).
fof(f8437,plain,(
  $false | ($spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f2925,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205])).
fof(f2925,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl33),
  inference(subsumption_resolution,[],[f2907,f497])).
fof(f2907,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | s(bool,X9) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl33),
  inference(superposition,[],[f971,f2445])).
fof(f2445,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl33),
  inference(unit_resulting_resolution,[],[f497,f2077,f708])).
fof(f8436,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674,f5205])).
fof(f8435,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396,f674])).
fof(f8434,plain,(
  $false | ($spl4 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f722,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8433,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f8432,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8432,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | ($spl1 | $spl6 | $spl41)),
  inference(subsumption_resolution,[],[f6578,f934])).
fof(f6578,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | ($spl1 | $spl41)),
  inference(duplicate_literal_removal,[],[f6555])).
fof(f6555,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f5955])).
fof(f4877,plain,(
  ( ! [X54] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54)))) ) | ($spl1 | $spl41)),
  inference(subsumption_resolution,[],[f4772,f4567])).
fof(f4772,plain,(
  ( ! [X54] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X54)))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4567,f3906])).
fof(f3906,plain,(
  ( ! [X10,X11] : (s(bool,X11) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) ) | $spl1),
  inference(subsumption_resolution,[],[f3879,f497])).
fof(f3879,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | s(bool,X11) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) ) | $spl1),
  inference(superposition,[],[f971,f3558])).
fof(f3558,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl1),
  inference(forward_demodulation,[],[f3557,f496])).
fof(f3557,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl1),
  inference(forward_demodulation,[],[f3480,f687])).
fof(f3480,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl1),
  inference(superposition,[],[f3258,f496])).
fof(f8428,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8427,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8427,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5103,f934])).
fof(f5103,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl33 | $spl41)),
  inference(superposition,[],[f4877,f2445])).
fof(f8426,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(global_subsumption,[],[f8425,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8425,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) | ($spl1 | $spl6 | $spl41)),
  inference(subsumption_resolution,[],[f5109,f934])).
fof(f5109,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) | ($spl1 | $spl41)),
  inference(duplicate_literal_removal,[],[f5102])).
fof(f5102,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f3558])).
fof(f8424,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8423,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8423,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8422,f502])).
fof(f8422,plain,(
  ( ! [X25] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25)))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5138,f934])).
fof(f5138,plain,(
  ( ! [X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25)))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5098,f2445])).
fof(f5098,plain,(
  ( ! [X25] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25)))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f502])).
fof(f8421,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8420,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8420,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8419,f499])).
fof(f8419,plain,(
  ( ! [X24] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5137,f934])).
fof(f5137,plain,(
  ( ! [X24] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5097,f2445])).
fof(f5097,plain,(
  ( ! [X24] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f499])).
fof(f8418,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8417,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8417,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8416,f493])).
fof(f8416,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5134,f934])).
fof(f5134,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5094,f2445])).
fof(f5094,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f493])).
fof(f8415,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8414,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8414,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8413,f510])).
fof(f8413,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5130,f934])).
fof(f5130,plain,(
  ( ! [X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5090,f2445])).
fof(f5090,plain,(
  ( ! [X20] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f510])).
fof(f8412,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8411,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8411,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8410,f506])).
fof(f8410,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X19)))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5129,f934])).
fof(f5129,plain,(
  ( ! [X19] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X19)))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5089,f2445])).
fof(f5089,plain,(
  ( ! [X19] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X19)))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f506])).
fof(f8409,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8408,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8408,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5123,f934])).
fof(f5123,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5083,f2445])).
fof(f5083,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f2817])).
fof(f8407,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8406,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8406,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5122,f934])).
fof(f5122,plain,(
  ( ! [X12] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5082,f2445])).
fof(f5082,plain,(
  ( ! [X12] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f524])).
fof(f8405,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8404,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8404,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X11)))))))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5121,f934])).
fof(f5121,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X11)))))))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5081,f2445])).
fof(f5081,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X11)))))))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f523])).
fof(f8403,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8402,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8402,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8401,f2018])).
fof(f8401,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5113,f934])).
fof(f5113,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5071,f2445])).
fof(f5071,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f2018])).
fof(f8400,plain,(
  $false | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(global_subsumption,[],[f8399,f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8399,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f8398,f3967])).
fof(f8398,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl1 | $spl6 | $spl33 | $spl41)),
  inference(subsumption_resolution,[],[f5111,f934])).
fof(f5111,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl1 | $spl33 | $spl41)),
  inference(forward_demodulation,[],[f5069,f2445])).
fof(f5069,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | ($spl1 | $spl41)),
  inference(superposition,[],[f4877,f3967])).
fof(f8397,plain,(
  $false | ($spl6 | $spl41)),
  inference(global_subsumption,[],[f490,f489,f491,f492,f493,f494,f498,f499,f500,f501,f502,f504,f505,f506,f508,f510,f516,f527,f530,f532,f531,f537,f539,f538,f545,f544,f724,f725,f567,f566,f569,f568,f573,f572,f575,f574,f581,f580,f587,f586,f589,f597,f596,f595,f630,f628,f633,f631,f636,f635,f634,f639,f637,f642,f640,f645,f644,f643,f648,f647,f646,f651,f649,f654,f652,f657,f656,f655,f660,f659,f658,f663,f661,f666,f664,f682,f681,f680,f679,f683,f711,f708,f717,f919,f923,f932,f931,f971,f972,f674,f723,f684,f713,f712,f698,f697,f696,f695,f522,f519,f523,f512,f520,f496,f495,f703,f524,f515,f514,f729,f728,f678,f677,f676,f675,f602,f600,f599,f598,f594,f593,f592,f552,f551,f550,f626,f625,f623,f622,f621,f620,f619,f618,f617,f616,f614,f613,f611,f610,f609,f608,f607,f606,f605,f604,f560,f559,f558,f556,f555,f554,f701,f706,f517,f521,f513,f511,f669,f668,f667,f672,f670,f577,f576,f793,f583,f582,f791,f571,f570,f789,f528,f529,f726,f727,f715,f714,f707,f693,f692,f691,f690,f689,f687,f686,f543,f542,f536,f535,f730,f733,f732,f731,f662,f780,f786,f759,f772,f653,f779,f785,f756,f771,f638,f777,f783,f751,f770,f632,f735,f749,f782,f788,f775,f776,f665,f781,f787,f760,f774,f650,f778,f784,f755,f773,f641,f738,f752,f629,f734,f748,f764,f765,f585,f584,f766,f579,f578,f768,f565,f564,f563,f562,f685,f797,f798,f976,f705,f704,f702,f700,f699,f588,f526,f525,f509,f507,f503,f497,f1548,f1549,f1592,f1593,f1683,f1741,f1829,f1956,f1957,f1959,f1960,f1961,f1963,f1964,f1965,f1967,f1968,f1969,f1970,f1971,f1972,f2018,f2109,f2194,f2347,f2554,f2589,f2594,f2817,f2926,f2927,f2928,f3024,f3025,f3026,f3027,f3838,f3839,f3840,f3967,f4104,f4107,f4108,f4110,f4112,f4115,f4116,f4117,f4118,f4119,f4184,f4121,f4122,f4123,f4185,f4127,f4189,f4130,f4131,f4132,f4133,f4134,f4258,f4271,f4567,f4570,f4628,f4639,f4889,f4949,f4960,f5205,f5717,f5718,f5795,f5796,f5726,f5800,f5806,f5807,f5808,f5809,f5811,f5815,f5817,f5819,f5820,f5822,f5825,f5828,f5829,f5830,f5831,f5832,f5833,f5834,f5763,f5835,f5836,f5837,f5838,f5839,f5840,f5841,f5842,f5843,f5844,f5845,f5846,f5847,f5848,f5849,f5850,f5851,f5852,f5853,f5854,f5855,f5856,f5857,f5858,f5859,f5919,f5984,f5985,f5986,f5921,f5922,f5956,f6009,f6316,f6317,f6288,f6332,f6359,f6901,f7014,f7159,f7216,f7281,f7296,f7398,f7372,f7414,f7503,f7567,f7537,f7584,f934,f8396])).
fof(f8395,plain,(
  $false | ($spl1 | $spl6 | $spl41)),
  inference(subsumption_resolution,[],[f4681,f934])).
fof(f4681,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl1 | $spl41)),
  inference(superposition,[],[f4567,f947])).
fof(f8394,plain,(
  $false | ($spl1 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f8393,f3366])).
fof(f3366,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl1 | $spl37)),
  inference(subsumption_resolution,[],[f3317,f3166])).
fof(f3317,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl37)),
  inference(superposition,[],[f3166,f2931])).
fof(f2931,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X25)) ) | $spl1),
  inference(subsumption_resolution,[],[f2916,f497])).
fof(f2916,plain,(
  ( ! [X25] : (p(s(bool,'F_0')) | s(bool,X25) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X25)) ) | $spl1),
  inference(superposition,[],[f971,f2110])).
fof(f2110,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1),
  inference(forward_demodulation,[],[f2081,f968])).
fof(f2081,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f511,f2018])).
fof(f8393,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl1 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f3388,f934])).
fof(f3388,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl1 | $spl37)),
  inference(superposition,[],[f3366,f530])).
fof(f8392,plain,(
  $false | ($spl1 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f3386,f934])).
fof(f3386,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl1 | $spl37)),
  inference(superposition,[],[f3366,f2110])).
fof(f8391,plain,(
  $false | ($spl6 | $spl37)),
  inference(subsumption_resolution,[],[f8390,f3166])).
fof(f8390,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | ($spl6 | $spl37)),
  inference(subsumption_resolution,[],[f3179,f934])).
fof(f3179,plain,(
  s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl37),
  inference(superposition,[],[f3166,f530])).
fof(f8389,plain,(
  $false | ($spl1 | $spl6 | $spl37)),
  inference(subsumption_resolution,[],[f3177,f934])).
fof(f3177,plain,(
  s(bool,'T_0') != s(bool,'F_0') | ($spl1 | $spl37)),
  inference(superposition,[],[f3166,f968])).
fof(f8388,plain,(
  $false | ($spl1 | $spl21 | $spl37)),
  inference(subsumption_resolution,[],[f3177,f7834])).
fof(f7834,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7)) ) | $spl21),
  inference(subsumption_resolution,[],[f7599,f923])).
fof(f7599,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7) | p(s(bool,X7))) ) | $spl21),
  inference(backward_demodulation,[],[f7568,f976])).
fof(f7568,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl21),
  inference(backward_demodulation,[],[f7567,f2234])).
fof(f2234,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(unit_resulting_resolution,[],[f497,f2047,f708])).
fof(f2047,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(unit_resulting_resolution,[],[f2044,f535])).
fof(f2044,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl21),
  inference(unit_resulting_resolution,[],[f1980,f532])).
fof(f8387,plain,(
  $false | ($spl1 | $spl21 | $spl37)),
  inference(subsumption_resolution,[],[f3386,f7834])).
fof(f8386,plain,(
  $false | ($spl1 | $spl21 | $spl41)),
  inference(subsumption_resolution,[],[f4681,f7834])).
fof(f8294,plain,(
  $false | ($spl21 | $spl33)),
  inference(subsumption_resolution,[],[f8203,f8084])).
fof(f8084,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl21),
  inference(subsumption_resolution,[],[f7917,f491])).
fof(f7917,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl21),
  inference(backward_demodulation,[],[f7834,f535])).
fof(f8203,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl21 | $spl33)),
  inference(backward_demodulation,[],[f8084,f4172])).
fof(f8293,plain,(
  $false | ($spl21 | $spl33)),
  inference(subsumption_resolution,[],[f8199,f8084])).
fof(f8199,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl21 | $spl33)),
  inference(backward_demodulation,[],[f8084,f4204])).
fof(f8292,plain,(
  $false | ($spl21 | $spl51)),
  inference(subsumption_resolution,[],[f8198,f8084])).
fof(f8198,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl21 | $spl51)),
  inference(backward_demodulation,[],[f8084,f7302])).
fof(f8291,plain,(
  $false | $spl21),
  inference(subsumption_resolution,[],[f8197,f8084])).
fof(f8197,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl21),
  inference(backward_demodulation,[],[f8084,f4202])).
fof(f4202,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl21),
  inference(unit_resulting_resolution,[],[f4096,f712])).
fof(f4096,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl21),
  inference(unit_resulting_resolution,[],[f1980,f712])).
fof(f8270,plain,(
  $false | ($spl17 | $spl21)),
  inference(subsumption_resolution,[],[f8269,f8084])).
fof(f8269,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) ) | ($spl17 | $spl21)),
  inference(subsumption_resolution,[],[f8136,f2238])).
fof(f2238,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl17),
  inference(unit_resulting_resolution,[],[f1977,f532])).
fof(f8136,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) ) | $spl21),
  inference(backward_demodulation,[],[f8084,f1959])).
fof(f8266,plain,(
  $false | ($spl21 | $spl41)),
  inference(subsumption_resolution,[],[f8129,f7834])).
fof(f8129,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl21 | $spl41)),
  inference(backward_demodulation,[],[f8084,f7740])).
fof(f7740,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl21 | $spl41)),
  inference(backward_demodulation,[],[f7729,f4567])).
fof(f7729,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl21),
  inference(forward_demodulation,[],[f7723,f7722])).
fof(f7722,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0)))) ) | $spl21),
  inference(forward_demodulation,[],[f7590,f516])).
fof(f7590,plain,(
  ( ! [X0] : (s('type.num.num','const.numeral.iDUB_1'(s('type.num.num',X0))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(backward_demodulation,[],[f7568,f526])).
fof(f7723,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl21),
  inference(backward_demodulation,[],[f7722,f521])).
fof(f8228,plain,(
  $false | ($spl21 | $spl51)),
  inference(trivial_inequality_removal,[],[f8153])).
fof(f8153,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl21 | $spl51)),
  inference(backward_demodulation,[],[f8084,f6798])).
fof(f8226,plain,(
  $false | ($spl21 | $spl47)),
  inference(trivial_inequality_removal,[],[f8164])).
fof(f8164,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl21 | $spl47)),
  inference(backward_demodulation,[],[f8084,f6795])).
fof(f8225,plain,(
  $false | ($spl21 | $spl47)),
  inference(trivial_inequality_removal,[],[f8166])).
fof(f8166,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl21 | $spl47)),
  inference(backward_demodulation,[],[f8084,f7183])).
fof(f8083,plain,(
  $false | $spl21),
  inference(subsumption_resolution,[],[f8082,f491])).
fof(f8082,plain,(
  ~p(s(bool,'T_0')) | $spl21),
  inference(forward_demodulation,[],[f8081,f7834])).
fof(f8081,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl21),
  inference(subsumption_resolution,[],[f7916,f491])).
fof(f7916,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl21),
  inference(backward_demodulation,[],[f7834,f5985])).
fof(f7833,plain,(
  $false | ($spl1 | $spl21 | $spl37)),
  inference(subsumption_resolution,[],[f7598,f3166])).
fof(f7598,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl21)),
  inference(backward_demodulation,[],[f7568,f968])).
fof(f7832,plain,(
  $false | ($spl1 | $spl21 | $spl41)),
  inference(subsumption_resolution,[],[f7831,f7740])).
fof(f7831,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl1 | $spl21)),
  inference(forward_demodulation,[],[f7597,f7729])).
fof(f7597,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl1 | $spl21)),
  inference(backward_demodulation,[],[f7568,f947])).
fof(f7721,plain,(
  $false | $spl21),
  inference(subsumption_resolution,[],[f7585,f491])).
fof(f7585,plain,(
  ~p(s(bool,'T_0')) | $spl21),
  inference(backward_demodulation,[],[f7568,f497])).
fof(f7569,plain,(
  $false | ($spl9 | $spl21)),
  inference(subsumption_resolution,[],[f7568,f936])).
fof(f6754,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl52),
  inference(cnf_transformation,[],[f6754_D])).
fof(f6754_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f6752,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(cnf_transformation,[],[f6752_D])).
fof(f6752_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f6722,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(superposition,[],[f6683,f495])).
fof(f6769,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1),
  inference(forward_demodulation,[],[f6768,f2594])).
fof(f6768,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(forward_demodulation,[],[f6717,f495])).
fof(f6717,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(superposition,[],[f6683,f2594])).
fof(f6760,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1),
  inference(forward_demodulation,[],[f6759,f494])).
fof(f6759,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(forward_demodulation,[],[f6712,f495])).
fof(f6712,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iDUB_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(superposition,[],[f6683,f494])).
fof(f6750,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1),
  inference(forward_demodulation,[],[f6749,f683])).
fof(f6749,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X14),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6706,f495])).
fof(f6706,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X14),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f683])).
fof(f6729,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl43),
  inference(cnf_transformation,[],[f6729_D])).
fof(f6729_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f6731,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | $spl44),
  inference(cnf_transformation,[],[f6731_D])).
fof(f6731_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f6747,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(forward_demodulation,[],[f6746,f723])).
fof(f6746,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f6701,f2347])).
fof(f6701,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(superposition,[],[f6683,f723])).
fof(f6737,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl47),
  inference(cnf_transformation,[],[f6737_D])).
fof(f6737_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f6739,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl48),
  inference(cnf_transformation,[],[f6739_D])).
fof(f6739_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f6735,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1),
  inference(forward_demodulation,[],[f6734,f495])).
fof(f6734,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(forward_demodulation,[],[f6697,f515])).
fof(f6697,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(superposition,[],[f6683,f495])).
fof(f6727,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(forward_demodulation,[],[f6726,f496])).
fof(f6726,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(forward_demodulation,[],[f6691,f2347])).
fof(f6691,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | $spl1),
  inference(superposition,[],[f6683,f496])).
fof(f4565,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl38),
  inference(cnf_transformation,[],[f4565_D])).
fof(f4565_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f4567,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl41),
  inference(cnf_transformation,[],[f4567_D])).
fof(f4567_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f4527,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl1),
  inference(equality_factoring,[],[f2922])).
fof(f3164,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f3164_D])).
fof(f3164_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f3166,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | $spl37),
  inference(cnf_transformation,[],[f3166_D])).
fof(f3166_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f3141,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl1),
  inference(equality_factoring,[],[f2929])).
fof(f1987,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl30),
  inference(cnf_transformation,[],[f1987_D])).
fof(f1987_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1989,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl33),
  inference(cnf_transformation,[],[f1989_D])).
fof(f1989_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f1972,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f531,f496])).
fof(f1985,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) ) | $spl28),
  inference(cnf_transformation,[],[f1985_D])).
fof(f1985_D,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1980,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl21),
  inference(cnf_transformation,[],[f1980_D])).
fof(f1980_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f1969,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) )),
  inference(superposition,[],[f531,f502])).
fof(f1984,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f1984_D])).
fof(f1984_D,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1968,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f531,f499])).
fof(f1983,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl24),
  inference(cnf_transformation,[],[f1983_D])).
fof(f1983_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1967,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f531,f493])).
fof(f1981,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) ) | $spl22),
  inference(cnf_transformation,[],[f1981_D])).
fof(f1981_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1965,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) )),
  inference(superposition,[],[f531,f510])).
fof(f1978,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)))) ) | $spl18),
  inference(cnf_transformation,[],[f1978_D])).
fof(f1978_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1964,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)))) )),
  inference(superposition,[],[f531,f506])).
fof(f1975,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) ) | $spl14),
  inference(cnf_transformation,[],[f1975_D])).
fof(f1975_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1977,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl17),
  inference(cnf_transformation,[],[f1977_D])).
fof(f1977_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f1960,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f531,f723])).
fof(f1377,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f1376,f491])).
fof(f1376,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(forward_demodulation,[],[f1375,f973])).
fof(f1375,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f1071,f491])).
fof(f1071,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) ) | $spl10),
  inference(backward_demodulation,[],[f973,f714])).
fof(f1093,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f987,f491])).
fof(f987,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(backward_demodulation,[],[f973,f497])).
fof(f973,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f973_D])).
fof(f973_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f974,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl12),
  inference(cnf_transformation,[],[f974_D])).
fof(f974_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f972,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f954,f923])).
fof(f954,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f708,f530])).
fof(f934,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f934_D])).
fof(f934_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f936,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(cnf_transformation,[],[f936_D])).
fof(f936_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f931,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f530])).
fof(f718,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl0),
  inference(cnf_transformation,[],[f718_D])).
fof(f718_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f722,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) | $spl4),
  inference(cnf_transformation,[],[f722_D])).
fof(f722_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f489,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2))))))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(cnf_transformation,[],[f330])).
fof(f330,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK2)))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X2))))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f329])).
fof(f329,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X11,X12,X13,X14,X15,X16,X17,X18,X19] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X19),s('type.list.list'(X0),X11)))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))))),
  inference(rectify,[],[f328])).
fof(f328,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2)))))))))))))))))))),
  inference(nnf_transformation,[],[f324])).
fof(f324,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <~> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8,X9,X10] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X2))))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X8))))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14,X15,X16] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X8))))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||48||split|33','thm.quantHeuristics.LIST_LENGTH_|49||48||split|33')).
fof(f719,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl1),
  inference(cnf_transformation,[],[f719_D])).
fof(f719_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f720,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X2)))))))))))))))))) ) | $spl2),
  inference(cnf_transformation,[],[f720_D])).
fof(f720_D,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X2)))))))))))))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f490,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X2))))))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) )),
  inference(cnf_transformation,[],[f330])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 560
% Passive clauses: 4699
% Generated clauses: 48088
% Final active clauses: 206
% Final passive clauses: 2543
% Input formulas: 133
% Initial clauses: 229
% 
% Duplicate literals: 109
% Trivial inequalities: 96
% Fw subsumption resolutions: 1015
% Fw demodulations: 12796
% Bw demodulations: 1065
% Condensations: 77
% Global subsumptions: 263
% 
% Simple tautologies: 65
% Equational tautologies: 100
% Forward subsumptions: 28385
% Fw demodulations to eq. taut.: 161
% Bw demodulations to eq. taut.: 10
% 
% Unit resulting resolution: 2381
% Factoring: 1
% Forward superposition: 20135
% Backward superposition: 8224
% Self superposition: 114
% Equality factoring: 24
% Equality resolution: 19
% 
% Split clauses: 29
% Split components: 58
% SAT solver clauses: 5315
% SAT solver unit clauses: 364
% SAT solver binary clauses: 2257
% 
% Sat splits: 29
% Sat splitting refutations: 293
% 
% Memory used [KB]: 52195
% Time elapsed: 2.130 s
% ------------------------------
% ------------------------------
% Success in time 3.47 s
