Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f805,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f801,f364,f374,f371,f381,f367,f252,f55,f58,f56,f67,f595,f359,f368,f366,f306,f307,f215,f217,f216])).
fof(f216,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12)) ) | $spl4),
  inference(cnf_transformation,[],[f216_D])).
fof(f216_D,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f217,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) ) | $spl6),
  inference(cnf_transformation,[],[f217_D])).
fof(f217_D,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f215,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) )),
  inference(subsumption_resolution,[],[f125,f52])).
fof(f52,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f37,f38])).
fof(f38,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.less_to_leq_samer',aHL_BOOL_CASES)).
fof(f37,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.int_arith.less_to_leq_samer',aHL_FALSITY)).
fof(f125,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X12)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X11),s('type.integer.int',X10)))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X11)))) )),
  inference(superposition,[],[f44,f50])).
fof(f50,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f38,f38])).
fof(f44,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X6)))))),
  file('thm.int_arith.less_to_leq_samer','thm.integer.int_le')).
fof(f307,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) ) | $spl8),
  inference(cnf_transformation,[],[f307_D])).
fof(f307_D,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f306,plain,(
  ( ! [X6,X8,X7] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7))) | s(bool,'T_0') = s(bool,X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f303,f52])).
fof(f303,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X8)) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7))) | s(bool,'T_0') = s(bool,X8)) ) | $spl6),
  inference(superposition,[],[f217,f50])).
fof(f366,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl10),
  inference(cnf_transformation,[],[f366_D])).
fof(f366_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f368,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl13),
  inference(cnf_transformation,[],[f368_D])).
fof(f368_D,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f359,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl8),
  inference(superposition,[],[f34,f307])).
fof(f34,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',sK1)))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f25])).
fof(f25,plain,(
  ? [X0,X1] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X1)))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X7)))),
  file('thm.int_arith.less_to_leq_samer','thm.int_arith.less_to_leq_samer')).
fof(f595,plain,(
  $false | ($spl10 | $spl12)),
  inference(subsumption_resolution,[],[f594,f35])).
fof(f35,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.less_to_leq_samer',aHL_TRUTH)).
fof(f594,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f593,f367])).
fof(f593,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl10),
  inference(subsumption_resolution,[],[f586,f35])).
fof(f586,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl10),
  inference(superposition,[],[f46,f366])).
fof(f46,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) & (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) <=> p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) <=> p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) <=> p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  file('thm.int_arith.less_to_leq_samer','thm.int_arith.not_less')).
fof(f67,plain,(
  $false | $spl0),
  inference(resolution,[],[f64,f35])).
fof(f64,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl0),
  inference(superposition,[],[f37,f56])).
fof(f56,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f58,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f55,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f38])).
fof(f252,plain,(
  $false | ($spl3 | $spl4)),
  inference(trivial_inequality_removal,[],[f249])).
fof(f249,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl3 | $spl4)),
  inference(superposition,[],[f58,f216])).
fof(f367,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl12),
  inference(cnf_transformation,[],[f367_D])).
fof(f367_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f381,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl21),
  inference(subsumption_resolution,[],[f377,f38])).
fof(f377,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl21),
  inference(superposition,[],[f374,f50])).
fof(f371,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',sK1))) | $spl16),
  inference(cnf_transformation,[],[f371_D])).
fof(f371_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',sK1))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f374,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl21),
  inference(cnf_transformation,[],[f374_D])).
fof(f374_D,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f364,plain,(
  s(bool,'F_0') != s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',sK1)))),
  inference(superposition,[],[f34,f38])).
fof(f801,plain,(
  $false | ($spl16 | $spl20)),
  inference(subsumption_resolution,[],[f800,f37])).
fof(f800,plain,(
  p(s(bool,'F_0')) | ($spl16 | $spl20)),
  inference(forward_demodulation,[],[f791,f373])).
fof(f373,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl20),
  inference(cnf_transformation,[],[f373_D])).
fof(f373_D,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f791,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl16),
  inference(resolution,[],[f787,f45])).
fof(f45,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f787,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl16),
  inference(subsumption_resolution,[],[f776,f35])).
fof(f776,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK1),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl16),
  inference(superposition,[],[f43,f371])).
fof(f43,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f31])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 130
% Generated clauses: 780
% Final active clauses: 22
% Final passive clauses: 45
% Input formulas: 11
% Initial clauses: 15
% 
% Duplicate literals: 93
% Trivial inequalities: 16
% Fw subsumption resolutions: 71
% Fw demodulations: 27
% Bw demodulations: 10
% 
% Simple tautologies: 34
% Equational tautologies: 17
% Forward subsumptions: 343
% 
% Binary resolution: 26
% Forward superposition: 232
% Backward superposition: 177
% Self superposition: 30
% Equality factoring: 30
% Equality resolution: 1
% 
% Split clauses: 35
% Split components: 72
% SAT solver clauses: 73
% SAT solver unit clauses: 9
% SAT solver binary clauses: 28
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 35
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 69
% TWLsolver calls for satisfiability: 25
% 
% Memory used [KB]: 895
% Time elapsed: 0.025 s
% ------------------------------
% ------------------------------
% Success in time 0.031 s
