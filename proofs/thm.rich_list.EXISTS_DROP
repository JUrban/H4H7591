Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (57871)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 109
% Passive clauses: 1343
% Generated clauses: 23328
% Final active clauses: 91
% Final passive clauses: 1106
% Input formulas: 9
% Initial clauses: 11
% 
% Duplicate literals: 1382
% Trivial inequalities: 321
% Fw subsumption resolutions: 3111
% Fw demodulations: 2525
% Bw demodulations: 13
% 
% Simple tautologies: 426
% Equational tautologies: 76
% Forward subsumptions: 12321
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 39
% Forward superposition: 8499
% Backward superposition: 6580
% Self superposition: 377
% Equality factoring: 241
% Equality resolution: 20
% 
% Split clauses: 1217
% Split components: 2526
% SAT solver clauses: 1900
% SAT solver unit clauses: 21
% SAT solver binary clauses: 189
% 
% Sat splits: 1217
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1872
% TWLsolver calls for satisfiability: 109
% 
% Memory used [KB]: 9722
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f173,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f172,f32,f47,f71,f72,f33,f49,f34,f50,f35,f51,f73,f75,f30,f43,f99,f101,f38,f54,f68,f70,f29,f45,f130,f132,f36,f52,f146,f151,f31,f41,f37,f53])).
fof(f53,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl16),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f37,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ! [X4] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X11,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X11))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X11),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_DROP','thm.rich_list.EXISTS_SEG')).
fof(f41,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f31,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) & (p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f22])).
fof(f22,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ? [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_DROP','thm.rich_list.EXISTS_DROP')).
fof(f151,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl48),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f146,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl1 | $spl16)),
  inference(resolution,[],[f53,f41])).
fof(f52,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f36,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.num.num',X1),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X10,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X10),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num',X10))),s('type.num.num',X10),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.EXISTS_DROP','thm.rich_list.DROP_SEG')).
fof(f132,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) | $spl44),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f130,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) | ($spl6 | $spl14 | $spl26)),
  inference(subsumption_resolution,[],[f126,f47])).
fof(f126,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) | ($spl14 | $spl26)),
  inference(superposition,[],[f52,f70])).
fof(f45,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f29,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f27])).
fof(f70,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl26),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f68,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f60,f49])).
fof(f60,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl12)),
  inference(superposition,[],[f45,f51])).
fof(f54,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl18),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f38,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X7)))) => s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X10))),s('type.num.num',X10))))),
  file('thm.rich_list.EXISTS_DROP','thm.arithmetic.SUB_ADD')).
fof(f101,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))) | $spl36),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f99,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl6 | $spl18 | $spl26)),
  inference(subsumption_resolution,[],[f97,f47])).
fof(f97,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))) | ($spl18 | $spl26)),
  inference(superposition,[],[f54,f70])).
fof(f43,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f30,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f27])).
fof(f75,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | $spl30),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f73,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f63,f49])).
fof(f63,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl12)),
  inference(superposition,[],[f43,f51])).
fof(f51,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f35,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.EXISTS_DROP',aHL_BOOL_CASES)).
fof(f50,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl10),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f34,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X7))))),
  file('thm.rich_list.EXISTS_DROP','thm.arithmetic.LESS_EQ_REFL')).
fof(f49,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f33,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.EXISTS_DROP',aHL_FALSITY)).
fof(f72,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl28),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f71,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f61,f49])).
fof(f61,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl10 | $spl12)),
  inference(superposition,[],[f50,f51])).
fof(f47,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f32,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.EXISTS_DROP',aHL_TRUTH)).
fof(f172,plain,(
  $false | ($spl6 | $spl28 | $spl30 | $spl36 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f171,f47])).
fof(f171,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl28 | $spl30 | $spl36 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f170,f72])).
fof(f170,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl30 | $spl36 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f169,f101])).
fof(f169,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl30 | $spl44 | $spl48)),
  inference(subsumption_resolution,[],[f168,f47])).
fof(f168,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl30 | $spl44 | $spl48)),
  inference(forward_demodulation,[],[f161,f75])).
fof(f161,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.num.num',sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl44 | $spl48)),
  inference(superposition,[],[f151,f132])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 33
% Generated clauses: 145
% Final active clauses: 17
% Final passive clauses: 5
% Input formulas: 9
% Initial clauses: 11
% 
% Duplicate literals: 1
% Fw subsumption resolutions: 13
% Fw demodulations: 16
% Bw demodulations: 10
% 
% Simple tautologies: 2
% Equational tautologies: 2
% Forward subsumptions: 42
% 
% Binary resolution: 4
% Forward superposition: 29
% Backward superposition: 18
% Self superposition: 3
% Equality factoring: 2
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 43
% SAT solver unit clauses: 17
% SAT solver binary clauses: 5
% SAT solver learnt clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 42
% TWLsolver calls for satisfiability: 47
% 
% Memory used [KB]: 895
% Time elapsed: 0.007 s
% ------------------------------
% ------------------------------
% Success in time 0.623 s
