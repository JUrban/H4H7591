Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3774,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3773,f261,f474,f472,f3685,f260,f473,f471])).
fof(f471,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | $spl0),
  inference(cnf_transformation,[],[f471_D])).
fof(f471_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f473,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13) | $spl2),
  inference(cnf_transformation,[],[f473_D])).
fof(f473_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f260,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK13))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f164])).
fof(f164,plain,(
  ? [X0,X1] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <~> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(ennf_transformation,[],[f53])).
fof(f53,plain,(
  ~! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ~! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.list.LENGTH_NIL_SYM','thm.list.LENGTH_NIL_SYM')).
fof(f3685,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f3684,f474])).
fof(f3684,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13) | $spl0),
  inference(trivial_inequality_removal,[],[f3683])).
fof(f3683,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK13) | $spl0),
  inference(superposition,[],[f340,f471])).
fof(f340,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.list.LENGTH_NIL_SYM','thm.list.LENGTH_NIL')).
fof(f472,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | $spl1),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f474,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK13) | $spl3),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK13) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f261,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK13) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f165])).
fof(f3773,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f3772,f3687])).
fof(f3687,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f472,f473])).
fof(f3772,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f3771,f473])).
fof(f3771,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | $spl2),
  inference(trivial_inequality_removal,[],[f3769])).
fof(f3769,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))) | $spl2),
  inference(superposition,[],[f341,f473])).
fof(f341,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f205])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 290
% Passive clauses: 1130
% Generated clauses: 3508
% Final active clauses: 288
% Final passive clauses: 744
% Input formulas: 50
% Initial clauses: 204
% 
% Duplicate literals: 127
% Trivial inequalities: 16
% Fw subsumption resolutions: 225
% Fw demodulations: 2
% 
% Simple tautologies: 157
% Equational tautologies: 21
% Forward subsumptions: 1780
% 
% Binary resolution: 2121
% Factoring: 606
% Forward superposition: 104
% Backward superposition: 60
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 84
% Split components: 169
% SAT solver clauses: 154
% SAT solver unit clauses: 8
% SAT solver binary clauses: 42
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 84
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 152
% TWLsolver calls for satisfiability: 121
% 
% Memory used [KB]: 1791
% Time elapsed: 0.079 s
% ------------------------------
% ------------------------------
% Success in time 0.082 s
