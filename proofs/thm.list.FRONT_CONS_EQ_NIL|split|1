Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f6509,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6508,f319,f548,f546,f6426,f318,f547,f545])).
fof(f545,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) | $spl0),
  inference(cnf_transformation,[],[f545_D])).
fof(f545_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f547,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl2),
  inference(cnf_transformation,[],[f547_D])).
fof(f547_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f318,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14)))))),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  (s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14)) & (s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) | s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f225])).
fof(f225,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)))),
  inference(nnf_transformation,[],[f181])).
fof(f181,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) <~> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),X8))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),X8))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.list.FRONT_CONS_EQ_NIL|split|1','thm.list.FRONT_CONS_EQ_NIL|split|1')).
fof(f6426,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f6425,f548])).
fof(f6425,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl0),
  inference(trivial_inequality_removal,[],[f6423])).
fof(f6423,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.NIL_0') | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl0),
  inference(superposition,[],[f396,f545])).
fof(f396,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f262])).
fof(f262,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))))),
  inference(nnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),X8))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.list.FRONT_CONS_EQ_NIL|split|1','thm.list.FRONT_CONS_EQ_NIL|split|0')).
fof(f546,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) | $spl1),
  inference(cnf_transformation,[],[f546_D])).
fof(f546_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f548,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) | $spl3),
  inference(cnf_transformation,[],[f548_D])).
fof(f548_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f319,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) | s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14)))))),
  inference(cnf_transformation,[],[f226])).
fof(f6508,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f6507,f376])).
fof(f376,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.FRONT_CONS_EQ_NIL|split|1','thm.list.FRONT_CONS|split|0')).
fof(f6507,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.FRONT_1'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.NIL_0'))))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f546,f547])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 413
% Passive clauses: 2068
% Generated clauses: 6183
% Final active clauses: 409
% Final passive clauses: 1489
% Input formulas: 69
% Initial clauses: 221
% 
% Duplicate literals: 157
% Trivial inequalities: 26
% Fw subsumption resolutions: 496
% Fw demodulations: 161
% Bw demodulations: 1
% 
% Simple tautologies: 160
% Equational tautologies: 24
% Forward subsumptions: 3044
% 
% Binary resolution: 3109
% Factoring: 804
% Forward superposition: 525
% Backward superposition: 609
% Self superposition: 16
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 112
% Split components: 225
% SAT solver clauses: 220
% SAT solver unit clauses: 10
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 112
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 218
% TWLsolver calls for satisfiability: 191
% 
% Memory used [KB]: 3454
% Time elapsed: 0.111 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
