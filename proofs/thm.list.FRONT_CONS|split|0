Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1159,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1156,f70,f106])).
fof(f106,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f70,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.list.FRONT_CONS|split|0',aHL_FALSITY)).
fof(f1156,plain,(
  $false | $spl1),
  inference(trivial_inequality_removal,[],[f1149])).
fof(f1149,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | $spl1),
  inference(superposition,[],[f67,f1117])).
fof(f1117,plain,(
  ( ! [X4,X3] : (s('type.list.list'(X4),'const.list.NIL_0') = s('type.list.list'(X4),'const.list.FRONT_1'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X3),s('type.list.list'(X4),'const.list.NIL_0')))))) ) | $spl1),
  inference(forward_demodulation,[],[f1074,f93])).
fof(f93,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8,X9] : s(X6,X8) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X8),s(X6,X9)))),
  file('thm.list.FRONT_CONS|split|0','thm.bool.COND_CLAUSES|split|0')).
fof(f1074,plain,(
  ( ! [X4,X3] : (s('type.list.list'(X4),'const.list.FRONT_1'(s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X3),s('type.list.list'(X4),'const.list.NIL_0'))))) = s('type.list.list'(X4),'const.bool.COND_3'(s(bool,'T_0'),s('type.list.list'(X4),'const.list.NIL_0'),s('type.list.list'(X4),'const.list.CONS_2'(s(X4,X3),s('type.list.list'(X4),'const.list.FRONT_1'(s('type.list.list'(X4),'const.list.NIL_0')))))))) ) | $spl1),
  inference(superposition,[],[f97,f267])).
fof(f267,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK2('const.list.NIL_0',X0,X1))) ) | $spl1),
  inference(equality_resolution,[],[f240])).
fof(f240,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X2),'const.list.NIL_0') != s('type.list.list'(X2),X0) | s(bool,'T_0') = s(bool,sK2(X0,X1,X2))) ) | $spl1),
  inference(subsumption_resolution,[],[f239,f106])).
fof(f239,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s('type.list.list'(X2),'const.list.NIL_0') != s('type.list.list'(X2),X0) | s(bool,'T_0') = s(bool,sK2(X0,X1,X2))) )),
  inference(superposition,[],[f96,f71])).
fof(f71,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.FRONT_CONS|split|0',aHL_BOOL_CASES)).
fof(f96,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,sK2(X2,X1,X0))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,sK2(X2,X1,X0))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | p(s(bool,sK2(X2,X1,X0)))) & s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK2(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : ? [X3] : ((~p(s(bool,X3)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | p(s(bool,X3))) & s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : ? [X3] : (((~p(s(bool,X3)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | p(s(bool,X3)))) & s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : ? [X3] : ((p(s(bool,X3)) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2] : ? [X3] : ((p(s(bool,X3)) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X13,X10] : ? [X14] : ((p(s(bool,X14)) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X10)) & s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.bool.COND_3'(s(bool,X14),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),X10))))))))),
  file('thm.list.FRONT_CONS|split|0','thm.list.FRONT_DEF')).
fof(f97,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK2(X2,X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f67,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.FRONT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.FRONT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f44])).
fof(f44,plain,(
  ? [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.FRONT_CONS|split|0','thm.list.FRONT_CONS|split|0')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 246
% Generated clauses: 1044
% Final active clauses: 26
% Final passive clauses: 199
% Input formulas: 19
% Initial clauses: 36
% 
% Duplicate literals: 107
% Trivial inequalities: 13
% Fw subsumption resolutions: 72
% Fw demodulations: 34
% Bw demodulations: 1
% 
% Simple tautologies: 48
% Equational tautologies: 30
% Forward subsumptions: 487
% 
% Binary resolution: 29
% Factoring: 1
% Forward superposition: 229
% Backward superposition: 404
% Self superposition: 57
% Equality factoring: 52
% Equality resolution: 2
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 22
% SAT solver unit clauses: 5
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 1
% 
% Sat splits: 8
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 21
% TWLsolver calls for satisfiability: 11
% 
% Memory used [KB]: 1279
% Time elapsed: 0.034 s
% ------------------------------
% ------------------------------
% Success in time 0.036 s
