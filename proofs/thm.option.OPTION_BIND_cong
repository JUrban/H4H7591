Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.option
% (36053)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 179
% Passive clauses: 3300
% Generated clauses: 26489
% Final active clauses: 136
% Final passive clauses: 2743
% Input formulas: 37
% Initial clauses: 54
% 
% Duplicate literals: 847
% Trivial inequalities: 326
% Fw subsumption resolutions: 2887
% Fw demodulations: 4634
% Bw demodulations: 37
% 
% Simple tautologies: 298
% Equational tautologies: 52
% Forward subsumptions: 13940
% Fw demodulations to eq. taut.: 71
% 
% Binary resolution: 76
% Forward superposition: 9846
% Backward superposition: 7486
% Self superposition: 223
% Equality factoring: 98
% Equality resolution: 43
% 
% Split clauses: 202
% Split components: 413
% SAT solver clauses: 370
% SAT solver unit clauses: 12
% SAT solver binary clauses: 89
% 
% Sat splits: 202
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 367
% TWLsolver calls for satisfiability: 84
% 
% Memory used [KB]: 13944
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% (36100)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 173
% Passive clauses: 1601
% Generated clauses: 17643
% Final active clauses: 118
% Final passive clauses: 1135
% Input formulas: 37
% Initial clauses: 54
% 
% Duplicate literals: 308
% Trivial inequalities: 211
% Fw subsumption resolutions: 1005
% Fw demodulations: 2813
% Bw demodulations: 316
% Condensations: 441
% Global subsumptions: 4
% 
% Simple tautologies: 150
% Equational tautologies: 29
% Forward subsumptions: 8669
% Fw demodulations to eq. taut.: 153
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 66
% Forward superposition: 5279
% Backward superposition: 5154
% Self superposition: 128
% Equality factoring: 47
% Equality resolution: 29
% 
% Split clauses: 107
% Split components: 214
% SAT solver clauses: 2126
% SAT solver unit clauses: 87
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 11
% SAT solver learnt literals: 7
% 
% Sat splits: 107
% Sat splitting refutations: 29
% 
% TWLsolver clauses: 2106
% TWLsolver calls for satisfiability: 260
% 
% Memory used [KB]: 16886
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f3292,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f202,f205,f203,f1575,f1581,f1574,f1582,f1583,f1585,f2559,f2561,f2576,f2578,f2597,f2563,f2612,f2615,f2618,f3280])).
fof(f3280,plain,(
  $false | ($spl13 | $spl14)),
  inference(subsumption_resolution,[],[f3279,f191])).
fof(f191,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK5)))),
  inference(backward_demodulation,[],[f131,f133])).
fof(f133,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK5)))),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),sK3) & ! [X6] : (s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6))) | s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X6))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,X6)))) & s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK3),s(fun(sK0,'type.option.option'(sK1)),sK5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f101])).
fof(f101,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),X3) & ! [X6] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) | s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X5),s(X0,X6)))) & s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X4))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X5))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.option.option'(X0),X2) = s('type.option.option'(X0),X3) & ! [X6] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) | s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X5),s(X0,X6))))) & s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X4))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X5))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.option.option'(X0),X2) = s('type.option.option'(X0),X3) & ! [X6] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) => s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X5),s(X0,X6))))) => s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X4))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X5))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : ((s('type.option.option'(X0),X2) = s('type.option.option'(X0),X3) & ! [X6] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) => s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X5),s(X0,X6))))) => s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X4))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X5))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : ((s('type.option.option'(X6),X8) = s('type.option.option'(X6),X9) & ! [X12] : (s('type.option.option'(X6),X9) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) => s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X10),s(X6,X12))) = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X11),s(X6,X12))))) => s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X8),s(fun(X6,'type.option.option'(X7)),X10))) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X9),s(fun(X6,'type.option.option'(X7)),X11))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : ((s('type.option.option'(X6),X8) = s('type.option.option'(X6),X9) & ! [X12] : (s('type.option.option'(X6),X9) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) => s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X10),s(X6,X12))) = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X11),s(X6,X12))))) => s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X8),s(fun(X6,'type.option.option'(X7)),X10))) = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X9),s(fun(X6,'type.option.option'(X7)),X11))))),
  file('thm.option.OPTION_BIND_cong','thm.option.OPTION_BIND_cong')).
fof(f131,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),sK3)),
  inference(cnf_transformation,[],[f113])).
fof(f3279,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))) = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK5))) | ($spl13 | $spl14)),
  inference(forward_demodulation,[],[f3278,f3235])).
fof(f3235,plain,(
  ( ! [X4,X5] : (s('type.option.option'(X4),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(X4)),X5))) = s('type.option.option'(X4),happ(s(fun(sK0,'type.option.option'(X4)),X5),s(sK0,sK6(sK2,sK0))))) ) | $spl13),
  inference(superposition,[],[f177,f2666])).
fof(f2666,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK2,sK0)))) | $spl13),
  inference(unit_resulting_resolution,[],[f2562,f161])).
fof(f161,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f63])).
fof(f63,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X20] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X20) | ? [X12] : s('type.option.option'(X6),X20) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))))),
  file('thm.option.OPTION_BIND_cong','thm.option.option_nchotomy')).
fof(f2562,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | $spl13),
  inference(cnf_transformation,[],[f2562_D])).
fof(f2562_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f177,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X12,X14] : s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X14),s(X7,X12))) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X12))),s(fun(X7,'type.option.option'(X6)),X14)))),
  file('thm.option.OPTION_BIND_cong','thm.option.OPTION_BIND_def|split|1')).
fof(f3278,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK5))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK2,sK0)))) | ($spl13 | $spl14)),
  inference(backward_demodulation,[],[f3235,f2806])).
fof(f2806,plain,(
  s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK2,sK0)))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,sK6(sK2,sK0)))) | ($spl13 | $spl14)),
  inference(forward_demodulation,[],[f2805,f2597])).
fof(f2805,plain,(
  s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,sK6(sK3,sK0)))) | ($spl13 | $spl14)),
  inference(subsumption_resolution,[],[f2797,f2666])).
fof(f2797,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK6(sK2,sK0)))) | s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,sK6(sK3,sK0)))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,sK6(sK3,sK0)))) | $spl14),
  inference(superposition,[],[f190,f2597])).
fof(f190,plain,(
  ( ! [X6] : (s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6))) | s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X6))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,X6)))) )),
  inference(backward_demodulation,[],[f131,f132])).
fof(f132,plain,(
  ( ! [X6] : (s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK4),s(sK0,X6))) = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK5),s(sK0,X6))) | s('type.option.option'(sK0),sK3) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X6)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f2618,plain,(
  $false | $spl12),
  inference(trivial_inequality_removal,[],[f2617])).
fof(f2617,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) | $spl12),
  inference(forward_demodulation,[],[f2616,f175])).
fof(f175,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7,X6] : ! [X14] : s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.NONE_0'),s(fun(X7,'type.option.option'(X6)),X14)))),
  file('thm.option.OPTION_BIND_cong','thm.option.OPTION_BIND_def|split|0')).
fof(f2616,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))))))) | $spl12),
  inference(forward_demodulation,[],[f2607,f175])).
fof(f2607,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK5))))))) | $spl12),
  inference(backward_demodulation,[],[f2563,f1222])).
fof(f1222,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK5)))))))),
  inference(unit_resulting_resolution,[],[f907,f172])).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X12,X17] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X17))) <=> s(X6,X12) = s(X6,X17))),
  file('thm.option.OPTION_BIND_cong','thm.option.SOME_|49||49|')).
fof(f907,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK4))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK5)))))),
  inference(unit_resulting_resolution,[],[f191,f172])).
fof(f2615,plain,(
  $false | $spl12),
  inference(trivial_inequality_removal,[],[f2614])).
fof(f2614,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | $spl12),
  inference(forward_demodulation,[],[f2613,f175])).
fof(f2613,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))))) | $spl12),
  inference(forward_demodulation,[],[f2606,f175])).
fof(f2606,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK5))))) | $spl12),
  inference(backward_demodulation,[],[f2563,f907])).
fof(f2612,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f2611,f175])).
fof(f2611,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))) | $spl12),
  inference(forward_demodulation,[],[f2605,f175])).
fof(f2605,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK4))) != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK5))) | $spl12),
  inference(backward_demodulation,[],[f2563,f191])).
fof(f2563,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl12),
  inference(cnf_transformation,[],[f2563_D])).
fof(f2563_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2597,plain,(
  s(sK0,sK6(sK2,sK0)) = s(sK0,sK6(sK3,sK0)) | $spl14),
  inference(cnf_transformation,[],[f2597_D])).
fof(f2597_D,plain,(
  s(sK0,sK6(sK2,sK0)) = s(sK0,sK6(sK3,sK0)) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2578,plain,(
  s(sK0,sK6(sK2,sK0)) = s(sK0,sK6(sK3,sK0)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl10),
  inference(superposition,[],[f1749,f2561])).
fof(f1749,plain,(
  ( ! [X2,X3] : (s(X2,sK6(X3,X2)) = s(X2,'const.option.THE_1'(s('type.option.option'(X2),X3))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) )),
  inference(superposition,[],[f155,f161])).
fof(f155,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,'const.option.THE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X12] : s(X6,X12) = s(X6,'const.option.THE_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12)))))),
  file('thm.option.OPTION_BIND_cong','thm.option.THE_DEF')).
fof(f2576,plain,(
  s(sK0,sK6(sK2,sK0)) = s(sK0,sK6(sK3,sK0)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl10),
  inference(superposition,[],[f2561,f1749])).
fof(f2561,plain,(
  s(sK0,sK6(sK3,sK0)) = s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))) | $spl10),
  inference(cnf_transformation,[],[f2561_D])).
fof(f2561_D,plain,(
  s(sK0,sK6(sK3,sK0)) = s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2559,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | s(sK0,sK6(sK3,sK0)) = s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2)))),
  inference(forward_demodulation,[],[f2482,f131])).
fof(f2482,plain,(
  s(sK0,sK6(sK3,sK0)) = s(sK0,'const.option.THE_1'(s('type.option.option'(sK0),sK2))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK3)),
  inference(superposition,[],[f1749,f131])).
fof(f1585,plain,(
  $false | ($spl3 | $spl6)),
  inference(subsumption_resolution,[],[f1584,f205])).
fof(f1584,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl6),
  inference(backward_demodulation,[],[f1582,f137])).
fof(f137,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.option.OPTION_BIND_cong','thm.option.IS_SOME_DEF|split|1')).
fof(f1583,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2)))))) ) | $spl8),
  inference(cnf_transformation,[],[f1583_D])).
fof(f1583_D,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2)))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1582,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f1582_D])).
fof(f1582_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1574,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) | s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2)))))) ) | $spl3),
  inference(condensation,[],[f1573])).
fof(f1573,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X25),'const.option.SOME_1'(s(X25,X26))))) | s(bool,X27) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X24),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X24),'const.option.NONE_0')))) ) | $spl3),
  inference(superposition,[],[f1188,f867])).
fof(f867,plain,(
  ( ! [X26,X24,X25] : (s(bool,X26) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f680,f134])).
fof(f134,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.option.OPTION_BIND_cong',aHL_TRUTH)).
fof(f680,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f240,f195])).
fof(f195,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f139,f139])).
fof(f139,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.OPTION_BIND_cong',aHL_BOOL_CASES)).
fof(f240,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f169,f165])).
fof(f165,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),X1)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X1) | p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),X1))))))),
  inference(nnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : (p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),X1)))) <=> s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),X1)))) <=> s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X12] : (p(s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X6),X12)))) <=> s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X12))),
  file('thm.option.OPTION_BIND_cong','thm.option.IS_NONE_EQ_NONE')).
fof(f169,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6] : ! [X12] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12)))),
  file('thm.option.OPTION_BIND_cong','thm.option.NOT_SOME_NONE')).
fof(f1188,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0'))) | s(bool,X0) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) | $spl3),
  inference(equality_factoring,[],[f865])).
fof(f865,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X14),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl3),
  inference(subsumption_resolution,[],[f595,f205])).
fof(f595,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X15) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X14),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f195,f137])).
fof(f1581,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) | $spl4),
  inference(cnf_transformation,[],[f1581_D])).
fof(f1581_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1575,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) | s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) | $spl3),
  inference(condensation,[],[f1572])).
fof(f1572,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X22),'const.option.NONE_0'))) | s(bool,X23) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X21),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X21),'const.option.NONE_0')))) ) | $spl3),
  inference(superposition,[],[f1188,f865])).
fof(f203,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f203_D])).
fof(f203_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f205,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f202,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f139])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 71
% Passive clauses: 247
% Generated clauses: 3135
% Final active clauses: 62
% Final passive clauses: 164
% Input formulas: 37
% Initial clauses: 54
% 
% Duplicate literals: 123
% Trivial inequalities: 25
% Fw subsumption resolutions: 43
% Fw demodulations: 431
% Bw demodulations: 15
% Condensations: 168
% 
% Simple tautologies: 45
% Equational tautologies: 49
% Forward subsumptions: 1904
% Fw demodulations to eq. taut.: 89
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 225
% Forward superposition: 945
% Backward superposition: 1000
% Self superposition: 53
% Equality factoring: 32
% Equality resolution: 4
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 266
% SAT solver unit clauses: 43
% SAT solver binary clauses: 104
% 
% Sat splits: 6
% Sat splitting refutations: 5
% 
% Memory used [KB]: 2686
% Time elapsed: 0.088 s
% ------------------------------
% ------------------------------
% Success in time 1.411 s
