Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f281,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f280])).
fof(f280,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0')),
  inference(superposition,[],[f65,f273])).
fof(f273,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(forward_demodulation,[],[f271,f69])).
fof(f69,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.rich_list.LASTN|split|0','thm.list.REVERSE_DEF|split|0')).
fof(f271,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f91,f86])).
fof(f86,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  file('thm.rich_list.LASTN|split|0','thm.list.TAKE_|48|')).
fof(f91,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X11,X12] : s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X11),s('type.list.list'(X6),X12))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X11),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X12)))))))),
  file('thm.rich_list.LASTN|split|0','thm.rich_list.LASTN_def')).
fof(f65,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f48])).
fof(f48,plain,(
  ? [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  file('thm.rich_list.LASTN|split|0','thm.rich_list.LASTN|split|0')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 13
% Passive clauses: 31
% Generated clauses: 194
% Final active clauses: 12
% Final passive clauses: 11
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 38
% Trivial inequalities: 4
% Fw demodulations: 1
% 
% Simple tautologies: 29
% Equational tautologies: 15
% Forward subsumptions: 69
% 
% Binary resolution: 3
% Forward superposition: 30
% Backward superposition: 34
% Self superposition: 28
% Equality factoring: 26
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 10
% SAT solver unit clauses: 4
% SAT solver binary clauses: 5
% 
% Sat splits: 5
% 
% TWLsolver clauses: 10
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 639
% Time elapsed: 0.015 s
% ------------------------------
% ------------------------------
% Success in time 0.017 s
