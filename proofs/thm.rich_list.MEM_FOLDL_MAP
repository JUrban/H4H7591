Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f18828,plain,(
  $false),
  inference(subsumption_resolution,[],[f18807,f314])).
fof(f314,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))),
  file('thm.rich_list.MEM_FOLDL_MAP','thm.rich_list.MEM_EXISTS')).
fof(f18807,plain,(
  s(bool,'const.bool.IN_2'(s(sK0,sK1),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) != s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),'|dollar|equals_1'(s(sK0,sK1))),s('type.list.list'(sK0),sK2)))),
  inference(superposition,[],[f249,f317])).
fof(f317,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X8] : s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.MEM_FOLDL_MAP','thm.rich_list.EXISTS_FOLDL_MAP')).
fof(f249,plain,(
  s(bool,'const.bool.IN_2'(s(sK0,sK1),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) != s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(sK0,bool),'|dollar|equals_1'(s(sK0,sK1))),s('type.list.list'(sK0),sK2)))))),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  s(bool,'const.bool.IN_2'(s(sK0,sK1),s(fun(sK0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK0),sK2))))) != s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(sK0,bool),'|dollar|equals_1'(s(sK0,sK1))),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f178])).
fof(f178,plain,(
  ? [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) != s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.FOLDL_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.MEM_FOLDL_MAP','thm.rich_list.MEM_FOLDL_MAP')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 174
% Passive clauses: 4245
% Generated clauses: 18414
% Final active clauses: 172
% Final passive clauses: 3939
% Input formulas: 69
% Initial clauses: 126
% 
% Duplicate literals: 456
% Trivial inequalities: 369
% Fw subsumption resolutions: 2146
% Fw demodulations: 2969
% Bw demodulations: 2
% 
% Simple tautologies: 431
% Equational tautologies: 38
% Forward subsumptions: 7221
% 
% Binary resolution: 1060
% Factoring: 4
% Forward superposition: 5871
% Backward superposition: 5149
% Self superposition: 80
% Equality factoring: 64
% Equality resolution: 32
% 
% Split clauses: 250
% Split components: 506
% SAT solver clauses: 654
% SAT solver unit clauses: 9
% SAT solver binary clauses: 223
% 
% Sat splits: 250
% 
% TWLsolver clauses: 654
% TWLsolver calls for satisfiability: 132
% 
% Memory used [KB]: 10490
% Time elapsed: 0.461 s
% ------------------------------
% ------------------------------
% Success in time 0.455 s
