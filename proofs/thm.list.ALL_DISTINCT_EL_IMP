Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% (66472)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 640
% Passive clauses: 10506
% Generated clauses: 18451
% Final active clauses: 637
% Final passive clauses: 9464
% Input formulas: 58
% Initial clauses: 239
% 
% Duplicate literals: 299
% Trivial inequalities: 12
% Fw subsumption resolutions: 1349
% Fw demodulations: 122
% Bw demodulations: 3
% 
% Simple tautologies: 264
% Equational tautologies: 59
% Forward subsumptions: 5565
% 
% Binary resolution: 12657
% Factoring: 1144
% Forward superposition: 1247
% Backward superposition: 1180
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 6
% 
% Split clauses: 324
% Split components: 652
% SAT solver clauses: 683
% SAT solver unit clauses: 26
% SAT solver binary clauses: 202
% 
% Sat splits: 323
% 
% TWLsolver clauses: 683
% TWLsolver calls for satisfiability: 412
% 
% Memory used [KB]: 9083
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3220,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3219,f716,f320,f570,f568,f321,f578,f720,f726,f317,f574,f341,f587,f3033,f3034,f319,f569,f567,f399,f608,f717,f722,f316,f576,f719,f724,f318,f572])).
fof(f572,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | $spl4),
  inference(cnf_transformation,[],[f572_D])).
fof(f572_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f318,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) & (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK14) = s('type.num.num',sK15)) & (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK14) != s('type.num.num',sK15))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f192])).
fof(f192,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3)))),
  inference(flattening,[],[f191])).
fof(f191,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3))))),
  inference(nnf_transformation,[],[f146])).
fof(f146,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <~> s('type.num.num',X2) = s('type.num.num',X3)))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <~> s('type.num.num',X2) = s('type.num.num',X3)))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3)))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ~! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))))) => (s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) <=> s('type.num.num',X8) = s('type.num.num',X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))))) => (s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) <=> s('type.num.num',X8) = s('type.num.num',X9)))),
  file('thm.list.ALL_DISTINCT_EL_IMP','thm.list.ALL_DISTINCT_EL_IMP')).
fof(f724,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) | $spl224),
  inference(cnf_transformation,[],[f724_D])).
fof(f724_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f719,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) | ($spl4 | $spl16)),
  inference(resolution,[],[f587,f572])).
fof(f576,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13)))) | $spl8),
  inference(cnf_transformation,[],[f576_D])).
fof(f576_D,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f316,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))))),
  inference(cnf_transformation,[],[f193])).
fof(f722,plain,(
  s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))) | $spl222),
  inference(cnf_transformation,[],[f722_D])).
fof(f722_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f717,plain,(
  s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))) | ($spl8 | $spl16)),
  inference(resolution,[],[f587,f576])).
fof(f608,plain,(
  ( ! [X4,X0,X5,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))) ) | $spl34),
  inference(cnf_transformation,[],[f608_D])).
fof(f608_D,plain,(
  ( ! [X4,X0,X5,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f399,plain,(
  ( ! [X4,X0,X5,X1] : (s('type.num.num',X4) = s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))) )),
  inference(cnf_transformation,[],[f236])).
fof(f236,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5)) & (s('type.num.num',X4) != s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))))))) & ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK16(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK17(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',sK16(X1,X0)),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',sK17(X1,X0)),s('type.list.list'(X0),X1))) | s('type.num.num',sK16(X1,X0)) = s('type.num.num',sK17(X1,X0))) & (s(X0,'const.list.EL_2'(s('type.num.num',sK16(X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK17(X1,X0)),s('type.list.list'(X0),X1))) | s('type.num.num',sK16(X1,X0)) != s('type.num.num',sK17(X1,X0)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f235])).
fof(f235,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5)) & (s('type.num.num',X4) != s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(rectify,[],[f234])).
fof(f234,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s('type.num.num',X2) != s('type.num.num',X3) | s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(flattening,[],[f233])).
fof(f233,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s('type.num.num',X2) != s('type.num.num',X3) | s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(nnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) | (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(ennf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X7)))) <=> ! [X8,X9] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))))) => (s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num',X9),s('type.list.list'(X6),X7))) <=> s('type.num.num',X8) = s('type.num.num',X9))))),
  file('thm.list.ALL_DISTINCT_EL_IMP','thm.list.EL_ALL_DISTINCT_EL_EQ')).
fof(f567,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) | $spl0),
  inference(cnf_transformation,[],[f567_D])).
fof(f567_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f569,plain,(
  s('type.num.num',sK14) = s('type.num.num',sK15) | $spl2),
  inference(cnf_transformation,[],[f569_D])).
fof(f569_D,plain,(
  s('type.num.num',sK14) = s('type.num.num',sK15) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f319,plain,(
  s('type.num.num',sK14) = s('type.num.num',sK15) | s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f193])).
fof(f3034,plain,(
  ( ! [X0] : (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))) ) | $spl1272),
  inference(cnf_transformation,[],[f3034_D])).
fof(f3034_D,plain,(
  ( ! [X0] : (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))) ) <=> ~$spl1272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1272])])).
fof(f3033,plain,(
  ( ! [X0] : (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))) ) | ($spl0 | $spl10 | $spl34 | $spl222 | $spl224)),
  inference(subsumption_resolution,[],[f3032,f578])).
fof(f3032,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))) ) | ($spl0 | $spl10 | $spl34 | $spl222 | $spl224)),
  inference(forward_demodulation,[],[f3031,f722])).
fof(f3031,plain,(
  ( ! [X0] : (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))))) ) | ($spl0 | $spl10 | $spl34 | $spl224)),
  inference(subsumption_resolution,[],[f3030,f578])).
fof(f3030,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))))) ) | ($spl0 | $spl34 | $spl224)),
  inference(forward_demodulation,[],[f3024,f724])).
fof(f3024,plain,(
  ( ! [X0] : (s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',X0),s('type.list.list'(sK12),sK13))) | s('type.num.num',sK15) = s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK13))))) ) | ($spl0 | $spl34)),
  inference(superposition,[],[f608,f567])).
fof(f587,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f587_D])).
fof(f587_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f341,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.list.ALL_DISTINCT_EL_IMP','thm.bool.EQ_CLAUSES|split|0')).
fof(f574,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | $spl6),
  inference(cnf_transformation,[],[f574_D])).
fof(f574_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f317,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))))),
  inference(cnf_transformation,[],[f193])).
fof(f726,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) | $spl226),
  inference(cnf_transformation,[],[f726_D])).
fof(f726_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f720,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13))))) | ($spl6 | $spl16)),
  inference(resolution,[],[f587,f574])).
fof(f578,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f578_D])).
fof(f578_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f321,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.list.ALL_DISTINCT_EL_IMP',aHL_TRUTH)).
fof(f568,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) | $spl1),
  inference(cnf_transformation,[],[f568_D])).
fof(f568_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f570,plain,(
  s('type.num.num',sK14) != s('type.num.num',sK15) | $spl3),
  inference(cnf_transformation,[],[f570_D])).
fof(f570_D,plain,(
  s('type.num.num',sK14) != s('type.num.num',sK15) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f320,plain,(
  s('type.num.num',sK14) != s('type.num.num',sK15) | s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK15),s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f193])).
fof(f716,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f715])).
fof(f715,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK14),s('type.list.list'(sK12),sK13))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f568,f569])).
fof(f3219,plain,(
  $false | ($spl3 | $spl10 | $spl226 | $spl1272)),
  inference(subsumption_resolution,[],[f3218,f578])).
fof(f3218,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl226 | $spl1272)),
  inference(forward_demodulation,[],[f3217,f726])).
fof(f3217,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | ($spl3 | $spl1272)),
  inference(subsumption_resolution,[],[f3216,f570])).
fof(f3216,plain,(
  s('type.num.num',sK14) = s('type.num.num',sK15) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK14),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK13)))))) | $spl1272),
  inference(equality_resolution,[],[f3034])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 239
% Passive clauses: 700
% Generated clauses: 2907
% Final active clauses: 235
% Final passive clauses: 440
% Input formulas: 58
% Initial clauses: 239
% 
% Duplicate literals: 85
% Trivial inequalities: 7
% Fw subsumption resolutions: 241
% Fw demodulations: 64
% Bw demodulations: 22
% Condensations: 32
% Global subsumptions: 22
% 
% Simple tautologies: 211
% Equational tautologies: 7
% Forward subsumptions: 731
% 
% Binary resolution: 1136
% Factoring: 60
% Forward superposition: 238
% Backward superposition: 45
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 5
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 1066
% SAT solver unit clauses: 228
% SAT solver binary clauses: 77
% SAT solver learnt clauses: 46
% SAT solver learnt literals: 11
% 
% Sat splits: 5
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 976
% TWLsolver calls for satisfiability: 1845
% 
% Memory used [KB]: 3454
% Time elapsed: 0.094 s
% ------------------------------
% ------------------------------
% Success in time 0.713 s
