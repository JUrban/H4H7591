Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f7522,plain,(
  $false),
  inference(subsumption_resolution,[],[f7498,f232])).
fof(f232,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1)),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) & s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f169])).
fof(f169,plain,(
  ? [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) & s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : (~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (~s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) => s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))),s('type.list.list'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (~s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7) => s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X7))) = s(X6,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))),s('type.list.list'(X6),X7))))),
  file('thm.rich_list.EL_PRE_LENGTH','thm.rich_list.EL_PRE_LENGTH')).
fof(f7498,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1)),
  inference(trivial_inequality_removal,[],[f7497])).
fof(f7497,plain,(
  s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1)),
  inference(superposition,[],[f233,f288])).
fof(f288,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1] : (~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8] : (~s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8) => s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X8))) = s(X6,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))))),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.EL_PRE_LENGTH','thm.list.LAST_EL')).
fof(f233,plain,(
  s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.list.EL_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f198])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 102
% Passive clauses: 1344
% Generated clauses: 7212
% Final active clauses: 96
% Final passive clauses: 1141
% Input formulas: 69
% Initial clauses: 124
% 
% Duplicate literals: 204
% Trivial inequalities: 106
% Fw subsumption resolutions: 504
% Fw demodulations: 978
% Bw demodulations: 5
% 
% Simple tautologies: 200
% Equational tautologies: 35
% Forward subsumptions: 3742
% Fw demodulations to eq. taut.: 22
% 
% Binary resolution: 147
% Factoring: 1
% Forward superposition: 2638
% Backward superposition: 2293
% Self superposition: 106
% Equality factoring: 58
% Equality resolution: 19
% 
% Split clauses: 87
% Split components: 178
% SAT solver clauses: 169
% SAT solver unit clauses: 11
% SAT solver binary clauses: 63
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 87
% 
% TWLsolver clauses: 168
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 5756
% Time elapsed: 0.240 s
% ------------------------------
% ------------------------------
% Success in time 0.261 s
