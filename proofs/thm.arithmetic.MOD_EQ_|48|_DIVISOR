Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f1612,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1611,f358,f58,f91,f87,f59,f89,f88])).
fof(f88,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | $spl1),
  inference(cnf_transformation,[],[f88_D])).
fof(f88_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f89,plain,(
  ( ! [X2] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK0)))) ) | $spl2),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ( ! [X2] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK0)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f59,plain,(
  ( ! [X2] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) & (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ! [X2] : s('type.num.num',sK1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f47])).
fof(f47,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ? [X3] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))),
  inference(rectify,[],[f46])).
fof(f46,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) <~> ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) <=> ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X6))) <=> ? [X8] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X6))) <=> ? [X8] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6)))))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR','thm.arithmetic.MOD_EQ_|48|_DIVISOR')).
fof(f87,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | $spl0),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f91,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | $spl4),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f58,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0)))),
  inference(cnf_transformation,[],[f48])).
fof(f358,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f352,f88])).
fof(f352,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | $spl4),
  inference(superposition,[],[f226,f91])).
fof(f226,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK0))),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f222,f60])).
fof(f60,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR',aHL_TRUTH)).
fof(f222,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK0))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f65,f96])).
fof(f96,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))),
  inference(resolution,[],[f67,f57])).
fof(f57,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f48])).
fof(f67,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X16] : (s(bool,'T_0') = s(bool,X16) <=> p(s(bool,X16)))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR','thm.bool.EQ_CLAUSES|split|1')).
fof(f65,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => ! [X7] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X6))))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR','thm.arithmetic.MOD_EQ_|48|')).
fof(f1611,plain,(
  $false | ($spl0 | $spl2)),
  inference(equality_resolution,[],[f1606])).
fof(f1606,plain,(
  ( ! [X4] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK0)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f1605,f60])).
fof(f1605,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK0)))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f1604,f96])).
fof(f1604,plain,(
  ( ! [X4] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f1582,f372])).
fof(f372,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X0)))) ) | $spl2),
  inference(superposition,[],[f89,f77])).
fof(f77,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X6] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X6)))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR','thm.arithmetic.MULT_SYM')).
fof(f1582,plain,(
  ( ! [X4] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X4))) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f1581])).
fof(f1581,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X4))) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) ) | $spl0),
  inference(superposition,[],[f85,f87])).
fof(f85,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & ((s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) => (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10,X11,X12] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) => (s('type.num.num',X10) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X11))) <=> (s('type.num.num',X11) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X10),s('type.num.num',X12))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X10),s('type.num.num',X12))))))),
  file('thm.arithmetic.MOD_EQ_|48|_DIVISOR','thm.arithmetic.MULT_EQ_DIV')).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 231
% Generated clauses: 1504
% Final active clauses: 40
% Final passive clauses: 156
% Input formulas: 17
% Initial clauses: 29
% 
% Duplicate literals: 135
% Trivial inequalities: 43
% Fw subsumption resolutions: 166
% Fw demodulations: 91
% Bw demodulations: 1
% 
% Simple tautologies: 79
% Equational tautologies: 31
% Forward subsumptions: 725
% 
% Binary resolution: 41
% Factoring: 1
% Forward superposition: 355
% Backward superposition: 509
% Self superposition: 57
% Equality factoring: 54
% Equality resolution: 12
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 36
% SAT solver unit clauses: 13
% SAT solver binary clauses: 22
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 14
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 34
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.040 s
% ------------------------------
% ------------------------------
% Success in time 0.042 s
