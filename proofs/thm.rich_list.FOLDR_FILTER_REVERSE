Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (103330)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 252
% Passive clauses: 3233
% Generated clauses: 19729
% Final active clauses: 161
% Final passive clauses: 2775
% Input formulas: 69
% Initial clauses: 132
% 
% Duplicate literals: 491
% Trivial inequalities: 177
% Fw subsumption resolutions: 1416
% Fw demodulations: 3695
% Bw demodulations: 86
% 
% Simple tautologies: 219
% Equational tautologies: 38
% Forward subsumptions: 10066
% Fw demodulations to eq. taut.: 11
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 891
% Factoring: 24
% Forward superposition: 6217
% Backward superposition: 6251
% Self superposition: 160
% Equality factoring: 58
% Equality resolution: 18
% 
% Split clauses: 251
% Split components: 503
% SAT solver clauses: 399
% SAT solver unit clauses: 12
% SAT solver binary clauses: 85
% 
% Sat splits: 251
% 
% TWLsolver clauses: 397
% TWLsolver calls for satisfiability: 136
% 
% Memory used [KB]: 17270
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f6691,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6683,f490,f492,f273,f413,f348,f454,f6561,f6610,f272,f414,f340,f450])).
fof(f450,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,sK13(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,sK13(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) | $spl40),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,sK13(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,sK13(X1,X0)))))) | s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3)))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f340,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,sK13(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,sK13(X1,X0))))))) )),
  inference(cnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X1] : (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,sK13(X1,X0)))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK12(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK11(X1,X0)))),s(X0,sK13(X1,X0)))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13])],[f249])).
fof(f249,plain,(
  ! [X0,X1] : (? [X4,X5,X6] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X4))),s(X0,X6))))) | ! [X2,X3] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f193])).
fof(f193,plain,(
  ! [X0,X1] : (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) | ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(ennf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),X6))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X6))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7] : (! [X8,X9,X10] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,X10))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,X10))))) => ! [X11,X13] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),X13))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X13))))))),
  file('thm.rich_list.FOLDR_FILTER_REVERSE','thm.rich_list.rich_list_|49|97_prove_ltb')).
fof(f414,plain,(
  ( ! [X6,X7,X5] : (s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,X7))))) = s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,X7)))))) ) | $spl2),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  ( ! [X6,X7,X5] : (s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,X7))))) = s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,X7)))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f272,plain,(
  ( ! [X6,X7,X5] : (s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,X7))))) = s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,X7)))))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X5,X6,X7] : s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,X7))))) = s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X6))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X5))),s(sK1,X7))))) & s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),sK5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f211])).
fof(f211,plain,(
  ? [X0,X1] : (! [X5,X6,X7] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,X7))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X7))))) & ? [X2,X3,X4] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X4))))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X4))))))))),
  inference(rectify,[],[f180])).
fof(f180,plain,(
  ? [X0,X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) & ? [X5,X6,X7] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),X7))))) != s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X7))))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6,X7] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),X7))))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X7))))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : (! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X4))))) => ! [X5,X6,X7] : s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),X7))))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X5),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X6),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X7))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (! [X8,X9,X10] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,X10))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,X10))))) => ! [X11,X12,X13] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),X13))))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X13))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (! [X8,X9,X10] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,X10))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X8))),s(X6,X10))))) => ! [X11,X12,X13] : s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),X13))))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X11),s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X13))))))))),
  file('thm.rich_list.FOLDR_FILTER_REVERSE','thm.rich_list.FOLDR_FILTER_REVERSE')).
fof(f6610,plain,(
  ( ! [X14,X15] : (s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),X15))) = s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),X15)))))) ) | $spl1500),
  inference(cnf_transformation,[],[f6610_D])).
fof(f6610_D,plain,(
  ( ! [X14,X15] : (s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),X15))) = s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),X15)))))) ) <=> ~$spl1500),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1500])])).
fof(f6561,plain,(
  ( ! [X14,X15] : (s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),X15))) = s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),X15)))))) ) | ($spl2 | $spl40)),
  inference(trivial_inequality_removal,[],[f6558])).
fof(f6558,plain,(
  ( ! [X14,X15] : (s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK11(sK2,sK1)))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK12(sK2,sK1)))),s(sK1,sK13(sK2,sK1)))))) != s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK11(sK2,sK1)))),s(sK1,happ(s(fun(sK1,sK1),happ(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK12(sK2,sK1)))),s(sK1,sK13(sK2,sK1)))))) | s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),X15))) = s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,X14),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),X15)))))) ) | ($spl2 | $spl40)),
  inference(superposition,[],[f450,f414])).
fof(f454,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) ) | $spl48),
  inference(cnf_transformation,[],[f454_D])).
fof(f454_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),X1))))) = s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X13,X12] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),X13))))) = s('type.list.list'(X6),'const.list.FILTER_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X13)))))),
  file('thm.rich_list.FOLDR_FILTER_REVERSE','thm.list.FILTER_REVERSE')).
fof(f413,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),sK5))))))) | $spl1),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),sK5))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f273,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),sK5)))))))),
  inference(cnf_transformation,[],[f212])).
fof(f492,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))))) | $spl107),
  inference(cnf_transformation,[],[f492_D])).
fof(f492_D,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f490,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.REVERSE_1'(s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))))) | ($spl1 | $spl48)),
  inference(forward_demodulation,[],[f413,f454])).
fof(f6683,plain,(
  $false | ($spl107 | $spl1500)),
  inference(trivial_inequality_removal,[],[f6651])).
fof(f6651,plain,(
  s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) != s(sK1,'const.list.FOLDR_3'(s(fun(sK1,fun(sK1,sK1)),sK2),s(sK1,sK3),s('type.list.list'(sK1),'const.list.FILTER_2'(s(fun(sK1,bool),sK4),s('type.list.list'(sK1),sK5))))) | ($spl107 | $spl1500)),
  inference(superposition,[],[f492,f6610])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 138
% Passive clauses: 783
% Generated clauses: 6464
% Final active clauses: 131
% Final passive clauses: 543
% Input formulas: 69
% Initial clauses: 132
% 
% Duplicate literals: 12
% Trivial inequalities: 10
% Fw subsumption resolutions: 224
% Fw demodulations: 894
% Bw demodulations: 107
% Condensations: 45
% Global subsumptions: 19
% 
% Simple tautologies: 70
% Equational tautologies: 14
% Forward subsumptions: 3467
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 484
% Factoring: 11
% Forward superposition: 1925
% Backward superposition: 1687
% Self superposition: 94
% Equality factoring: 6
% Equality resolution: 3
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 1092
% SAT solver unit clauses: 171
% SAT solver binary clauses: 58
% SAT solver learnt clauses: 39
% SAT solver learnt literals: 10
% 
% Sat splits: 18
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1015
% TWLsolver calls for satisfiability: 529
% 
% Memory used [KB]: 14967
% Time elapsed: 0.357 s
% ------------------------------
% ------------------------------
% Success in time 0.98 s
