Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rat
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rat
% SZS output start Proof for thm.rat
fof(f3250,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3239,f70,f113,f111,f2690,f69,f112,f110,f158,f160,f159,f184,f108,f119,f73,f115,f2757,f2950])).
fof(f2950,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) | $spl106),
  inference(cnf_transformation,[],[f2950_D])).
fof(f2950_D,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f2757,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) | $spl0),
  inference(forward_demodulation,[],[f2741,f246])).
fof(f246,plain,(
  ( ! [X0] : (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int',X0)))) )),
  inference(forward_demodulation,[],[f75,f68])).
fof(f68,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f50])).
fof(f50,plain,(
  ? [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) & (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1)))) & (~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ? [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) & ((p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1)))) & (~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ? [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) & (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) <~> s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1)))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) => (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) <=> s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X6))) => (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X6),s('type.frac.frac',X7)))) <=> s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X6))) => (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X6),s('type.frac.frac',X7)))) <=> s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X7)))))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.rat.RAT_NMR_Z_IFF_EQUIV')).
fof(f75,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X12)))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.integer.INT_MUL_LZERO')).
fof(f2741,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) | $spl0),
  inference(resolution,[],[f110,f102])).
fof(f102,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0)))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0)))))) & (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))) | p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1))))))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1)))) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X15,X16] : (p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X15),s('type.frac.frac',X16)))) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X15))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X16))))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X16))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X15))))))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.rat.rat_equiv_def')).
fof(f115,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV',aHL_FALSITY)).
fof(f119,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f108,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f93])).
fof(f93,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X11] : ! [X12] : (s(X11,X12) = s(X11,X12) <=> p(s(bool,'T_0')))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.bool.REFL_CLAUSE')).
fof(f184,plain,(
  $false | ($spl5 | $spl10 | $spl16)),
  inference(subsumption_resolution,[],[f164,f119])).
fof(f164,plain,(
  ~p(s(bool,'T_0')) | ($spl5 | $spl16)),
  inference(backward_demodulation,[],[f159,f115])).
fof(f159,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f160,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f158,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f154,f123])).
fof(f123,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f115,f76])).
fof(f76,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV',aHL_BOOL_CASES)).
fof(f154,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f98,f76])).
fof(f98,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8,X9] : ((p(s(bool,X8)) => p(s(bool,X9))) => ((p(s(bool,X9)) => p(s(bool,X8))) => s(bool,X8) = s(bool,X9)))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.bool.IMP_ANTISYM_AX')).
fof(f110,plain,(
  p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | $spl0),
  inference(cnf_transformation,[],[f110_D])).
fof(f110_D,plain,(
  p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f112,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f69,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1))))),
  inference(cnf_transformation,[],[f51])).
fof(f2690,plain,(
  $false | ($spl1 | $spl2 | $spl5 | $spl18)),
  inference(subsumption_resolution,[],[f2689,f115])).
fof(f2689,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl2 | $spl18)),
  inference(forward_demodulation,[],[f2688,f195])).
fof(f195,plain,(
  s(bool,'F_0') = s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1))) | ($spl1 | $spl18)),
  inference(resolution,[],[f160,f111])).
fof(f2688,plain,(
  p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | $spl2),
  inference(subsumption_resolution,[],[f2685,f246])).
fof(f2685,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) | p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | $spl2),
  inference(superposition,[],[f2403,f120])).
fof(f120,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | $spl2),
  inference(forward_demodulation,[],[f112,f68])).
fof(f2403,plain,(
  ( ! [X0] : (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))) | p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',X0))))) )),
  inference(superposition,[],[f103,f246])).
fof(f103,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))) | p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',X0),s('type.frac.frac',X1))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f111,plain,(
  ~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) | $spl1),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  ~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f113,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f70,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.rat.rat_equiv_2'(s('type.frac.frac',sK0),s('type.frac.frac',sK1))))),
  inference(cnf_transformation,[],[f51])).
fof(f3239,plain,(
  $false | ($spl3 | $spl106)),
  inference(subsumption_resolution,[],[f3238,f220])).
fof(f220,plain,(
  ( ! [X0] : (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0)))) )),
  inference(resolution,[],[f97,f215])).
fof(f215,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))))) )),
  inference(forward_demodulation,[],[f74,f68])).
fof(f74,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X14] : p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X14))))))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.frac.FRAC_DNMPOS')).
fof(f97,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) != s('type.integer.int',X1)) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) != s('type.integer.int',X1))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => s('type.integer.int',X0) != s('type.integer.int',X1))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => ~s('type.integer.int',X0) = s('type.integer.int',X1))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X12,X13] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X12),s('type.integer.int',X13)))) => ~s('type.integer.int',X12) = s('type.integer.int',X13))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.integer.INT_LT_IMP_NE')).
fof(f3238,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) | ($spl3 | $spl106)),
  inference(subsumption_resolution,[],[f3231,f2740])).
fof(f2740,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | $spl3),
  inference(forward_demodulation,[],[f113,f68])).
fof(f3231,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) | $spl106),
  inference(trivial_inequality_removal,[],[f3211])).
fof(f3211,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) | $spl106),
  inference(superposition,[],[f1535,f2950])).
fof(f1535,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0)))) )),
  inference(forward_demodulation,[],[f1534,f68])).
fof(f1534,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(forward_demodulation,[],[f1533,f68])).
fof(f1533,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(forward_demodulation,[],[f104,f68])).
fof(f104,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) <=> (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X12,X13] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int',X13))) <=> (s('type.integer.int',X12) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X13) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  file('thm.rat.RAT_NMR_Z_IFF_EQUIV','thm.integer.INT_ENTIRE')).
% SZS output end Proof for thm.rat
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 64
% Passive clauses: 359
% Generated clauses: 3226
% Final active clauses: 44
% Final passive clauses: 127
% Input formulas: 20
% Initial clauses: 40
% 
% Duplicate literals: 268
% Trivial inequalities: 54
% Fw subsumption resolutions: 379
% Fw demodulations: 281
% Bw demodulations: 8
% 
% Simple tautologies: 73
% Equational tautologies: 43
% Forward subsumptions: 1548
% 
% Binary resolution: 72
% Factoring: 1
% Forward superposition: 768
% Backward superposition: 963
% Self superposition: 104
% Equality factoring: 90
% Equality resolution: 9
% 
% Split clauses: 172
% Split components: 348
% SAT solver clauses: 303
% SAT solver unit clauses: 5
% SAT solver binary clauses: 31
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 172
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 297
% TWLsolver calls for satisfiability: 43
% 
% Memory used [KB]: 1918
% Time elapsed: 0.077 s
% ------------------------------
% ------------------------------
% Success in time 0.078 s
