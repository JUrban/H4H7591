Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f4589,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4588,f223,f403,f401,f399,f3960,f4054])).
fof(f4054,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f401,f225])).
fof(f225,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),sK13),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK14),s('type.list.list'('type.integer.int'),sK15))))) | s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK18),s('type.list.list'('type.integer.int'),sK19))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK16),s('type.list.list'('type.integer.int'),sK17)))))) & ! [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) & ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6))))) & ! [X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X14] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X14),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9)))))) & ! [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) & ! [X5,X6] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6))))) & ! [X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2)))))) & ! [X14] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X14),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) & ! [X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))))) & ! [X8,X9,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2)))))) & (! [X14] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X14),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) & ! [X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))))) & ! [X8,X9,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X5),s('type.list.list'('type.integer.int'),X6))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2)))))) => (? [X14] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X14),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X0) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))))) | ? [X10,X11,X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))) => (? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))))) | ? [X12,X13,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))))) | ? [X10,X11,X12,X13] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))) => (? [X7] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X8),s('type.list.list'('type.integer.int'),X9))))) | ? [X12,X13,X10,X11] : s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),X6) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X12),s('type.list.list'('type.integer.int'),X13))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X10),s('type.list.list'('type.integer.int'),X11)))))))),
  file('thm.Omega.Omega_7_prove_ltb','thm.Omega.Omega_7_prove_ltb')).
fof(f3960,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f399,f224])).
fof(f224,plain,(
  ( ! [X7] : (s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),X7),s('type.list.list'('type.integer.int'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f138])).
fof(f399,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),sK13),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),sK13),s('type.list.list'('type.integer.int'),'const.list.NIL_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK14),s('type.list.list'('type.integer.int'),sK15))))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK14),s('type.list.list'('type.integer.int'),sK15))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f403,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK18),s('type.list.list'('type.integer.int'),sK19))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK16),s('type.list.list'('type.integer.int'),sK17))))) | $spl4),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK18),s('type.list.list'('type.integer.int'),sK19))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK16),s('type.list.list'('type.integer.int'),sK17))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f223,plain,(
  s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK18),s('type.list.list'('type.integer.int'),sK19))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK16),s('type.list.list'('type.integer.int'),sK17))))) | s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.NIL_0'),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',sK14),s('type.list.list'('type.integer.int'),sK15))))) | s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) = s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),sK13),s('type.list.list'('type.integer.int'),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f138])).
fof(f4588,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f403,f226])).
fof(f226,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),sK12) != s('type.pair.prod'('type.list.list'('type.integer.int'),'type.list.list'('type.integer.int')),'const.pair.,_2'(s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X1),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),'const.list.CONS_2'(s('type.integer.int',X3),s('type.list.list'('type.integer.int'),X4)))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 361
% Passive clauses: 1452
% Generated clauses: 4359
% Final active clauses: 361
% Final passive clauses: 922
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 153
% Trivial inequalities: 19
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2266
% 
% Binary resolution: 2698
% Factoring: 768
% Forward superposition: 142
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 97
% Split components: 196
% SAT solver clauses: 180
% SAT solver unit clauses: 9
% SAT solver binary clauses: 35
% SAT solver learnt clauses: 1
% 
% Sat splits: 97
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 179
% TWLsolver calls for satisfiability: 151
% 
% Memory used [KB]: 2302
% Time elapsed: 0.106 s
% ------------------------------
% ------------------------------
% Success in time 0.109 s
