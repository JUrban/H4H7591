Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f209,plain,(
  $false),
  inference(subsumption_resolution,[],[f194,f26])).
fof(f26,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.SNOC_REVERSE_CONS','thm.list.REVERSE_REVERSE')).
fof(f194,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2)))))))),
  inference(backward_demodulation,[],[f27,f22])).
fof(f22,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))))))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))))),
  file('thm.rich_list.SNOC_REVERSE_CONS','thm.rich_list.SNOC_REVERSE_CONS')).
fof(f27,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.SNOC_REVERSE_CONS','thm.list.REVERSE_SNOC')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 12
% Passive clauses: 21
% Generated clauses: 175
% Final active clauses: 9
% Final passive clauses: 5
% Input formulas: 7
% Initial clauses: 7
% 
% Duplicate literals: 37
% Trivial inequalities: 2
% Fw subsumption resolutions: 1
% Bw demodulations: 1
% 
% Simple tautologies: 16
% Equational tautologies: 14
% Forward subsumptions: 68
% 
% Binary resolution: 4
% Forward superposition: 37
% Backward superposition: 31
% Self superposition: 27
% Equality factoring: 26
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 2
% SAT solver unit clauses: 1
% SAT solver binary clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2
% TWLsolver calls for satisfiability: 2
% 
% Memory used [KB]: 639
% Time elapsed: 0.015 s
% ------------------------------
% ------------------------------
% Success in time 0.016 s
