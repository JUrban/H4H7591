Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f116,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f101,f111,f109,f107,f105,f103,f67,f102,f97,f104,f98,f106,f99,f108,f100,f110])).
fof(f110,plain,(
  p(s(bool,sK2)) | $spl8),
  inference(cnf_transformation,[],[f110_D])).
fof(f110_D,plain,(
  p(s(bool,sK2)) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f100,plain,(
  p(s(bool,sK2))),
  inference(duplicate_literal_removal,[],[f65])).
fof(f65,plain,(
  p(s(bool,sK2)) | p(s(bool,sK2))),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) & p(s(bool,'T_0')) & p(s(bool,sK4)) & p(s(bool,sK2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) & p(s(bool,sK4)) & p(s(bool,sK2)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'T_0')) | ~p(s(bool,sK4)) | ~p(s(bool,sK2)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,sK4)) | ~p(s(bool,sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f30])).
fof(f30,plain,(
  ? [X0,X1,X2,X3,X4] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,'T_0')) & p(s(bool,X4)) & p(s(bool,X2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,X2)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'T_0')) | ~p(s(bool,X4)) | ~p(s(bool,X2)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,X2))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ? [X0,X1,X2,X3,X4] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,'T_0')) & p(s(bool,X4)) & p(s(bool,X2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,X2)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,'T_0')) | ~p(s(bool,X4)) | ~p(s(bool,X2))) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,'T_0')) & p(s(bool,X4)) & p(s(bool,X2))) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,X2))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,'T_0')) & p(s(bool,X4)) & p(s(bool,X2))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,'T_0')) & p(s(bool,X10)) & p(s(bool,X8))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X10)) & p(s(bool,X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,'T_0')) & p(s(bool,X10)) & p(s(bool,X8))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X10)) & p(s(bool,X8))))),
  file('thm.Omega.eval_step_extra3','thm.Omega.eval_step_extra3')).
fof(f108,plain,(
  p(s(bool,sK4)) | $spl6),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  p(s(bool,sK4)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f99,plain,(
  p(s(bool,sK4))),
  inference(duplicate_literal_removal,[],[f59])).
fof(f59,plain,(
  p(s(bool,sK4)) | p(s(bool,sK4))),
  inference(cnf_transformation,[],[f31])).
fof(f106,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl4),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f98,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(duplicate_literal_removal,[],[f52])).
fof(f52,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f31])).
fof(f104,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl2),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f97,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f46])).
fof(f46,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f31])).
fof(f102,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f67,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.eval_step_extra3',aHL_TRUTH)).
fof(f103,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(cnf_transformation,[],[f103_D])).
fof(f103_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f105,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl3),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f107,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl5),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f109,plain,(
  ~p(s(bool,sK4)) | $spl7),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  ~p(s(bool,sK4)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f111,plain,(
  ~p(s(bool,sK2)) | $spl9),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  ~p(s(bool,sK2)) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f101,plain,(
  ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'T_0'))),
  inference(duplicate_literal_removal,[],[f66])).
fof(f66,plain,(
  ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f31])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 3
% Generated clauses: 56
% Final passive clauses: 3
% Input formulas: 13
% Initial clauses: 49
% 
% Duplicate literals: 9
% Trivial inequalities: 1
% 
% Simple tautologies: 17
% Equational tautologies: 1
% 
% Split clauses: 21
% Split components: 45
% SAT solver clauses: 29
% SAT solver unit clauses: 7
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splits: 21
% 
% TWLsolver clauses: 28
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 639
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
