Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (58436)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1046
% Passive clauses: 5892
% Generated clauses: 47465
% Final active clauses: 1029
% Final passive clauses: 4434
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 225
% Trivial inequalities: 55
% Fw subsumption resolutions: 1596
% Fw demodulations: 8537
% Bw demodulations: 16
% 
% Simple tautologies: 217
% Equational tautologies: 36
% Forward subsumptions: 30267
% Fw demodulations to eq. taut.: 13
% 
% Binary resolution: 6568
% Factoring: 1234
% Forward superposition: 15197
% Backward superposition: 13357
% Self superposition: 56
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 332
% Split components: 666
% SAT solver clauses: 582
% SAT solver unit clauses: 20
% SAT solver binary clauses: 98
% 
% Sat splits: 332
% 
% TWLsolver clauses: 582
% TWLsolver calls for satisfiability: 496
% 
% Memory used [KB]: 28784
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (58465)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 499
% Passive clauses: 2652
% Generated clauses: 26359
% Final active clauses: 491
% Final passive clauses: 1946
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 94
% Trivial inequalities: 31
% Fw subsumption resolutions: 808
% Fw demodulations: 3811
% Bw demodulations: 209
% Condensations: 122
% Global subsumptions: 24
% 
% Simple tautologies: 213
% Equational tautologies: 10
% Forward subsumptions: 15352
% Fw demodulations to eq. taut.: 44
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 2282
% Factoring: 307
% Forward superposition: 9332
% Backward superposition: 6071
% Self superposition: 90
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 3671
% SAT solver unit clauses: 614
% SAT solver binary clauses: 129
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 7
% 
% TWLsolver clauses: 3575
% TWLsolver calls for satisfiability: 2395
% 
% Memory used [KB]: 27249
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f190659,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f190655])).
fof(f190655,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f189341,f190335])).
fof(f190335,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f189322,f1353])).
fof(f1353,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(forward_demodulation,[],[f1352,f870])).
fof(f870,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.NUMERAL_DEF')).
fof(f1352,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(forward_demodulation,[],[f1351,f1350])).
fof(f1350,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f870,f1345])).
fof(f1345,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f862,f858])).
fof(f858,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f92])).
fof(f92,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.ALT_ZERO')).
fof(f862,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f169])).
fof(f169,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.rich_list.SEG_compute|split|4','thm.numeral.numeral_distrib|split|13')).
fof(f1351,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f870,f1346])).
fof(f1346,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f1345,f855])).
fof(f855,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK10),sK14)))),
  inference(cnf_transformation,[],[f709])).
fof(f709,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK10),sK14)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f627])).
fof(f627,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) != s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X10)))),
  file('thm.rich_list.SEG_compute|split|4','thm.rich_list.SEG_compute|split|4')).
fof(f189322,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.list.list'(X27),'const.rich_list.SEG_3'(s('type.num.num',X28),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))))),s('type.list.list'(X27),X29))) = s('type.list.list'(X27),'const.rich_list.SEG_3'(s('type.num.num',X28),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))),s('type.list.list'(X27),'const.list.CONS_2'(s(X27,X30),s('type.list.list'(X27),X29)))))) )),
  inference(superposition,[],[f1101,f14075])).
fof(f14075,plain,(
  ( ! [X21] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21)))))))) )),
  inference(forward_demodulation,[],[f14074,f1398])).
fof(f1398,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f1397,f1388])).
fof(f1388,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f911,f870])).
fof(f911,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f310,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f140])).
fof(f140,axiom,(
  ! [X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.ADD|49|')).
fof(f1397,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f1396,f1350])).
fof(f1396,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f919,f858])).
fof(f919,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f318])).
fof(f318,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X13] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.BIT|49|')).
fof(f14074,plain,(
  ( ! [X21] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))))))) )),
  inference(subsumption_resolution,[],[f14031,f4808])).
fof(f4808,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4760,f1404])).
fof(f1404,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1403,f858])).
fof(f1403,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f923,f858])).
fof(f923,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f250])).
fof(f250,axiom,(
  ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.LESS_|48|_CASES')).
fof(f4760,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f4636,f1348])).
fof(f1348,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f865,f856])).
fof(f856,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.SEG_compute|split|4',aHL_TRUTH)).
fof(f865,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f710])).
fof(f710,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f148])).
fof(f148,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.rich_list.SEG_compute|split|4','thm.bool.NOT_CLAUSES|split|2')).
fof(f4636,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f1161,f897])).
fof(f897,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f296])).
fof(f296,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f155])).
fof(f155,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.rich_list.SEG_compute|split|4','thm.numeral.numeral_lte|split|1')).
fof(f1161,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f789])).
fof(f789,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f788])).
fof(f788,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f582])).
fof(f582,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f207])).
fof(f207,axiom,(
  ! [X7,X13] : (s('type.num.num',X7) = s('type.num.num',X13) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X13)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.EQ_LESS_EQ')).
fof(f14031,plain,(
  ( ! [X21] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',X21)))))))))) )),
  inference(superposition,[],[f1420,f1398])).
fof(f1420,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f952,f858])).
fof(f952,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f727])).
fof(f727,plain,(
  ! [X0] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) & (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f138])).
fof(f138,axiom,(
  ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) <=> s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.SUC_PRE')).
fof(f1101,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f524])).
fof(f524,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f523])).
fof(f523,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6] : ! [X7,X13,X10,X9] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X13),s('type.list.list'(X6),X10))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10)))))),
  file('thm.rich_list.SEG_compute|split|4','thm.rich_list.SEG_SUC_CONS')).
fof(f189341,plain,(
  ( ! [X76] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f8211,f14075])).
fof(f8211,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1116,f1388])).
fof(f1116,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f542])).
fof(f542,plain,(
  ! [X0,X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f220])).
fof(f220,axiom,(
  ! [X37,X39] : s('type.num.num',X37) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X39))),s('type.num.num',X39)))),
  file('thm.rich_list.SEG_compute|split|4','thm.arithmetic.ADD_SUB')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1088
% Passive clauses: 7779
% Generated clauses: 189470
% Final active clauses: 1045
% Final passive clauses: 4930
% Input formulas: 261
% Initial clauses: 461
% Discarded non-redundant clauses: 938
% 
% Duplicate literals: 8
% Trivial inequalities: 56
% Fw subsumption resolutions: 707
% Fw demodulations: 77383
% Bw demodulations: 724
% Condensations: 20
% Global subsumptions: 2
% 
% Simple tautologies: 108
% Equational tautologies: 37
% Forward subsumptions: 75185
% Fw demodulations to eq. taut.: 27425
% Bw demodulations to eq. taut.: 242
% 
% Unit resulting resolution: 48756
% Factoring: 2
% Forward superposition: 40109
% Backward superposition: 21348
% Self superposition: 176
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 7797
% SAT solver unit clauses: 3791
% SAT solver binary clauses: 3161
% 
% Sat splits: 7
% 
% Memory used [KB]: 93644
% Time elapsed: 5.481 s
% ------------------------------
% ------------------------------
% Success in time 6.82 s
