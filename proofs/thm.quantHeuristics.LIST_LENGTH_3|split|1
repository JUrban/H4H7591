Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f18092,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f18091,f103,f156,f152,f104,f154,f153,f14845,f15126])).
fof(f15126,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f15125])).
fof(f15125,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK1) | ($spl2 | $spl4)),
  inference(superposition,[],[f154,f156])).
fof(f14845,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f14844,f153])).
fof(f14844,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f14843,f156])).
fof(f14843,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) | $spl4),
  inference(trivial_inequality_removal,[],[f14838])).
fof(f14838,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) | $spl4),
  inference(superposition,[],[f11915,f156])).
fof(f11915,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl4),
  inference(superposition,[],[f127,f156])).
fof(f127,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))) & (! [X2,X3,X4] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7])],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6,X7] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))) & (! [X2,X3,X4] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0')))))))) & (! [X2,X3,X4] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X8,X9,X10] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.NIL_0'))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|1','thm.quantHeuristics.LIST_LENGTH_3|split|0')).
fof(f153,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f154,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) | $spl2),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f104,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0')))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X2,X3,X4] : s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f85])).
fof(f85,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6,X7] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X2,X3,X4] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0')))))))))),
  inference(rectify,[],[f84])).
fof(f84,plain,(
  ? [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0')))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X2,X3,X4] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0')))))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ? [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <~> ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.NIL_0'))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X8,X9,X10] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.NIL_0'))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X8,X9,X10] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.NIL_0'))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|1','thm.quantHeuristics.LIST_LENGTH_3|split|1')).
fof(f152,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(cnf_transformation,[],[f152_D])).
fof(f152_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f156,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl4),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f103,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f86])).
fof(f18091,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f18089,f154])).
fof(f18089,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6(sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7(sK1,sK0)),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl0),
  inference(equality_resolution,[],[f14851])).
fof(f14851,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))) ) | $spl0),
  inference(backward_demodulation,[],[f152,f126])).
fof(f126,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK6(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 155
% Passive clauses: 1784
% Generated clauses: 17932
% Final active clauses: 146
% Final passive clauses: 1532
% Input formulas: 37
% Initial clauses: 49
% 
% Duplicate literals: 82
% Trivial inequalities: 7
% Fw subsumption resolutions: 76
% Fw demodulations: 2250
% Bw demodulations: 3
% 
% Simple tautologies: 23
% Equational tautologies: 17
% Forward subsumptions: 13645
% Fw demodulations to eq. taut.: 23
% 
% Binary resolution: 36
% Forward superposition: 7140
% Backward superposition: 8094
% Self superposition: 138
% Equality factoring: 34
% Equality resolution: 6
% 
% Split clauses: 46
% Split components: 92
% SAT solver clauses: 66
% SAT solver unit clauses: 5
% SAT solver binary clauses: 21
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 46
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 64
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 17398
% Time elapsed: 0.380 s
% ------------------------------
% ------------------------------
% Success in time 0.381 s
