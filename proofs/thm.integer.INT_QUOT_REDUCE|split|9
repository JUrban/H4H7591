Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% (83102)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 192
% Passive clauses: 2674
% Generated clauses: 22579
% Final active clauses: 173
% Final passive clauses: 2170
% Input formulas: 37
% Initial clauses: 62
% 
% Duplicate literals: 810
% Trivial inequalities: 346
% Fw subsumption resolutions: 2987
% Fw demodulations: 3937
% Bw demodulations: 15
% 
% Simple tautologies: 387
% Equational tautologies: 47
% Forward subsumptions: 10871
% Fw demodulations to eq. taut.: 26
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 288
% Factoring: 3
% Forward superposition: 7587
% Backward superposition: 6113
% Self superposition: 228
% Equality factoring: 102
% Equality resolution: 38
% 
% Split clauses: 356
% Split components: 735
% SAT solver clauses: 792
% SAT solver unit clauses: 29
% SAT solver binary clauses: 167
% 
% Sat splits: 356
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 791
% TWLsolver calls for satisfiability: 178
% 
% Memory used [KB]: 13048
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f1569,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1568,f123,f189,f170,f214,f1079,f1080,f158,f207,f169,f212,f884,f887,f838,f865,f164,f209,f227,f228,f124,f190,f221,f222,f126,f192,f866,f867,f229,f230,f219,f220,f127,f193,f1217,f1231,f172,f216,f1297,f568,f570,f114,f180,f130,f196,f349,f356,f122,f188,f446,f458,f249,f253,f125,f191,f132,f197,f907,f933,f1190,f1203,f1201,f171,f213,f224,f226,f113,f178,f121,f187])).
fof(f187,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl6),
  inference(cnf_transformation,[],[f187_D])).
fof(f187_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f121,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.NUMERAL_DEF')).
fof(f178,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | $spl1),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f113,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))))))))),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f81])).
fof(f81,plain,(
  ? [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))))))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.integer.INT_QUOT_REDUCE|split|9')).
fof(f226,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | $spl63),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f224,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f223,f187])).
fof(f223,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | ($spl1 | $spl6)),
  inference(forward_demodulation,[],[f178,f187])).
fof(f213,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl48),
  inference(cnf_transformation,[],[f213_D])).
fof(f213_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f171,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) & s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))),
  inference(ennf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) & s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) & s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X13,X14] : (~s('type.integer.int',X14) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X13),s('type.integer.int',X14))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))),s('type.integer.int',X14))) & s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X13),s('type.integer.int',X14))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X13),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14)))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.integer.INT_QUOT_NEG')).
fof(f1201,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl318),
  inference(cnf_transformation,[],[f1201_D])).
fof(f1201_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f1203,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | $spl321),
  inference(cnf_transformation,[],[f1203_D])).
fof(f1203_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) <=> ~$spl321),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl321])])).
fof(f1190,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | ($spl48 | $spl63)),
  inference(superposition,[],[f226,f213])).
fof(f933,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) ) | $spl242),
  inference(cnf_transformation,[],[f933_D])).
fof(f933_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f907,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) ) | ($spl36 | $spl236)),
  inference(superposition,[],[f207,f887])).
fof(f197,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f132,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.bool.EQ_CLAUSES|split|1')).
fof(f191,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) | $spl14),
  inference(cnf_transformation,[],[f191_D])).
fof(f191_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f125,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X7] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.prim_rec.LESS_|48|')).
fof(f253,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl68),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f249,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl14 | $spl24)),
  inference(resolution,[],[f191,f197])).
fof(f458,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl124),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f446,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl68 | $spl92)),
  inference(superposition,[],[f253,f356])).
fof(f188,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl8),
  inference(cnf_transformation,[],[f188_D])).
fof(f188_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f122,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f356,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl92),
  inference(cnf_transformation,[],[f356_D])).
fof(f356_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f349,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl8 | $spl64)),
  inference(superposition,[],[f228,f188])).
fof(f196,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl22),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f130,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.ZERO_DIV')).
fof(f180,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f114,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.INT_QUOT_REDUCE|split|9',aHL_TRUTH)).
fof(f570,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl158),
  inference(cnf_transformation,[],[f570_D])).
fof(f570_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f568,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl22 | $spl92 | $spl124)),
  inference(forward_demodulation,[],[f567,f356])).
fof(f567,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl22 | $spl92 | $spl124)),
  inference(subsumption_resolution,[],[f566,f180])).
fof(f566,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl22 | $spl92 | $spl124)),
  inference(forward_demodulation,[],[f551,f458])).
fof(f551,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl22 | $spl92)),
  inference(superposition,[],[f196,f356])).
fof(f1297,plain,(
  $false | ($spl158 | $spl242 | $spl336)),
  inference(subsumption_resolution,[],[f1296,f933])).
fof(f1296,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | ($spl158 | $spl336)),
  inference(forward_demodulation,[],[f1293,f570])).
fof(f1293,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl158 | $spl336)),
  inference(trivial_inequality_removal,[],[f1272])).
fof(f1272,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl158 | $spl336)),
  inference(superposition,[],[f1231,f570])).
fof(f216,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl54),
  inference(cnf_transformation,[],[f216_D])).
fof(f216_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f172,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6,X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.integer.INT_INJ')).
fof(f1231,plain,(
  ( ! [X2] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | $spl336),
  inference(cnf_transformation,[],[f1231_D])).
fof(f1231_D,plain,(
  ( ! [X2] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f1217,plain,(
  ( ! [X2] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl54 | $spl318)),
  inference(superposition,[],[f216,f1201])).
fof(f193,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) | $spl18),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f127,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.BIT2')).
fof(f220,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) | $spl58),
  inference(cnf_transformation,[],[f220_D])).
fof(f220_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f219,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f218,f209])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f193,f209])).
fof(f230,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl66),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | ($spl12 | $spl58)),
  inference(forward_demodulation,[],[f220,f190])).
fof(f867,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) | $spl232),
  inference(cnf_transformation,[],[f867_D])).
fof(f867_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f866,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) | ($spl40 | $spl66)),
  inference(forward_demodulation,[],[f839,f209])).
fof(f839,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | ($spl40 | $spl66)),
  inference(superposition,[],[f209,f230])).
fof(f192,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl16),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f126,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.BIT|49|')).
fof(f222,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | $spl60),
  inference(cnf_transformation,[],[f222_D])).
fof(f222_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f221,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | ($spl16 | $spl40)),
  inference(forward_demodulation,[],[f192,f209])).
fof(f190,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f124,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.ADD_|48|')).
fof(f228,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl64),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f227,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl12 | $spl60)),
  inference(forward_demodulation,[],[f222,f190])).
fof(f209,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl40),
  inference(cnf_transformation,[],[f209_D])).
fof(f209_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f164,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7,X6] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f865,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | $spl230),
  inference(cnf_transformation,[],[f865_D])).
fof(f865_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f838,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl40 | $spl64)),
  inference(superposition,[],[f209,f228])).
fof(f887,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | $spl236),
  inference(cnf_transformation,[],[f887_D])).
fof(f887_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f884,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | ($spl230 | $spl232)),
  inference(backward_demodulation,[],[f865,f867])).
fof(f212,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl46),
  inference(cnf_transformation,[],[f212_D])).
fof(f212_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f169,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X13,X14] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X13),s('type.num.num',X14))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.integer.INT_QUOT')).
fof(f207,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl36),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f158,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.num.NOT_SUC')).
fof(f1080,plain,(
  ( ! [X10,X11] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))))) ) | $spl278),
  inference(cnf_transformation,[],[f1080_D])).
fof(f1080_D,plain,(
  ( ! [X10,X11] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f1079,plain,(
  ( ! [X10,X11] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))))) ) | ($spl36 | $spl46 | $spl236)),
  inference(subsumption_resolution,[],[f1061,f207])).
fof(f1061,plain,(
  ( ! [X10,X11] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) ) | ($spl46 | $spl236)),
  inference(superposition,[],[f212,f887])).
fof(f214,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl50),
  inference(cnf_transformation,[],[f214_D])).
fof(f214_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f170,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f87])).
fof(f189,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) | $spl10),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f123,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X8] : s('type.integer.int',X8) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8)))))),
  file('thm.integer.INT_QUOT_REDUCE|split|9','thm.integer.INT_NEGNEG')).
fof(f1568,plain,(
  $false | ($spl10 | $spl50 | $spl278 | $spl319 | $spl321)),
  inference(subsumption_resolution,[],[f1567,f189])).
fof(f1567,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | ($spl50 | $spl278 | $spl319 | $spl321)),
  inference(forward_demodulation,[],[f1566,f1080])).
fof(f1566,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | ($spl50 | $spl319 | $spl321)),
  inference(subsumption_resolution,[],[f1563,f1200])).
fof(f1200,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl319),
  inference(cnf_transformation,[],[f1200_D])).
fof(f1200_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl319),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl319])])).
fof(f1563,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_quot_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | ($spl50 | $spl321)),
  inference(superposition,[],[f1203,f214])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 71
% Passive clauses: 200
% Generated clauses: 1429
% Final active clauses: 58
% Final passive clauses: 113
% Input formulas: 37
% Initial clauses: 62
% 
% Duplicate literals: 6
% Trivial inequalities: 17
% Fw subsumption resolutions: 53
% Fw demodulations: 198
% Bw demodulations: 21
% Condensations: 1
% Global subsumptions: 9
% 
% Simple tautologies: 22
% Equational tautologies: 7
% Forward subsumptions: 601
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 33
% Factoring: 1
% Forward superposition: 461
% Backward superposition: 314
% Self superposition: 24
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 389
% SAT solver unit clauses: 86
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 19
% 
% Sat splits: 5
% Sat splitting refutations: 12
% 
% TWLsolver clauses: 352
% TWLsolver calls for satisfiability: 238
% 
% Memory used [KB]: 2302
% Time elapsed: 0.042 s
% ------------------------------
% ------------------------------
% Success in time 0.656 s
