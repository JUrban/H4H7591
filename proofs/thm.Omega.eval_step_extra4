Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f82,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f71,f81,f79,f77,f75,f73,f66,f72,f67,f74,f68,f76,f69,f78,f70,f80])).
fof(f80,plain,(
  p(s(bool,sK2)) | $spl8),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  p(s(bool,sK2)) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f70,plain,(
  p(s(bool,sK2))),
  inference(duplicate_literal_removal,[],[f50])).
fof(f50,plain,(
  p(s(bool,sK2)) | p(s(bool,sK2))),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) & p(s(bool,sK5)) & p(s(bool,sK4)) & p(s(bool,sK2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) & p(s(bool,sK5)) & p(s(bool,sK4)) & p(s(bool,sK2)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,sK5)) | ~p(s(bool,sK4)) | ~p(s(bool,sK2)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,sK5)) | ~p(s(bool,sK4)) | ~p(s(bool,sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,X2)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,X2))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,X2))) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X5)) | ~p(s(bool,X4)) | ~p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X5)) & p(s(bool,X4)) & p(s(bool,X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X11)) & p(s(bool,X10)) & p(s(bool,X8))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X11)) & p(s(bool,X10)) & p(s(bool,X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X11)) & p(s(bool,X10)) & p(s(bool,X8))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X11)) & p(s(bool,X10)) & p(s(bool,X8))))),
  file('thm.Omega.eval_step_extra4','thm.Omega.eval_step_extra4')).
fof(f78,plain,(
  p(s(bool,sK4)) | $spl6),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  p(s(bool,sK4)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f69,plain,(
  p(s(bool,sK4))),
  inference(duplicate_literal_removal,[],[f44])).
fof(f44,plain,(
  p(s(bool,sK4)) | p(s(bool,sK4))),
  inference(cnf_transformation,[],[f21])).
fof(f76,plain,(
  p(s(bool,sK5)) | $spl4),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  p(s(bool,sK5)) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f68,plain,(
  p(s(bool,sK5))),
  inference(duplicate_literal_removal,[],[f38])).
fof(f38,plain,(
  p(s(bool,sK5)) | p(s(bool,sK5))),
  inference(cnf_transformation,[],[f21])).
fof(f74,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl2),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f67,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(duplicate_literal_removal,[],[f32])).
fof(f32,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f21])).
fof(f72,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl0),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f66,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f26])).
fof(f26,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f21])).
fof(f73,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl1),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f75,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl3),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f77,plain,(
  ~p(s(bool,sK5)) | $spl5),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ~p(s(bool,sK5)) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f79,plain,(
  ~p(s(bool,sK4)) | $spl7),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  ~p(s(bool,sK4)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f81,plain,(
  ~p(s(bool,sK2)) | $spl9),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ~p(s(bool,sK2)) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f71,plain,(
  ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f51])).
fof(f51,plain,(
  ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,sK2)) | ~p(s(bool,sK4)) | ~p(s(bool,sK5)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f21])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 6
% Generated clauses: 46
% Final passive clauses: 6
% Input formulas: 8
% Initial clauses: 39
% 
% Duplicate literals: 10
% Trivial inequalities: 1
% 
% Simple tautologies: 6
% Equational tautologies: 1
% 
% Split clauses: 21
% Split components: 45
% SAT solver clauses: 27
% SAT solver unit clauses: 5
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splits: 21
% 
% TWLsolver clauses: 26
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 639
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
