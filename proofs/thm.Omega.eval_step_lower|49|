Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.Omega
% (93258)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 209
% Passive clauses: 3311
% Generated clauses: 25892
% Final active clauses: 173
% Final passive clauses: 2688
% Input formulas: 69
% Initial clauses: 97
% 
% Duplicate literals: 699
% Trivial inequalities: 270
% Fw subsumption resolutions: 2081
% Fw demodulations: 3646
% Bw demodulations: 34
% 
% Simple tautologies: 322
% Equational tautologies: 24
% Forward subsumptions: 15369
% 
% Binary resolution: 94
% Forward superposition: 11371
% Backward superposition: 7142
% Self superposition: 280
% Equality factoring: 55
% Equality resolution: 44
% 
% Split clauses: 211
% Split components: 437
% SAT solver clauses: 448
% SAT solver unit clauses: 11
% SAT solver binary clauses: 74
% 
% Sat splits: 211
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 446
% TWLsolver calls for satisfiability: 67
% 
% Memory used [KB]: 20980
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.Omega
% (93293)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 174
% Passive clauses: 865
% Generated clauses: 19814
% Final active clauses: 97
% Final passive clauses: 335
% Input formulas: 69
% Initial clauses: 97
% 
% Duplicate literals: 521
% Trivial inequalities: 275
% Fw subsumption resolutions: 1454
% Fw demodulations: 3371
% Bw demodulations: 364
% Condensations: 853
% Global subsumptions: 10
% 
% Simple tautologies: 167
% Equational tautologies: 23
% Forward subsumptions: 10775
% Bw demodulations to eq. taut.: 49
% 
% Binary resolution: 66
% Forward superposition: 6198
% Backward superposition: 5248
% Self superposition: 198
% Equality factoring: 49
% Equality resolution: 24
% 
% Split clauses: 99
% Split components: 201
% SAT solver clauses: 1411
% SAT solver unit clauses: 166
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 21
% SAT solver learnt literals: 5
% 
% Sat splits: 99
% Sat splitting refutations: 38
% 
% TWLsolver clauses: 1370
% TWLsolver calls for satisfiability: 452
% 
% Memory used [KB]: 15863
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.Omega
% (93317)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 690
% Passive clauses: 9018
% Generated clauses: 226623
% Final active clauses: 181
% Final passive clauses: 1438
% Input formulas: 69
% Initial clauses: 97
% Discarded non-redundant clauses: 11707
% 
% Duplicate literals: 3197
% Trivial inequalities: 1171
% Fw subsumption resolutions: 16581
% Fw demodulations: 61423
% Bw demodulations: 3301
% Condensations: 11928
% Global subsumptions: 164
% 
% Simple tautologies: 1560
% Equational tautologies: 852
% Forward subsumptions: 117412
% Fw demodulations to eq. taut.: 2221
% Bw demodulations to eq. taut.: 194
% 
% Unit resulting resolution: 16458
% Forward superposition: 61340
% Backward superposition: 35051
% Self superposition: 609
% Equality factoring: 128
% Equality resolution: 217
% 
% Split clauses: 288
% Split components: 607
% SAT solver clauses: 10081
% SAT solver unit clauses: 1152
% SAT solver binary clauses: 2774
% 
% Sat splits: 288
% Sat splitting refutations: 321
% 
% Memory used [KB]: 111298
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 33 next slice time: 33
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f443,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f178,f186,f184,f182,f180,f132,f130,f129,f127,f125,f189,f124,f181,f123,f185,f122,f183,f179,f435,f437,f439,f442])).
fof(f442,plain,(
  $false | $spl5),
  inference(subsumption_resolution,[],[f441,f158])).
fof(f158,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.eval_step_lower|49|',aHL_TRUTH)).
fof(f441,plain,(
  ~p(s(bool,'T_0')) | $spl5),
  inference(forward_demodulation,[],[f184,f258])).
fof(f258,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))),
  inference(resolution,[],[f175,f151])).
fof(f151,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X24] : (s(bool,'T_0') = s(bool,X24) <=> p(s(bool,X24)))),
  file('thm.Omega.eval_step_lower|49|','thm.bool.EQ_CLAUSES|split|1')).
fof(f175,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(duplicate_literal_removal,[],[f121])).
fof(f121,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) & p(s(bool,sK4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0))))))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) & p(s(bool,sK4)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,sK4)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | ~p(s(bool,sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f105])).
fof(f105,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))))))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) & p(s(bool,X4)))) & (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) | ~p(s(bool,X4))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))))))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) & p(s(bool,X4)))) & ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) | ~p(s(bool,X4)) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))))))) | (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) | ~p(s(bool,X4)))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))))))) <~> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) & p(s(bool,X4))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))) & p(s(bool,X4)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))),s('type.integer.int',X0))))))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X5),s('type.integer.int',X2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X3)))))) & p(s(bool,X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X10)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int',X6))))))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X11),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))))) & p(s(bool,X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))) & p(s(bool,X10)) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int',X6))))))) <=> (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X11),s('type.integer.int',X8))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X9)))))) & p(s(bool,X10))))),
  file('thm.Omega.eval_step_lower|49|','thm.Omega.eval_step_lower|49|')).
fof(f439,plain,(
  $false | $spl7),
  inference(subsumption_resolution,[],[f438,f158])).
fof(f438,plain,(
  ~p(s(bool,'T_0')) | $spl7),
  inference(forward_demodulation,[],[f186,f191])).
fof(f191,plain,(
  s(bool,'T_0') = s(bool,sK4)),
  inference(resolution,[],[f176,f151])).
fof(f176,plain,(
  p(s(bool,sK4))),
  inference(duplicate_literal_removal,[],[f131])).
fof(f131,plain,(
  p(s(bool,sK4)) | p(s(bool,sK4))),
  inference(cnf_transformation,[],[f106])).
fof(f437,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f436,f158])).
fof(f436,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f180,f290])).
fof(f290,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))),
  inference(resolution,[],[f190,f151])).
fof(f190,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(subsumption_resolution,[],[f126,f135])).
fof(f135,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) & (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) & ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))))))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X12,X6,X13,X11] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X11),s('type.integer.int',X12))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X13)))))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X11))),s('type.integer.int',X6)))))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X13))))))),
  file('thm.Omega.eval_step_lower|49|','thm.Omega.evallower_def|split|1')).
fof(f126,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f106])).
fof(f435,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f187,f182])).
fof(f187,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0))))))),
  inference(subsumption_resolution,[],[f128,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2))))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f128,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0))))))),
  inference(cnf_transformation,[],[f106])).
fof(f179,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl0),
  inference(cnf_transformation,[],[f179_D])).
fof(f179_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f183,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl4),
  inference(cnf_transformation,[],[f183_D])).
fof(f183_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f122,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f106])).
fof(f185,plain,(
  p(s(bool,sK4)) | $spl6),
  inference(cnf_transformation,[],[f185_D])).
fof(f185_D,plain,(
  p(s(bool,sK4)) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f123,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,sK4))),
  inference(cnf_transformation,[],[f106])).
fof(f181,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | $spl2),
  inference(cnf_transformation,[],[f181_D])).
fof(f181_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f124,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0))))))),
  inference(cnf_transformation,[],[f106])).
fof(f189,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | $spl8),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f125,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f106])).
fof(f127,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | p(s(bool,sK4))),
  inference(cnf_transformation,[],[f106])).
fof(f129,plain,(
  p(s(bool,sK4)) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f106])).
fof(f130,plain,(
  p(s(bool,sK4)) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(cnf_transformation,[],[f106])).
fof(f132,plain,(
  p(s(bool,sK4)) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0))))))),
  inference(cnf_transformation,[],[f106])).
fof(f180,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f182,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | $spl3),
  inference(cnf_transformation,[],[f182_D])).
fof(f182_D,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f184,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | $spl5),
  inference(cnf_transformation,[],[f184_D])).
fof(f184_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f186,plain,(
  ~p(s(bool,sK4)) | $spl7),
  inference(cnf_transformation,[],[f186_D])).
fof(f186_D,plain,(
  ~p(s(bool,sK4)) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f178,plain,(
  ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(subsumption_resolution,[],[f177,f136])).
fof(f136,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',X3),s('type.integer.int',X0))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X1),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X3))),s('type.integer.int',X1))))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f177,plain,(
  ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3))))),
  inference(duplicate_literal_removal,[],[f133])).
fof(f133,plain,(
  ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.integer.int'),'const.pair.,_2'(s('type.num.num',sK5),s('type.integer.int',sK2))),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK5))),s('type.integer.int',sK0)))))) | ~p(s(bool,sK4)) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK3)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK1))))),
  inference(cnf_transformation,[],[f106])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 45
% Generated clauses: 280
% Final active clauses: 41
% Final passive clauses: 10
% Input formulas: 69
% Initial clauses: 54
% 
% Selected by SInE selection: 29
% SInE iterations: 1
% 
% Duplicate literals: 5
% Trivial inequalities: 8
% Fw subsumption resolutions: 40
% Fw demodulations: 45
% Bw demodulations: 3
% 
% Simple tautologies: 9
% Forward subsumptions: 138
% 
% Binary resolution: 22
% Forward superposition: 61
% Backward superposition: 74
% 
% Split clauses: 9
% Split components: 20
% SAT solver clauses: 14
% SAT solver unit clauses: 4
% SAT solver binary clauses: 8
% 
% Sat splits: 9
% Sat splitting refutations: 4
% 
% Memory used [KB]: 1023
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% Success in time 11.707 s
