Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f3221,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3197,f263,f268,f266,f309,f57,f60,f58,f70])).
fof(f70,plain,(
  $false | $spl0),
  inference(resolution,[],[f67,f37])).
fof(f37,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.ASSOC_APPEND',aHL_TRUTH)).
fof(f67,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl0),
  inference(superposition,[],[f39,f58])).
fof(f39,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.ASSOC_APPEND',aHL_FALSITY)).
fof(f58,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f60,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f57,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f40])).
fof(f40,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.ASSOC_APPEND',aHL_BOOL_CASES)).
fof(f309,plain,(
  $false | ($spl3 | $spl4)),
  inference(trivial_inequality_removal,[],[f304])).
fof(f304,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl3 | $spl4)),
  inference(superposition,[],[f60,f266])).
fof(f266,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl4),
  inference(cnf_transformation,[],[f266_D])).
fof(f266_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f268,plain,(
  s(bool,'F_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | $spl6),
  inference(cnf_transformation,[],[f268_D])).
fof(f268_D,plain,(
  s(bool,'F_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f263,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(duplicate_literal_removal,[],[f229])).
fof(f229,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f210,f40])).
fof(f210,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f140,f37])).
fof(f140,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,X9) = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f36,f51])).
fof(f51,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f40,f40])).
fof(f36,plain,(
  ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))))),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f26])).
fof(f26,plain,(
  ? [X0] : ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0] : p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'))))),
  file('thm.rich_list.ASSOC_APPEND','thm.rich_list.ASSOC_APPEND')).
fof(f3197,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f3196,f48])).
fof(f48,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X9,X10,X11] : s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X10),s('type.list.list'(X6),X11))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))),s('type.list.list'(X6),X11)))),
  file('thm.rich_list.ASSOC_APPEND','thm.list.APPEND_ASSOC')).
fof(f3196,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl6),
  inference(forward_demodulation,[],[f3195,f47])).
fof(f47,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X15,X16] : s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16))) = s('type.list.list'(X6),happ(s(fun('type.list.list'(X6),'type.list.list'(X6)),happ(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'),s('type.list.list'(X6),X15))),s('type.list.list'(X6),X16)))),
  file('thm.rich_list.ASSOC_APPEND','ARITY_0_2_const.list.APPEND')).
fof(f3195,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl6),
  inference(forward_demodulation,[],[f3194,f47])).
fof(f3194,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) | $spl6),
  inference(forward_demodulation,[],[f3193,f47])).
fof(f3193,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) | $spl6),
  inference(forward_demodulation,[],[f3192,f47])).
fof(f3192,plain,(
  s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl6),
  inference(subsumption_resolution,[],[f3159,f39])).
fof(f3159,plain,(
  p(s(bool,'F_0')) | s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK1('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl6),
  inference(superposition,[],[f44,f268])).
fof(f44,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK1(X1,X0)))),s(X0,sK2(X1,X0)))))),s(X0,sK3(X1,X0)))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK1(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK2(X1,X0)))),s(X0,sK3(X1,X0))))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X5,X6,X7] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,X7))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))),s(X0,X7)))) & (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK1(X1,X0)))),s(X0,sK2(X1,X0)))))),s(X0,sK3(X1,X0)))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK1(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK2(X1,X0)))),s(X0,sK3(X1,X0)))))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X5,X6,X7] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,X7))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))),s(X0,X7)))) & (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(rectify,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4)))) & (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(nnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) <=> ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) <=> ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X12] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X12)))) <=> ! [X8,X13,X14] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X12),s(X6,X8))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X12),s(X6,X13))),s(X6,X14))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X12),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X12),s(X6,X8))),s(X6,X13))))),s(X6,X14))))),
  file('thm.rich_list.ASSOC_APPEND','thm.operator.ASSOC_DEF')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 33
% Passive clauses: 561
% Generated clauses: 3071
% Final active clauses: 26
% Final passive clauses: 506
% Input formulas: 11
% Initial clauses: 14
% 
% Duplicate literals: 344
% Trivial inequalities: 37
% Fw subsumption resolutions: 204
% Fw demodulations: 17
% Bw demodulations: 4
% 
% Simple tautologies: 108
% Equational tautologies: 81
% Forward subsumptions: 1260
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 26
% Forward superposition: 1025
% Backward superposition: 931
% Self superposition: 232
% Equality factoring: 204
% Equality resolution: 2
% 
% Split clauses: 158
% Split components: 316
% SAT solver clauses: 476
% SAT solver unit clauses: 259
% SAT solver binary clauses: 116
% SAT solver learnt clauses: 1
% 
% Sat splits: 158
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 465
% TWLsolver calls for satisfiability: 16
% 
% Memory used [KB]: 1918
% Time elapsed: 0.125 s
% ------------------------------
% ------------------------------
% Success in time 0.126 s
