Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (63633)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 206
% Passive clauses: 3134
% Generated clauses: 17539
% Final active clauses: 182
% Final passive clauses: 2801
% Input formulas: 37
% Initial clauses: 74
% 
% Duplicate literals: 694
% Trivial inequalities: 365
% Fw subsumption resolutions: 1948
% Fw demodulations: 2551
% Bw demodulations: 18
% 
% Simple tautologies: 438
% Equational tautologies: 22
% Forward subsumptions: 7477
% Fw demodulations to eq. taut.: 7
% 
% Binary resolution: 668
% Forward superposition: 5951
% Backward superposition: 4859
% Self superposition: 112
% Equality factoring: 46
% Equality resolution: 53
% 
% Split clauses: 592
% Split components: 1205
% SAT solver clauses: 992
% SAT solver unit clauses: 5
% SAT solver binary clauses: 61
% 
% Sat splits: 592
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 991
% TWLsolver calls for satisfiability: 151
% 
% Memory used [KB]: 14711
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f12413,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f12389,f2025,f2050,f154,f243,f1905,f1906,f209,f284,f1324,f1325,f155,f249,f185,f265,f301,f303,f153,f245,f157,f251,f159,f253,f7989,f8025,f210,f285,f7920,f7921,f948,f962,f190,f267,f205,f281])).
fof(f281,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) ) | $spl62),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f205,plain,(
  ( ! [X2,X0,X5,X3,X1] : (s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) & (s(X1,sK17(X3,X2,X1,X0)) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,sK17(X3,X2,X1,X0)))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17])],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(rectify,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(nnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X11] : ! [X7,X9] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X6,fun(X11,X11)),X7),s(X6,X9)))) <=> ! [X12] : s(X11,X12) = s(X11,happ(s(fun(X11,X11),happ(s(fun(X6,fun(X11,X11)),X7),s(X6,X9))),s(X11,X12))))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.operator.LEFT_ID_DEF')).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) ) | $spl34),
  inference(cnf_transformation,[],[f267_D])).
fof(f267_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f190,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))))) & (~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))))) & ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) | p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X9] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X7)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))))))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.operator.MONOID_DEF')).
fof(f962,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X2),s(X0,X3)))) | s(X0,X1) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X1)))) ) | $spl260),
  inference(cnf_transformation,[],[f962_D])).
fof(f962_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X2),s(X0,X3)))) | s(X0,X1) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X1)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f948,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))),s(X0,X1))) | ~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X2),s(X0,X3))))) ) | ($spl34 | $spl62)),
  inference(resolution,[],[f281,f267])).
fof(f7921,plain,(
  ( ! [X0] : (s(sK0,X0) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))),s(sK0,X0)))) ) | $spl1542),
  inference(cnf_transformation,[],[f7921_D])).
fof(f7921_D,plain,(
  ( ! [X0] : (s(sK0,X0) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))),s(sK0,X0)))) ) <=> ~$spl1542),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1542])])).
fof(f7920,plain,(
  ( ! [X0] : (s(sK0,X0) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))),s(sK0,X0)))) ) | ($spl6 | $spl82 | $spl260)),
  inference(subsumption_resolution,[],[f7870,f249])).
fof(f7870,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK0,X0) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))),s(sK0,X0)))) ) | ($spl82 | $spl260)),
  inference(superposition,[],[f962,f303])).
fof(f285,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))) ) | $spl70),
  inference(cnf_transformation,[],[f285_D])).
fof(f285_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f210,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X11,X6] : ! [X7,X9,X12,X10] : s(X11,'const.list.FOLDL_3'(s(fun(X11,fun(X6,X11)),X7),s(X11,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X10))))) = s(X11,'const.list.FOLDL_3'(s(fun(X11,fun(X6,X11)),X7),s(X11,happ(s(fun(X6,X11),happ(s(fun(X11,fun(X6,X11)),X7),s(X11,X9))),s(X6,X12))),s('type.list.list'(X6),X10)))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.list.FOLDL|split|1')).
fof(f8025,plain,(
  ( ! [X52,X51] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X51),s('type.list.list'(sK0),X52))) = s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),X52)))))) ) | $spl1574),
  inference(cnf_transformation,[],[f8025_D])).
fof(f8025_D,plain,(
  ( ! [X52,X51] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X51),s('type.list.list'(sK0),X52))) = s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),X52)))))) ) <=> ~$spl1574),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1574])])).
fof(f7989,plain,(
  ( ! [X52,X51] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X51),s('type.list.list'(sK0),X52))) = s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),X52)))))) ) | ($spl70 | $spl1542)),
  inference(superposition,[],[f285,f7921])).
fof(f253,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f159,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.COMM_MONOID_FOLDL',aHL_BOOL_CASES)).
fof(f251,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f251_D])).
fof(f251_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f157,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.COMM_MONOID_FOLDL',aHL_FALSITY)).
fof(f245,plain,(
  p(s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2)))) | $spl2),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  p(s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f153,plain,(
  p(s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))))),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  p(s(bool,'const.operator.COMM_1'(s(fun(sK0,fun(sK0,sK0)),sK1)))) & (p(s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2)))) & s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f98])).
fof(f98,plain,(
  ? [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) & ? [X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & ? [X3,X4] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X3),s('type.list.list'(X0),X4))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X4)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) => ! [X3,X4] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X3),s('type.list.list'(X0),X4))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X4)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.operator.COMM_1'(s(fun(X0,fun(X0,X0)),X1)))) => ! [X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) => ! [X3,X4] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X3),s('type.list.list'(X0),X4))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X4)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.operator.COMM_1'(s(fun(X6,fun(X6,X6)),X7)))) => ! [X8] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8)))) => ! [X9,X10] : s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9),s('type.list.list'(X6),X10))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.operator.COMM_1'(s(fun(X6,fun(X6,X6)),X7)))) => ! [X8] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8)))) => ! [X9,X10] : s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9),s('type.list.list'(X6),X10))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X7),s(X6,X9))),s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X8),s('type.list.list'(X6),X10)))))))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.rich_list.COMM_MONOID_FOLDL')).
fof(f303,plain,(
  s(bool,'T_0') = s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))) | $spl82),
  inference(cnf_transformation,[],[f303_D])).
fof(f303_D,plain,(
  s(bool,'T_0') = s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f301,plain,(
  s(bool,'T_0') = s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))) | ($spl2 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f293,f251])).
fof(f293,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.operator.MONOID_2'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2))) | ($spl2 | $spl12)),
  inference(superposition,[],[f245,f253])).
fof(f265,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3)))) ) | $spl30),
  inference(cnf_transformation,[],[f265_D])).
fof(f265_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f185,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) | ~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ! [X3] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(ennf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) => ! [X3] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) => ! [X3] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))) = s(X0,'const.list.FOLDR_3'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X9] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9)))) => ! [X10] : s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9),s('type.list.list'(X6),X10))) = s(X6,'const.list.FOLDR_3'(s(fun(X6,fun(X6,X6)),X7),s(X6,X9),s('type.list.list'(X6),X10))))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.rich_list.FOLDR_FOLDL')).
fof(f249,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f155,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.bool.TRUTH')).
fof(f1325,plain,(
  ( ! [X0] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0)))) ) | $spl342),
  inference(cnf_transformation,[],[f1325_D])).
fof(f1325_D,plain,(
  ( ! [X0] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0)))) ) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f1324,plain,(
  ( ! [X0] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0)))) ) | ($spl6 | $spl30 | $spl82)),
  inference(subsumption_resolution,[],[f1309,f249])).
fof(f1309,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0))) = s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X0)))) ) | ($spl30 | $spl82)),
  inference(superposition,[],[f265,f303])).
fof(f284,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))) ) | $spl68),
  inference(cnf_transformation,[],[f284_D])).
fof(f284_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f209,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X11,X6] : ! [X7,X9,X12,X10] : s(X11,'const.list.FOLDR_3'(s(fun(X6,fun(X11,X11)),X7),s(X11,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X10))))) = s(X11,happ(s(fun(X11,X11),happ(s(fun(X6,fun(X11,X11)),X7),s(X6,X12))),s(X11,'const.list.FOLDR_3'(s(fun(X6,fun(X11,X11)),X7),s(X11,X9),s('type.list.list'(X6),X10)))))),
  file('thm.rich_list.COMM_MONOID_FOLDL','thm.list.FOLDR|split|1')).
fof(f1906,plain,(
  ( ! [X10,X11] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),X10))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X11))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X10)))))) ) | $spl494),
  inference(cnf_transformation,[],[f1906_D])).
fof(f1906_D,plain,(
  ( ! [X10,X11] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),X10))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X11))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X10)))))) ) <=> ~$spl494),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl494])])).
fof(f1905,plain,(
  ( ! [X10,X11] : (s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),X10))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X11))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X10)))))) ) | ($spl68 | $spl342)),
  inference(forward_demodulation,[],[f1784,f1325])).
fof(f1784,plain,(
  ( ! [X10,X11] : (s(sK0,'const.list.FOLDR_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),X10))))) = s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,X11))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),X10)))))) ) | ($spl68 | $spl342)),
  inference(superposition,[],[f284,f1325])).
fof(f243,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK4))))) | $spl1),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK4))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f154,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,happ(s(fun(sK0,sK0),happ(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3))),s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),sK4)))))),
  inference(cnf_transformation,[],[f112])).
fof(f2050,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))))) | $spl559),
  inference(cnf_transformation,[],[f2050_D])).
fof(f2050_D,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))))) <=> ~$spl559),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl559])])).
fof(f2025,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))))) | ($spl1 | $spl494)),
  inference(superposition,[],[f243,f1906])).
fof(f12389,plain,(
  $false | ($spl559 | $spl1574)),
  inference(trivial_inequality_removal,[],[f12337])).
fof(f12337,plain,(
  s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK0,sK0)),sK1),s(sK0,sK3),s('type.list.list'(sK0),sK4))) | ($spl559 | $spl1574)),
  inference(superposition,[],[f2050,f8025])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 165
% Passive clauses: 1292
% Generated clauses: 12147
% Final active clauses: 150
% Final passive clauses: 1016
% Input formulas: 37
% Initial clauses: 74
% 
% Duplicate literals: 310
% Trivial inequalities: 203
% Fw subsumption resolutions: 712
% Fw demodulations: 1882
% Bw demodulations: 124
% Condensations: 430
% Global subsumptions: 3
% 
% Simple tautologies: 250
% Equational tautologies: 19
% Forward subsumptions: 5224
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 176
% Forward superposition: 3172
% Backward superposition: 3551
% Self superposition: 99
% Equality factoring: 30
% Equality resolution: 44
% 
% Split clauses: 35
% Split components: 79
% SAT solver clauses: 1863
% SAT solver unit clauses: 77
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 7
% 
% Sat splits: 35
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1850
% TWLsolver calls for satisfiability: 420
% 
% Memory used [KB]: 21108
% Time elapsed: 0.671 s
% ------------------------------
% ------------------------------
% Success in time 1.28 s
