Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f12849,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f12838,f128,f190,f192,f132,f193])).
fof(f193,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f132,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0',aHL_FALSITY)).
fof(f192,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f190,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f128,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f17])).
fof(f17,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','thm.bool.NOT_CLAUSES|split|2')).
fof(f12838,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f12837,f190])).
fof(f12837,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(forward_demodulation,[],[f12836,f159])).
fof(f159,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X17] : ! [X18] : s(X17,X18) = s(X17,happ(s(fun(X17,X17),'_i_0_0'),s(X17,X18)))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','_i0_ax')).
fof(f12836,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0')))) | $spl3),
  inference(subsumption_resolution,[],[f12772,f193])).
fof(f12772,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))))),
  inference(superposition,[],[f3522,f236])).
fof(f236,plain,(
  s(bool,'F_0') = s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun('type.one.one',bool),'_dst_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0')))),
  inference(resolution,[],[f125,f139])).
fof(f139,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7] : (s(bool,'F_0') = s(bool,X7) <=> ~p(s(bool,X7)))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','thm.bool.EQ_CLAUSES|split|3')).
fof(f125,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun('type.one.one',bool),'_dst_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun('type.one.one',bool),'_dst_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))))),
  inference(flattening,[],[f6])).
fof(f6,negated_conjecture,(
  ~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun('type.one.one',bool),'_dst_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun('type.one.one',bool),'_dst_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','thm.quantHeuristics.GUESS_RULES_BOOL|split|0')).
fof(f3522,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X28,X27),'_dst_x0_1'(s(X27,X29))),s(fun(X27,bool),X30)))) | ~p(s(bool,happ(s(fun(X27,bool),X30),s(X27,X29))))) )),
  inference(superposition,[],[f174,f171])).
fof(f171,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X17,X19] : ! [X20,X21] : s(X19,X20) = s(X19,happ(s(fun(X17,X19),'_dst_x0_1'(s(X19,X20))),s(X17,X21)))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','_dst_x0_ax')).
fof(f174,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X9,X6] : ! [X15,X16] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X6,X9),X15),s(fun(X9,bool),X16)))) <=> ! [X14] : p(s(bool,happ(s(fun(X9,bool),X16),s(X9,happ(s(fun(X6,X9),X15),s(X6,X14)))))))),
  file('thm.quantHeuristics.GUESS_RULES_BOOL|split|0','thm.quantHeuristics.GUESS_REWRITES|split|2')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 202
% Passive clauses: 2914
% Generated clauses: 12635
% Final active clauses: 187
% Final passive clauses: 2545
% Input formulas: 30
% Initial clauses: 64
% 
% Duplicate literals: 223
% Trivial inequalities: 376
% Fw subsumption resolutions: 1665
% Fw demodulations: 1627
% Bw demodulations: 13
% 
% Simple tautologies: 293
% Equational tautologies: 18
% Forward subsumptions: 5078
% 
% Binary resolution: 905
% Forward superposition: 4638
% Backward superposition: 2920
% Self superposition: 37
% Equality factoring: 32
% Equality resolution: 19
% 
% Split clauses: 231
% Split components: 462
% SAT solver clauses: 594
% SAT solver unit clauses: 15
% SAT solver binary clauses: 185
% SAT solver learnt clauses: 1
% 
% Sat splits: 231
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 588
% TWLsolver calls for satisfiability: 150
% 
% Memory used [KB]: 6780
% Time elapsed: 0.212 s
% ------------------------------
% ------------------------------
% Success in time 0.221 s
