Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (109296)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 118
% Passive clauses: 3465
% Generated clauses: 15925
% Final active clauses: 109
% Final passive clauses: 3207
% Input formulas: 69
% Initial clauses: 113
% 
% Duplicate literals: 823
% Trivial inequalities: 184
% Fw subsumption resolutions: 1681
% Fw demodulations: 1238
% Bw demodulations: 7
% 
% Simple tautologies: 313
% Equational tautologies: 81
% Forward subsumptions: 6874
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 179
% Factoring: 2
% Forward superposition: 6085
% Backward superposition: 5017
% Self superposition: 262
% Equality factoring: 182
% Equality resolution: 18
% 
% Split clauses: 398
% Split components: 801
% SAT solver clauses: 1095
% SAT solver unit clauses: 10
% SAT solver binary clauses: 173
% 
% Sat splits: 398
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1094
% TWLsolver calls for satisfiability: 167
% 
% Memory used [KB]: 11769
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (109337)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 78
% Passive clauses: 544
% Generated clauses: 11014
% Final active clauses: 75
% Final passive clauses: 445
% Input formulas: 69
% Initial clauses: 113
% 
% Duplicate literals: 1068
% Trivial inequalities: 133
% Fw subsumption resolutions: 681
% Fw demodulations: 462
% Bw demodulations: 20
% Condensations: 1899
% Global subsumptions: 8
% 
% Simple tautologies: 219
% Equational tautologies: 65
% Forward subsumptions: 4412
% 
% Binary resolution: 78
% Factoring: 2
% Forward superposition: 2920
% Backward superposition: 2741
% Self superposition: 220
% Equality factoring: 162
% Equality resolution: 13
% 
% Split clauses: 38
% Split components: 76
% SAT solver clauses: 1094
% SAT solver unit clauses: 142
% SAT solver binary clauses: 50
% SAT solver learnt clauses: 16
% 
% Sat splits: 38
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1062
% TWLsolver calls for satisfiability: 322
% 
% Memory used [KB]: 9850
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f5336,plain,(
  $false),
  inference(subsumption_resolution,[],[f5321,f373])).
fof(f373,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2))))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X1)),X2),s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3)))))) )),
  inference(forward_demodulation,[],[f372,f324])).
fof(f324,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X10,X11] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X11))) = s('type.list.list'(X6),happ(s(fun('type.list.list'(X7),'type.list.list'(X6)),'const.list.MAP_1'(s(fun(X7,X6),X10))),s('type.list.list'(X7),X11)))),
  file('thm.rich_list.MAP_FLAT','ARITY_1_2_const.list.MAP')).
fof(f372,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(X1)),X2),s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2)))))) )),
  inference(forward_demodulation,[],[f371,f325])).
fof(f325,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X7,X6] : ! [X9,X8] : s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),X9),s(fun(X6,'type.list.list'(X7)),X8))) = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),'const.list.MAP_2'(s(fun(X6,'type.list.list'(X7)),X8),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.MAP_FLAT','thm.list.LIST_BIND_def')).
fof(f371,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'('type.list.list'(X1)),X2)))))) )),
  inference(forward_demodulation,[],[f326,f324])).
fof(f326,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))))),s('type.list.list'('type.list.list'(X1)),X2)))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))))),s('type.list.list'('type.list.list'(X1)),X2)))))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X3))))),s('type.list.list'('type.list.list'(X1)),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X6] : ! [X9,X8] : s('type.list.list'(X7),happ(s(fun('type.list.list'(X6),'type.list.list'(X7)),'const.list.MAP_1'(s(fun(X6,X7),X8))),s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),X9))))) = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),happ(s(fun('type.list.list'('type.list.list'(X6)),'type.list.list'('type.list.list'(X7))),'const.list.MAP_1'(s(fun('type.list.list'(X6),'type.list.list'(X7)),'const.list.MAP_1'(s(fun(X6,X7),X8))))),s('type.list.list'('type.list.list'(X6)),X9)))))),
  file('thm.rich_list.MAP_FLAT','thm.list.MAP_FLAT')).
fof(f5321,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK1)),sK3))))) != s('type.list.list'(sK0),'const.list.LIST_BIND_2'(s('type.list.list'('type.list.list'(sK1)),sK3),s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2)))))),
  inference(superposition,[],[f370,f325])).
fof(f370,plain,(
  s('type.list.list'(sK0),'const.list.MAP_2'(s(fun(sK1,sK0),sK2),s('type.list.list'(sK1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK1)),sK3))))) != s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.MAP_2'(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))),s('type.list.list'('type.list.list'(sK1)),sK3)))))),
  inference(forward_demodulation,[],[f369,f324])).
fof(f369,plain,(
  s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))),s('type.list.list'(sK1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK1)),sK3))))) != s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),'const.list.MAP_2'(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))),s('type.list.list'('type.list.list'(sK1)),sK3)))))),
  inference(backward_demodulation,[],[f324,f245])).
fof(f245,plain,(
  s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))),s('type.list.list'(sK1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK1)),sK3))))) != s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),happ(s(fun('type.list.list'('type.list.list'(sK1)),'type.list.list'('type.list.list'(sK0))),'const.list.MAP_1'(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))))),s('type.list.list'('type.list.list'(sK1)),sK3)))))),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))),s('type.list.list'(sK1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK1)),sK3))))) != s('type.list.list'(sK0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(sK0)),happ(s(fun('type.list.list'('type.list.list'(sK1)),'type.list.list'('type.list.list'(sK0))),'const.list.MAP_1'(s(fun('type.list.list'(sK1),'type.list.list'(sK0)),'const.list.MAP_1'(s(fun(sK1,sK0),sK2))))),s('type.list.list'('type.list.list'(sK1)),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f186])).
fof(f186,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X3))))) != s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))))),s('type.list.list'('type.list.list'(X1)),X3)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X3))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))))),s('type.list.list'('type.list.list'(X1)),X3)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))),s('type.list.list'(X1),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X1)),X3))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),happ(s(fun('type.list.list'('type.list.list'(X1)),'type.list.list'('type.list.list'(X0))),'const.list.MAP_1'(s(fun('type.list.list'(X1),'type.list.list'(X0)),'const.list.MAP_1'(s(fun(X1,X0),X2))))),s('type.list.list'('type.list.list'(X1)),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),happ(s(fun('type.list.list'(X7),'type.list.list'(X6)),'const.list.MAP_1'(s(fun(X7,X6),X8))),s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),X9))))) = s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),happ(s(fun('type.list.list'('type.list.list'(X7)),'type.list.list'('type.list.list'(X6))),'const.list.MAP_1'(s(fun('type.list.list'(X7),'type.list.list'(X6)),'const.list.MAP_1'(s(fun(X7,X6),X8))))),s('type.list.list'('type.list.list'(X7)),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),happ(s(fun('type.list.list'(X7),'type.list.list'(X6)),'const.list.MAP_1'(s(fun(X7,X6),X8))),s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),X9))))) = s('type.list.list'(X6),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X6)),happ(s(fun('type.list.list'('type.list.list'(X7)),'type.list.list'('type.list.list'(X6))),'const.list.MAP_1'(s(fun('type.list.list'(X7),'type.list.list'(X6)),'const.list.MAP_1'(s(fun(X7,X6),X8))))),s('type.list.list'('type.list.list'(X7)),X9)))))),
  file('thm.rich_list.MAP_FLAT','thm.rich_list.MAP_FLAT')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 56
% Passive clauses: 299
% Generated clauses: 4964
% Final active clauses: 55
% Final passive clauses: 221
% Input formulas: 69
% Initial clauses: 113
% 
% Duplicate literals: 542
% Trivial inequalities: 75
% Fw subsumption resolutions: 302
% Fw demodulations: 188
% Bw demodulations: 18
% Condensations: 906
% Global subsumptions: 7
% 
% Simple tautologies: 141
% Equational tautologies: 70
% Forward subsumptions: 2403
% 
% Unit resulting resolution: 91
% Factoring: 1
% Forward superposition: 1293
% Backward superposition: 1167
% Self superposition: 136
% Equality factoring: 110
% Equality resolution: 9
% 
% Split clauses: 39
% Split components: 78
% SAT solver clauses: 387
% SAT solver unit clauses: 46
% SAT solver binary clauses: 99
% 
% Sat splits: 39
% Sat splitting refutations: 1
% 
% Memory used [KB]: 3326
% Time elapsed: 0.235 s
% ------------------------------
% ------------------------------
% Success in time 1.557 s
