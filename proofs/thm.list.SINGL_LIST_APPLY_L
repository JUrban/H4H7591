Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f268,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f266])).
fof(f266,plain,(
  s('type.list.list'(sK0),happ(s(fun(sK1,'type.list.list'(sK0)),sK3),s(sK1,sK2))) != s('type.list.list'(sK0),happ(s(fun(sK1,'type.list.list'(sK0)),sK3),s(sK1,sK2)))),
  inference(superposition,[],[f30,f249])).
fof(f249,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X2)))) )),
  inference(forward_demodulation,[],[f247,f35])).
fof(f35,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X10] : s('type.list.list'(X6),X10) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X10),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.SINGL_LIST_APPLY_L','thm.list.APPEND_NIL')).
fof(f247,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(superposition,[],[f40,f38])).
fof(f38,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : ! [X9] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),'const.list.NIL_0'),s(fun(X7,'type.list.list'(X6)),X9)))),
  file('thm.list.SINGL_LIST_APPLY_L','thm.list.LIST_BIND_THM|split|0')).
fof(f40,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X7,X6] : ! [X11,X12,X9] : s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),X11))),s(fun(X7,'type.list.list'(X6)),X9))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),happ(s(fun(X7,'type.list.list'(X6)),X9),s(X7,X12))),s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),X11),s(fun(X7,'type.list.list'(X6)),X9)))))),
  file('thm.list.SINGL_LIST_APPLY_L','thm.list.LIST_BIND_THM|split|1')).
fof(f30,plain,(
  s('type.list.list'(sK0),happ(s(fun(sK1,'type.list.list'(sK0)),sK3),s(sK1,sK2))) != s('type.list.list'(sK0),'const.list.LIST_BIND_2'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK2),s('type.list.list'(sK1),'const.list.NIL_0'))),s(fun(sK1,'type.list.list'(sK0)),sK3)))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  s('type.list.list'(sK0),happ(s(fun(sK1,'type.list.list'(sK0)),sK3),s(sK1,sK2))) != s('type.list.list'(sK0),'const.list.LIST_BIND_2'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK2),s('type.list.list'(sK1),'const.list.NIL_0'))),s(fun(sK1,'type.list.list'(sK0)),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f25])).
fof(f25,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) != s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),happ(s(fun(X7,'type.list.list'(X6)),X9),s(X7,X8))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X8),s('type.list.list'(X7),'const.list.NIL_0'))),s(fun(X7,'type.list.list'(X6)),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.list.list'(X6),happ(s(fun(X7,'type.list.list'(X6)),X9),s(X7,X8))) = s('type.list.list'(X6),'const.list.LIST_BIND_2'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X8),s('type.list.list'(X7),'const.list.NIL_0'))),s(fun(X7,'type.list.list'(X6)),X9)))),
  file('thm.list.SINGL_LIST_APPLY_L','thm.list.SINGL_LIST_APPLY_L')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 16
% Passive clauses: 36
% Generated clauses: 210
% Final active clauses: 14
% Final passive clauses: 14
% Input formulas: 10
% Initial clauses: 11
% 
% Duplicate literals: 42
% Trivial inequalities: 4
% Fw demodulations: 1
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 95
% 
% Binary resolution: 4
% Forward superposition: 65
% Backward superposition: 43
% Self superposition: 28
% Equality factoring: 26
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 2
% SAT solver unit clauses: 1
% SAT solver binary clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2
% TWLsolver calls for satisfiability: 2
% 
% Memory used [KB]: 895
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 0.018 s
