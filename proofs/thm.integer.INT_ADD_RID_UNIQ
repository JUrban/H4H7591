Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% (63695)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 122
% Passive clauses: 2612
% Generated clauses: 16662
% Final active clauses: 113
% Final passive clauses: 2378
% Input formulas: 42
% Initial clauses: 54
% 
% Duplicate literals: 764
% Trivial inequalities: 200
% Fw subsumption resolutions: 1963
% Fw demodulations: 2809
% Bw demodulations: 3
% 
% Simple tautologies: 307
% Equational tautologies: 27
% Forward subsumptions: 7347
% 
% Binary resolution: 27
% Forward superposition: 6733
% Backward superposition: 3661
% Self superposition: 215
% Equality factoring: 86
% Equality resolution: 43
% 
% Split clauses: 438
% Split components: 876
% SAT solver clauses: 712
% SAT solver unit clauses: 56
% SAT solver binary clauses: 206
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 438
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 711
% TWLsolver calls for satisfiability: 101
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% (63705)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 93
% Passive clauses: 1028
% Generated clauses: 9850
% Final active clauses: 89
% Final passive clauses: 907
% Input formulas: 42
% Initial clauses: 54
% 
% Duplicate literals: 157
% Trivial inequalities: 86
% Fw subsumption resolutions: 289
% Fw demodulations: 3329
% Bw demodulations: 31
% Condensations: 222
% 
% Simple tautologies: 45
% Equational tautologies: 17
% Forward subsumptions: 3166
% 
% Binary resolution: 15
% Forward superposition: 2457
% Backward superposition: 2033
% Self superposition: 99
% Equality factoring: 40
% Equality resolution: 7
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 1539
% SAT solver unit clauses: 66
% SAT solver binary clauses: 40
% 
% Sat splits: 4
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1539
% TWLsolver calls for satisfiability: 324
% 
% Memory used [KB]: 22259
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f16351,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f139,f196,f194,f138,f195,f193,f143,f200,f198,f259,f262,f260,f810,f3059,f3060,f2999,f3062,f3080,f14611,f14612,f14613,f14614,f14615,f14624,f14616,f14627,f14629,f14617,f14630,f14620,f14618,f14626,f14621,f14631,f15118,f15121,f15140,f15122,f15144,f15124,f15142,f15145,f15146,f14623,f15143,f16101,f15930,f16234,f16237,f16235,f16271,f16277,f16275,f16349,f16328])).
fof(f16328,plain,(
  $false | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f193,f16294])).
fof(f16294,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK1)))) ) | $spl3),
  inference(superposition,[],[f16238,f13850])).
fof(f13850,plain,(
  ( ! [X2,X3] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X3))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X2)))) )),
  inference(superposition,[],[f1831,f158])).
fof(f158,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1)))))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1)))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X18,X19] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X18),s('type.integer.int',X19))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X18))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X19)))))))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.int_add')).
fof(f1831,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_ABS_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X1))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.int_REP_1'(s('type.integer.int',X0)))))))) )),
  inference(superposition,[],[f158,f157])).
fof(f157,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X1),s('type.pair.prod'('type.num.num','type.num.num'),X0)))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X1),s('type.pair.prod'('type.num.num','type.num.num'),X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X6),s('type.pair.prod'('type.num.num','type.num.num'),X7))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X7),s('type.pair.prod'('type.num.num','type.num.num'),X6)))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.TINT_ADD_SYM')).
fof(f16238,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X0)))) ) | $spl3),
  inference(unit_resulting_resolution,[],[f196,f162])).
fof(f162,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : ((s('type.integer.int',X1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) <=> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6,X7] : (s('type.integer.int',X7) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))) <=> s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.INT_ADD_LID_UNIQ')).
fof(f16349,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f16348])).
fof(f16348,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK0) | ($spl0 | $spl3)),
  inference(superposition,[],[f16294,f193])).
fof(f16275,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl50),
  inference(cnf_transformation,[],[f16275_D])).
fof(f16275_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f16277,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | $spl53),
  inference(cnf_transformation,[],[f16277_D])).
fof(f16277_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f16271,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK1) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl0),
  inference(superposition,[],[f162,f193])).
fof(f16235,plain,(
  ( ! [X81,X82] : (s(fun(bool,bool),X81) = s(fun(bool,bool),X82)) ) | $spl46),
  inference(cnf_transformation,[],[f16235_D])).
fof(f16235_D,plain,(
  ( ! [X81,X82] : (s(fun(bool,bool),X81) = s(fun(bool,bool),X82)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f16237,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl49),
  inference(cnf_transformation,[],[f16237_D])).
fof(f16237_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f16234,plain,(
  ( ! [X81,X82] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82)) ) | ($spl11 | $spl20 | $spl39)),
  inference(forward_demodulation,[],[f16205,f15168])).
fof(f15168,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | ($spl11 | $spl39)),
  inference(unit_resulting_resolution,[],[f262,f15142,f250])).
fof(f250,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f148,f148])).
fof(f148,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.integer.INT_ADD_RID_UNIQ',aHL_BOOL_CASES)).
fof(f16205,plain,(
  ( ! [X81,X82] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f16194])).
fof(f16194,plain,(
  ( ! [X81,X82] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82)) ) | $spl20),
  inference(superposition,[],[f164,f14621])).
fof(f164,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.integer.INT_ADD_RID_UNIQ',aHL_EXT)).
fof(f15930,plain,(
  $false | ($spl1 | $spl2)),
  inference(unit_resulting_resolution,[],[f194,f15615])).
fof(f15615,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',sK1)))) ) | $spl2),
  inference(superposition,[],[f13850,f214])).
fof(f214,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X0)))) ) | $spl2),
  inference(forward_demodulation,[],[f210,f195])).
fof(f210,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f195,f207])).
fof(f207,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK1) != s('type.integer.int',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) ) | $spl2),
  inference(backward_demodulation,[],[f195,f163])).
fof(f163,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f16101,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f16026])).
fof(f16026,plain,(
  s('type.integer.int',sK0) != s('type.integer.int',sK0) | ($spl1 | $spl2)),
  inference(superposition,[],[f194,f15615])).
fof(f15143,plain,(
  ( ! [X14,X15] : (s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,sK4(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X14,X15,bool,bool))))) ) | $spl40),
  inference(cnf_transformation,[],[f15143_D])).
fof(f15143_D,plain,(
  ( ! [X14,X15] : (s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,sK4(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X14,X15,bool,bool))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f14623,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl23),
  inference(cnf_transformation,[],[f14623_D])).
fof(f14623_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f15146,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X28) = s(fun(bool,bool),X29) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X28,X29,bool,bool)))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,sK4(X28,X29,bool,bool))))) )),
  inference(forward_demodulation,[],[f15127,f149])).
fof(f149,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X8] : ! [X6] : s(X8,X6) = s(X8,'const.combin.I_1'(s(X8,X6)))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.combin.I_THM')).
fof(f15127,plain,(
  ( ! [X28,X29] : (s(bool,'F_0') != s(bool,f(s(bool,'const.combin.I_1'(s(bool,'F_0'))))) | s(fun(bool,bool),X28) = s(fun(bool,bool),X29) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X28,X29,bool,bool)))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,sK4(X28,X29,bool,bool))))) )),
  inference(superposition,[],[f1415,f3035])).
fof(f3035,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X0))) | s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) )),
  inference(condensation,[],[f3034])).
fof(f3034,plain,(
  ( ! [X12,X11] : (s(bool,X12) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X12)))) )),
  inference(duplicate_literal_removal,[],[f2870])).
fof(f2870,plain,(
  ( ! [X12,X11] : (s(bool,X12) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X12)))) )),
  inference(superposition,[],[f2728,f388])).
fof(f388,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) )),
  inference(superposition,[],[f250,f149])).
fof(f2728,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f2727])).
fof(f2727,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f2544])).
fof(f2544,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f413,f148])).
fof(f413,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.combin.I_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f250,f149])).
fof(f1415,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f164,f148])).
fof(f15145,plain,(
  ( ! [X21,X22,X20] : (s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22))) | s(bool,X22) = s(bool,sK4(X20,X21,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X20,X21,bool,bool))))) ) | $spl44),
  inference(cnf_transformation,[],[f15145_D])).
fof(f15145_D,plain,(
  ( ! [X21,X22,X20] : (s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22))) | s(bool,X22) = s(bool,sK4(X20,X21,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X20,X21,bool,bool))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f15142,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl39),
  inference(cnf_transformation,[],[f15142_D])).
fof(f15142_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f15124,plain,(
  ( ! [X21,X22,X20] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X20,X21,bool,bool)))) | s(bool,X22) = s(bool,sK4(X20,X21,bool,bool)) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) )),
  inference(superposition,[],[f1415,f388])).
fof(f15144,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) | $spl42),
  inference(cnf_transformation,[],[f15144_D])).
fof(f15144_D,plain,(
  ( ! [X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(bool,'T_0') = s(bool,X16)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f15122,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,X16))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X14,X15,bool,bool)))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,sK4(X14,X15,bool,bool))))) )),
  inference(superposition,[],[f1415,f388])).
fof(f15140,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK4(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X2,X3,bool,bool))))) ) | $spl36),
  inference(cnf_transformation,[],[f15140_D])).
fof(f15140_D,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK4(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X2,X3,bool,bool))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f15121,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK4(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f1415,f250])).
fof(f15118,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK4(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1415,f250])).
fof(f14631,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) ) | $spl34),
  inference(cnf_transformation,[],[f14631_D])).
fof(f14631_D,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f14621,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl20),
  inference(cnf_transformation,[],[f14621_D])).
fof(f14621_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f14626,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl27),
  inference(cnf_transformation,[],[f14626_D])).
fof(f14626_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f14618,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X20) = s(fun(bool,bool),X21) | s(bool,'T_0') = s(bool,sK4(X20,X21,bool,bool)) | s(bool,X22) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X22)))) )),
  inference(superposition,[],[f1407,f388])).
fof(f1407,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK4(X0,X1,X2,bool))) )),
  inference(superposition,[],[f164,f148])).
fof(f14620,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl18),
  inference(cnf_transformation,[],[f14620_D])).
fof(f14620_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f14630,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X17)))) ) | $spl32),
  inference(cnf_transformation,[],[f14630_D])).
fof(f14630_D,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X17)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f14617,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,sK4(X18,X19,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X17)))) )),
  inference(superposition,[],[f1407,f388])).
fof(f14629,plain,(
  s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,g(s(bool,'F_0'))))) | $spl30),
  inference(cnf_transformation,[],[f14629_D])).
fof(f14629_D,plain,(
  s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,g(s(bool,'F_0'))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f14627,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl28),
  inference(cnf_transformation,[],[f14627_D])).
fof(f14627_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f14616,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,'T_0') = s(bool,sK4(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,g(s(bool,'F_0')))))) )),
  inference(superposition,[],[f1407,f388])).
fof(f14624,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl24),
  inference(cnf_transformation,[],[f14624_D])).
fof(f14624_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f14615,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK4(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f1407,f250])).
fof(f14614,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK4(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1407,f250])).
fof(f14613,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK4(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1407,f250])).
fof(f14612,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK4(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1407,f250])).
fof(f14611,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK4(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1407,f148])).
fof(f3080,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f3080_D])).
fof(f3080_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f3062,plain,(
  s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | $spl15),
  inference(cnf_transformation,[],[f3062_D])).
fof(f3062_D,plain,(
  s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f2999,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.combin.I_1'(s(bool,'F_0')))) )),
  inference(equality_factoring,[],[f2728])).
fof(f3060,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) | $spl12),
  inference(cnf_transformation,[],[f3060_D])).
fof(f3060_D,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f3059,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30)) ) | $spl11),
  inference(subsumption_resolution,[],[f2935,f2764])).
fof(f2764,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2692,f149])).
fof(f2692,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X0)))) )),
  inference(condensation,[],[f2691])).
fof(f2691,plain,(
  ( ! [X41,X42] : (s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X42)) )),
  inference(duplicate_literal_removal,[],[f2603])).
fof(f2603,plain,(
  ( ! [X41,X42] : (s(bool,'const.combin.I_1'(s(bool,'T_0'))) != s(bool,'const.combin.I_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f1243,f413])).
fof(f1243,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.combin.I_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f1225])).
fof(f1225,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.combin.I_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f388])).
fof(f2935,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,'const.combin.I_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,X30)) ) | $spl11),
  inference(superposition,[],[f1402,f2728])).
fof(f1402,plain,(
  ( ! [X37] : (s(bool,'T_0') != s(bool,X37) | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X37)))) ) | $spl11),
  inference(subsumption_resolution,[],[f1152,f262])).
fof(f1152,plain,(
  ( ! [X37] : (s(bool,'T_0') != s(bool,X37) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.I_1'(s(bool,X37)))) ) | $spl11),
  inference(superposition,[],[f262,f388])).
fof(f810,plain,(
  $false | $spl5),
  inference(subsumption_resolution,[],[f809,f140])).
fof(f140,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.INT_ADD_RID_UNIQ',aHL_TRUTH)).
fof(f809,plain,(
  ~p(s(bool,'T_0')) | $spl5),
  inference(backward_demodulation,[],[f798,f205])).
fof(f205,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK2),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK2),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | $spl5),
  inference(forward_demodulation,[],[f204,f157])).
fof(f204,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK3),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK2),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | $spl5),
  inference(forward_demodulation,[],[f203,f160])).
fof(f160,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X35,X36] : s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),X35),s('type.pair.prod'('type.num.num','type.num.num'),X36))) = s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X35))),s('type.pair.prod'('type.num.num','type.num.num'),X36)))),
  file('thm.integer.INT_ADD_RID_UNIQ','ARITY_0_2_const.integer.tint_add')).
fof(f203,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),'const.integer.tint_add_2'(s('type.pair.prod'('type.num.num','type.num.num'),sK2),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | $spl5),
  inference(forward_demodulation,[],[f202,f160])).
fof(f202,plain,(
  ~p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | $spl5),
  inference(forward_demodulation,[],[f198,f159])).
fof(f159,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X35,X36] : s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X35),s('type.pair.prod'('type.num.num','type.num.num'),X36))) = s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),X35))),s('type.pair.prod'('type.num.num','type.num.num'),X36)))),
  file('thm.integer.INT_ADD_RID_UNIQ','ARITY_0_2_const.integer.tint_eq')).
fof(f798,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X0)))) )),
  inference(unit_resulting_resolution,[],[f778,f253])).
fof(f253,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f144,f148])).
fof(f144,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.integer.INT_ADD_RID_UNIQ',aHL_FALSITY)).
fof(f778,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X0))))) )),
  inference(forward_demodulation,[],[f764,f201])).
fof(f201,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(forward_demodulation,[],[f151,f149])).
fof(f151,plain,(
  ( ! [X0,X1] : (s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ! [X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X8] : ! [X35] : s(X8,'const.combin.I_1'(s(X8,X35))) = s(X8,happ(s(fun(X8,X8),'const.combin.I_0'),s(X8,X35)))),
  file('thm.integer.INT_ADD_RID_UNIQ','ARITY_0_1_const.combin.I')).
fof(f764,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'const.combin.I_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))) )),
  inference(unit_resulting_resolution,[],[f201,f161])).
fof(f161,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))) | s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),X1)) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),X1) | p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))),
  inference(ennf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),X1) => p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X0),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X12,X13] : (s('type.pair.prod'('type.num.num','type.num.num'),X12) = s('type.pair.prod'('type.num.num','type.num.num'),X13) => p(s(bool,'const.integer.tint_eq_2'(s('type.pair.prod'('type.num.num','type.num.num'),X12),s('type.pair.prod'('type.num.num','type.num.num'),X13)))))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.TINT_EQ_AP')).
fof(f260,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f260_D])).
fof(f260_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f262,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f259,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f148])).
fof(f198,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | $spl5),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f200,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0')))))))) | $spl6),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0')))))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f143,plain,(
  p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0')))))))) | ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),sK3))))))),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK3))),s('type.pair.prod'('type.num.num','type.num.num'),sK2))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),sK2))),s('type.pair.prod'('type.num.num','type.num.num'),sK3)))))) | p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f107])).
fof(f107,plain,(
  ? [X0,X1] : ~p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X1))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))) | p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'))))))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X1))),s('type.pair.prod'('type.num.num','type.num.num'),X0))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X0))),s('type.pair.prod'('type.num.num','type.num.num'),X1)))))) => p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'))))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X7,X6] : p(s(bool,happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X6))),s('type.pair.prod'('type.num.num','type.num.num'),X7))))),s('type.pair.prod'('type.num.num','type.num.num'),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),happ(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s('type.pair.prod'('type.num.num','type.num.num'),X7))),s('type.pair.prod'('type.num.num','type.num.num'),X6)))))) => p(s(bool,happ(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'_dst_x0x1_2'(s(fun(fun('type.pair.prod'('type.num.num','type.num.num'),bool),bool),'const.bool.RES_FORALL_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),bool),'const.quotient.respects_1'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'))))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'_dst_x00x11x11_3'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),bool)),'const.integer.tint_eq_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'_dst_x01x10_2'(s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'),s(fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num')),'_i_0_0'))),s(fun('type.pair.prod'('type.num.num','type.num.num'),fun('type.pair.prod'('type.num.num','type.num.num'),'type.pair.prod'('type.num.num','type.num.num'))),'const.integer.tint_add_0'))))))))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.integer_66_prove_ltb')).
fof(f193,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl0),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f195,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f138,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  (s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f125])).
fof(f125,plain,(
  ? [X0,X1] : ((s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) & (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) | s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(nnf_transformation,[],[f106])).
fof(f106,plain,(
  ? [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) <~> s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ~! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) <=> s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))) <=> s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))) <=> s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.integer.INT_ADD_RID_UNIQ','thm.integer.INT_ADD_RID_UNIQ')).
fof(f194,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | $spl1),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f196,plain,(
  s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f139,plain,(
  s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))),
  inference(cnf_transformation,[],[f126])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 153
% Passive clauses: 1778
% Generated clauses: 16107
% Final active clauses: 75
% Final passive clauses: 750
% Input formulas: 42
% Initial clauses: 54
% 
% Duplicate literals: 282
% Trivial inequalities: 201
% Fw subsumption resolutions: 692
% Fw demodulations: 4353
% Bw demodulations: 10
% Condensations: 441
% 
% Simple tautologies: 117
% Equational tautologies: 49
% Forward subsumptions: 8168
% Fw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 301
% Forward superposition: 5742
% Backward superposition: 3828
% Self superposition: 133
% Equality factoring: 45
% Equality resolution: 11
% 
% Split clauses: 21
% Split components: 50
% SAT solver clauses: 1827
% SAT solver unit clauses: 150
% SAT solver binary clauses: 525
% 
% Sat splits: 21
% Sat splitting refutations: 5
% 
% Memory used [KB]: 27121
% Time elapsed: 1.222 s
% ------------------------------
% ------------------------------
% Success in time 2.543 s
