Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% (49428)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 831
% Passive clauses: 8836
% Generated clauses: 22423
% Final active clauses: 819
% Final passive clauses: 7557
% Input formulas: 55
% Initial clauses: 211
% 
% Duplicate literals: 474
% Trivial inequalities: 137
% Fw subsumption resolutions: 2522
% Fw demodulations: 759
% Bw demodulations: 10
% 
% Simple tautologies: 296
% Equational tautologies: 58
% Forward subsumptions: 8695
% 
% Binary resolution: 10911
% Factoring: 1517
% Forward superposition: 3393
% Backward superposition: 2161
% Self superposition: 30
% Equality factoring: 30
% Equality resolution: 27
% 
% Split clauses: 621
% Split components: 1249
% SAT solver clauses: 1097
% SAT solver unit clauses: 18
% SAT solver binary clauses: 150
% 
% Sat splits: 621
% 
% TWLsolver clauses: 1097
% TWLsolver calls for satisfiability: 448
% 
% Memory used [KB]: 9083
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% (49513)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 455
% Passive clauses: 2878
% Generated clauses: 14152
% Final active clauses: 428
% Final passive clauses: 2052
% Input formulas: 55
% Initial clauses: 211
% 
% Duplicate literals: 218
% Trivial inequalities: 33
% Fw subsumption resolutions: 1135
% Fw demodulations: 1257
% Bw demodulations: 394
% Condensations: 232
% Global subsumptions: 22
% 
% Simple tautologies: 268
% Equational tautologies: 27
% Forward subsumptions: 4999
% 
% Binary resolution: 4163
% Factoring: 270
% Forward superposition: 1983
% Backward superposition: 1349
% Self superposition: 35
% Equality factoring: 34
% Equality resolution: 4
% 
% Split clauses: 91
% Split components: 187
% SAT solver clauses: 3312
% SAT solver unit clauses: 218
% SAT solver binary clauses: 72
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 91
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 3224
% TWLsolver calls for satisfiability: 1732
% 
% Memory used [KB]: 12792
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f9048,plain,(
  $false),
  inference(subsumption_resolution,[],[f9047,f498])).
fof(f498,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f282,f279])).
fof(f279,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.P_EUCLIDES',aHL_TRUTH)).
fof(f282,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f31])).
fof(f31,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.gcd.P_EUCLIDES','thm.bool.NOT_CLAUSES|split|2')).
fof(f9047,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f9046,f584])).
fof(f584,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14)))),
  inference(unit_resulting_resolution,[],[f278,f303])).
fof(f303,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.gcd.P_EUCLIDES','thm.bool.EQ_CLAUSES|split|3')).
fof(f278,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f132])).
fof(f132,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(ennf_transformation,[],[f57])).
fof(f57,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8))))))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8))))))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  file('thm.gcd.P_EUCLIDES','thm.gcd.P_EUCLIDES')).
fof(f9046,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(subsumption_resolution,[],[f9036,f279])).
fof(f9036,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(superposition,[],[f8823,f566])).
fof(f566,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))),
  inference(unit_resulting_resolution,[],[f276,f299])).
fof(f299,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.gcd.P_EUCLIDES','thm.bool.EQ_CLAUSES|split|1')).
fof(f276,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14))))))),
  inference(cnf_transformation,[],[f180])).
fof(f8823,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',X0)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',X0))))) )),
  inference(equality_resolution,[],[f7880])).
fof(f7880,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(backward_demodulation,[],[f7873,f1813])).
fof(f1813,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(superposition,[],[f404,f359])).
fof(f359,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X7,X8] : s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X8),s('type.num.num',X7)))),
  file('thm.gcd.P_EUCLIDES','thm.gcd.GCD_SYM')).
fof(f404,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(flattening,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X7,X8,X17] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X8))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X17))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num',X17)))))),
  file('thm.gcd.P_EUCLIDES','thm.gcd.L_EUCLIDES')).
fof(f7873,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(subsumption_resolution,[],[f7861,f498])).
fof(f7861,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1798,f583])).
fof(f583,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13)))),
  inference(unit_resulting_resolution,[],[f277,f303])).
fof(f277,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),
  inference(cnf_transformation,[],[f180])).
fof(f1798,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f1796,f279])).
fof(f1796,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',X0)))) )),
  inference(superposition,[],[f361,f564])).
fof(f564,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK12)))),
  inference(unit_resulting_resolution,[],[f275,f299])).
fof(f275,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12))))),
  inference(cnf_transformation,[],[f180])).
fof(f361,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : (~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6,X8] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) => (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X8)))))),
  file('thm.gcd.P_EUCLIDES','thm.gcd.PRIME_GCD')).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 629
% Passive clauses: 1107
% Generated clauses: 8698
% Final active clauses: 607
% Final passive clauses: 448
% Input formulas: 55
% Initial clauses: 211
% 
% Duplicate literals: 177
% Trivial inequalities: 22
% Fw subsumption resolutions: 241
% Fw demodulations: 1154
% Bw demodulations: 51
% Condensations: 154
% Global subsumptions: 5
% 
% Simple tautologies: 102
% Equational tautologies: 66
% Forward subsumptions: 5611
% 
% Unit resulting resolution: 3464
% Factoring: 1
% Forward superposition: 1690
% Backward superposition: 1421
% Self superposition: 30
% Equality factoring: 30
% Equality resolution: 3
% 
% Split clauses: 45
% Split components: 95
% SAT solver clauses: 1210
% SAT solver unit clauses: 738
% SAT solver binary clauses: 168
% 
% Sat splits: 45
% Sat splitting refutations: 6
% 
% Memory used [KB]: 4349
% Time elapsed: 0.201 s
% ------------------------------
% ------------------------------
% Success in time 1.529 s
