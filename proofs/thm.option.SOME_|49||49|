Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f1030,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1029,f75,f116,f114,f1009,f74,f115,f113,f97,f124,f118,f112,f119])).
fof(f119,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f112,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f99])).
fof(f99,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7] : (s(X6,X7) = s(X6,X7) <=> p(s(bool,'T_0')))),
  file('thm.option.SOME_|49||49|','thm.bool.REFL_CLAUSE')).
fof(f118,plain,(
  ~p(s(bool,'T_0')) | $spl7),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f124,plain,(
  ( ! [X0,X1] : (s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1)))))) ) | $spl14),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  ( ! [X0,X1] : (s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1)))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f97,plain,(
  ( ! [X0,X1] : (s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1))))) | ~p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ((~p(s(bool,'T_0')) | s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1)))))) & (s('type.sum.sum'(X0,'type.one.one'),X1) != s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1))))) | p(s(bool,'T_0'))))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : (p(s(bool,'T_0')) <=> s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1))))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'T_0')) <=> s('type.sum.sum'(X0,'type.one.one'),X1) = s('type.sum.sum'(X0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),X1))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X13] : (p(s(bool,'T_0')) <=> s('type.sum.sum'(X6,'type.one.one'),X13) = s('type.sum.sum'(X6,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X6),'const.option.option_ABS_1'(s('type.sum.sum'(X6,'type.one.one'),X13))))))),
  file('thm.option.SOME_|49||49|','thm.option.option_REP_ABS_DEF|split|1')).
fof(f113,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) | $spl0),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f115,plain,(
  s(sK0,sK1) = s(sK0,sK2) | $spl2),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  s(sK0,sK1) = s(sK0,sK2) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f74,plain,(
  s(sK0,sK1) = s(sK0,sK2) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2)))),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  (s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) | s(sK0,sK1) = s(sK0,sK2)) & (s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) | s(sK0,sK1) != s(sK0,sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) != s(X0,X2)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <~> s(X0,X1) = s(X0,X2))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) <=> s(X6,X7) = s(X6,X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) <=> s(X6,X7) = s(X6,X8))),
  file('thm.option.SOME_|49||49|','thm.option.SOME_|49||49|')).
fof(f1009,plain,(
  $false | ($spl0 | $spl3 | $spl14)),
  inference(subsumption_resolution,[],[f1008,f116])).
fof(f1008,plain,(
  s(sK0,sK1) = s(sK0,sK2) | ($spl0 | $spl14)),
  inference(equality_resolution,[],[f734])).
fof(f734,plain,(
  ( ! [X0] : (s('type.sum.sum'(sK0,'type.one.one'),'const.sum.INL_1'(s(sK0,sK1))) != s('type.sum.sum'(sK0,'type.one.one'),'const.sum.INL_1'(s(sK0,X0))) | s(sK0,sK2) = s(sK0,X0)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f108,f414])).
fof(f414,plain,(
  s('type.sum.sum'(sK0,'type.one.one'),'const.sum.INL_1'(s(sK0,sK1))) = s('type.sum.sum'(sK0,'type.one.one'),'const.sum.INL_1'(s(sK0,sK2))) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f410,f221])).
fof(f221,plain,(
  ( ! [X2,X3] : (s('type.sum.sum'(X2,'type.one.one'),'const.sum.INL_1'(s(X2,X3))) = s('type.sum.sum'(X2,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X3)))))) ) | $spl14),
  inference(superposition,[],[f124,f96])).
fof(f96,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),'const.sum.INL_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),'const.sum.INL_1'(s(X0,X1)))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.option_ABS_1'(s('type.sum.sum'(X0,'type.one.one'),'const.sum.INL_1'(s(X0,X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X7] : s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) = s('type.option.option'(X6),'const.option.option_ABS_1'(s('type.sum.sum'(X6,'type.one.one'),'const.sum.INL_1'(s(X6,X7)))))),
  file('thm.option.SOME_|49||49|','thm.option.SOME_DEF')).
fof(f410,plain,(
  s('type.sum.sum'(sK0,'type.one.one'),'const.sum.INL_1'(s(sK0,sK2))) = s('type.sum.sum'(sK0,'type.one.one'),'const.option.option_REP_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | ($spl0 | $spl14)),
  inference(superposition,[],[f221,f113])).
fof(f108,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2))) != s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3] : ((s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2))) != s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) & (s(X1,X2) != s(X1,X3) | s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2))) = s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X3)))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3] : (s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2))) = s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X2))) = s('type.sum.sum'(X1,X0),'const.sum.INL_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X14,X6] : ! [X8,X7] : (s('type.sum.sum'(X6,X14),'const.sum.INL_1'(s(X6,X7))) = s('type.sum.sum'(X6,X14),'const.sum.INL_1'(s(X6,X8))) <=> s(X6,X7) = s(X6,X8))),
  file('thm.option.SOME_|49||49|','thm.sum.INR_INL_|49||49||split|0')).
fof(f114,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) | $spl1),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f116,plain,(
  s(sK0,sK1) != s(sK0,sK2) | $spl3),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  s(sK0,sK1) != s(sK0,sK2) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f75,plain,(
  s(sK0,sK1) != s(sK0,sK2) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK2)))),
  inference(cnf_transformation,[],[f56])).
fof(f1029,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f1028])).
fof(f1028,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f114,f115])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 298
% Generated clauses: 916
% Final active clauses: 23
% Final passive clauses: 242
% Input formulas: 19
% Initial clauses: 38
% 
% Duplicate literals: 81
% Trivial inequalities: 9
% Fw subsumption resolutions: 55
% Fw demodulations: 43
% Bw demodulations: 1
% 
% Simple tautologies: 42
% Equational tautologies: 31
% Forward subsumptions: 339
% 
% Binary resolution: 26
% Factoring: 1
% Forward superposition: 292
% Backward superposition: 237
% Self superposition: 66
% Equality factoring: 50
% Equality resolution: 4
% 
% Split clauses: 17
% Split components: 35
% SAT solver clauses: 33
% SAT solver unit clauses: 5
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 17
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 31
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.031 s
% ------------------------------
% ------------------------------
% Success in time 0.032 s
