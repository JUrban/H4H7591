Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f6414,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6370,f5487,f237,f421,f245,f424,f238,f419,f418,f5940,f5941,f236,f422,f417])).
fof(f417,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) | $spl0),
  inference(cnf_transformation,[],[f417_D])).
fof(f417_D,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f422,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,sK16(X6))))))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X6))))) ) | $spl6),
  inference(cnf_transformation,[],[f422_D])).
fof(f422_D,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,sK16(X6))))))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X6))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f236,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,sK16(X6))))))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X6)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) | ! [X6] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X6)))) | ~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,sK16(X6))))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) | (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,sK17)))) & ! [X5] : p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,X5))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f147])).
fof(f147,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X6] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X6)))) | ? [X7] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X7)))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))))),
  inference(rectify,[],[f146])).
fof(f146,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) & ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <~> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(ennf_transformation,[],[f43])).
fof(f43,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) => ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : (~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X10)))) => ? [X11] : ~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,happ(s(fun(X7,X6),X8),s(X7,X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : (~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X10)))) => ? [X11] : ~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,happ(s(fun(X7,X6),X8),s(X7,X11))))))))),
  file('thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1','thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1')).
fof(f5941,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X1))))) ) | $spl112),
  inference(cnf_transformation,[],[f5941_D])).
fof(f5941_D,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X1))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f5940,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X0)))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X1))))) ) | ($spl1 | $spl6)),
  inference(subsumption_resolution,[],[f5910,f418])).
fof(f5910,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X0)))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X1)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15))))) ) | $spl6),
  inference(resolution,[],[f422,f333])).
fof(f333,plain,(
  ( ! [X6,X2,X0,X7,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6)))))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X7)))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ((~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK27(X3,X2,X1,X0))))) | ! [X10] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X10))))))) & (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK28(X3,X2,X1,X0))))))) | ! [X8] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X8))))))) & (((! [X7] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X7)))) | ! [X6] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6))))))) & (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK29(X3,X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK30(X3,X2,X1,X0))))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK27,sK28,sK29,sK30])],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ((? [X11] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X11)))) | ! [X10] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X10))))))) & (? [X9] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X9)))))) | ! [X8] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X8))))))) & (((! [X7] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X7)))) | ! [X6] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X6))))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ((? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4))))))) & (((! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) | ? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5)))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> (! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) <=> ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> (! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X4)))) <=> ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> (! [X10] : p(s(bool,happ(s(fun(X6,bool),X9),s(X6,X10)))) <=> ! [X11] : p(s(bool,happ(s(fun(X6,bool),X9),s(X6,happ(s(fun(X7,X6),X8),s(X7,X11))))))))),
  file('thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1','thm.quantHeuristics.GUESS_FORALL_def')).
fof(f418,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) | $spl1),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f419,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,X5))))))) ) | $spl2),
  inference(cnf_transformation,[],[f419_D])).
fof(f419_D,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,X5))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f238,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,X5)))))) | ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f424,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f245,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1',aHL_FALSITY)).
fof(f421,plain,(
  ~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,sK17)))) | $spl5),
  inference(cnf_transformation,[],[f421_D])).
fof(f421_D,plain,(
  ~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,sK17)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f237,plain,(
  ~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,sK17)))) | ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK13,sK12),sK14),s(fun(sK12,bool),sK15))))),
  inference(cnf_transformation,[],[f148])).
fof(f5487,plain,(
  $false | ($spl0 | $spl2 | $spl5 | $spl9)),
  inference(subsumption_resolution,[],[f5482,f424])).
fof(f5482,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2 | $spl5)),
  inference(superposition,[],[f5430,f734])).
fof(f734,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,sK17))) | $spl5),
  inference(resolution,[],[f421,f257])).
fof(f257,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.quantHeuristics.GUESS_EXISTS_FORALL_REWRITES|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f5430,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f5401,f419])).
fof(f5401,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(sK13,sK12),sK14),s(sK13,sK28(sK15,sK14,sK13,sK12))))))) | p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,X0))))) ) | $spl0),
  inference(resolution,[],[f332,f417])).
fof(f332,plain,(
  ( ! [X2,X0,X8,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK28(X3,X2,X1,X0))))))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X8))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f6370,plain,(
  $false | ($spl1 | $spl112)),
  inference(resolution,[],[f6010,f418])).
fof(f6010,plain,(
  ( ! [X21,X20] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X20,sK12),X21),s(fun(sK12,bool),sK15))))) ) | $spl112),
  inference(subsumption_resolution,[],[f5965,f5941])).
fof(f5965,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(sK12,bool),sK15),s(sK12,happ(s(fun(X20,sK12),X21),s(X20,sK30(sK15,X21,X20,sK12))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X20,sK12),X21),s(fun(sK12,bool),sK15))))) ) | $spl112),
  inference(resolution,[],[f5941,f334])).
fof(f334,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK29(X3,X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK30(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f197])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 431
% Passive clauses: 2647
% Generated clauses: 6203
% Final active clauses: 364
% Final passive clauses: 1766
% Input formulas: 40
% Initial clauses: 177
% 
% Duplicate literals: 155
% Trivial inequalities: 22
% Fw subsumption resolutions: 436
% Fw demodulations: 75
% Bw demodulations: 4
% 
% Simple tautologies: 150
% Equational tautologies: 20
% Forward subsumptions: 2673
% 
% Binary resolution: 3846
% Factoring: 739
% Forward superposition: 206
% Backward superposition: 450
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 108
% Split components: 221
% SAT solver clauses: 222
% SAT solver unit clauses: 7
% SAT solver binary clauses: 36
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 108
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 215
% TWLsolver calls for satisfiability: 174
% 
% Memory used [KB]: 3582
% Time elapsed: 0.144 s
% ------------------------------
% ------------------------------
% Success in time 0.146 s
