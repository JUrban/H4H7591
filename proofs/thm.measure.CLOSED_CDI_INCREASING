Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f8929,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8928,f125,f208])).
fof(f208,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f125,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.measure.CLOSED_CDI_INCREASING',aHL_FALSITY)).
fof(f8928,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f8927,f208])).
fof(f8927,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f8926,f811])).
fof(f811,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))),
  inference(resolution,[],[f122,f132])).
fof(f132,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.measure.CLOSED_CDI_INCREASING','thm.bool.EQ_CLAUSES|split|3')).
fof(f122,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))))) & s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num',X3))),s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))),
  file('thm.measure.CLOSED_CDI_INCREASING','thm.measure.CLOSED_CDI_INCREASING')).
fof(f8926,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(subsumption_resolution,[],[f8918,f119])).
fof(f119,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))))),
  inference(cnf_transformation,[],[f76])).
fof(f8918,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))))),
  inference(resolution,[],[f2913,f257])).
fof(f257,plain,(
  sP0(sK2,sK3)),
  inference(resolution,[],[f253,f169])).
fof(f169,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X9] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X6] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | (s('type.num.num',sK5(X6,X1,X0)) != s('type.num.num',sK6(X6,X1,X0)) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',sK5(X6,X1,X0)))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',sK6(X6,X1,X0)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK7(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),sK7(X1,X0)))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),sK8(X1,X0)),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f104])).
fof(f104,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X9] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X9),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X9))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X6] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X7,X8] : (s('type.num.num',X7) != s('type.num.num',X8) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',X7))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X6),s('type.num.num',X8))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X6),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X5] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X5))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(rectify,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & (~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP1(X0,X1)))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))) & ((~p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ? [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | ~sP0(X0,X1) | ? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) = s('type.num.num',X4) | p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | sP1(X0,X1)))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : (sP1(X0,X1) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & sP0(X0,X1) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f253,plain,(
  sP1(sK2,sK3)),
  inference(resolution,[],[f183,f118])).
fof(f118,plain,(
  p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),sK3))))),
  inference(cnf_transformation,[],[f76])).
fof(f183,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) | sP1(X0,X1)) & (~sP1(X0,X1) | p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))),
  inference(nnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> sP1(X0,X1))),
  inference(definition_folding,[],[f67,f74,f73])).
fof(f73,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f67,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ? [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) & ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) & ! [X6] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (s('type.num.num',X3) != s('type.num.num',X4) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) & ! [X7] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X7),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.DIFF_2'(s(fun(X0,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))),s(fun(X0,bool),X7))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X5] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) & ! [X6] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) & ! [X2] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ! [X3,X4] : (~s('type.num.num',X3) = s('type.num.num',X4) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X4)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.measure.closed_cdi_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))) <=> (p(s(bool,'const.measure.subset_class_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))) & ! [X18] : (p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X18),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.DIFF_2'(s(fun(X6,bool),'const.measure.space_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))),s(fun(X6,bool),X18))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) & ! [X8] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7))))))) & ! [X8] : ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))) & ! [X19,X9] : (~s('type.num.num',X9) = s('type.num.num',X19) => p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X19))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9)))))))) => p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X6,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X6,bool),fun(fun(X6,bool),bool)),X7)))))))))),
  file('thm.measure.CLOSED_CDI_INCREASING','thm.measure.closed_cdi_def')).
fof(f2913,plain,(
  ( ! [X0] : (~sP0(sK2,X0) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0))))))) )),
  inference(subsumption_resolution,[],[f2912,f121])).
fof(f121,plain,(
  ( ! [X3] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num',X3))),s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f2912,plain,(
  ( ! [X0] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num',sK9(sK4,X0,sK2)))),s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9(sK4,X0,sK2))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0)))))))) | ~sP0(sK2,X0)) )),
  inference(trivial_inequality_removal,[],[f2911])).
fof(f2911,plain,(
  ( ! [X0] : (s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.pred_set.EMPTY_0') | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num',sK9(sK4,X0,sK2)))),s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9(sK4,X0,sK2))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(sK2,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(sK2,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK2,bool)),sK4),s(fun(fun('type.num.num',fun(sK2,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK2,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(sK2,bool),fun(fun(sK2,bool),bool)),X0)))))))) | ~sP0(sK2,X0)) )),
  inference(superposition,[],[f178,f120])).
fof(f120,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),happ(s(fun('type.num.num',fun(sK2,bool)),sK4),s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f76])).
fof(f178,plain,(
  ( ! [X4,X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num',sK9(X4,X1,X0)))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9(X4,X1,X0))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num',sK9(X4,X1,X0)))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9(X4,X1,X0))))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & ((p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X0)),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X0)),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X0)),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X0)),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP0(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f107])).
fof(f107,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | ! [X4] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.|48|_0'))) | ? [X5] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num',X5))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X4),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & (? [X2] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.|48|_0'))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP0(X0,X1)))),
  inference(rectify,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) | s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) | ? [X6] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) | p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & (? [X5] : (p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1)))))))) & s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.|48|_0'))) & ! [X6] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num',X6))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) & ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),'const.pred_set.BIGUNION_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X5),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))),s(fun(fun(X0,bool),bool),'const.measure.subsets_1'(s('type.pair.prod'(fun(X0,bool),fun(fun(X0,bool),bool)),X1))))))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f73])).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 140
% Passive clauses: 931
% Generated clauses: 8595
% Final active clauses: 126
% Final passive clauses: 641
% Input formulas: 26
% Initial clauses: 86
% 
% Duplicate literals: 454
% Trivial inequalities: 159
% Fw subsumption resolutions: 1396
% Fw demodulations: 1056
% Bw demodulations: 14
% 
% Simple tautologies: 250
% Equational tautologies: 19
% Forward subsumptions: 3652
% 
% Binary resolution: 339
% Forward superposition: 2617
% Backward superposition: 2201
% Self superposition: 69
% Equality factoring: 43
% Equality resolution: 27
% 
% Split clauses: 430
% Split components: 873
% SAT solver clauses: 830
% SAT solver unit clauses: 17
% SAT solver binary clauses: 79
% SAT solver learnt clauses: 1
% 
% Sat splits: 430
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 828
% TWLsolver calls for satisfiability: 162
% 
% Memory used [KB]: 4861
% Time elapsed: 0.221 s
% ------------------------------
% ------------------------------
% Success in time 0.274 s
