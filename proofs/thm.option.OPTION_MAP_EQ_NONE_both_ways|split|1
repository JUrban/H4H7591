Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f279,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f277,f270,f50,f82,f80,f51,f83,f81])).
fof(f81,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | $spl1),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK2) | $spl3),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK2) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f51,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK2) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2)))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  (s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2)) & (s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f34])).
fof(f34,plain,(
  ? [X0,X1,X2,X3] : ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X2)) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X2)))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ? [X0,X1,X2,X3] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2))) <~> s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X2))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1,X2,X3] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2))) <=> s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X2))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2))) <=> s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),X8))) <=> s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),X8))) <=> s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X8))),
  file('thm.option.OPTION_MAP_EQ_NONE_both_ways|split|1','thm.option.OPTION_MAP_EQ_NONE_both_ways|split|1')).
fof(f80,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | $spl0),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f82,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl2),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f50,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2)))),
  inference(cnf_transformation,[],[f35])).
fof(f270,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f265])).
fof(f265,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | ($spl1 | $spl2)),
  inference(superposition,[],[f109,f254])).
fof(f254,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(sK1,X0),X1),s('type.option.option'(sK1),'const.option.NONE_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f253,f82])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(sK1,X0),X1),s('type.option.option'(sK1),sK2)))) ) | $spl2),
  inference(trivial_inequality_removal,[],[f251])).
fof(f251,plain,(
  ( ! [X0,X1] : (s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.NONE_0') | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(sK1,X0),X1),s('type.option.option'(sK1),sK2)))) ) | $spl2),
  inference(superposition,[],[f77,f82])).
fof(f77,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X3) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) & (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X3) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3)))))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) <=> s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) <=> s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7,X6] : ! [X9,X8] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X6,X7),X9),s('type.option.option'(X6),X8))) <=> s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X8))),
  file('thm.option.OPTION_MAP_EQ_NONE_both_ways|split|1','thm.option.OPTION_MAP_EQ_NONE')).
fof(f109,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f81,f82])).
fof(f277,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f276,f83])).
fof(f276,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl0),
  inference(trivial_inequality_removal,[],[f272])).
fof(f272,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl0),
  inference(superposition,[],[f76,f80])).
fof(f76,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X3)) )),
  inference(cnf_transformation,[],[f49])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 16
% Passive clauses: 41
% Generated clauses: 211
% Final active clauses: 12
% Final passive clauses: 16
% Input formulas: 14
% Initial clauses: 28
% 
% Duplicate literals: 38
% Trivial inequalities: 8
% Fw subsumption resolutions: 1
% Fw demodulations: 4
% 
% Simple tautologies: 29
% Equational tautologies: 15
% Forward subsumptions: 66
% 
% Binary resolution: 3
% Forward superposition: 34
% Backward superposition: 36
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 1
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 16
% SAT solver unit clauses: 5
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 767
% Time elapsed: 0.015 s
% ------------------------------
% ------------------------------
% Success in time 0.017 s
