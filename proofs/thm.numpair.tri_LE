Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.numpair
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.numpair
% SZS output start Proof for thm.numpair
fof(f1547,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1537,f221,f228,f291,f227,f826,f828,f398,f400,f861,f389,f393,f223,f231,f230,f528,f49,f52,f50,f61,f446,f1526,f881,f721,f723,f241,f1444,f277,f226,f1404,f1489])).
fof(f1489,plain,(
  $false | ($spl7 | $spl38)),
  inference(subsumption_resolution,[],[f1455,f73])).
fof(f73,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(resolution,[],[f72,f46])).
fof(f46,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f32,f33])).
fof(f33,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.numpair.tri_LE',aHL_BOOL_CASES)).
fof(f32,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.numpair.tri_LE',aHL_FALSITY)).
fof(f72,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(equality_resolution,[],[f39])).
fof(f39,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num',X6) = s('type.num.num',X7)))),
  file('thm.numpair.tri_LE','thm.arithmetic.LESS_OR_EQ')).
fof(f1455,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK0))) | ($spl7 | $spl38)),
  inference(backward_demodulation,[],[f828,f228])).
fof(f1404,plain,(
  $false | ($spl39 | $spl46)),
  inference(subsumption_resolution,[],[f1402,f827])).
fof(f827,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl39),
  inference(cnf_transformation,[],[f827_D])).
fof(f827_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f1402,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl46),
  inference(equality_resolution,[],[f1229])).
fof(f1229,plain,(
  ( ! [X2] : (s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.numpair.tri_1'(s('type.num.num',X2))) | s('type.num.num',sK1) = s('type.num.num',X2)) ) | $spl46),
  inference(superposition,[],[f40,f1219])).
fof(f1219,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) | $spl46),
  inference(cnf_transformation,[],[f1219_D])).
fof(f1219_D,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f40,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) != s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : ((s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) != s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : (s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : (s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.numpair.tri_LE','thm.numpair.tri_|49||49|')).
fof(f226,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f277,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(trivial_inequality_removal,[],[f271])).
fof(f271,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f229,f44])).
fof(f44,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f33,f33])).
fof(f229,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | $spl9),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f1444,plain,(
  $false | ($spl8 | $spl32 | $spl47)),
  inference(subsumption_resolution,[],[f1443,f32])).
fof(f1443,plain,(
  p(s(bool,'F_0')) | ($spl8 | $spl32 | $spl47)),
  inference(forward_demodulation,[],[f1442,f723])).
fof(f1442,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | ($spl8 | $spl47)),
  inference(subsumption_resolution,[],[f1441,f1218])).
fof(f1218,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) | $spl47),
  inference(cnf_transformation,[],[f1218_D])).
fof(f1218_D,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f1441,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl8),
  inference(subsumption_resolution,[],[f1431,f30])).
fof(f30,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.numpair.tri_LE',aHL_TRUTH)).
fof(f1431,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl8),
  inference(superposition,[],[f319,f230])).
fof(f319,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))) | s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(superposition,[],[f37,f36])).
fof(f36,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X7))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6)))))),
  file('thm.numpair.tri_LE','thm.numpair.tri_LT')).
fof(f37,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f241,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl14),
  inference(cnf_transformation,[],[f241_D])).
fof(f241_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f723,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl32),
  inference(cnf_transformation,[],[f723_D])).
fof(f723_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f721,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl27),
  inference(duplicate_literal_removal,[],[f665])).
fof(f665,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl27),
  inference(superposition,[],[f469,f33])).
fof(f469,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl27),
  inference(resolution,[],[f400,f137])).
fof(f137,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f30,f44])).
fof(f881,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl40),
  inference(cnf_transformation,[],[f881_D])).
fof(f881_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1526,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl26),
  inference(resolution,[],[f399,f38])).
fof(f38,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f399,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl26),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f446,plain,(
  $false | ($spl3 | $spl14)),
  inference(trivial_inequality_removal,[],[f438])).
fof(f438,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl3 | $spl14)),
  inference(superposition,[],[f52,f241])).
fof(f61,plain,(
  $false | $spl0),
  inference(resolution,[],[f58,f30])).
fof(f58,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl0),
  inference(superposition,[],[f32,f50])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f52,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f49,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f33])).
fof(f528,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl8)),
  inference(duplicate_literal_removal,[],[f511])).
fof(f511,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl8)),
  inference(superposition,[],[f230,f226])).
fof(f230,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | $spl8),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f231,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl10),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f223,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f29,f44])).
fof(f29,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f21])).
fof(f21,plain,(
  ? [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X7)))))),
  file('thm.numpair.tri_LE','thm.numpair.tri_LE')).
fof(f393,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | $spl20),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f389,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f344])).
fof(f344,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl4),
  inference(superposition,[],[f226,f33])).
fof(f861,plain,(
  $false | ($spl3 | $spl20 | $spl38)),
  inference(subsumption_resolution,[],[f860,f52])).
fof(f860,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f840,f73])).
fof(f840,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) | ($spl20 | $spl38)),
  inference(backward_demodulation,[],[f828,f393])).
fof(f400,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | $spl27),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f398,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl4),
  inference(subsumption_resolution,[],[f369,f46])).
fof(f369,plain,(
  ( ! [X1] : (p(s(bool,X1)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl4),
  inference(superposition,[],[f305,f226])).
fof(f305,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(superposition,[],[f38,f36])).
fof(f828,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl38),
  inference(cnf_transformation,[],[f828_D])).
fof(f828_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f826,plain,(
  ( ! [X0] : (s('type.num.num',sK0) = s('type.num.num',sK1) | s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl27)),
  inference(subsumption_resolution,[],[f825,f30])).
fof(f825,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num',sK1) | s(bool,'T_0') = s(bool,X0)) ) | ($spl6 | $spl27)),
  inference(forward_demodulation,[],[f824,f227])).
fof(f824,plain,(
  ( ! [X0] : (s('type.num.num',sK0) = s('type.num.num',sK1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl27),
  inference(subsumption_resolution,[],[f812,f46])).
fof(f812,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s('type.num.num',sK0) = s('type.num.num',sK1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl27),
  inference(superposition,[],[f37,f469])).
fof(f227,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl6),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f291,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl10),
  inference(equality_resolution,[],[f231])).
fof(f228,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl7),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f221,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f29,f44])).
fof(f1537,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',sK1))) | $spl40),
  inference(resolution,[],[f881,f46])).
% SZS output end Proof for thm.numpair
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 77
% Passive clauses: 266
% Generated clauses: 1552
% Final active clauses: 26
% Final passive clauses: 66
% Input formulas: 10
% Initial clauses: 14
% 
% Duplicate literals: 141
% Trivial inequalities: 23
% Fw subsumption resolutions: 127
% Fw demodulations: 165
% Bw demodulations: 31
% 
% Simple tautologies: 50
% Equational tautologies: 21
% Forward subsumptions: 670
% 
% Binary resolution: 36
% Forward superposition: 436
% Backward superposition: 407
% Self superposition: 36
% Equality factoring: 34
% Equality resolution: 7
% 
% Split clauses: 56
% Split components: 115
% SAT solver clauses: 126
% SAT solver unit clauses: 12
% SAT solver binary clauses: 42
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 56
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 119
% TWLsolver calls for satisfiability: 34
% 
% Memory used [KB]: 1151
% Time elapsed: 0.038 s
% ------------------------------
% ------------------------------
% Success in time 0.039 s
