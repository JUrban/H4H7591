Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (53320)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 141
% Passive clauses: 1413
% Generated clauses: 35660
% Final active clauses: 135
% Final passive clauses: 1155
% Input formulas: 23
% Initial clauses: 41
% 
% Duplicate literals: 2929
% Trivial inequalities: 56
% Fw subsumption resolutions: 4339
% Fw demodulations: 5960
% Bw demodulations: 3
% 
% Simple tautologies: 309
% Equational tautologies: 41
% Forward subsumptions: 14222
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 61
% Forward superposition: 11131
% Backward superposition: 10538
% Self superposition: 252
% Equality factoring: 118
% Equality resolution: 5
% 
% Split clauses: 1606
% Split components: 3217
% SAT solver clauses: 2642
% SAT solver unit clauses: 6
% SAT solver binary clauses: 47
% 
% Sat splits: 1606
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2642
% TWLsolver calls for satisfiability: 133
% 
% Memory used [KB]: 17014
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (53329)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 141
% Passive clauses: 1116
% Generated clauses: 9352
% Final active clauses: 128
% Final passive clauses: 916
% Input formulas: 23
% Initial clauses: 41
% 
% Duplicate literals: 710
% Trivial inequalities: 69
% Fw subsumption resolutions: 508
% Fw demodulations: 358
% Bw demodulations: 62
% Condensations: 660
% Global subsumptions: 4
% 
% Simple tautologies: 287
% Equational tautologies: 23
% Forward subsumptions: 3929
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 99
% Forward superposition: 3507
% Backward superposition: 2090
% Self superposition: 79
% Equality factoring: 48
% Equality resolution: 1
% 
% Split clauses: 106
% Split components: 217
% SAT solver clauses: 1705
% SAT solver unit clauses: 50
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 8
% 
% Sat splits: 106
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 1689
% TWLsolver calls for satisfiability: 247
% 
% Memory used [KB]: 11897
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% (53337)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 392
% Passive clauses: 3361
% Generated clauses: 144518
% Final active clauses: 147
% Final passive clauses: 816
% Input formulas: 23
% Initial clauses: 41
% Discarded non-redundant clauses: 357
% 
% Duplicate literals: 8246
% Trivial inequalities: 1068
% Fw subsumption resolutions: 14774
% Fw demodulations: 15562
% Bw demodulations: 1463
% Condensations: 18084
% Global subsumptions: 576
% 
% Simple tautologies: 1326
% Equational tautologies: 477
% Forward subsumptions: 79082
% Fw demodulations to eq. taut.: 30
% Bw demodulations to eq. taut.: 171
% 
% Unit resulting resolution: 1666
% Forward superposition: 44799
% Backward superposition: 34263
% Self superposition: 832
% Equality factoring: 427
% Equality resolution: 67
% 
% Split clauses: 268
% Split components: 542
% SAT solver clauses: 5059
% SAT solver unit clauses: 52
% SAT solver binary clauses: 369
% 
% Sat splits: 268
% Sat splitting refutations: 584
% 
% Memory used [KB]: 74838
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f690,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f120,f126,f142,f325,f329,f130,f128,f688])).
fof(f688,plain,(
  $false | $spl5),
  inference(subsumption_resolution,[],[f684,f108])).
fof(f108,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X17] : ! [X9] : s('type.list.list'(X17),X9) = s('type.list.list'(X17),'const.list.APPEND_2'(s('type.list.list'(X17),'const.list.NIL_0'),s('type.list.list'(X17),X9)))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.rich_list.APPEND_NIL|split|1')).
fof(f684,plain,(
  s('type.list.list'(sK0),sK1('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK1('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))))) | $spl5),
  inference(superposition,[],[f342,f110])).
fof(f110,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X19,X20] : s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20))) = s('type.list.list'(X6),happ(s(fun('type.list.list'(X6),'type.list.list'(X6)),happ(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'),s('type.list.list'(X6),X19))),s('type.list.list'(X6),X20)))),
  file('thm.rich_list.MONOID_APPEND_NIL','ARITY_0_2_const.list.APPEND')).
fof(f342,plain,(
  s('type.list.list'(sK0),sK1('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0'))),s('type.list.list'(sK0),sK1('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))))) | $spl5),
  inference(resolution,[],[f130,f112])).
fof(f112,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | s(X1,sK1(X3,X2,X1,X0)) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,sK1(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) & (s(X1,sK1(X3,X2,X1,X0)) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,sK1(X3,X2,X1,X0)))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1])],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X5)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(rectify,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) | ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))) | p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))))))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X1,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X1,X1),happ(s(fun(X0,fun(X1,X1)),X2),s(X0,X3))),s(X1,X4))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X17] : ! [X14,X18] : (p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X6,fun(X17,X17)),X14),s(X6,X18)))) <=> ! [X8] : s(X17,X8) = s(X17,happ(s(fun(X17,X17),happ(s(fun(X6,fun(X17,X17)),X14),s(X6,X18))),s(X17,X8))))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.operator.LEFT_ID_DEF')).
fof(f128,plain,(
  ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | $spl3),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f130,plain,(
  ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | $spl5),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f329,plain,(
  ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | $spl0),
  inference(subsumption_resolution,[],[f328,f118])).
fof(f118,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f82])).
fof(f82,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X8] : (s(X6,X8) = s(X6,X8) <=> p(s(bool,'T_0')))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.bool.REFL_CLAUSE')).
fof(f328,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | $spl0),
  inference(forward_demodulation,[],[f327,f154])).
fof(f154,plain,(
  s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | $spl0),
  inference(subsumption_resolution,[],[f149,f99])).
fof(f99,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.MONOID_APPEND_NIL',aHL_FALSITY)).
fof(f149,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))) | $spl0),
  inference(superposition,[],[f125,f117])).
fof(f117,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.MONOID_APPEND_NIL',aHL_BOOL_CASES)).
fof(f125,plain,(
  p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0')))) | $spl0),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0')))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f327,plain,(
  ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))))),
  inference(subsumption_resolution,[],[f223,f99])).
fof(f223,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))))),
  inference(superposition,[],[f105,f131])).
fof(f131,plain,(
  s(bool,'F_0') = s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(subsumption_resolution,[],[f123,f118])).
fof(f123,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(superposition,[],[f79,f117])).
fof(f79,plain,(
  ~p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ~p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f53])).
fof(f53,plain,(
  ? [X0] : ~p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0] : p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(X0),fun('type.list.list'(X0),'type.list.list'(X0))),'const.list.APPEND_0'),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'),s('type.list.list'(X6),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.operator.MONOID_2'(s(fun('type.list.list'(X6),fun('type.list.list'(X6),'type.list.list'(X6))),'const.list.APPEND_0'),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.rich_list.MONOID_APPEND_NIL')).
fof(f105,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))))) & (~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))))) & ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) | ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))) | p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X14,X18] : (p(s(bool,'const.operator.MONOID_2'(s(fun(X6,fun(X6,X6)),X14),s(X6,X18)))) <=> (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X14)))) & p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X6,fun(X6,X6)),X14),s(X6,X18)))) & p(s(bool,'const.operator.LEFT_ID_2'(s(fun(X6,fun(X6,X6)),X14),s(X6,X18))))))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.operator.MONOID_DEF')).
fof(f325,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f321,f107])).
fof(f107,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X9] : s('type.list.list'(X6),X9) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.list.APPEND_NIL')).
fof(f321,plain,(
  s('type.list.list'(sK0),sK2('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl3),
  inference(superposition,[],[f212,f110])).
fof(f212,plain,(
  s('type.list.list'(sK0),sK2('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK2('const.list.NIL_0','const.list.APPEND_0','type.list.list'(sK0),'type.list.list'(sK0))))),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl3),
  inference(resolution,[],[f128,f114])).
fof(f114,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) | s(X1,sK2(X3,X2,X1,X0)) != s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,sK2(X3,X2,X1,X0)))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X5))),s(X0,X3)))) & (s(X1,sK2(X3,X2,X1,X0)) != s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,sK2(X3,X2,X1,X0)))),s(X0,X3))) | p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) | ! [X5] : s(X1,X5) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X5))),s(X0,X3)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X4))),s(X0,X3))) | p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3))))))),
  inference(rectify,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) | ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X4))),s(X0,X3)))) & (? [X4] : s(X1,X4) != s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X4))),s(X0,X3))) | p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3))))))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X4))),s(X0,X3))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X1,fun(X0,X1)),X2),s(X0,X3)))) <=> ! [X4] : s(X1,X4) = s(X1,happ(s(fun(X0,X1),happ(s(fun(X1,fun(X0,X1)),X2),s(X1,X4))),s(X0,X3))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X17,X6] : ! [X14,X18] : (p(s(bool,'const.operator.RIGHT_ID_2'(s(fun(X6,fun(X17,X6)),X14),s(X17,X18)))) <=> ! [X8] : s(X6,X8) = s(X6,happ(s(fun(X17,X6),happ(s(fun(X6,fun(X17,X6)),X14),s(X6,X8))),s(X17,X18))))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.operator.RIGHT_ID_DEF')).
fof(f142,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f141,f109])).
fof(f109,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X10,X11,X13] : s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X10),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X11),s('type.list.list'(X6),X13))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X10),s('type.list.list'(X6),X11))),s('type.list.list'(X6),X13)))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.list.APPEND_ASSOC')).
fof(f141,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f140,f110])).
fof(f140,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f139,f110])).
fof(f139,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))) | $spl1),
  inference(forward_demodulation,[],[f138,f110])).
fof(f138,plain,(
  s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))) | $spl1),
  inference(forward_demodulation,[],[f132,f110])).
fof(f132,plain,(
  s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))) != s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK3('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),sK4('const.list.APPEND_0','type.list.list'(sK0))))),s('type.list.list'(sK0),sK5('const.list.APPEND_0','type.list.list'(sK0))))))) | $spl1),
  inference(resolution,[],[f126,f116])).
fof(f116,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK3(X1,X0)))),s(X0,sK4(X1,X0)))))),s(X0,sK5(X1,X0)))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK3(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK5(X1,X0))))))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X5,X6,X7] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,X7))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))),s(X0,X7)))) & (s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK3(X1,X0)))),s(X0,sK4(X1,X0)))))),s(X0,sK5(X1,X0)))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK3(X1,X0)))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,sK4(X1,X0)))),s(X0,sK5(X1,X0)))))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4,sK5])],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X5,X6,X7] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X6))),s(X0,X7))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X5))),s(X0,X6))))),s(X0,X7)))) & (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(rectify,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) | ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4)))) & (? [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) != s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))) | p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1))))))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) <=> ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X0,fun(X0,X0)),X1)))) <=> ! [X2,X3,X4] : s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X3))),s(X0,X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,happ(s(fun(X0,X0),happ(s(fun(X0,fun(X0,X0)),X1),s(X0,X2))),s(X0,X3))))),s(X0,X4))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X14] : (p(s(bool,'const.operator.ASSOC_1'(s(fun(X6,fun(X6,X6)),X14)))) <=> ! [X8,X15,X16] : s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X14),s(X6,X8))),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X14),s(X6,X15))),s(X6,X16))))) = s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X14),s(X6,happ(s(fun(X6,X6),happ(s(fun(X6,fun(X6,X6)),X14),s(X6,X8))),s(X6,X15))))),s(X6,X16))))),
  file('thm.rich_list.MONOID_APPEND_NIL','thm.operator.ASSOC_DEF')).
fof(f126,plain,(
  ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0')))) | $spl1),
  inference(cnf_transformation,[],[f126_D])).
fof(f126_D,plain,(
  ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0')))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f120,plain,(
  ~p(s(bool,'const.operator.LEFT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.RIGHT_ID_2'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'),s('type.list.list'(sK0),'const.list.NIL_0')))) | ~p(s(bool,'const.operator.ASSOC_1'(s(fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.list.list'(sK0))),'const.list.APPEND_0'))))),
  inference(resolution,[],[f79,f105])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 97
% Generated clauses: 569
% Final active clauses: 34
% Final passive clauses: 72
% Input formulas: 23
% Initial clauses: 39
% 
% Selected by SInE selection: 21
% SInE iterations: 1
% 
% Duplicate literals: 3
% Trivial inequalities: 4
% Fw subsumption resolutions: 23
% Fw demodulations: 176
% Bw demodulations: 5
% 
% Simple tautologies: 27
% Equational tautologies: 1
% Forward subsumptions: 244
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 30
% Forward superposition: 76
% Backward superposition: 246
% Self superposition: 1
% 
% Split clauses: 2
% Split components: 5
% SAT solver clauses: 6
% SAT solver unit clauses: 3
% 
% Sat splits: 2
% Sat splitting refutations: 3
% 
% Memory used [KB]: 1663
% Time elapsed: 0.018 s
% ------------------------------
% ------------------------------
% Success in time 11.732 s
