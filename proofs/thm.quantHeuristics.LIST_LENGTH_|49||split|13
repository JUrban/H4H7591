Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (73922)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 376
% Passive clauses: 5373
% Generated clauses: 29702
% Final active clauses: 255
% Final passive clauses: 4391
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 600
% Trivial inequalities: 302
% Fw subsumption resolutions: 1504
% Fw demodulations: 7986
% Bw demodulations: 90
% 
% Simple tautologies: 113
% Equational tautologies: 49
% Forward subsumptions: 13613
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 14
% 
% Binary resolution: 171
% Factoring: 1
% Forward superposition: 9521
% Backward superposition: 9003
% Self superposition: 156
% Equality factoring: 92
% Equality resolution: 18
% 
% Split clauses: 237
% Split components: 474
% SAT solver clauses: 544
% SAT solver unit clauses: 1
% SAT solver binary clauses: 45
% 
% Sat splits: 237
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 544
% TWLsolver calls for satisfiability: 90
% 
% Memory used [KB]: 17654
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (74052)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 260
% Passive clauses: 2677
% Generated clauses: 19288
% Final active clauses: 193
% Final passive clauses: 1969
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 72
% Trivial inequalities: 260
% Fw subsumption resolutions: 391
% Fw demodulations: 4995
% Bw demodulations: 506
% Condensations: 14
% Global subsumptions: 1
% 
% Simple tautologies: 17
% Equational tautologies: 14
% Forward subsumptions: 7450
% Fw demodulations to eq. taut.: 4
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 173
% Factoring: 1
% Forward superposition: 5087
% Backward superposition: 4761
% Self superposition: 87
% Equality factoring: 18
% Equality resolution: 19
% 
% Split clauses: 39
% Split components: 78
% SAT solver clauses: 3461
% SAT solver unit clauses: 144
% SAT solver binary clauses: 64
% SAT solver learnt clauses: 2
% 
% Sat splits: 39
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 3457
% TWLsolver calls for satisfiability: 668
% 
% Memory used [KB]: 22259
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f23556,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f208,f316,f315,f207,f318,f206,f320,f314,f459,f464,f462,f494,f496,f540,f626,f839,f853,f851,f840,f854,f841,f857,f843,f858,f845,f859,f846,f861,f847,f864,f862,f848,f868,f866,f1631,f1637,f1635,f1633,f1641,f1639,f2619,f2035,f2629,f1454,f856,f2632,f2891,f2892,f2995,f4889,f4925,f4923,f5085,f5125,f5123,f5261,f5311,f5309,f5679,f5668,f5669,f5691,f5683,f5681,f5839,f5828,f5829,f5851,f5843,f5841,f7028,f7032,f7033,f7037,f7038,f7040,f7043,f7047,f7045,f7048,f7049,f7050,f7052,f7055,f7056,f7057,f7058,f7062,f7063,f7065,f7066,f7067,f7069,f7072,f7073,f7035,f7074,f7076,f7077,f7078,f7079,f7080,f7030,f8017,f8021,f8023,f8025,f8028,f8032,f8030,f8061,f8062,f8019,f9430,f9536,f9534,f11263,f11267,f11265,f11272,f11276,f11278,f11280,f11274,f12651,f12653,f12654,f12655,f12656,f12657,f12710,f12728,f12268,f12739,f12737,f12908,f12912,f12910,f12916,f12920,f12918,f15075,f15733,f15737,f15735,f16055,f16128,f16549,f16560,f16558,f16550,f16564,f16562,f17091,f17092,f17109,f17118,f17122,f17120,f18114,f18123,f18115,f18125,f18126,f18120,f18131,f18129,f20785,f17107,f20788,f17111,f20771,f20787,f20794,f22624,f22627,f22651,f22625,f22653,f495,f22628,f22803,f22805,f22808,f22807,f22810,f22800,f22816,f22814,f23551,f23554,f23555])).
fof(f23555,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f23553,f19978])).
fof(f19978,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl0),
  inference(backward_demodulation,[],[f19862,f15646])).
fof(f15646,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f15645,f12780])).
fof(f12780,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f12705,f289])).
fof(f289,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK18(X3,X2,X1,X0)),s('type.list.list'(X0),sK19(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19])],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X8,X13,X14] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) <=> ? [X15,X16] : (s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X16))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.LENGTH_EQ_SUM')).
fof(f12705,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f314,f2638])).
fof(f2638,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f2636,f212])).
fof(f212,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f37])).
fof(f37,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|13')).
fof(f2636,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(forward_demodulation,[],[f2635,f1254])).
fof(f1254,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(unit_resulting_resolution,[],[f1142,f239])).
fof(f239,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|18')).
fof(f1142,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1121,f211])).
fof(f211,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f25])).
fof(f25,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.prim_rec.PRE|split|0')).
fof(f1121,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f230,f887])).
fof(f887,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f872,f321])).
fof(f321,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f232,f212])).
fof(f232,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X11] : s('type.num.num',X11) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.MULT_RIGHT_|49|')).
fof(f872,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(unit_resulting_resolution,[],[f321,f240])).
fof(f240,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f230,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|16')).
fof(f2635,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(subsumption_resolution,[],[f2634,f209])).
fof(f209,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13',aHL_TRUTH)).
fof(f2634,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1320,f2617])).
fof(f2617,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2604,f223])).
fof(f223,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X12] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|29')).
fof(f2604,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f346,f887])).
fof(f346,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f300,f296])).
fof(f296,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.GREATER_EQ')).
fof(f300,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|31')).
fof(f1320,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f243,f1254])).
fof(f243,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X12] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|30')).
fof(f15645,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))))) | $spl0),
  inference(forward_demodulation,[],[f15498,f248])).
fof(f248,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X8] : s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X8)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.APPEND|split|0')).
fof(f15498,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f12782,f248,f12781,f290])).
fof(f290,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f12781,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f12705,f288])).
fof(f288,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f12782,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f12705,f287])).
fof(f287,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f19862,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(superposition,[],[f14108,f295])).
fof(f295,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X11,X12] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.ADD_SYM')).
fof(f14108,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl0),
  inference(forward_demodulation,[],[f14107,f14105])).
fof(f14105,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))) ) | $spl0),
  inference(forward_demodulation,[],[f13988,f248])).
fof(f13988,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f248,f12782,f265])).
fof(f265,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6] : ! [X8,X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> ? [X20,X9] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X20),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.LENGTH_CONS')).
fof(f14107,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))) ) | $spl0),
  inference(forward_demodulation,[],[f13986,f248])).
fof(f13986,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f248,f12782,f2668])).
fof(f2668,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f2636,f329])).
fof(f329,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(forward_demodulation,[],[f277,f212])).
fof(f277,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14])],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_|49||split|11')).
fof(f23553,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f23552])).
fof(f23552,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl0 | $spl2)),
  inference(superposition,[],[f20469,f264])).
fof(f264,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK5(X2,X1,X0)),s('type.list.list'(X0),sK6(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f178])).
fof(f20469,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK6(sK1,sK2,sK0))))) ) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f20159,f316])).
fof(f20159,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f19978,f263])).
fof(f263,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f178])).
fof(f23554,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f23550,f19978])).
fof(f23550,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f20469,f264])).
fof(f23551,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f19978,f20469,f264])).
fof(f22814,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl192),
  inference(cnf_transformation,[],[f22814_D])).
fof(f22814_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f22816,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl195),
  inference(cnf_transformation,[],[f22816_D])).
fof(f22816_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl195),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl195])])).
fof(f22800,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl0),
  inference(superposition,[],[f20088,f12781])).
fof(f20088,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X11,X10))))) ) | $spl0),
  inference(forward_demodulation,[],[f20002,f19978])).
fof(f20002,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X11,X10)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl0),
  inference(backward_demodulation,[],[f19978,f12890])).
fof(f12890,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X11,X10)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl0),
  inference(forward_demodulation,[],[f12797,f12705])).
fof(f12797,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X11,X10))))) ) | $spl0),
  inference(superposition,[],[f263,f12705])).
fof(f22810,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),sK0)))) | $spl190),
  inference(cnf_transformation,[],[f22810_D])).
fof(f22810_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),sK0)))) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f22807,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl189),
  inference(cnf_transformation,[],[f22807_D])).
fof(f22807_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl189),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl189])])).
fof(f22808,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),sK0)))) | $spl0),
  inference(forward_demodulation,[],[f22793,f19978])).
fof(f22793,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),sK0)))) | $spl0),
  inference(superposition,[],[f20088,f12962])).
fof(f12962,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(unit_resulting_resolution,[],[f12705,f286])).
fof(f286,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) => s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) => s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.rich_list.BUTLASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X11,X12,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))) => s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.rich_list.BUTLASTN_2'(s('type.num.num',X11),s('type.list.list'(X6),X8))),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X12),s('type.list.list'(X6),X8))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.rich_list.APPEND_BUTLASTN_DROP')).
fof(f22805,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),sK0)))) | $spl186),
  inference(cnf_transformation,[],[f22805_D])).
fof(f22805_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),sK0)))) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f22803,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),sK0)))) | $spl0),
  inference(forward_demodulation,[],[f22792,f19978])).
fof(f22792,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),sK0)))) | $spl0),
  inference(superposition,[],[f20088,f12780])).
fof(f22628,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl184),
  inference(cnf_transformation,[],[f22628_D])).
fof(f22628_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f495,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(cnf_transformation,[],[f495_D])).
fof(f495_D,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f22653,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f22652])).
fof(f22652,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK17('T_0',X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f22192,f493])).
fof(f493,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f478,f213])).
fof(f213,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13',aHL_FALSITY)).
fof(f478,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f307,f238])).
fof(f238,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13',aHL_BOOL_CASES)).
fof(f307,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X17,X18] : ((p(s(bool,X17)) => p(s(bool,X18))) => ((p(s(bool,X18)) => p(s(bool,X17))) => s(bool,X17) = s(bool,X18)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.bool.IMP_ANTISYM_AX')).
fof(f22192,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,X15)) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK17('T_0',X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f283,f448])).
fof(f448,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f238,f238])).
fof(f283,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f130])).
fof(f130,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6] : ! [X22,X24] : (? [X7] : (p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X24))) <=> (? [X7] : p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X24))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f22625,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl182),
  inference(cnf_transformation,[],[f22625_D])).
fof(f22625_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f22651,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f22650])).
fof(f22650,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK16('T_0',X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f22191,f493])).
fof(f22191,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,X10)) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK16('T_0',X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f281,f448])).
fof(f281,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK16(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f22627,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f22626])).
fof(f22626,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK17('T_0',X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f22086,f493])).
fof(f22086,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,X15)) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK17('T_0',X17,X16))))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f283,f448])).
fof(f22624,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK16('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f22623])).
fof(f22623,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK16('T_0',X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f22085,f493])).
fof(f22085,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,X10)) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK16('T_0',X12,X11))))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f281,f448])).
fof(f20794,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK2,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl180),
  inference(cnf_transformation,[],[f20794_D])).
fof(f20794_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK2,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f20787,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | $spl179),
  inference(cnf_transformation,[],[f20787_D])).
fof(f20787_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) <=> ~$spl179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl179])])).
fof(f20771,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK2,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f20084,f19978])).
fof(f20084,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK20(X5,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,X4))))) ) | $spl0),
  inference(forward_demodulation,[],[f19992,f2200])).
fof(f2200,plain,(
  ( ! [X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f298,f296])).
fof(f298,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X11,X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.LESS_EQ')).
fof(f19992,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK20(X5,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,X4))))) ) | $spl0),
  inference(backward_demodulation,[],[f19978,f12790])).
fof(f12790,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK20(X5,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,X4))))) ) | $spl0),
  inference(superposition,[],[f338,f12705])).
fof(f338,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f296,f291])).
fof(f291,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0))))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)),s('type.list.list'(X0),sK21(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21])],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X6,X7] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(rectify,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))))),
  inference(nnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) <=> ? [X4,X5] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) & s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6] : ! [X12,X11,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X15,X16] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X16)))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LENGTH_LE_PLUS')).
fof(f17111,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl162),
  inference(cnf_transformation,[],[f17111_D])).
fof(f17111_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f20788,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f20768,f19978])).
fof(f20768,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f20084,f12962])).
fof(f17107,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl158),
  inference(cnf_transformation,[],[f17107_D])).
fof(f17107_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f20785,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f20767,f19978])).
fof(f20767,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f20084,f12780])).
fof(f18129,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl174),
  inference(cnf_transformation,[],[f18129_D])).
fof(f18129_D,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f18131,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl177),
  inference(cnf_transformation,[],[f18131_D])).
fof(f18131_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl177),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl177])])).
fof(f18120,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl0),
  inference(superposition,[],[f15626,f12781])).
fof(f15626,plain,(
  ( ! [X66,X67,X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),sK13(X67,'const.arithmetic.EXP_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.ZERO_0')),X66))))) ) | $spl0),
  inference(backward_demodulation,[],[f15625,f9160])).
fof(f9160,plain,(
  ( ! [X66,X67,X65] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),sK13(X67,'const.arithmetic.EXP_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.ZERO_0')),X66)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f9113,f2663])).
fof(f2663,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f322])).
fof(f322,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f233,f212])).
fof(f233,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|11')).
fof(f9113,plain,(
  ( ! [X66,X67,X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),sK13(X67,'const.arithmetic.EXP_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.ZERO_0')),X66))))) )),
  inference(superposition,[],[f2670,f2663])).
fof(f2670,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f2636,f331])).
fof(f331,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f275,f212])).
fof(f275,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK13(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f190])).
fof(f15625,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(forward_demodulation,[],[f15624,f15621])).
fof(f15621,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))) ) | $spl0),
  inference(forward_demodulation,[],[f15506,f248])).
fof(f15506,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f248,f12781,f265])).
fof(f15624,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))) ) | $spl0),
  inference(forward_demodulation,[],[f15504,f248])).
fof(f15504,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))))))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f248,f12781,f2668])).
fof(f18126,plain,(
  ( ! [X30] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl172),
  inference(cnf_transformation,[],[f18126_D])).
fof(f18126_D,plain,(
  ( ! [X30] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f18125,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl171),
  inference(cnf_transformation,[],[f18125_D])).
fof(f18125_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl171),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl171])])).
fof(f18115,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.arithmetic.EXP_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl0),
  inference(superposition,[],[f15626,f12962])).
fof(f18123,plain,(
  ( ! [X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl168),
  inference(cnf_transformation,[],[f18123_D])).
fof(f18123_D,plain,(
  ( ! [X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f18114,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl0),
  inference(superposition,[],[f15626,f12780])).
fof(f17120,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl164),
  inference(cnf_transformation,[],[f17120_D])).
fof(f17120_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f17122,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl167),
  inference(cnf_transformation,[],[f17122_D])).
fof(f17122_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl167),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl167])])).
fof(f17118,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f17097,f2614])).
fof(f2614,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f2579,f2577])).
fof(f2577,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f346,f212])).
fof(f2579,plain,(
  ( ! [X2] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f346,f1227])).
fof(f1227,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f234,f887])).
fof(f234,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|14')).
fof(f17097,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f12790,f12781])).
fof(f17109,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl161),
  inference(cnf_transformation,[],[f17109_D])).
fof(f17109_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl161])])).
fof(f17092,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),'const.rich_list.BUTLASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK2)))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f12790,f12962])).
fof(f17091,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.APPEND_2'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f12790,f12780])).
fof(f16562,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl154),
  inference(cnf_transformation,[],[f16562_D])).
fof(f16562_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f16564,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl157),
  inference(cnf_transformation,[],[f16564_D])).
fof(f16564_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl157),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl157])])).
fof(f16550,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl0),
  inference(superposition,[],[f12788,f12781])).
fof(f12788,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,X1,X0))))) ) | $spl0),
  inference(superposition,[],[f287,f12705])).
fof(f16558,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl150),
  inference(cnf_transformation,[],[f16558_D])).
fof(f16558_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f16560,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl153),
  inference(cnf_transformation,[],[f16560_D])).
fof(f16560_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl153),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl153])])).
fof(f16549,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK18('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0),sK0)))) | $spl0),
  inference(superposition,[],[f12788,f12782])).
fof(f16128,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f16054,f14536])).
fof(f14536,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,sK2,sK0)))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f14424,f263])).
fof(f14424,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f14306,f12705])).
fof(f14306,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl6),
  inference(superposition,[],[f12452,f295])).
fof(f12452,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl6),
  inference(forward_demodulation,[],[f12451,f11053])).
fof(f11053,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(forward_demodulation,[],[f10980,f248])).
fof(f10980,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f320,f248,f265])).
fof(f12451,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))) ) | $spl6),
  inference(forward_demodulation,[],[f12388,f248])).
fof(f12388,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f320,f248,f2668])).
fof(f16054,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,sK2,sK0)))) | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f14535,f316])).
fof(f14535,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5(sK1,sK2,sK0)),s('type.list.list'(sK0),sK6(sK1,sK2,sK0)))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f14424,f264])).
fof(f16055,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f14536,f14535,f316])).
fof(f15735,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)) | $spl146),
  inference(cnf_transformation,[],[f15735_D])).
fof(f15735_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f15737,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl149),
  inference(cnf_transformation,[],[f15737_D])).
fof(f15737_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f15733,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)) | $spl0),
  inference(forward_demodulation,[],[f15527,f2433])).
fof(f2433,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))) )),
  inference(forward_demodulation,[],[f2420,f2418])).
fof(f2418,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f299,f212])).
fof(f299,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X12,X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|25')).
fof(f2420,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f299,f1227])).
fof(f15527,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK1,sK2,sK0)) | $spl0),
  inference(superposition,[],[f2786,f12781])).
fof(f2786,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f2665,f2432])).
fof(f2432,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2394,f2392])).
fof(f2392,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f299,f212])).
fof(f2394,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f299,f1227])).
fof(f2665,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f2636,f326])).
fof(f326,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f259,f212])).
fof(f259,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f15075,plain,(
  $false | ($spl6 | $spl115)),
  inference(subsumption_resolution,[],[f15074,f213])).
fof(f15074,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl115)),
  inference(forward_demodulation,[],[f15073,f8260])).
fof(f8260,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl115),
  inference(unit_resulting_resolution,[],[f213,f8030,f307])).
fof(f15073,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f15072,f2647])).
fof(f2647,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f224])).
fof(f224,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.ADD|split|0')).
fof(f15072,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f15050,f295])).
fof(f15050,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1)))) | $spl6),
  inference(superposition,[],[f13429,f2705])).
fof(f2705,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(backward_demodulation,[],[f2636,f1655])).
fof(f1655,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f1651,f248])).
fof(f1651,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f248,f250])).
fof(f250,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.LENGTH_NIL_SYM')).
fof(f13429,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))),s('type.num.num',sK1))))) ) | $spl6),
  inference(backward_demodulation,[],[f13428,f11553])).
fof(f11553,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0))))),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f11507,f248])).
fof(f11507,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0))))))),s('type.num.num',sK1))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f320,f248,f336])).
fof(f336,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(backward_demodulation,[],[f296,f268])).
fof(f268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8])],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(rectify,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X12,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> ? [X15,X16] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LENGTH_LE_NUM')).
fof(f13428,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0)))))) ) | $spl6),
  inference(forward_demodulation,[],[f13427,f2662])).
fof(f2662,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f2636,f321])).
fof(f13427,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl6),
  inference(forward_demodulation,[],[f13371,f248])).
fof(f13371,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),X0)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f320,f2662,f248,f290])).
fof(f12918,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl143),
  inference(cnf_transformation,[],[f12918_D])).
fof(f12918_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl143),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl143])])).
fof(f12920,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl144),
  inference(cnf_transformation,[],[f12920_D])).
fof(f12920_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f12916,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f12875,f12705])).
fof(f12875,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f7379,f12705])).
fof(f7379,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,X0,sK0))))) ) | $spl6),
  inference(superposition,[],[f334,f320])).
fof(f334,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f296,f266])).
fof(f266,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f181])).
fof(f12910,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl139),
  inference(cnf_transformation,[],[f12910_D])).
fof(f12910_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f12912,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl140),
  inference(cnf_transformation,[],[f12912_D])).
fof(f12912_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f12908,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f12871,f12705])).
fof(f12871,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f6629,f12705])).
fof(f6629,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(X0,sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f263,f320])).
fof(f12737,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl134),
  inference(cnf_transformation,[],[f12737_D])).
fof(f12737_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f12739,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl137),
  inference(cnf_transformation,[],[f12739_D])).
fof(f12739_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl137),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl137])])).
fof(f12268,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | $spl129),
  inference(equality_factoring,[],[f11332])).
fof(f11332,plain,(
  ( ! [X9] : (s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X9)) ) | $spl129),
  inference(subsumption_resolution,[],[f11319,f213])).
fof(f11319,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | s(bool,X9) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X9)) ) | $spl129),
  inference(superposition,[],[f493,f11293])).
fof(f11293,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl129),
  inference(unit_resulting_resolution,[],[f213,f11274,f307])).
fof(f12728,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12709,f320])).
fof(f12709,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f318,f316])).
fof(f12710,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f320,f318,f316])).
fof(f12657,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12557,f11066])).
fof(f11066,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f11065,f2672])).
fof(f2672,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(backward_demodulation,[],[f2636,f348])).
fof(f348,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1),
  inference(forward_demodulation,[],[f315,f212])).
fof(f11065,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11064,f320])).
fof(f11064,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f10974,f2662])).
fof(f10974,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f2662,f318,f265])).
fof(f12557,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f295,f12450])).
fof(f12450,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f12449,f11460])).
fof(f11460,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK6(sK1,sK2,sK0))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11359,f248])).
fof(f11359,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK6(sK1,sK2,sK0))))))))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f248,f11139,f265])).
fof(f11139,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6(sK1,sK2,sK0)))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f11065,f263])).
fof(f12449,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK6(sK1,sK2,sK0))))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f12389,f248])).
fof(f12389,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK6(sK1,sK2,sK0))))))))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f11139,f248,f2668])).
fof(f12656,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12556,f11066])).
fof(f12556,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f295,f12450])).
fof(f12655,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12552,f11066])).
fof(f12552,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f12450,f295])).
fof(f12654,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12551,f11066])).
fof(f12551,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl6)),
  inference(superposition,[],[f12450,f295])).
fof(f12653,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12652,f11067])).
fof(f11067,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f11065,f2706])).
fof(f2706,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(backward_demodulation,[],[f2636,f1673])).
fof(f1673,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f348,f311])).
fof(f311,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X12,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num',X11) = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|19')).
fof(f12652,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f12549,f295])).
fof(f12549,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f12450,f312])).
fof(f312,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f204])).
fof(f12651,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f12650,f11067])).
fof(f12650,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f12550,f295])).
fof(f12550,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f12450,f312])).
fof(f11274,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl129),
  inference(cnf_transformation,[],[f11274_D])).
fof(f11274_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f11280,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl132),
  inference(cnf_transformation,[],[f11280_D])).
fof(f11280_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f11278,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11277,f11065])).
fof(f11277,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11234,f2200])).
fof(f11234,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f8026,f11065])).
fof(f8026,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl6),
  inference(forward_demodulation,[],[f7985,f2640])).
fof(f2640,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f216])).
fof(f216,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|1')).
fof(f7985,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',X4)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f7379,f2640])).
fof(f11276,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK0)))) | $spl130),
  inference(cnf_transformation,[],[f11276_D])).
fof(f11276_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK0)))) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f11272,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11271,f11065])).
fof(f11271,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11231,f2200])).
fof(f11231,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f7379,f11065])).
fof(f11265,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl125),
  inference(cnf_transformation,[],[f11265_D])).
fof(f11265_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl125),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl125])])).
fof(f11267,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK3,sK0)))) | $spl126),
  inference(cnf_transformation,[],[f11267_D])).
fof(f11267_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK3,sK0)))) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f11263,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f11227,f11065])).
fof(f11227,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),sK3,sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f6629,f11065])).
fof(f9534,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl120),
  inference(cnf_transformation,[],[f9534_D])).
fof(f9534_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f9536,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl123),
  inference(cnf_transformation,[],[f9536_D])).
fof(f9536_D,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f9430,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl43),
  inference(equality_factoring,[],[f6602])).
fof(f6602,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl43),
  inference(subsumption_resolution,[],[f6588,f213])).
fof(f6588,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl43),
  inference(superposition,[],[f493,f6563])).
fof(f6563,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl43),
  inference(unit_resulting_resolution,[],[f213,f6481,f307])).
fof(f6481,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1658,f2786])).
fof(f1658,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | $spl43),
  inference(unit_resulting_resolution,[],[f1637,f250])).
fof(f8019,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | $spl109),
  inference(cnf_transformation,[],[f8019_D])).
fof(f8019_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) <=> ~$spl109),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl109])])).
fof(f8062,plain,(
  ( ! [X19] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl118),
  inference(cnf_transformation,[],[f8062_D])).
fof(f8062_D,plain,(
  ( ! [X19] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f8061,plain,(
  ( ! [X19] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f8060,f2663])).
fof(f8060,plain,(
  ( ! [X19] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl6),
  inference(forward_demodulation,[],[f8001,f2200])).
fof(f8001,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.ZERO_0')),sK0))))) ) | $spl6),
  inference(superposition,[],[f7379,f2663])).
fof(f8030,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl115),
  inference(cnf_transformation,[],[f8030_D])).
fof(f8030_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl115),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl115])])).
fof(f8032,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl116),
  inference(cnf_transformation,[],[f8032_D])).
fof(f8032_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f8028,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f7987,f320])).
fof(f7987,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(superposition,[],[f7379,f320])).
fof(f8025,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl112),
  inference(cnf_transformation,[],[f8025_D])).
fof(f8025_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f8023,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f8022,f2692])).
fof(f2692,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f2636,f1227])).
fof(f8022,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl6),
  inference(forward_demodulation,[],[f7982,f2200])).
fof(f7982,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl6),
  inference(superposition,[],[f7379,f2692])).
fof(f8021,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl110),
  inference(cnf_transformation,[],[f8021_D])).
fof(f8021_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f8017,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | $spl6),
  inference(forward_demodulation,[],[f8016,f2638])).
fof(f8016,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl6),
  inference(forward_demodulation,[],[f7981,f2200])).
fof(f7981,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl6),
  inference(superposition,[],[f7379,f2638])).
fof(f7030,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl73),
  inference(cnf_transformation,[],[f7030_D])).
fof(f7030_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f7080,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))),sK3,sK0))))) ) | $spl106),
  inference(cnf_transformation,[],[f7080_D])).
fof(f7080_D,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))),sK3,sK0))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f7079,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7026,f2651])).
fof(f2651,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(backward_demodulation,[],[f2636,f231])).
fof(f231,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|9')).
fof(f7026,plain,(
  ( ! [X19] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19)))))),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2651])).
fof(f7078,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18)))))),sK3,sK0))))) ) | $spl104),
  inference(cnf_transformation,[],[f7078_D])).
fof(f7078_D,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18)))))),sK3,sK0))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f7077,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18)))))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7025,f2650])).
fof(f2650,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(backward_demodulation,[],[f2636,f229])).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|10')).
fof(f7025,plain,(
  ( ! [X18] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18)))))),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2650])).
fof(f7076,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl102),
  inference(cnf_transformation,[],[f7076_D])).
fof(f7076_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f7074,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl6),
  inference(forward_demodulation,[],[f7024,f2689])).
fof(f2689,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(backward_demodulation,[],[f2636,f1167])).
fof(f1167,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f231,f212])).
fof(f7024,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f2689])).
fof(f7035,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl77),
  inference(cnf_transformation,[],[f7035_D])).
fof(f7035_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f7073,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) | $spl100),
  inference(cnf_transformation,[],[f7073_D])).
fof(f7073_D,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f7072,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl6),
  inference(forward_demodulation,[],[f7023,f2663])).
fof(f7023,plain,(
  ( ! [X17] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2663])).
fof(f7069,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | $spl98),
  inference(cnf_transformation,[],[f7069_D])).
fof(f7069_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f7067,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl6),
  inference(forward_demodulation,[],[f7021,f1254])).
fof(f7021,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f1254])).
fof(f7066,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),sK3,sK0))))) ) | $spl96),
  inference(cnf_transformation,[],[f7066_D])).
fof(f7066_D,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),sK3,sK0))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f7065,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7020,f2648])).
fof(f2648,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f225])).
fof(f225,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.MULT|split|0')).
fof(f7020,plain,(
  ( ! [X15] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2648])).
fof(f7063,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) | $spl94),
  inference(cnf_transformation,[],[f7063_D])).
fof(f7063_D,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f7062,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7018,f2641])).
fof(f2641,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f217])).
fof(f217,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|4')).
fof(f7018,plain,(
  ( ! [X13] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2641])).
fof(f7058,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK3,sK0))))) ) | $spl92),
  inference(cnf_transformation,[],[f7058_D])).
fof(f7058_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK3,sK0))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f7057,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7015,f2642])).
fof(f2642,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f218])).
fof(f218,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|6')).
fof(f7015,plain,(
  ( ! [X9] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9)),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2642])).
fof(f7056,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK3,sK0))))) ) | $spl90),
  inference(cnf_transformation,[],[f7056_D])).
fof(f7056_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK3,sK0))))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f7055,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7014,f2639])).
fof(f2639,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f215])).
fof(f215,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X21] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num',X21)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f7014,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X8)),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2639])).
fof(f7052,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.num.|48|_0',sK3,sK0)))) | $spl88),
  inference(cnf_transformation,[],[f7052_D])).
fof(f7052_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.num.|48|_0',sK3,sK0)))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f7050,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.num.|48|_0',sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl6),
  inference(forward_demodulation,[],[f7012,f2636])).
fof(f7012,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.num.|48|_0',sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f2636])).
fof(f7049,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')),sK3,sK0))))) ) | $spl86),
  inference(cnf_transformation,[],[f7049_D])).
fof(f7049_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')),sK3,sK0))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f7048,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f7011,f2705])).
fof(f7011,plain,(
  ( ! [X6] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')),sK3,sK0))))) ) | $spl6),
  inference(superposition,[],[f6629,f2705])).
fof(f7045,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl83),
  inference(cnf_transformation,[],[f7045_D])).
fof(f7045_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl83),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl83])])).
fof(f7047,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | $spl84),
  inference(cnf_transformation,[],[f7047_D])).
fof(f7047_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f7043,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl6),
  inference(forward_demodulation,[],[f7010,f320])).
fof(f7010,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f320])).
fof(f7040,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl80),
  inference(cnf_transformation,[],[f7040_D])).
fof(f7040_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f7038,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl6),
  inference(forward_demodulation,[],[f7005,f2692])).
fof(f7005,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f2692])).
fof(f7037,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl78),
  inference(cnf_transformation,[],[f7037_D])).
fof(f7037_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f7033,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl6),
  inference(forward_demodulation,[],[f7004,f2638])).
fof(f7004,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f2638])).
fof(f7032,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | $spl74),
  inference(cnf_transformation,[],[f7032_D])).
fof(f7032_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f7028,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl6),
  inference(forward_demodulation,[],[f7003,f2684])).
fof(f2684,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f2636,f887])).
fof(f7003,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK6('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK3,sK0)))) | $spl6),
  inference(superposition,[],[f6629,f2684])).
fof(f5841,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl68),
  inference(cnf_transformation,[],[f5841_D])).
fof(f5841_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f5843,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl70),
  inference(cnf_transformation,[],[f5843_D])).
fof(f5843_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f5851,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f5837,f1038])).
fof(f1038,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1015,f473])).
fof(f473,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f213,f214,f307])).
fof(f214,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f26])).
fof(f26,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|34')).
fof(f1015,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f227,f887])).
fof(f227,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X12))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|32')).
fof(f5837,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f4817,f1563])).
fof(f1563,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1534,f750])).
fof(f750,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f227,f212])).
fof(f1534,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f227,f1227])).
fof(f4817,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f4801,f213])).
fof(f4801,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f493,f1038])).
fof(f5829,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f238,f1563])).
fof(f5828,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1563,f238])).
fof(f5839,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f5827,f1038])).
fof(f5827,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1563,f4817])).
fof(f5681,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl64),
  inference(cnf_transformation,[],[f5681_D])).
fof(f5681_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f5683,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl66),
  inference(cnf_transformation,[],[f5683_D])).
fof(f5683_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5691,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f5677,f1038])).
fof(f5677,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f4817,f1562])).
fof(f1562,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1533,f773])).
fof(f773,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f228,f212])).
fof(f228,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X12] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X12))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|33')).
fof(f1533,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f228,f1227])).
fof(f5669,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f238,f1562])).
fof(f5668,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1562,f238])).
fof(f5679,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f5667,f1038])).
fof(f5667,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1562,f4817])).
fof(f5309,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl60),
  inference(cnf_transformation,[],[f5309_D])).
fof(f5309_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f5311,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl63),
  inference(cnf_transformation,[],[f5311_D])).
fof(f5311_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f5261,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl43),
  inference(equality_factoring,[],[f4822])).
fof(f4822,plain,(
  ( ! [X18] : (s(bool,X18) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X18)) ) | $spl43),
  inference(subsumption_resolution,[],[f4809,f213])).
fof(f4809,plain,(
  ( ! [X18] : (p(s(bool,'F_0')) | s(bool,X18) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s(bool,'T_0') = s(bool,X18)) ) | $spl43),
  inference(superposition,[],[f493,f2729])).
fof(f2729,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl43),
  inference(backward_demodulation,[],[f2636,f1904])).
fof(f1904,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl43),
  inference(unit_resulting_resolution,[],[f213,f1659,f307])).
fof(f1659,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl43),
  inference(unit_resulting_resolution,[],[f1637,f243])).
fof(f5123,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl56),
  inference(cnf_transformation,[],[f5123_D])).
fof(f5123_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f5125,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl59),
  inference(cnf_transformation,[],[f5125_D])).
fof(f5125_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f5085,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl19),
  inference(equality_factoring,[],[f4821])).
fof(f4821,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X17)) ) | $spl19),
  inference(subsumption_resolution,[],[f4808,f213])).
fof(f4808,plain,(
  ( ! [X17] : (p(s(bool,'F_0')) | s(bool,X17) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s(bool,'T_0') = s(bool,X17)) ) | $spl19),
  inference(superposition,[],[f493,f2685])).
fof(f2685,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl19),
  inference(backward_demodulation,[],[f2636,f931])).
fof(f931,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl19),
  inference(unit_resulting_resolution,[],[f213,f905,f307])).
fof(f905,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) | $spl19),
  inference(unit_resulting_resolution,[],[f853,f243])).
fof(f4923,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) ) | $spl52),
  inference(cnf_transformation,[],[f4923_D])).
fof(f4923_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f4925,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl55),
  inference(cnf_transformation,[],[f4925_D])).
fof(f4925_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f4889,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s(bool,X0) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)))) ) | $spl47),
  inference(equality_factoring,[],[f4824])).
fof(f4824,plain,(
  ( ! [X20] : (s(bool,X20) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X20)) ) | $spl47),
  inference(subsumption_resolution,[],[f4811,f213])).
fof(f4811,plain,(
  ( ! [X20] : (p(s(bool,'F_0')) | s(bool,X20) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X20)) ) | $spl47),
  inference(superposition,[],[f493,f2704])).
fof(f2704,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl47),
  inference(backward_demodulation,[],[f2636,f1647])).
fof(f1647,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl47),
  inference(unit_resulting_resolution,[],[f213,f1642,f307])).
fof(f1642,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl47),
  inference(unit_resulting_resolution,[],[f1641,f243])).
fof(f2995,plain,(
  $false | ($spl8 | $spl50)),
  inference(subsumption_resolution,[],[f2632,f2993])).
fof(f2993,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl8),
  inference(subsumption_resolution,[],[f2933,f213])).
fof(f2933,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl8),
  inference(backward_demodulation,[],[f462,f2784])).
fof(f2784,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f2657,f2636])).
fof(f2657,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f2636,f244])).
fof(f244,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f166])).
fof(f2892,plain,(
  $false | ($spl8 | $spl23)),
  inference(global_subsumption,[],[f462,f208,f207,f206,f209,f210,f211,f214,f215,f216,f217,f218,f221,f222,f223,f224,f225,f235,f238,f240,f239,f248,f250,f249,f254,f253,f323,f324,f268,f267,f266,f294,f293,f292,f291,f310,f307,f313,f448,f452,f460,f459,f493,f494,f322,f321,f265,f329,f295,f290,f229,f312,f311,f306,f305,f304,f303,f234,f230,f327,f271,f231,f212,f288,f289,f287,f330,f331,f273,f328,f270,f269,f264,f263,f286,f285,f280,f279,f278,f283,f281,f256,f255,f244,f243,f334,f335,f336,f342,f343,f338,f339,f332,f296,f346,f347,f325,f326,f236,f237,f297,f298,f299,f301,f227,f228,f498,f473,f226,f219,f213,f750,f751,f773,f774,f837,f838,f840,f841,f842,f843,f844,f845,f846,f847,f848,f856,f887,f904,f906,f936,f996,f1037,f1038,f1101,f1120,f1142,f1167,f1197,f1226,f1227,f1254,f1394,f1395,f1396,f1397,f1509,f1530,f1531,f1562,f1563,f1612,f1632,f1655,f1675,f1688,f1689,f1691,f1694,f1695,f1696,f1697,f1698,f1699,f1700,f1751,f1703,f1704,f1705,f1706,f1707,f1709,f1799,f1819,f1934,f1944,f1945,f1937,f1988,f1992,f2045,f2103,f2104,f2105,f2106,f2061,f2107,f2109,f2110,f2111,f2112,f2113,f2114,f2115,f2116,f2117,f2118,f2119,f2120,f2121,f2122,f2123,f2080,f2081,f2124,f2125,f2126,f2127,f2128,f2129,f2130,f2131,f2132,f2133,f2137,f2138,f2140,f2141,f2142,f2144,f2176,f2200,f2201,f2221,f2303,f2304,f2292,f2293,f2313,f2340,f2351,f2392,f2431,f2432,f2418,f2433,f2422,f2439,f2473,f2501,f2527,f2530,f2546,f2577,f2614,f2616,f2617,f2606,f2627,f2035,f1454,f2636,f2638,f2639,f2640,f2641,f2642,f2643,f2644,f2645,f2647,f2648,f2650,f2651,f2652,f2653,f2654,f2655,f2783,f2784,f2658,f2659,f2660,f2661,f2662,f2663,f2785,f2786,f2666,f2667,f2668,f2669,f2670,f2671,f2787,f2788,f2789,f2790,f2684,f2791,f2687,f2689,f2691,f2692,f2693,f2694,f2792,f2793,f2698,f2699,f2701,f2705,f2712,f2713,f2801,f2803,f2716,f2805,f2718,f2807,f2809,f2811,f2813,f2815,f2817,f2725,f2726,f2732,f2734,f2735,f2827,f2828,f2829,f2830,f2741,f2742,f2831,f2832,f2833,f2746,f2834,f2748,f2835,f2837,f2838,f2839,f2840,f2758,f2759,f2763,f2764,f2765,f2769,f2770,f2771,f2775,f2776,f2778,f2779,f2782])).
fof(f2782,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f2636,f2577])).
fof(f2779,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f2636,f2527])).
fof(f2778,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f2636,f2501])).
fof(f2776,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f2636,f2418])).
fof(f2775,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f2636,f2392])).
fof(f2771,plain,(
  ( ! [X10,X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.ZERO_0')),X11,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))))))) )),
  inference(backward_demodulation,[],[f2636,f2313])).
fof(f2770,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))) )),
  inference(backward_demodulation,[],[f2636,f2293])).
fof(f2769,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(backward_demodulation,[],[f2636,f2292])).
fof(f2765,plain,(
  ( ! [X74,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X73))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.ZERO_0')),X74,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X74),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X73))))))) )),
  inference(backward_demodulation,[],[f2636,f2142])).
fof(f2764,plain,(
  ( ! [X68,X69] : (s(bool,'F_0') = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X68)),X69,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,'F_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2140])).
fof(f2763,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X63)),X64,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2137])).
fof(f2759,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.ZERO_0')),X58,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2132])).
fof(f2758,plain,(
  ( ! [X56,X55] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))))))) )),
  inference(backward_demodulation,[],[f2636,f2131])).
fof(f2840,plain,(
  ( ! [X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X40,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2754,f2636])).
fof(f2754,plain,(
  ( ! [X40] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X40,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2123])).
fof(f2839,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))))),X39,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2753,f2636])).
fof(f2753,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))))),X39,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2122])).
fof(f2838,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36)))))),X37,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2752,f2636])).
fof(f2752,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36)))))),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2121])).
fof(f2837,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.ZERO_0')),X35,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2751,f2636])).
fof(f2751,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.ZERO_0')),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(backward_demodulation,[],[f2636,f2120])).
fof(f2835,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)),X29,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2749,f2636])).
fof(f2749,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)),X29,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2116])).
fof(f2748,plain,(
  ( ! [X26,X27] : (s('type.num.num',X26) = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X27,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X26))))) )),
  inference(backward_demodulation,[],[f2636,f2115])).
fof(f2834,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')),X25,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2747,f2636])).
fof(f2747,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.ZERO_0')),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2114])).
fof(f2746,plain,(
  ( ! [X23,X22] : (s('type.num.num',X22) = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0')),X23,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',X22))))) )),
  inference(backward_demodulation,[],[f2636,f2113])).
fof(f2833,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X20)),X21,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2745,f2636])).
fof(f2745,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X20)),X21,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2112])).
fof(f2832,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2744,f2636])).
fof(f2744,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2111])).
fof(f2831,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0')),X15,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2743,f2636])).
fof(f2743,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0')),X15,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2109])).
fof(f2742,plain,(
  ( ! [X12,X11] : (s('type.num.num',X11) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)),X12,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num',X11))))) )),
  inference(backward_demodulation,[],[f2636,f2107])).
fof(f2741,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')),X4,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3))))) )),
  inference(backward_demodulation,[],[f2636,f2106])).
fof(f2830,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2740,f2636])).
fof(f2740,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(backward_demodulation,[],[f2636,f2105])).
fof(f2829,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X1,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2739,f2636])).
fof(f2739,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X1,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(backward_demodulation,[],[f2636,f2104])).
fof(f2828,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2738,f2636])).
fof(f2738,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(backward_demodulation,[],[f2636,f2103])).
fof(f2827,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f2737,f2684])).
fof(f2737,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.list.NIL_0')))) )),
  inference(backward_demodulation,[],[f2636,f2045])).
fof(f2735,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2)))) )),
  inference(backward_demodulation,[],[f2636,f1992])).
fof(f2734,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f2636,f1988])).
fof(f2732,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f2636,f1937])).
fof(f2726,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f1709])).
fof(f2725,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f1707])).
fof(f2817,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2816,f2684])).
fof(f2816,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2724,f2636])).
fof(f2724,plain,(
  ( ! [X38] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))) )),
  inference(backward_demodulation,[],[f2636,f1706])).
fof(f2815,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))))))) )),
  inference(forward_demodulation,[],[f2814,f2684])).
fof(f2814,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))))))) )),
  inference(forward_demodulation,[],[f2723,f2636])).
fof(f2723,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37)))) )),
  inference(backward_demodulation,[],[f2636,f1705])).
fof(f2813,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))))))) )),
  inference(forward_demodulation,[],[f2812,f2684])).
fof(f2812,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))))))) )),
  inference(forward_demodulation,[],[f2722,f2636])).
fof(f2722,plain,(
  ( ! [X35,X34] : (s('type.num.num',X35) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35)))) )),
  inference(backward_demodulation,[],[f2636,f1704])).
fof(f2811,plain,(
  ( ! [X33,X32] : (s('type.num.num',X33) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))) )),
  inference(forward_demodulation,[],[f2810,f2636])).
fof(f2810,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2721,f2692])).
fof(f2721,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f2636,f1703])).
fof(f2809,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2808,f2636])).
fof(f2808,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2720,f2684])).
fof(f2720,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f2636,f1700])).
fof(f2807,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X26))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27)))) )),
  inference(forward_demodulation,[],[f2806,f2636])).
fof(f2806,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)))) )),
  inference(forward_demodulation,[],[f2719,f2684])).
fof(f2719,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)))) )),
  inference(backward_demodulation,[],[f2636,f1699])).
fof(f2718,plain,(
  ( ! [X24,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))) )),
  inference(backward_demodulation,[],[f2636,f1698])).
fof(f2805,plain,(
  ( ! [X23,X22] : (s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))) )),
  inference(forward_demodulation,[],[f2804,f2636])).
fof(f2804,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f2717,f2684])).
fof(f2717,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f2636,f1697])).
fof(f2716,plain,(
  ( ! [X21,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))) )),
  inference(backward_demodulation,[],[f2636,f1696])).
fof(f2803,plain,(
  ( ! [X19,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))) )),
  inference(forward_demodulation,[],[f2802,f2636])).
fof(f2802,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) )),
  inference(forward_demodulation,[],[f2715,f2684])).
fof(f2715,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) )),
  inference(backward_demodulation,[],[f2636,f1695])).
fof(f2801,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)))) )),
  inference(forward_demodulation,[],[f2714,f2684])).
fof(f2714,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)))) )),
  inference(backward_demodulation,[],[f2636,f1694])).
fof(f2713,plain,(
  ( ! [X12,X11] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))) )),
  inference(backward_demodulation,[],[f2636,f1691])).
fof(f2712,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))) )),
  inference(backward_demodulation,[],[f2636,f1688])).
fof(f2701,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(backward_demodulation,[],[f2636,f1632])).
fof(f2699,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f2636,f1531])).
fof(f2698,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f2636,f1530])).
fof(f2793,plain,(
  ( ! [X43,X42] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))))))) )),
  inference(forward_demodulation,[],[f2696,f2636])).
fof(f2696,plain,(
  ( ! [X43,X42] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(backward_demodulation,[],[f2636,f1397])).
fof(f2792,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40))))))) )),
  inference(forward_demodulation,[],[f2695,f2636])).
fof(f2695,plain,(
  ( ! [X41,X40] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) )),
  inference(backward_demodulation,[],[f2636,f1396])).
fof(f2694,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38)))) )),
  inference(backward_demodulation,[],[f2636,f1395])).
fof(f2693,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37)))) )),
  inference(backward_demodulation,[],[f2636,f1394])).
fof(f2691,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f2636,f1226])).
fof(f2687,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(backward_demodulation,[],[f2636,f1120])).
fof(f2791,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f2686,f2636])).
fof(f2686,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f2636,f996])).
fof(f2790,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2680,f2636])).
fof(f2680,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) )),
  inference(backward_demodulation,[],[f2636,f844])).
fof(f2789,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2679,f2636])).
fof(f2679,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))) )),
  inference(backward_demodulation,[],[f2636,f842])).
fof(f2788,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f2678,f2636])).
fof(f2678,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f2636,f838])).
fof(f2787,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2677,f2636])).
fof(f2677,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f837])).
fof(f2671,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f332])).
fof(f2669,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f2636,f330])).
fof(f2667,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f2636,f328])).
fof(f2666,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(backward_demodulation,[],[f2636,f327])).
fof(f2785,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f2664,f2432])).
fof(f2664,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f2636,f325])).
fof(f2661,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(backward_demodulation,[],[f2636,f256])).
fof(f2660,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f2636,f255])).
fof(f2659,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(backward_demodulation,[],[f2636,f250])).
fof(f2658,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(backward_demodulation,[],[f2636,f249])).
fof(f2783,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f2656,f2636])).
fof(f2656,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f2636,f243])).
fof(f2655,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f240])).
fof(f2654,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f2636,f239])).
fof(f2653,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f237])).
fof(f2652,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f2636,f236])).
fof(f2645,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(backward_demodulation,[],[f2636,f222])).
fof(f2644,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f221])).
fof(f2643,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2636,f219])).
fof(f2627,plain,(
  ( ! [X17,X15,X16] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X15),s('type.num.num',X16))) = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X15),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f2613,f346])).
fof(f2613,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X15),s('type.num.num',X16)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,bool))) )),
  inference(superposition,[],[f279,f346])).
fof(f2606,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f346,f238])).
fof(f2616,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2615,f236])).
fof(f2615,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f2603,f2200])).
fof(f2603,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f346,f212])).
fof(f2546,plain,(
  ( ! [X17,X15,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f2537,f301])).
fof(f2537,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,bool))) )),
  inference(superposition,[],[f279,f301])).
fof(f2530,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f301,f238])).
fof(f2527,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f301,f212])).
fof(f2501,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f301,f212])).
fof(f2473,plain,(
  ( ! [X10,X9] : (s(bool,'F_0') = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.ZERO_0')),X10,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2468,f2431])).
fof(f2468,plain,(
  ( ! [X10,X9] : (~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.ZERO_0')),X10,bool))) )),
  inference(superposition,[],[f279,f2431])).
fof(f2439,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))))))) )),
  inference(forward_demodulation,[],[f2430,f299])).
fof(f2430,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18)))),X19,bool))) )),
  inference(superposition,[],[f279,f299])).
fof(f2422,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f299,f238])).
fof(f2431,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f2393,f219])).
fof(f2393,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f299,f887])).
fof(f2351,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2348,f2304])).
fof(f2348,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool))) )),
  inference(superposition,[],[f279,f2304])).
fof(f2340,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2335,f1944])).
fof(f2335,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')),X3,bool))) )),
  inference(superposition,[],[f279,f1944])).
fof(f2313,plain,(
  ( ! [X10,X11] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')),X11,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f2301,f332])).
fof(f2301,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.num.|48|_0')),X11,bool))) )),
  inference(superposition,[],[f279,f332])).
fof(f2293,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f332,f238])).
fof(f2292,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f332,f296])).
fof(f2304,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2290,f221])).
fof(f2290,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f332,f887])).
fof(f2303,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f2302,f226])).
fof(f2302,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f2289,f298])).
fof(f2289,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f332,f212])).
fof(f2221,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2220,f2200])).
fof(f2220,plain,(
  ( ! [X19,X17,X18] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)),X19,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f2209,f296])).
fof(f2209,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)),X19,bool))) )),
  inference(superposition,[],[f279,f298])).
fof(f2201,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f298,f238])).
fof(f2176,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f298,f234])).
fof(f2144,plain,(
  ( ! [X78,X76,X77] : (s('type.list.list'(X76),X77) = s('type.list.list'(X76),sK15('const.list.APPEND_2'(s('type.list.list'(X76),'const.list.NIL_0'),s('type.list.list'(X76),X77)),X78,'type.list.list'(X76))) | ~p(s(bool,happ(s(fun('type.list.list'(X76),bool),X78),s('type.list.list'(X76),X77))))) )),
  inference(forward_demodulation,[],[f2101,f248])).
fof(f2101,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,happ(s(fun('type.list.list'(X76),bool),X78),s('type.list.list'(X76),X77)))) | s('type.list.list'(X76),'const.list.APPEND_2'(s('type.list.list'(X76),'const.list.NIL_0'),s('type.list.list'(X76),X77))) = s('type.list.list'(X76),sK15('const.list.APPEND_2'(s('type.list.list'(X76),'const.list.NIL_0'),s('type.list.list'(X76),X77)),X78,'type.list.list'(X76)))) )),
  inference(superposition,[],[f279,f248])).
fof(f2142,plain,(
  ( ! [X74,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X73))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))),s('type.num.num','const.num.|48|_0')),X74,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X74),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X73))))))) )),
  inference(forward_demodulation,[],[f2099,f237])).
fof(f2099,plain,(
  ( ! [X74,X73] : (~p(s(bool,happ(s(fun(bool,bool),X74),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X73)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))),s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))),s('type.num.num','const.num.|48|_0')),X74,bool))) )),
  inference(superposition,[],[f279,f237])).
fof(f2141,plain,(
  ( ! [X70,X72,X71] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',X70))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num',X70),s('type.num.num',X71)),X72,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X72),s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',X70))))))) )),
  inference(forward_demodulation,[],[f2098,f297])).
fof(f2098,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,happ(s(fun(bool,bool),X72),s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num',X70)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X70),s('type.num.num',X71))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num',X70),s('type.num.num',X71)),X72,bool))) )),
  inference(superposition,[],[f279,f297])).
fof(f2140,plain,(
  ( ! [X68,X69] : (s(bool,'F_0') = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)),X69,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2139,f226])).
fof(f2139,plain,(
  ( ! [X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X68),s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)),X69,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2097,f297])).
fof(f2097,plain,(
  ( ! [X68,X69] : (~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,'F_0')))) | s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,sK15('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)),X69,bool))) )),
  inference(superposition,[],[f279,f219])).
fof(f2138,plain,(
  ( ! [X66,X67,X65] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X66),s('type.num.num',X65))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66)),X67,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X66),s('type.num.num',X65))))))) )),
  inference(forward_demodulation,[],[f2096,f296])).
fof(f2096,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,'const.arithmetic.>=_2'(s('type.num.num',X66),s('type.num.num',X65)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num',X66)),X67,bool))) )),
  inference(superposition,[],[f279,f296])).
fof(f2137,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X63)),X64,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2095,f221])).
fof(f2095,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X63))) = s(bool,sK15('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X63)),X64,bool))) )),
  inference(superposition,[],[f279,f221])).
fof(f2133,plain,(
  ( ! [X59] : (s(bool,'F_0') = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')),X59,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'F_0'))))) ) | $spl23),
  inference(forward_demodulation,[],[f2091,f1101])).
fof(f2091,plain,(
  ( ! [X59] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'F_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')),X59,bool))) ) | $spl23),
  inference(superposition,[],[f279,f1101])).
fof(f2132,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0')),X58,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2090,f223])).
fof(f2090,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),X58),s(bool,'T_0')))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.>=_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0')),X58,bool))) )),
  inference(superposition,[],[f279,f223])).
fof(f2131,plain,(
  ( ! [X56,X55] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55))))))) )),
  inference(forward_demodulation,[],[f2089,f236])).
fof(f2089,plain,(
  ( ! [X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X55)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,bool))) )),
  inference(superposition,[],[f279,f236])).
fof(f2130,plain,(
  ( ! [X54,X53] : (s(bool,'F_0') = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0')),X54,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2088,f226])).
fof(f2088,plain,(
  ( ! [X54,X53] : (~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0')),X54,bool))) )),
  inference(superposition,[],[f279,f226])).
fof(f2129,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X52,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2087,f1038])).
fof(f2087,plain,(
  ( ! [X52] : (~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')),X52,bool))) )),
  inference(superposition,[],[f279,f1038])).
fof(f2128,plain,(
  ( ! [X50,X51] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X50))) = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X50))))))) )),
  inference(forward_demodulation,[],[f2086,f227])).
fof(f2086,plain,(
  ( ! [X50,X51] : (~p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X50)))))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))))) = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))),X51,bool))) )),
  inference(superposition,[],[f279,f227])).
fof(f2127,plain,(
  ( ! [X49] : (s(bool,'F_0') = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X49,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f2085,f473])).
fof(f2085,plain,(
  ( ! [X49] : (~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0')))) | s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X49,bool))) )),
  inference(superposition,[],[f279,f473])).
fof(f2126,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X48,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2084,f1037])).
fof(f2084,plain,(
  ( ! [X48] : (~p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),X48,bool))) )),
  inference(superposition,[],[f279,f1037])).
fof(f2125,plain,(
  ( ! [X47,X46] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X46))) = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X46))))))) )),
  inference(forward_demodulation,[],[f2083,f228])).
fof(f2083,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X46)))))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46))))) = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,bool))) )),
  inference(superposition,[],[f279,f228])).
fof(f2124,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X45,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f2082,f460])).
fof(f2082,plain,(
  ( ! [X45] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))) | s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))) = s(bool,sK15('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X45,bool))) )),
  inference(superposition,[],[f279,f460])).
fof(f2081,plain,(
  ( ! [X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X43)))) | s(bool,'F_0') = s(bool,sK15('F_0',X44,bool)) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f279,f238])).
fof(f2080,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'F_0')))) | s(bool,X41) = s(bool,sK15(X41,X42,bool)) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f279,f238])).
fof(f2123,plain,(
  ( ! [X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X40,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2079,f1167])).
fof(f2079,plain,(
  ( ! [X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X40,'type.num.num'))) )),
  inference(superposition,[],[f279,f1167])).
fof(f2122,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))))),X39,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2078,f231])).
fof(f2078,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38))))))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))))),X39,'type.num.num'))) )),
  inference(superposition,[],[f279,f231])).
fof(f2121,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36)))))),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2077,f229])).
fof(f2077,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))))))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36)))))),X37,'type.num.num'))) )),
  inference(superposition,[],[f279,f229])).
fof(f2120,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2076,f322])).
fof(f2076,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.EXP_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35,'type.num.num'))) )),
  inference(superposition,[],[f279,f322])).
fof(f2119,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0'))))) )),
  inference(forward_demodulation,[],[f2075,f1254])).
fof(f2075,plain,(
  ( ! [X33] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')),X33,'type.num.num'))) )),
  inference(superposition,[],[f279,f1254])).
fof(f2118,plain,(
  ( ! [X31,X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X31))))) = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))),X32,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X31))))))))) )),
  inference(forward_demodulation,[],[f2074,f230])).
fof(f2074,plain,(
  ( ! [X31,X32] : (~p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X31)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))),X32,'type.num.num'))) )),
  inference(superposition,[],[f279,f230])).
fof(f2117,plain,(
  ( ! [X30] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X30,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2073,f211])).
fof(f2073,plain,(
  ( ! [X30] : (~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X30,'type.num.num'))) )),
  inference(superposition,[],[f279,f211])).
fof(f2116,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)),X29,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2072,f225])).
fof(f2072,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)),X29,'type.num.num'))) )),
  inference(superposition,[],[f279,f225])).
fof(f2115,plain,(
  ( ! [X26,X27] : (s('type.num.num',X26) = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X27,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f2071,f321])).
fof(f2071,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X26)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X27,'type.num.num'))) )),
  inference(superposition,[],[f279,f321])).
fof(f2114,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2070,f217])).
fof(f2070,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,'type.num.num'))) )),
  inference(superposition,[],[f279,f217])).
fof(f2113,plain,(
  ( ! [X23,X22] : (s('type.num.num',X22) = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')),X23,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f2069,f222])).
fof(f2069,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',X22)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')),X23,'type.num.num'))) )),
  inference(superposition,[],[f279,f222])).
fof(f2112,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)),X21,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2068,f218])).
fof(f2068,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)),X21,'type.num.num'))) )),
  inference(superposition,[],[f279,f218])).
fof(f2111,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2067,f215])).
fof(f2067,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18))) = s('type.num.num',sK15('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num',X18)),X19,'type.num.num'))) )),
  inference(superposition,[],[f279,f215])).
fof(f2110,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))) = s('type.num.num',sK15('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))))) )),
  inference(forward_demodulation,[],[f2066,f234])).
fof(f2066,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) = s('type.num.num',sK15('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))),X17,'type.num.num'))) )),
  inference(superposition,[],[f279,f234])).
fof(f2109,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0')),X15,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2065,f1655])).
fof(f2065,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0'))) = s('type.num.num',sK15('const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0')),X15,'type.num.num'))) )),
  inference(superposition,[],[f279,f1655])).
fof(f2107,plain,(
  ( ! [X12,X11] : (s('type.num.num',X11) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)),X12,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f2063,f224])).
fof(f2063,plain,(
  ( ! [X12,X11] : (~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)),X12,'type.num.num'))) )),
  inference(superposition,[],[f279,f224])).
fof(f2061,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6)),X7,'type.num.num'))) )),
  inference(superposition,[],[f279,f295])).
fof(f2106,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f2060,f216])).
fof(f2060,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num'))) )),
  inference(superposition,[],[f279,f216])).
fof(f2105,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2059,f1227])).
fof(f2059,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X2,'type.num.num'))) )),
  inference(superposition,[],[f279,f1227])).
fof(f2104,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X1,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f2058,f887])).
fof(f2058,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),X1,'type.num.num'))) )),
  inference(superposition,[],[f279,f887])).
fof(f2103,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2057,f212])).
fof(f2057,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK15('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num'))) )),
  inference(superposition,[],[f279,f212])).
fof(f2045,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.list.NIL_0')))) )),
  inference(superposition,[],[f311,f1655])).
fof(f1992,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f237,f238])).
fof(f1988,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f237,f212])).
fof(f1937,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f236,f238])).
fof(f1945,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1936,f1934])).
fof(f1936,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f236,f1227])).
fof(f1944,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1935,f226])).
fof(f1935,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f236,f887])).
fof(f1934,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f236,f212])).
fof(f1819,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6)))))) )),
  inference(superposition,[],[f312,f295])).
fof(f1799,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f295,f312])).
fof(f1709,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f311,f1227])).
fof(f1707,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f311,f212])).
fof(f1706,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f311,f1167])).
fof(f1705,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))))))) )),
  inference(superposition,[],[f311,f231])).
fof(f1704,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))))))) )),
  inference(superposition,[],[f311,f229])).
fof(f1703,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f311,f322])).
fof(f1751,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1702,f887])).
fof(f1702,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f311,f1254])).
fof(f1700,plain,(
  ( ! [X28] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f311,f211])).
fof(f1699,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)))) )),
  inference(superposition,[],[f311,f225])).
fof(f1698,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f311,f321])).
fof(f1697,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f311,f217])).
fof(f1696,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f311,f222])).
fof(f1695,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) )),
  inference(superposition,[],[f311,f218])).
fof(f1694,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)))) )),
  inference(superposition,[],[f311,f215])).
fof(f1691,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) )),
  inference(superposition,[],[f311,f224])).
fof(f1689,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6)))) )),
  inference(superposition,[],[f311,f295])).
fof(f1688,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f311,f216])).
fof(f1675,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl23),
  inference(unit_resulting_resolution,[],[f856,f311])).
fof(f1632,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f249,f248])).
fof(f1612,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f297,f238])).
fof(f1531,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f230,f1227])).
fof(f1530,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f234,f1227])).
fof(f1509,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f296,f238])).
fof(f1397,plain,(
  ( ! [X43,X42] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(superposition,[],[f244,f295])).
fof(f1396,plain,(
  ( ! [X41,X40] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41)))) )),
  inference(superposition,[],[f243,f295])).
fof(f1395,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39)))))) )),
  inference(superposition,[],[f240,f295])).
fof(f1394,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37)))) )),
  inference(superposition,[],[f239,f295])).
fof(f1226,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f234,f212])).
fof(f1197,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl23),
  inference(unit_resulting_resolution,[],[f213,f906,f307])).
fof(f1120,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f230,f212])).
fof(f1101,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl23),
  inference(unit_resulting_resolution,[],[f213,f936,f307])).
fof(f1037,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f1014,f460])).
fof(f1014,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f228,f887])).
fof(f996,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f959,f213])).
fof(f959,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f244,f238])).
fof(f936,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl23),
  inference(unit_resulting_resolution,[],[f904,f243])).
fof(f906,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) | $spl23),
  inference(unit_resulting_resolution,[],[f856,f243])).
fof(f904,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl23),
  inference(unit_resulting_resolution,[],[f856,f240])).
fof(f844,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f239,f321])).
fof(f842,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f222])).
fof(f838,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(superposition,[],[f239,f224])).
fof(f837,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f216])).
fof(f774,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f228,f238])).
fof(f751,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f227,f238])).
fof(f219,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X12] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|23')).
fof(f226,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X12] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|20')).
fof(f498,plain,(
  ( ! [X6] : (p(s(bool,X6)) | s(bool,'F_0') = s(bool,X6)) )),
  inference(forward_demodulation,[],[f497,f226])).
fof(f497,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f481,f213])).
fof(f481,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f307,f226])).
fof(f301,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X12,X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|22')).
fof(f297,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X11,X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X11),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.arithmetic.GREATER_DEF')).
fof(f237,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|24')).
fof(f236,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X12] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|21')).
fof(f325,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f260,f212])).
fof(f260,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f174])).
fof(f347,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f302,f296])).
fof(f302,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|28')).
fof(f332,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f296,f235])).
fof(f339,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)),s('type.list.list'(X0),sK21(X3,X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f296,f293])).
fof(f343,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f337,f296])).
fof(f337,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)))),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(backward_demodulation,[],[f296,f292])).
fof(f342,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f333,f296])).
fof(f333,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(backward_demodulation,[],[f296,f294])).
fof(f335,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1)))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0))))) )),
  inference(backward_demodulation,[],[f296,f267])).
fof(f255,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f256,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f172])).
fof(f278,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK15(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK15(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f128])).
fof(f128,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6] : ! [X22,X23] : (? [X7] : (s(X6,X7) = s(X6,X23) & p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.bool.UNWIND_THM2')).
fof(f279,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK15(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f193])).
fof(f280,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK15(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f285,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X15,X16,X20] : s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X20),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16))))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X20),s('type.list.list'(X6),X15))),s('type.list.list'(X6),X16)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.APPEND|split|1')).
fof(f269,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6] : ! [X8,X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))) <=> ? [X20,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X20),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.LENGTH_EQ_NUM_compute|split|2')).
fof(f270,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f184])).
fof(f328,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f272,f212])).
fof(f272,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK12(X2,X1,X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X2,X1,X0)),s('type.list.list'(X0),sK12(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12])],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) <=> ? [X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X6] : ! [X8,X12] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))))) <=> ? [X20,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X20),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.list.LENGTH_EQ_NUM_compute|split|1')).
fof(f273,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X2,X1,X0)),s('type.list.list'(X0),sK12(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f330,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0))))) )),
  inference(forward_demodulation,[],[f276,f212])).
fof(f276,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),sK13(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f190])).
fof(f271,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f184])).
fof(f327,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(forward_demodulation,[],[f274,f212])).
fof(f274,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f303,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|8')).
fof(f304,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|5')).
fof(f305,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|12')).
fof(f306,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X12,X11] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|2')).
fof(f460,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f454,f213])).
fof(f454,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f210,f238])).
fof(f452,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f213,f238])).
fof(f313,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22])],[f160])).
fof(f160,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f154])).
fof(f154,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13',aHL_EXT)).
fof(f310,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f159])).
fof(f292,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f293,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X3) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)),s('type.list.list'(X0),sK21(X3,X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f294,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | s('type.list.list'(X0),X3) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5)))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f203])).
fof(f267,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK7(X2,X1,X0)),s('type.list.list'(X0),sK8(X2,X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f181])).
fof(f324,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f257,f212])).
fof(f257,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|1')).
fof(f323,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f258,f212])).
fof(f258,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f173])).
fof(f253,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.num.|48|_0')))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|3')).
fof(f254,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f171])).
fof(f249,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f169])).
fof(f235,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X12] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|27')).
fof(f222,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|7')).
fof(f221,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X12] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|26')).
fof(f210,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f15])).
fof(f15,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.numeral.numeral_distrib|split|35')).
fof(f2891,plain,(
  $false | $spl23),
  inference(subsumption_resolution,[],[f2890,f2684])).
fof(f2890,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl23),
  inference(forward_demodulation,[],[f856,f2636])).
fof(f2632,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl50),
  inference(cnf_transformation,[],[f2632_D])).
fof(f2632_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f856,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl23),
  inference(cnf_transformation,[],[f856_D])).
fof(f856_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f1454,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f239,f1167])).
fof(f2629,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')))) ) | $spl48),
  inference(cnf_transformation,[],[f2629_D])).
fof(f2629_D,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f2035,plain,(
  ( ! [X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),'const.list.NIL_0')))) )),
  inference(superposition,[],[f239,f1655])).
fof(f2619,plain,(
  $false | ($spl11 | $spl23)),
  inference(subsumption_resolution,[],[f2618,f464])).
fof(f2618,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl23),
  inference(backward_demodulation,[],[f2617,f1101])).
fof(f1639,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl44),
  inference(cnf_transformation,[],[f1639_D])).
fof(f1639_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f1641,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl47),
  inference(cnf_transformation,[],[f1641_D])).
fof(f1641_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f1633,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f249,f320])).
fof(f1635,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl40),
  inference(cnf_transformation,[],[f1635_D])).
fof(f1635_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1637,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl43),
  inference(cnf_transformation,[],[f1637_D])).
fof(f1637_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f1631,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(superposition,[],[f249,f318])).
fof(f866,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl36),
  inference(cnf_transformation,[],[f866_D])).
fof(f866_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f868,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl39),
  inference(cnf_transformation,[],[f868_D])).
fof(f868_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f848,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f239,f212])).
fof(f862,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) ) | $spl32),
  inference(cnf_transformation,[],[f862_D])).
fof(f862_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f864,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl35),
  inference(cnf_transformation,[],[f864_D])).
fof(f864_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f847,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f322])).
fof(f861,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(cnf_transformation,[],[f861_D])).
fof(f861_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f846,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f239,f211])).
fof(f859,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | $spl28),
  inference(cnf_transformation,[],[f859_D])).
fof(f859_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f845,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) )),
  inference(superposition,[],[f239,f225])).
fof(f858,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f858_D])).
fof(f858_D,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f843,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f239,f217])).
fof(f857,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) | $spl24),
  inference(cnf_transformation,[],[f857_D])).
fof(f857_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f841,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))) )),
  inference(superposition,[],[f239,f218])).
fof(f854,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) | $spl20),
  inference(cnf_transformation,[],[f854_D])).
fof(f854_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f840,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(superposition,[],[f239,f215])).
fof(f851,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl16),
  inference(cnf_transformation,[],[f851_D])).
fof(f851_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f853,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl19),
  inference(cnf_transformation,[],[f853_D])).
fof(f853_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f839,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(superposition,[],[f239,f320])).
fof(f626,plain,(
  $false | ($spl1 | $spl6 | $spl12)),
  inference(subsumption_resolution,[],[f601,f575])).
fof(f575,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f531,f209])).
fof(f531,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl12),
  inference(backward_demodulation,[],[f495,f243])).
fof(f601,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | ($spl1 | $spl6 | $spl12)),
  inference(backward_demodulation,[],[f575,f562])).
fof(f562,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl1 | $spl6 | $spl12)),
  inference(forward_demodulation,[],[f557,f556])).
fof(f556,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl6 | $spl12)),
  inference(backward_demodulation,[],[f541,f320])).
fof(f541,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f518,f209])).
fof(f518,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl12),
  inference(backward_demodulation,[],[f495,f326])).
fof(f557,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl1 | $spl12)),
  inference(backward_demodulation,[],[f541,f348])).
fof(f540,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f505,f209])).
fof(f505,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f495,f213])).
fof(f496,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) | $spl14),
  inference(cnf_transformation,[],[f496_D])).
fof(f496_D,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f494,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f479,f452])).
fof(f479,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f307,f238])).
fof(f462,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f464,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f464_D])).
fof(f464_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f459,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f238])).
fof(f314,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f320,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f320_D])).
fof(f320_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f206,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f162])).
fof(f162,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f161])).
fof(f161,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f156])).
fof(f156,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <~> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|13','thm.quantHeuristics.LIST_LENGTH_|49||split|13')).
fof(f318,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | $spl4),
  inference(cnf_transformation,[],[f318_D])).
fof(f318_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f207,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f163])).
fof(f315,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f316,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f316_D])).
fof(f316_D,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f208,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f163])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 450
% Passive clauses: 3174
% Generated clauses: 23523
% Final active clauses: 242
% Final passive clauses: 1618
% Input formulas: 69
% Initial clauses: 108
% 
% Duplicate literals: 255
% Trivial inequalities: 101
% Fw subsumption resolutions: 424
% Fw demodulations: 7788
% Bw demodulations: 734
% Condensations: 143
% Global subsumptions: 2
% 
% Simple tautologies: 67
% Equational tautologies: 141
% Forward subsumptions: 11176
% Fw demodulations to eq. taut.: 159
% Bw demodulations to eq. taut.: 13
% 
% Unit resulting resolution: 2129
% Factoring: 1
% Forward superposition: 5337
% Backward superposition: 5981
% Self superposition: 86
% Equality factoring: 44
% Equality resolution: 20
% 
% Split clauses: 73
% Split components: 146
% SAT solver clauses: 3344
% SAT solver unit clauses: 310
% SAT solver binary clauses: 1352
% 
% Sat splits: 73
% Sat splitting refutations: 20
% 
% Memory used [KB]: 17398
% Time elapsed: 0.781 s
% ------------------------------
% ------------------------------
% Success in time 2.11 s
