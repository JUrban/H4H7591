Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quotient_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quotient_list
% SZS output start Proof for thm.quotient_list
fof(f7060,plain,(
  $false),
  inference(subsumption_resolution,[],[f7016,f329])).
fof(f329,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK18)))),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(sK13,fun(sK13,bool)),sK14),s(fun(sK13,sK12),sK15),s(fun(sK12,sK13),sK16)))) & (p(s(bool,'const.list.LIST_REL_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),sK17),s('type.list.list'(sK13),sK18)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK17))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK18))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f184])).
fof(f184,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X1,fun(X1,bool)),X2),s(fun(X1,X0),X3),s(fun(X0,X1),X4)))) & ? [X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X1,fun(X1,bool)),X2),s(fun(X1,X0),X3),s(fun(X0,X1),X4)))) => ! [X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X1,fun(X1,bool)),X2),s(fun(X1,X0),X3),s(fun(X0,X1),X4)))) => ! [X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X1,fun(X1,bool)),X2),s('type.list.list'(X1),X5),s('type.list.list'(X1),X6)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X7,fun(X7,bool)),X8),s(fun(X7,X6),X9),s(fun(X6,X7),X10)))) => ! [X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X7,fun(X7,bool)),X8),s('type.list.list'(X7),X11),s('type.list.list'(X7),X12)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X7,fun(X7,bool)),X8),s(fun(X7,X6),X9),s(fun(X6,X7),X10)))) => ! [X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X7,fun(X7,bool)),X8),s('type.list.list'(X7),X11),s('type.list.list'(X7),X12)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X12)))))),
  file('thm.quotient_list.LENGTH_RSP','thm.quotient_list.LENGTH_RSP')).
fof(f7016,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK18)))),
  inference(resolution,[],[f457,f328])).
fof(f328,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK13,fun(sK13,bool)),sK14),s('type.list.list'(sK13),sK17),s('type.list.list'(sK13),sK18))))),
  inference(cnf_transformation,[],[f235])).
fof(f457,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) )),
  inference(cnf_transformation,[],[f289])).
fof(f289,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(flattening,[],[f288])).
fof(f288,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(nnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))))),
  inference(flattening,[],[f166])).
fof(f166,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X8,X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X7,fun(X6,bool)),X8),s('type.list.list'(X7),X11),s('type.list.list'(X6),X12)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X12))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X11))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X7,X6),bool),'const.pair.UNCURRY_1'(s(fun(X7,fun(X6,bool)),X8))),s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X11),s('type.list.list'(X6),X12))))))))))),
  file('thm.quotient_list.LENGTH_RSP','thm.list.LIST_REL_EVERY_ZIP')).
% SZS output end Proof for thm.quotient_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 429
% Passive clauses: 2025
% Generated clauses: 6718
% Final active clauses: 429
% Final passive clauses: 1439
% Input formulas: 69
% Initial clauses: 213
% 
% Duplicate literals: 163
% Trivial inequalities: 22
% Fw subsumption resolutions: 515
% Fw demodulations: 375
% 
% Simple tautologies: 179
% Equational tautologies: 32
% Forward subsumptions: 3277
% 
% Binary resolution: 2875
% Factoring: 766
% Forward superposition: 734
% Backward superposition: 970
% Self superposition: 12
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 176
% Split components: 353
% SAT solver clauses: 252
% SAT solver unit clauses: 7
% SAT solver binary clauses: 36
% 
% Sat splits: 176
% 
% TWLsolver clauses: 252
% TWLsolver calls for satisfiability: 173
% 
% Memory used [KB]: 3965
% Time elapsed: 0.155 s
% ------------------------------
% ------------------------------
% Success in time 0.141 s
