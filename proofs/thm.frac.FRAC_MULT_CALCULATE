Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.frac
% (108896)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 94
% Passive clauses: 2744
% Generated clauses: 19019
% Final active clauses: 85
% Final passive clauses: 2549
% Input formulas: 10
% Initial clauses: 13
% 
% Duplicate literals: 1104
% Trivial inequalities: 268
% Fw subsumption resolutions: 2458
% Fw demodulations: 1705
% Bw demodulations: 7
% 
% Simple tautologies: 322
% Equational tautologies: 91
% Forward subsumptions: 8054
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 35
% Forward superposition: 8309
% Backward superposition: 4383
% Self superposition: 320
% Equality factoring: 238
% Equality resolution: 16
% 
% Split clauses: 934
% Split components: 1904
% SAT solver clauses: 2260
% SAT solver unit clauses: 305
% SAT solver binary clauses: 602
% 
% Sat splits: 934
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2252
% TWLsolver calls for satisfiability: 105
% 
% Memory used [KB]: 7291
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.frac
% (108915)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 62
% Passive clauses: 255
% Generated clauses: 8880
% Final active clauses: 58
% Final passive clauses: 177
% Input formulas: 10
% Initial clauses: 13
% 
% Duplicate literals: 1191
% Trivial inequalities: 107
% Fw subsumption resolutions: 623
% Fw demodulations: 352
% Bw demodulations: 14
% Condensations: 1824
% 
% Simple tautologies: 176
% Equational tautologies: 63
% Forward subsumptions: 3563
% 
% Binary resolution: 12
% Forward superposition: 2363
% Backward superposition: 1768
% Self superposition: 198
% Equality factoring: 180
% Equality resolution: 8
% 
% Split clauses: 183
% Split components: 396
% SAT solver clauses: 797
% SAT solver unit clauses: 20
% SAT solver binary clauses: 72
% 
% Sat splits: 183
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 797
% TWLsolver calls for satisfiability: 76
% 
% Memory used [KB]: 5884
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.frac
% (108932)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 257
% Passive clauses: 2218
% Generated clauses: 81786
% Final active clauses: 76
% Final passive clauses: 436
% Input formulas: 10
% Initial clauses: 13
% 
% Duplicate literals: 9709
% Trivial inequalities: 637
% Fw subsumption resolutions: 6338
% Fw demodulations: 3195
% Bw demodulations: 1147
% Condensations: 17726
% Global subsumptions: 147
% 
% Simple tautologies: 959
% Equational tautologies: 841
% Forward subsumptions: 38138
% Bw demodulations to eq. taut.: 14
% 
% Unit resulting resolution: 1801
% Forward superposition: 19515
% Backward superposition: 16553
% Self superposition: 924
% Equality factoring: 722
% Equality resolution: 31
% 
% Split clauses: 293
% Split components: 600
% SAT solver clauses: 3108
% SAT solver unit clauses: 29
% SAT solver binary clauses: 133
% 
% Sat splits: 293
% Sat splitting refutations: 155
% 
% Memory used [KB]: 29551
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.frac
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.frac
% SZS output start Proof for thm.frac
fof(f425,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f414])).
fof(f414,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK3))))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK3)))))))),
  inference(superposition,[],[f27,f185])).
fof(f185,plain,(
  ( ! [X6,X5] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK3))))))) = s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',sK1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X5),s('type.integer.int',sK3)))))))) )),
  inference(forward_demodulation,[],[f172,f44])).
fof(f44,plain,(
  ( ! [X1] : (s('type.integer.int',sK3) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X1),s('type.integer.int',sK3)))))))) )),
  inference(resolution,[],[f26,f28])).
fof(f28,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => s('type.integer.int',X1) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X14,X15] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15)))) => s('type.integer.int',X15) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))))),
  file('thm.frac.FRAC_MULT_CALCULATE','thm.frac.DNM')).
fof(f26,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK3))))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK3)))) & s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK3))))))) != s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK2),s('type.integer.int',sK3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))))) != s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))))) != s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) => s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X1),s('type.integer.int',X3))))))) = s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) => s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X9))))))) = s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X8),s('type.integer.int',X9)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) => s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X9))))))) = s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',X7))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X8),s('type.integer.int',X9)))))))))),
  file('thm.frac.FRAC_MULT_CALCULATE','thm.frac.FRAC_MULT_CALCULATE')).
fof(f172,plain,(
  ( ! [X6,X5] : (s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',sK1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X5),s('type.integer.int',sK3))))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X5),s('type.integer.int',sK3)))))))))))))) )),
  inference(superposition,[],[f91,f43])).
fof(f43,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',sK3)))))))) )),
  inference(resolution,[],[f26,f29])).
fof(f29,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X14,X15] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15)))) => s('type.integer.int',X14) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X14),s('type.integer.int',X15))))))))),
  file('thm.frac.FRAC_MULT_CALCULATE','thm.frac.NMR')).
fof(f91,plain,(
  ( ! [X4,X3] : (s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X3),s('type.integer.int',sK1))))),s('type.frac.frac',X4))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X4))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X4)))))))))) )),
  inference(forward_demodulation,[],[f82,f38])).
fof(f38,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',sK1)))))))) )),
  inference(resolution,[],[f25,f29])).
fof(f25,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f23])).
fof(f82,plain,(
  ( ! [X4,X3] : (s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X3),s('type.integer.int',sK1))))),s('type.frac.frac',X4))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X3),s('type.integer.int',sK1))))))),s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X4))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X4)))))))))) )),
  inference(superposition,[],[f30,f39])).
fof(f39,plain,(
  ( ! [X1] : (s('type.integer.int',sK1) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X1),s('type.integer.int',sK1)))))))) )),
  inference(resolution,[],[f25,f28])).
fof(f30,plain,(
  ( ! [X0,X1] : (s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac',X0),s('type.frac.frac',X1))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1)))))))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac',X0),s('type.frac.frac',X1))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1)))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X12,X13] : s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac',X12),s('type.frac.frac',X13))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X12))),s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X13))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X12))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X13)))))))))),
  file('thm.frac.FRAC_MULT_CALCULATE','thm.frac.frac_mul_def')).
fof(f27,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK1),s('type.integer.int',sK3))))))) != s('type.frac.frac','const.frac.frac_mul_2'(s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))))),s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK2),s('type.integer.int',sK3)))))))),
  inference(cnf_transformation,[],[f23])).
% SZS output end Proof for thm.frac
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 34
% Passive clauses: 67
% Generated clauses: 373
% Final active clauses: 29
% Final passive clauses: 31
% Input formulas: 10
% Initial clauses: 12
% 
% Selected by SInE selection: 9
% SInE iterations: 1
% 
% Trivial inequalities: 2
% Fw subsumption resolutions: 17
% Fw demodulations: 75
% Bw demodulations: 5
% 
% Equational tautologies: 1
% Forward subsumptions: 209
% 
% Binary resolution: 4
% Forward superposition: 167
% Backward superposition: 102
% Self superposition: 8
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 4
% SAT solver binary clauses: 3
% 
% Sat splits: 3
% 
% Memory used [KB]: 1535
% Time elapsed: 0.016 s
% ------------------------------
% ------------------------------
% Success in time 11.728 s
