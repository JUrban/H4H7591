Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.divides
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.divides
% SZS output start Proof for thm.divides
fof(f230,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f229,f100,f163,f159,f164])).
fof(f164,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f164_D])).
fof(f164_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f159,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f139])).
fof(f139,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7] : ! [X8] : (s(X7,X8) = s(X7,X8) <=> p(s(bool,'T_0')))),
  file('thm.divides.NOT_PRIME_|49|','thm.bool.REFL_CLAUSE')).
fof(f163,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f100,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.divides.NOT_PRIME_|49|',aHL_FALSITY)).
fof(f229,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f228,f164])).
fof(f228,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f227,f178])).
fof(f178,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(subsumption_resolution,[],[f175,f163])).
fof(f175,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f93,f101])).
fof(f101,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.divides.NOT_PRIME_|49|',aHL_BOOL_CASES)).
fof(f93,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(flattening,[],[f6])).
fof(f6,negated_conjecture,(
  ~~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  file('thm.divides.NOT_PRIME_|49|','thm.divides.NOT_PRIME_|49|')).
fof(f227,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(equality_resolution,[],[f102])).
fof(f102,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK0(X0)),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',sK0(X0)) & s('type.num.num',sK0(X0)) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f63])).
fof(f63,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f62])).
fof(f62,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (~s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X15] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X15)))) <=> (~s('type.num.num',X15) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X16] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X16),s('type.num.num',X15)))) => (s('type.num.num',X15) = s('type.num.num',X16) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.divides.NOT_PRIME_|49|','thm.divides.prime_def')).
% SZS output end Proof for thm.divides
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 13
% Passive clauses: 32
% Generated clauses: 131
% Final active clauses: 10
% Final passive clauses: 11
% Input formulas: 24
% Initial clauses: 65
% 
% Duplicate literals: 4
% Trivial inequalities: 1
% Fw subsumption resolutions: 7
% Fw demodulations: 2
% Bw demodulations: 2
% 
% Simple tautologies: 38
% Equational tautologies: 3
% Forward subsumptions: 21
% 
% Binary resolution: 10
% Forward superposition: 15
% Backward superposition: 11
% Self superposition: 4
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 20
% Split components: 41
% SAT solver clauses: 29
% SAT solver unit clauses: 4
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splits: 20
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 28
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 639
% Time elapsed: 0.015 s
% ------------------------------
% ------------------------------
% Success in time 0.017 s
