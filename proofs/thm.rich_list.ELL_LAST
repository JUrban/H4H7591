Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f210,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f209])).
fof(f209,plain,(
  s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1)))),
  inference(superposition,[],[f93,f128])).
fof(f128,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1] : s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7] : s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X7))) = s(X6,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7)))),
  file('thm.rich_list.ELL_LAST','thm.rich_list.ELL|split|0')).
fof(f93,plain,(
  s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ~p(s(bool,'const.list.NULL_1'(s('type.list.list'(sK0),sK1)))) & s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),sK1))) != s(sK0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f61])).
fof(f61,plain,(
  ? [X0,X1] : (~p(s(bool,'const.list.NULL_1'(s('type.list.list'(X0),X1)))) & s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) != s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : (~p(s(bool,'const.list.NULL_1'(s('type.list.list'(X0),X1)))) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ~! [X0] : ! [X1] : (~p(s(bool,'const.list.NULL_1'(s('type.list.list'(X0),X1)))) => s(X0,'const.list.LAST_1'(s('type.list.list'(X0),X1))) = s(X0,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (~p(s(bool,'const.list.NULL_1'(s('type.list.list'(X6),X7)))) => s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X7))) = s(X6,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (~p(s(bool,'const.list.NULL_1'(s('type.list.list'(X6),X7)))) => s(X6,'const.list.LAST_1'(s('type.list.list'(X6),X7))) = s(X6,'const.rich_list.ELL_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X7))))),
  file('thm.rich_list.ELL_LAST','thm.rich_list.ELL_LAST')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 29
% Generated clauses: 103
% Final active clauses: 13
% Final passive clauses: 7
% Input formulas: 25
% Initial clauses: 45
% 
% Duplicate literals: 1
% Trivial inequalities: 6
% Fw subsumption resolutions: 1
% Fw demodulations: 4
% Bw demodulations: 2
% 
% Simple tautologies: 12
% Equational tautologies: 5
% Forward subsumptions: 33
% 
% Binary resolution: 6
% Forward superposition: 9
% Backward superposition: 28
% Self superposition: 3
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 14
% Split components: 29
% SAT solver clauses: 18
% SAT solver unit clauses: 4
% SAT solver binary clauses: 13
% 
% Sat splits: 14
% 
% TWLsolver clauses: 18
% TWLsolver calls for satisfiability: 4
% 
% Memory used [KB]: 639
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
