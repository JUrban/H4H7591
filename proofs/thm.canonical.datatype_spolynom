Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.canonical
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.canonical
% SZS output start Proof for thm.canonical
fof(f1413,plain,(
  $false),
  inference(subsumption_resolution,[],[f1412,f33])).
fof(f33,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.canonical.datatype_spolynom',aHL_TRUTH)).
fof(f1412,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f32,f37])).
fof(f37,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X6,X8)))),
  file('thm.canonical.datatype_spolynom','thm.bool.DATATYPE_TAG_THM')).
fof(f32,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool),happ(s(fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool)),happ(s(fun(fun(sK0,'type.canonical.spolynom'(sK0)),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(sK0)),fun(fun(sK0,'type.canonical.spolynom'(sK0)),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool)))),sK1),s(fun('type.quote.index','type.canonical.spolynom'(sK0)),'const.canonical.SPvar_0'))),s(fun(sK0,'type.canonical.spolynom'(sK0)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),'const.canonical.SPmult_0'))))))),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool),happ(s(fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool)),happ(s(fun(fun(sK0,'type.canonical.spolynom'(sK0)),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(sK0)),fun(fun(sK0,'type.canonical.spolynom'(sK0)),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),fun(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),bool)))),sK1),s(fun('type.quote.index','type.canonical.spolynom'(sK0)),'const.canonical.SPvar_0'))),s(fun(sK0,'type.canonical.spolynom'(sK0)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(sK0),fun('type.canonical.spolynom'(sK0),'type.canonical.spolynom'(sK0))),'const.canonical.SPmult_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f28])).
fof(f28,plain,(
  ? [X0,X1] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool),happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)),happ(s(fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(X0)),fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)))),X1),s(fun('type.quote.index','type.canonical.spolynom'(X0)),'const.canonical.SPvar_0'))),s(fun(X0,'type.canonical.spolynom'(X0)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPmult_0'))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool),happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)),happ(s(fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(X0)),fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)))),X1),s(fun('type.quote.index','type.canonical.spolynom'(X0)),'const.canonical.SPvar_0'))),s(fun(X0,'type.canonical.spolynom'(X0)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPmult_0'))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool),happ(s(fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)),happ(s(fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(X0)),fun(fun(X0,'type.canonical.spolynom'(X0)),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),fun(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),bool)))),X1),s(fun('type.quote.index','type.canonical.spolynom'(X0)),'const.canonical.SPvar_0'))),s(fun(X0,'type.canonical.spolynom'(X0)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(X0),fun('type.canonical.spolynom'(X0),'type.canonical.spolynom'(X0))),'const.canonical.SPmult_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool),happ(s(fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool)),happ(s(fun(fun(X6,'type.canonical.spolynom'(X6)),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(X6)),fun(fun(X6,'type.canonical.spolynom'(X6)),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool)))),X7),s(fun('type.quote.index','type.canonical.spolynom'(X6)),'const.canonical.SPvar_0'))),s(fun(X6,'type.canonical.spolynom'(X6)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),'const.canonical.SPmult_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool),happ(s(fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool)),happ(s(fun(fun(X6,'type.canonical.spolynom'(X6)),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool))),happ(s(fun(fun('type.quote.index','type.canonical.spolynom'(X6)),fun(fun(X6,'type.canonical.spolynom'(X6)),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),fun(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),bool)))),X7),s(fun('type.quote.index','type.canonical.spolynom'(X6)),'const.canonical.SPvar_0'))),s(fun(X6,'type.canonical.spolynom'(X6)),'const.canonical.SPconst_0'))),s(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),'const.canonical.SPplus_0'))),s(fun('type.canonical.spolynom'(X6),fun('type.canonical.spolynom'(X6),'type.canonical.spolynom'(X6))),'const.canonical.SPmult_0'))))))),
  file('thm.canonical.datatype_spolynom','thm.canonical.datatype_spolynom')).
% SZS output end Proof for thm.canonical
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 112
% Generated clauses: 1338
% Final active clauses: 26
% Final passive clauses: 67
% Input formulas: 11
% Initial clauses: 11
% 
% Duplicate literals: 145
% Trivial inequalities: 20
% Fw subsumption resolutions: 107
% Fw demodulations: 117
% 
% Simple tautologies: 60
% Equational tautologies: 19
% Forward subsumptions: 735
% 
% Binary resolution: 6
% Forward superposition: 532
% Backward superposition: 256
% Self superposition: 74
% Equality factoring: 48
% Equality resolution: 9
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 36
% SAT solver unit clauses: 4
% SAT solver binary clauses: 18
% 
% Sat splits: 22
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 36
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.059 s
% ------------------------------
% ------------------------------
% Success in time 0.051 s
