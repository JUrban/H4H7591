Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (80857)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Passive clauses: 764
% Generated clauses: 967
% Final passive clauses: 763
% Input formulas: 516
% Initial clauses: 947
% 
% Duplicate literals: 9
% Trivial inequalities: 1
% 
% Simple tautologies: 136
% Equational tautologies: 6
% 
% Split clauses: 49
% Split components: 100
% SAT solver clauses: 52
% SAT solver unit clauses: 3
% SAT solver binary clauses: 47
% 
% Sat splits: 49
% 
% TWLsolver clauses: 52
% TWLsolver calls for satisfiability: 1
% 
% Memory used [KB]: 2302
% Time elapsed: 1.888 s
% ------------------------------
% ------------------------------
% remaining time: 130 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (80894)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 683
% Passive clauses: 5019
% Generated clauses: 31786
% Final active clauses: 649
% Final passive clauses: 4156
% Input formulas: 516
% Initial clauses: 947
% 
% Duplicate literals: 106
% Trivial inequalities: 22
% Fw subsumption resolutions: 988
% Fw demodulations: 5109
% Bw demodulations: 212
% Condensations: 77
% Global subsumptions: 37
% 
% Simple tautologies: 344
% Equational tautologies: 19
% Forward subsumptions: 14400
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 3304
% Factoring: 143
% Forward superposition: 8885
% Backward superposition: 6739
% Self superposition: 72
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 27
% Split components: 54
% SAT solver clauses: 6622
% SAT solver unit clauses: 1228
% SAT solver binary clauses: 287
% SAT solver learnt clauses: 74
% SAT solver learnt literals: 14
% 
% Sat splits: 27
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 6474
% TWLsolver calls for satisfiability: 5430
% 
% Memory used [KB]: 30831
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 123 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% (80930)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1236
% Passive clauses: 10574
% Generated clauses: 92491
% Final active clauses: 1049
% Final passive clauses: 2901
% Input formulas: 516
% Initial clauses: 947
% Discarded non-redundant clauses: 1766
% 
% Duplicate literals: 11
% Trivial inequalities: 133
% Fw subsumption resolutions: 1976
% Fw demodulations: 20046
% Bw demodulations: 4277
% Condensations: 68
% Global subsumptions: 3456
% 
% Simple tautologies: 178
% Equational tautologies: 68
% Forward subsumptions: 44563
% Fw demodulations to eq. taut.: 702
% Bw demodulations to eq. taut.: 29
% 
% Unit resulting resolution: 25014
% Factoring: 2
% Forward superposition: 21356
% Backward superposition: 13198
% Self superposition: 115
% Equality factoring: 2
% Equality resolution: 21
% 
% Split clauses: 40
% Split components: 80
% SAT solver clauses: 19303
% SAT solver unit clauses: 7346
% SAT solver binary clauses: 9452
% 
% Sat splits: 40
% Sat splitting refutations: 5190
% 
% Memory used [KB]: 291807
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 19 next slice time: 19
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f30254,plain,(
  $false),
  inference(subsumption_resolution,[],[f30246,f1079])).
fof(f1079,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK16)))),
  inference(cnf_transformation,[],[f853])).
fof(f853,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK16))) & s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK16))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK13,sK14),bool),'_dst_x0x1_2'(s(fun(sK14,bool),sK17),s(fun('type.pair.prod'(sK13,sK14),sK14),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(sK13,sK14)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK14)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK14),sK16)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17])],[f762])).
fof(f762,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X3))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X0,X1),X1),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))),
  inference(ennf_transformation,[],[f519])).
fof(f519,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X3))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X0,X1),X1),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))),
  inference(flattening,[],[f518])).
fof(f518,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => s(bool,'const.list.EVERY_2'(s(fun(X1,bool),X4),s('type.list.list'(X1),X3))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'_dst_x0x1_2'(s(fun(X1,bool),X4),s(fun('type.pair.prod'(X0,X1),X1),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X10),s('type.list.list'(X7),X9))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X6,X7),bool),'_dst_x0x1_2'(s(fun(X7,bool),X10),s(fun('type.pair.prod'(X6,X7),X7),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X10),s('type.list.list'(X7),X9))) = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X6,X7),bool),'_dst_x0x1_2'(s(fun(X7,bool),X10),s(fun('type.pair.prod'(X6,X7),X7),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))))),
  file('thm.list.every_zip_snd','thm.list.every_zip_snd')).
fof(f30246,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK16)))),
  inference(trivial_inequality_removal,[],[f30195])).
fof(f30195,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK16))) != s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK16))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK14),sK16)))),
  inference(superposition,[],[f2173,f1084])).
fof(f1084,plain,(
  ( ! [X4,X5,X3,X1] : (s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4)))) )),
  inference(cnf_transformation,[],[f764])).
fof(f764,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) | (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(ennf_transformation,[],[f523])).
fof(f523,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) => (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(flattening,[],[f522])).
fof(f522,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),X4))) => (s('type.list.list'(X1),X5) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X3),X4) = s('type.list.list'(X3),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X7),s('type.list.list'(X1),X5))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X0),'const.combin.o_2'(s(fun(X1,X0),X7),s(fun('type.pair.prod'(X1,X3),X1),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4))))))) & s('type.list.list'(X2),'const.list.MAP_2'(s(fun(X3,X2),X6),s('type.list.list'(X3),X4))) = s('type.list.list'(X2),'const.list.MAP_2'(s(fun('type.pair.prod'(X1,X3),X2),'const.combin.o_2'(s(fun(X3,X2),X6),s(fun('type.pair.prod'(X1,X3),X3),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X1,X3)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X3)),'const.pair.,_2'(s('type.list.list'(X1),X5),s('type.list.list'(X3),X4)))))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X14,X6,X15,X7] : ! [X9,X8,X32,X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))) & s('type.list.list'(X7),X9) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X7),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))) & s('type.list.list'(X14),'const.list.MAP_2'(s(fun(X6,X14),X30),s('type.list.list'(X6),X8))) = s('type.list.list'(X14),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X14),'const.combin.o_2'(s(fun(X6,X14),X30),s(fun('type.pair.prod'(X6,X7),X6),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))) & s('type.list.list'(X15),'const.list.MAP_2'(s(fun(X7,X15),X32),s('type.list.list'(X7),X9))) = s('type.list.list'(X15),'const.list.MAP_2'(s(fun('type.pair.prod'(X6,X7),X15),'const.combin.o_2'(s(fun(X7,X15),X32),s(fun('type.pair.prod'(X6,X7),X7),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))))))))),
  file('thm.list.every_zip_snd','thm.list.MAP_ZIP')).
fof(f2173,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK16))) != s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),'const.list.MAP_2'(s(fun('type.pair.prod'(sK13,sK14),sK14),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'(sK13,sK14)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK14)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK14),sK16)))))))))),
  inference(superposition,[],[f1080,f1135])).
fof(f1135,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))) )),
  inference(cnf_transformation,[],[f578])).
fof(f578,plain,(
  ! [X0,X1,X2,X3,X4] : s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))),
  inference(flattening,[],[f577])).
fof(f577,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X2),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X3),s('type.list.list'(X1),X4))))) = s(bool,'const.list.EVERY_2'(s(fun(X1,bool),'_dst_x0x1_2'(s(fun(X0,bool),X2),s(fun(X1,X0),X3))),s('type.list.list'(X1),X4)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X7,X6] : ! [X10,X30,X21] : s(bool,'const.list.EVERY_2'(s(fun(X7,bool),X10),s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X30),s('type.list.list'(X6),X21))))) = s(bool,'const.list.EVERY_2'(s(fun(X6,bool),'_dst_x0x1_2'(s(fun(X7,bool),X10),s(fun(X6,X7),X30))),s('type.list.list'(X6),X21)))),
  file('thm.list.every_zip_snd','thm.list.EVERY_MAP')).
fof(f1080,plain,(
  s(bool,'const.list.EVERY_2'(s(fun(sK14,bool),sK17),s('type.list.list'(sK14),sK16))) != s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK13,sK14),bool),'_dst_x0x1_2'(s(fun(sK14,bool),sK17),s(fun('type.pair.prod'(sK13,sK14),sK14),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'(sK13,sK14)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK14)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK14),sK16)))))))),
  inference(cnf_transformation,[],[f853])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 625
% Passive clauses: 16090
% Generated clauses: 28588
% Final active clauses: 586
% Final passive clauses: 12721
% Input formulas: 516
% Initial clauses: 416
% 
% Selected by SInE selection: 139
% SInE iterations: 1
% 
% Duplicate literals: 373
% Trivial inequalities: 49
% Fw subsumption resolutions: 1382
% Fw demodulations: 2093
% Bw demodulations: 4
% 
% Simple tautologies: 618
% Equational tautologies: 13
% Forward subsumptions: 7258
% 
% Binary resolution: 9958
% Factoring: 48
% Forward superposition: 11814
% Backward superposition: 2570
% Equality resolution: 28
% 
% Split clauses: 840
% Split components: 1736
% SAT solver clauses: 890
% SAT solver unit clauses: 22
% SAT solver binary clauses: 245
% 
% Sat splits: 840
% Sat splitting refutations: 37
% 
% Memory used [KB]: 23794
% Time elapsed: 0.934 s
% ------------------------------
% ------------------------------
% Success in time 14.02 s
