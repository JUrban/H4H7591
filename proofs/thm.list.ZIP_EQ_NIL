Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (19808)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1038
% Passive clauses: 6604
% Generated clauses: 32724
% Final active clauses: 950
% Final passive clauses: 5052
% Input formulas: 261
% Initial clauses: 555
% 
% Duplicate literals: 239
% Trivial inequalities: 70
% Fw subsumption resolutions: 2014
% Fw demodulations: 3238
% Bw demodulations: 72
% 
% Simple tautologies: 296
% Equational tautologies: 33
% Forward subsumptions: 19970
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 6080
% Factoring: 1232
% Forward superposition: 8678
% Backward superposition: 10466
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 434
% Split components: 871
% SAT solver clauses: 674
% SAT solver unit clauses: 17
% SAT solver binary clauses: 87
% 
% Sat splits: 434
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 674
% TWLsolver calls for satisfiability: 477
% 
% Memory used [KB]: 18293
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (19832)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 563
% Passive clauses: 3373
% Generated clauses: 23555
% Final active clauses: 530
% Final passive clauses: 2712
% Input formulas: 261
% Initial clauses: 555
% 
% Duplicate literals: 104
% Trivial inequalities: 49
% Fw subsumption resolutions: 806
% Fw demodulations: 3148
% Bw demodulations: 124
% Condensations: 83
% Global subsumptions: 37
% 
% Simple tautologies: 291
% Equational tautologies: 19
% Forward subsumptions: 11615
% Fw demodulations to eq. taut.: 19
% 
% Binary resolution: 2164
% Factoring: 185
% Forward superposition: 6668
% Backward superposition: 6126
% Self superposition: 60
% Equality factoring: 2
% Equality resolution: 17
% 
% Split clauses: 11
% Split components: 23
% SAT solver clauses: 4556
% SAT solver unit clauses: 680
% SAT solver binary clauses: 180
% SAT solver learnt clauses: 76
% SAT solver learnt literals: 16
% 
% Sat splits: 11
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 4406
% TWLsolver calls for satisfiability: 3309
% 
% Memory used [KB]: 23027
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% (19872)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 989
% Passive clauses: 7227
% Generated clauses: 201602
% Final active clauses: 580
% Final passive clauses: 3430
% Input formulas: 261
% Initial clauses: 555
% Discarded non-redundant clauses: 2979
% 
% Duplicate literals: 9
% Trivial inequalities: 93
% Fw subsumption resolutions: 1159
% Fw demodulations: 91648
% Bw demodulations: 1396
% Condensations: 20
% Global subsumptions: 1208
% 
% Simple tautologies: 136
% Equational tautologies: 64
% Forward subsumptions: 46459
% Fw demodulations to eq. taut.: 49312
% Bw demodulations to eq. taut.: 20
% 
% Unit resulting resolution: 74553
% Factoring: 2
% Forward superposition: 15634
% Backward superposition: 13830
% Self superposition: 150
% Equality factoring: 2
% Equality resolution: 33
% 
% Split clauses: 18
% Split components: 37
% SAT solver clauses: 10584
% SAT solver unit clauses: 3495
% SAT solver binary clauses: 5610
% 
% Sat splits: 18
% Sat splitting refutations: 2111
% 
% Memory used [KB]: 244729
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f7627,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f556,f828,f826,f824,f555,f827,f554,f825,f823,f1187,f1195,f1201,f1188,f1232,f1238,f1233,f1240,f1243,f1241,f1247,f1252,f1256,f1248,f1270,f1277,f1283,f1289,f1271,f1295,f1302,f1308,f1314,f1296,f1317,f1322,f1325,f1330,f1332,f1338,f1336,f1340,f1342,f1335,f1735,f1741,f1747,f1736,f1778,f1782,f1779,f1784,f1787,f1785,f1235,f1791,f1796,f1800,f1792,f1234,f1814,f1821,f1827,f1833,f1815,f1839,f1846,f1852,f1858,f1840,f1861,f1866,f1863,f1869,f1874,f1871,f1876,f1882,f1880,f1884,f1886,f1879,f1921,f1923,f1924,f1925,f1928,f2011,f2042,f2044,f2045,f2047,f2049,f2131,f2157,f2159,f2160,f2161,f2164,f2247,f2276,f2278,f2279,f2280,f2283,f2366,f2392,f2394,f2396,f2397,f2399,f2401,f2483,f2508,f2590,f2748,f2751,f2752,f2609,f1327,f2608,f1319,f2757,f2756,f2840,f2755,f2754,f2841,f3522,f3624,f3697,f3855,f3858,f3859,f4212,f4217,f4214,f4218,f4220,f4231,f4078,f4248,f4253,f4255,f4254,f4256,f4258,f4257,f3854,f4098,f4260,f4099,f4262,f3853,f4322,f4233,f4216,f4361,f4363,f4364,f4365,f4368,f4451,f4515,f4524,f4526,f4527,f4528,f4531,f4614,f4678,f4684,f4685,f4686,f4687,f4923,f4925,f4928,f4698,f4699,f4927,f5291,f1334,f5292,f1333,f5421,f5293,f5295,f5296,f5298,f5300,f5382,f5446,f5448,f5449,f5451,f5453,f5535,f5594,f5627,f1878,f5760,f5628,f1877,f5759,f5629,f5631,f5632,f5634,f5636,f5718,f5761,f5770,f5772,f5773,f5775,f5777,f5859,f5918,f6090,f6094,f6092,f6102,f6105,f6212,f6225,f6213,f6226,f6216,f6091,f6228,f6402,f6406,f6404,f6414,f6417,f6527,f6540,f6528,f6541,f6531,f6403,f6543,f6657,f6658,f6659,f6660,f6668,f6676,f6677,f4215,f6678,f6679,f6687,f6223,f2746,f5422,f6716,f6718,f6719,f6720,f6723,f6806,f6846,f6956,f6957,f6965,f6975,f6976,f6984,f7026,f7122,f7125,f7128,f7093,f7092,f7138,f7076,f7075,f7140,f6850,f6849,f4924,f5903,f7141,f5902,f7142,f5900,f7143,f5768,f5766,f4219,f5579,f7144,f5578,f7145,f5576,f7146,f7147,f5263,f7151,f7149,f7152,f5260,f7150,f7148,f7154,f5257,f7156,f7158,f5253,f7160,f7165,f5242,f5235,f5228,f7166,f7171,f5214,f5207,f5200,f7172,f7175,f5128,f5122,f7176,f4956,f7179,f4954,f7178,f4943,f4941,f4939,f1190,f7180,f4937,f7181,f4959,f1189,f2747,f7182,f7184,f7185,f7187,f7189,f7271,f2156,f7296,f7311,f7313,f7314,f7315,f7318,f7401,f2037,f7439,f7441,f7442,f2038,f7444,f2040,f7446,f2039,f7528,f2041,f5423,f7626])).
fof(f7626,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f4961,f3987])).
fof(f3987,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl3),
  inference(trivial_inequality_removal,[],[f3976])).
fof(f3976,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl3),
  inference(superposition,[],[f826,f589])).
fof(f589,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f460])).
fof(f460,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f304])).
fof(f304,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f303])).
fof(f303,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f216])).
fof(f216,axiom,(
  ! [X6] : ! [X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X32))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X32))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LENGTH_NIL')).
fof(f4961,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl0),
  inference(forward_demodulation,[],[f4960,f597])).
fof(f597,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f313])).
fof(f313,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LENGTH|split|0')).
fof(f4960,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | $spl0),
  inference(subsumption_resolution,[],[f4734,f553])).
fof(f553,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))),
  inference(cnf_transformation,[],[f447])).
fof(f447,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) & (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) | (s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) & s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15))) & (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) | s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK15))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f446])).
fof(f446,plain,(
  ? [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X3))) & (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X3)))),
  inference(flattening,[],[f445])).
fof(f445,plain,(
  ? [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & ((s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) | (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X3))) & (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) | (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X3)))))),
  inference(nnf_transformation,[],[f388])).
fof(f388,plain,(
  ? [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) <~> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X3))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X3))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) <=> (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2) & s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))) <=> (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8) & s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))) <=> (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8) & s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X9))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.ZIP_EQ_NIL')).
fof(f4734,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl0),
  inference(superposition,[],[f571,f823])).
fof(f571,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f398])).
fof(f398,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(ennf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(flattening,[],[f281])).
fof(f281,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))))))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LENGTH_ZIP')).
fof(f5423,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl108),
  inference(cnf_transformation,[],[f5423_D])).
fof(f5423_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f2041,plain,(
  ( ! [X12] : (p(s(bool,X12))) ) | $spl58),
  inference(cnf_transformation,[],[f2041_D])).
fof(f2041_D,plain,(
  ( ! [X12] : (p(s(bool,X12))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f7528,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,X173) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f816])).
fof(f816,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f603])).
fof(f603,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f465,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f464])).
fof(f464,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f402])).
fof(f402,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f401])).
fof(f401,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X23,X33,X24,X34] : ((s(bool,X23) = s(bool,X33) & (p(s(bool,X33)) => s(bool,X24) = s(bool,X34))) => ((p(s(bool,X23)) => p(s(bool,X24))) <=> (p(s(bool,X33)) => p(s(bool,X34)))))),
  file('thm.list.ZIP_EQ_NIL','thm.bool.IMP_CONG')).
fof(f2039,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | s(bool,X7) != s(bool,X8)) ) | $spl54),
  inference(cnf_transformation,[],[f2039_D])).
fof(f2039_D,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | s(bool,X7) != s(bool,X8)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f7446,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X21) != s(bool,X23)) ) | $spl67),
  inference(resolution,[],[f2747,f606])).
fof(f606,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f2040,plain,(
  ( ! [X13] : (~p(s(bool,X13))) ) | $spl56),
  inference(cnf_transformation,[],[f2040_D])).
fof(f2040_D,plain,(
  ( ! [X13] : (~p(s(bool,X13))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f7444,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f605])).
fof(f605,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f2038,plain,(
  ( ! [X2,X0] : (p(s(bool,X0)) | s(bool,X0) != s(bool,X2)) ) | $spl52),
  inference(cnf_transformation,[],[f2038_D])).
fof(f2038_D,plain,(
  ( ! [X2,X0] : (p(s(bool,X0)) | s(bool,X0) != s(bool,X2)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f7442,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f604])).
fof(f604,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f7441,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X6) != s(bool,X8)) ) | $spl67),
  inference(resolution,[],[f2747,f602])).
fof(f602,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f7439,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f600])).
fof(f600,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f465])).
fof(f2037,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,X1)) ) | $spl50),
  inference(cnf_transformation,[],[f2037_D])).
fof(f2037_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,X1)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f7401,plain,(
  ( ! [X175,X174] : (p(s(bool,X174)) | p(s(bool,X175)) | s(bool,'T_0') != s(bool,X175)) ) | $spl8),
  inference(resolution,[],[f1189,f816])).
fof(f7318,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'T_0') != s(bool,X21) | s(bool,X22) != s(bool,X23)) ) | $spl8),
  inference(resolution,[],[f1189,f606])).
fof(f7315,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,'T_0') != s(bool,X14)) ) | $spl8),
  inference(resolution,[],[f1189,f605])).
fof(f7314,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') != s(bool,X10)) ) | $spl8),
  inference(resolution,[],[f1189,f604])).
fof(f7313,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'T_0') != s(bool,X6) | s(bool,X7) != s(bool,X8)) ) | $spl8),
  inference(resolution,[],[f1189,f602])).
fof(f7311,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') != s(bool,X1)) ) | $spl8),
  inference(resolution,[],[f1189,f600])).
fof(f7296,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f5156,f1190])).
fof(f5156,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(forward_demodulation,[],[f5155,f585])).
fof(f585,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f296])).
fof(f296,plain,(
  ! [X0,X1,X2] : s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0')))),
  inference(flattening,[],[f295])).
fof(f295,plain,(
  ! [X0,X1] : ! [X2] : s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0')))),
  inference(rectify,[],[f130])).
fof(f130,axiom,(
  ! [X6,X7] : ! [X26] : s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X26),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LIST_REL_def|split|0')).
fof(f5155,plain,(
  ( ! [X249,X248] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X248,fun('type.pair.prod'(sK12,sK13),bool)),X249),s('type.list.list'(X248),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))))) ) | $spl0),
  inference(subsumption_resolution,[],[f4818,f823])).
fof(f4818,plain,(
  ( ! [X249,X248] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X248,fun('type.pair.prod'(sK12,sK13),bool)),X249),s('type.list.list'(X248),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))) ) | $spl0),
  inference(superposition,[],[f582,f823])).
fof(f582,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) | s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2)) )),
  inference(cnf_transformation,[],[f458])).
fof(f458,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))))),
  inference(nnf_transformation,[],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f291])).
fof(f291,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f99])).
fof(f99,axiom,(
  ! [X6,X7] : ! [X23,X26] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X26),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X23)))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X23))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LIST_REL_NIL|split|0')).
fof(f2156,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'T_0') != s(bool,X1)) ) | $spl60),
  inference(cnf_transformation,[],[f2156_D])).
fof(f2156_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'T_0') != s(bool,X1)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f7271,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,'T_0') != s(bool,X173)) ) | $spl9),
  inference(resolution,[],[f1190,f816])).
fof(f7189,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'T_0') != s(bool,X22) | s(bool,X21) != s(bool,X23)) ) | $spl9),
  inference(resolution,[],[f1190,f606])).
fof(f7187,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,'T_0') != s(bool,X16)) ) | $spl9),
  inference(resolution,[],[f1190,f605])).
fof(f7185,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') != s(bool,X10)) ) | $spl9),
  inference(resolution,[],[f1190,f604])).
fof(f7184,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'T_0') != s(bool,X7) | s(bool,X6) != s(bool,X8)) ) | $spl9),
  inference(resolution,[],[f1190,f602])).
fof(f7182,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') != s(bool,X1)) ) | $spl9),
  inference(resolution,[],[f1190,f600])).
fof(f2747,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl67),
  inference(cnf_transformation,[],[f2747_D])).
fof(f2747_D,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f1189,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f1189_D])).
fof(f1189_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f4959,plain,(
  p(s(bool,'T_0')) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl0),
  inference(forward_demodulation,[],[f4958,f598])).
fof(f598,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f314])).
fof(f314,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f221])).
fof(f221,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.ZIP_EQ_NIL','thm.list.ALL_DISTINCT|split|0')).
fof(f4958,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl0),
  inference(subsumption_resolution,[],[f4733,f553])).
fof(f4733,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl0),
  inference(superposition,[],[f570,f823])).
fof(f570,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(flattening,[],[f396])).
fof(f396,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(ennf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(flattening,[],[f279])).
fof(f279,plain,(
  ! [X0,X1] : ! [X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7] : ! [X8,X9] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X8)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))))))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.ALL_DISTINCT_ZIP')).
fof(f7181,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X4),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl182),
  inference(cnf_transformation,[],[f7181_D])).
fof(f7181_D,plain,(
  ( ! [X4] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X4),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f4937,plain,(
  ( ! [X2] : (p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X2),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(forward_demodulation,[],[f4723,f596])).
fof(f596,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f311])).
fof(f311,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6] : ! [X27] : s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun(X6,bool),X27),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.ZIP_EQ_NIL','thm.list.EVERY_DEF|split|0')).
fof(f4723,plain,(
  ( ! [X2] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X2))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X2),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(superposition,[],[f559,f823])).
fof(f559,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))) )),
  inference(cnf_transformation,[],[f449])).
fof(f449,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(flattening,[],[f448])).
fof(f448,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(nnf_transformation,[],[f268])).
fof(f268,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))))),
  inference(flattening,[],[f267])).
fof(f267,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X26,X8,X9] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X26),s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X6,X7),bool),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,bool)),X26))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LIST_REL_EVERY_ZIP')).
fof(f7180,plain,(
  ( ! [X5] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X5),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl180),
  inference(cnf_transformation,[],[f7180_D])).
fof(f7180_D,plain,(
  ( ! [X5] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X5),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f1190,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(cnf_transformation,[],[f1190_D])).
fof(f1190_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f4939,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X3),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(forward_demodulation,[],[f4938,f596])).
fof(f4938,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X3))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X3),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(subsumption_resolution,[],[f4724,f553])).
fof(f4724,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X3))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X3),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))) ) | $spl0),
  inference(superposition,[],[f560,f823])).
fof(f560,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X2))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) )),
  inference(cnf_transformation,[],[f449])).
fof(f4941,plain,(
  ( ! [X4] : (p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X4),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(forward_demodulation,[],[f4725,f596])).
fof(f4725,plain,(
  ( ! [X4] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X4))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X4),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(superposition,[],[f562,f823])).
fof(f562,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) )),
  inference(cnf_transformation,[],[f451])).
fof(f451,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))),
  inference(flattening,[],[f450])).
fof(f450,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))),
  inference(nnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))))),
  inference(flattening,[],[f269])).
fof(f269,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X7] : ! [X8,X9,X19] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X19),s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X6,X7),bool),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,bool)),X19))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9))))))))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.EVERY2_EVERY')).
fof(f4943,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X5),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(forward_demodulation,[],[f4942,f596])).
fof(f4942,plain,(
  ( ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X5))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X5),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(subsumption_resolution,[],[f4726,f553])).
fof(f4726,plain,(
  ( ! [X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(sK12,sK13),bool),'const.pair.UNCURRY_1'(s(fun(sK12,fun(sK13,bool)),X5))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),X5),s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))) ) | $spl0),
  inference(superposition,[],[f563,f823])).
fof(f563,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f451])).
fof(f7178,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl179),
  inference(cnf_transformation,[],[f7178_D])).
fof(f7178_D,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) <=> ~$spl179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl179])])).
fof(f4954,plain,(
  p(s(bool,'T_0')) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl0),
  inference(forward_demodulation,[],[f4953,f598])).
fof(f4953,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl0),
  inference(subsumption_resolution,[],[f4731,f553])).
fof(f4731,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl0),
  inference(superposition,[],[f569,f823])).
fof(f569,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3))))))))) )),
  inference(cnf_transformation,[],[f395])).
fof(f395,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))))))))),
  inference(flattening,[],[f394])).
fof(f394,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))))))))),
  inference(ennf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3)))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))))))))),
  inference(flattening,[],[f277])).
fof(f277,plain,(
  ! [X0,X1] : ! [X2,X3] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X1,X0)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X1),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X1),X2),s('type.list.list'(X0),X3)))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X3),s('type.list.list'(X1),X2)))))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7,X6] : ! [X8,X9] : ((p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X8),s('type.list.list'(X7),X9)))))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9)))) => p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(X7,X6)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X7),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X7),X9),s('type.list.list'(X6),X8)))))))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.ALL_DISTINCT_ZIP_SWAP')).
fof(f7179,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl178),
  inference(cnf_transformation,[],[f7179_D])).
fof(f7179_D,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f4956,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl0),
  inference(forward_demodulation,[],[f4955,f598])).
fof(f4955,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | $spl0),
  inference(subsumption_resolution,[],[f4732,f553])).
fof(f4732,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,sK12)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(sK12),sK14)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl0),
  inference(superposition,[],[f569,f823])).
fof(f7176,plain,(
  ( ! [X215,X214] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X214),X215))))))))) ) | $spl176),
  inference(cnf_transformation,[],[f7176_D])).
fof(f7176_D,plain,(
  ( ! [X215,X214] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X214),X215))))))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f5122,plain,(
  ( ! [X206,X207] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X206),X207))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X206)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X206)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X206),X207))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5121,f598])).
fof(f5121,plain,(
  ( ! [X206,X207] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X206),X207))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X206)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X206)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X206),X207))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5120,f823])).
fof(f5120,plain,(
  ( ! [X206,X207] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X206),X207))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X206)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X206)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X206),X207)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5119,f597])).
fof(f5119,plain,(
  ( ! [X206,X207] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X206),X207))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X206)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X206)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X206),X207)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4800,f823])).
fof(f4800,plain,(
  ( ! [X206,X207] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X206)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X206)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X206),X207)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X206),X207))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f570,f823])).
fof(f5128,plain,(
  ( ! [X210,X211] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X210)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X210)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X210),X211)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),X211)))) ) | $spl0),
  inference(forward_demodulation,[],[f5127,f598])).
fof(f5127,plain,(
  ( ! [X210,X211] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X210)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X210)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X210),X211)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),X211)))) ) | $spl0),
  inference(forward_demodulation,[],[f5126,f823])).
fof(f5126,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X210)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X210)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X210),X211)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),X211))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5125,f823])).
fof(f5125,plain,(
  ( ! [X210,X211] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),X211))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X210)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X210)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))),s('type.list.list'(X210),X211)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4802,f597])).
fof(f4802,plain,(
  ( ! [X210,X211] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),X211))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X210)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X210)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))),s('type.list.list'(X210),X211)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f570,f823])).
fof(f7175,plain,(
  ( ! [X215,X214] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X214),X215)))))))) | ~p(s(bool,'T_0'))) ) | $spl0),
  inference(forward_demodulation,[],[f7174,f597])).
fof(f7174,plain,(
  ( ! [X215,X214] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X214),X215)))))))) | ~p(s(bool,'T_0'))) ) | $spl0),
  inference(forward_demodulation,[],[f7173,f823])).
fof(f7173,plain,(
  ( ! [X215,X214] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'),s('type.list.list'(X214),X215)))))))) | ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5132,f823])).
fof(f5132,plain,(
  ( ! [X215,X214] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))),s('type.list.list'(X214),X215)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4804,f598])).
fof(f4804,plain,(
  ( ! [X215,X214] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'('type.pair.prod'(sK12,sK13),X214)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'(sK12,sK13)),'type.list.list'(X214)),'const.pair.,_2'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))),s('type.list.list'(X214),X215)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X214),X215))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) ) | $spl0),
  inference(superposition,[],[f570,f823])).
fof(f7172,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X293) = s('type.num.num',X294) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.|48|_0'))))) ) | $spl174),
  inference(cnf_transformation,[],[f7172_D])).
fof(f7172_D,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X293) = s('type.num.num',X294) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f5200,plain,(
  ( ! [X288,X287] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288)) ) | $spl0),
  inference(forward_demodulation,[],[f5199,f598])).
fof(f5199,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288)) ) | $spl0),
  inference(forward_demodulation,[],[f5198,f823])).
fof(f5198,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5197,f597])).
fof(f5197,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5196,f823])).
fof(f5196,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5195,f597])).
fof(f5195,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4847,f823])).
fof(f4847,plain,(
  ( ! [X288,X287] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X287) = s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f650,f823])).
fof(f650,plain,(
  ( ! [X4,X0,X5,X1] : (s('type.num.num',X4) = s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))) )),
  inference(cnf_transformation,[],[f490])).
fof(f490,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5)) & (s('type.num.num',X4) != s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))))))) & ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',sK23(X1,X0)),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'(X0),X1))) | s('type.num.num',sK23(X1,X0)) = s('type.num.num',sK24(X1,X0))) & (s(X0,'const.list.EL_2'(s('type.num.num',sK23(X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'(X0),X1))) | s('type.num.num',sK23(X1,X0)) != s('type.num.num',sK24(X1,X0)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK23,sK24])],[f489])).
fof(f489,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) = s('type.num.num',X5)) & (s('type.num.num',X4) != s('type.num.num',X5) | s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(rectify,[],[f488])).
fof(f488,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s('type.num.num',X2) != s('type.num.num',X3) | s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(flattening,[],[f487])).
fof(f487,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s('type.num.num',X2) != s('type.num.num',X3) | s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))))) & (? [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & ((s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num',X3)) & (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | s('type.num.num',X2) != s('type.num.num',X3)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))))),
  inference(nnf_transformation,[],[f407])).
fof(f407,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(flattening,[],[f406])).
fof(f406,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) | (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(ennf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(flattening,[],[f330])).
fof(f330,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) => (s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) <=> s('type.num.num',X2) = s('type.num.num',X3))))),
  inference(rectify,[],[f127])).
fof(f127,axiom,(
  ! [X6] : ! [X32] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X32)))) <=> ! [X66,X67] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X66),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X32)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X67),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X32))))))) => (s(X6,'const.list.EL_2'(s('type.num.num',X66),s('type.list.list'(X6),X32))) = s(X6,'const.list.EL_2'(s('type.num.num',X67),s('type.list.list'(X6),X32))) <=> s('type.num.num',X66) = s('type.num.num',X67))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.EL_ALL_DISTINCT_EL_EQ')).
fof(f5207,plain,(
  ( ! [X290,X289] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290)) ) | $spl0),
  inference(forward_demodulation,[],[f5206,f598])).
fof(f5206,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290)) ) | $spl0),
  inference(forward_demodulation,[],[f5205,f823])).
fof(f5205,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5204,f597])).
fof(f5204,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5203,f823])).
fof(f5203,plain,(
  ( ! [X290,X289] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5202,f823])).
fof(f5202,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X289) = s('type.num.num',X290) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4848,f597])).
fof(f4848,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.num.num',X289) = s('type.num.num',X290) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f650,f823])).
fof(f5214,plain,(
  ( ! [X292,X291] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292)) ) | $spl0),
  inference(forward_demodulation,[],[f5213,f598])).
fof(f5213,plain,(
  ( ! [X292,X291] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292)) ) | $spl0),
  inference(forward_demodulation,[],[f5212,f823])).
fof(f5212,plain,(
  ( ! [X292,X291] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5211,f597])).
fof(f5211,plain,(
  ( ! [X292,X291] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5210,f823])).
fof(f5210,plain,(
  ( ! [X292,X291] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5209,f823])).
fof(f5209,plain,(
  ( ! [X292,X291] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X291) = s('type.num.num',X292) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4849,f597])).
fof(f4849,plain,(
  ( ! [X292,X291] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X291),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.num.num',X291) = s('type.num.num',X292) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X291),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X292),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X292),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f650,f823])).
fof(f7171,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294)) ) | $spl0),
  inference(forward_demodulation,[],[f7170,f597])).
fof(f7170,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294)) ) | $spl0),
  inference(forward_demodulation,[],[f7169,f823])).
fof(f7169,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f7168,f597])).
fof(f7168,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f7167,f823])).
fof(f7167,plain,(
  ( ! [X294,X293] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5216,f823])).
fof(f5216,plain,(
  ( ! [X294,X293] : (~p(s(bool,'T_0')) | s('type.num.num',X293) = s('type.num.num',X294) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4850,f598])).
fof(f4850,plain,(
  ( ! [X294,X293] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num',X293) = s('type.num.num',X294) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X293),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X294),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X294),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X293),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(superposition,[],[f650,f823])).
fof(f7166,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X301) != s('type.num.num',X302) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0'))))) ) | $spl172),
  inference(cnf_transformation,[],[f7166_D])).
fof(f7166_D,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X301) != s('type.num.num',X302) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f5228,plain,(
  ( ! [X296,X295] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296)) ) | $spl0),
  inference(forward_demodulation,[],[f5227,f598])).
fof(f5227,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296)) ) | $spl0),
  inference(forward_demodulation,[],[f5226,f823])).
fof(f5226,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5225,f597])).
fof(f5225,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5224,f823])).
fof(f5224,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5223,f597])).
fof(f5223,plain,(
  ( ! [X296,X295] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4851,f823])).
fof(f4851,plain,(
  ( ! [X296,X295] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X295),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X296),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',X295) != s('type.num.num',X296) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X296),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X295),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f651,f823])).
fof(f651,plain,(
  ( ! [X4,X0,X5,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X1))) | s('type.num.num',X4) != s('type.num.num',X5) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1))))) )),
  inference(cnf_transformation,[],[f490])).
fof(f5235,plain,(
  ( ! [X298,X297] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X297) != s('type.num.num',X298)) ) | $spl0),
  inference(forward_demodulation,[],[f5234,f598])).
fof(f5234,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X297) != s('type.num.num',X298)) ) | $spl0),
  inference(forward_demodulation,[],[f5233,f823])).
fof(f5233,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X297) != s('type.num.num',X298) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5232,f597])).
fof(f5232,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X297) != s('type.num.num',X298) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5231,f823])).
fof(f5231,plain,(
  ( ! [X298,X297] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X297) != s('type.num.num',X298) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5230,f823])).
fof(f5230,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X297) != s('type.num.num',X298) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4852,f597])).
fof(f4852,plain,(
  ( ! [X298,X297] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X297),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X297),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X298),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X297) != s('type.num.num',X298) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X298),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f651,f823])).
fof(f5242,plain,(
  ( ! [X300,X299] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X299) != s('type.num.num',X300)) ) | $spl0),
  inference(forward_demodulation,[],[f5241,f598])).
fof(f5241,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X299) != s('type.num.num',X300)) ) | $spl0),
  inference(forward_demodulation,[],[f5240,f823])).
fof(f5240,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X299) != s('type.num.num',X300) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5239,f597])).
fof(f5239,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X299) != s('type.num.num',X300) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5238,f823])).
fof(f5238,plain,(
  ( ! [X300,X299] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X299) != s('type.num.num',X300) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5237,f823])).
fof(f5237,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X299) != s('type.num.num',X300) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4853,f597])).
fof(f4853,plain,(
  ( ! [X300,X299] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X299),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X299),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X300),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X299) != s('type.num.num',X300) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X300),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))) ) | $spl0),
  inference(superposition,[],[f651,f823])).
fof(f7165,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X301) != s('type.num.num',X302)) ) | $spl0),
  inference(forward_demodulation,[],[f7164,f597])).
fof(f7164,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X301) != s('type.num.num',X302)) ) | $spl0),
  inference(forward_demodulation,[],[f7163,f823])).
fof(f7163,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X301) != s('type.num.num',X302) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f7162,f597])).
fof(f7162,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X301) != s('type.num.num',X302) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f7161,f823])).
fof(f7161,plain,(
  ( ! [X302,X301] : (s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X301) != s('type.num.num',X302) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f5244,f823])).
fof(f5244,plain,(
  ( ! [X302,X301] : (~p(s(bool,'T_0')) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X301) != s('type.num.num',X302) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f4854,f598])).
fof(f4854,plain,(
  ( ! [X302,X301] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X301),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',X302),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | s('type.num.num',X301) != s('type.num.num',X302) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X302),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X301),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))))))) ) | $spl0),
  inference(superposition,[],[f651,f823])).
fof(f7160,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl170),
  inference(cnf_transformation,[],[f7160_D])).
fof(f7160_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f5253,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(forward_demodulation,[],[f5252,f598])).
fof(f5252,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(forward_demodulation,[],[f5251,f823])).
fof(f5251,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | $spl0),
  inference(forward_demodulation,[],[f4855,f597])).
fof(f4855,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | $spl0),
  inference(superposition,[],[f652,f823])).
fof(f652,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f490])).
fof(f7158,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl0),
  inference(forward_demodulation,[],[f7157,f597])).
fof(f7157,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl0),
  inference(forward_demodulation,[],[f5254,f823])).
fof(f5254,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | $spl0),
  inference(forward_demodulation,[],[f4856,f598])).
fof(f4856,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | $spl0),
  inference(superposition,[],[f652,f823])).
fof(f7156,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl168),
  inference(cnf_transformation,[],[f7156_D])).
fof(f7156_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f5257,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(forward_demodulation,[],[f5256,f598])).
fof(f5256,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(forward_demodulation,[],[f5255,f823])).
fof(f5255,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | $spl0),
  inference(forward_demodulation,[],[f4857,f597])).
fof(f4857,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | $spl0),
  inference(superposition,[],[f653,f823])).
fof(f653,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f490])).
fof(f7154,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl0),
  inference(forward_demodulation,[],[f7153,f597])).
fof(f7153,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl0),
  inference(forward_demodulation,[],[f5258,f823])).
fof(f5258,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | $spl0),
  inference(forward_demodulation,[],[f4858,f598])).
fof(f4858,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))))) | $spl0),
  inference(superposition,[],[f653,f823])).
fof(f7148,plain,(
  s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl164),
  inference(cnf_transformation,[],[f7148_D])).
fof(f7148_D,plain,(
  s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f7150,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | $spl166),
  inference(cnf_transformation,[],[f7150_D])).
fof(f7150_D,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f5260,plain,(
  p(s(bool,'T_0')) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f5259,f598])).
fof(f5259,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f4859,f823])).
fof(f4859,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(superposition,[],[f654,f823])).
fof(f654,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | s('type.num.num',sK23(X1,X0)) = s('type.num.num',sK24(X1,X0)) | s(X0,'const.list.EL_2'(s('type.num.num',sK23(X1,X0)),s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f490])).
fof(f7152,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f5261,f823])).
fof(f5261,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | $spl0),
  inference(forward_demodulation,[],[f4860,f598])).
fof(f4860,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) = s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) = s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | $spl0),
  inference(superposition,[],[f654,f823])).
fof(f7149,plain,(
  s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl165),
  inference(cnf_transformation,[],[f7149_D])).
fof(f7149_D,plain,(
  s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) <=> ~$spl165),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl165])])).
fof(f7151,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | $spl167),
  inference(cnf_transformation,[],[f7151_D])).
fof(f7151_D,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) <=> ~$spl167),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl167])])).
fof(f5263,plain,(
  p(s(bool,'T_0')) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f5262,f598])).
fof(f5262,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f4861,f823])).
fof(f4861,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(superposition,[],[f655,f823])).
fof(f655,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X1)))) | s('type.num.num',sK23(X1,X0)) != s('type.num.num',sK24(X1,X0)) | s(X0,'const.list.EL_2'(s('type.num.num',sK23(X1,X0)),s('type.list.list'(X0),X1))) != s(X0,'const.list.EL_2'(s('type.num.num',sK24(X1,X0)),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f490])).
fof(f7147,plain,(
  s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | $spl0),
  inference(forward_demodulation,[],[f5264,f823])).
fof(f5264,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | $spl0),
  inference(forward_demodulation,[],[f4862,f598])).
fof(f4862,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0')))) | s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) != s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))) | s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK23('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) != s('type.pair.prod'(sK12,sK13),'const.list.EL_2'(s('type.num.num',sK24('const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))),'type.pair.prod'(sK12,sK13))),s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))))) | $spl0),
  inference(superposition,[],[f655,f823])).
fof(f7146,plain,(
  ( ! [X37,X35,X36] : (sP11('const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')),'F_0')) ) | $spl162),
  inference(cnf_transformation,[],[f7146_D])).
fof(f7146_D,plain,(
  ( ! [X37,X35,X36] : (sP11('const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')),'F_0')) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f5576,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | sP11('const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')),'F_0')) ) | $spl13),
  inference(superposition,[],[f2477,f585])).
fof(f2477,plain,(
  ( ! [X166] : (~p(s(bool,X166)) | sP11(X166,'F_0')) ) | $spl13),
  inference(resolution,[],[f1235,f761])).
fof(f761,plain,(
  ( ! [X0,X1] : (sP11(X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f531])).
fof(f531,plain,(
  ! [X0,X1] : ((~sP11(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP11(X0,X1)))),
  inference(rectify,[],[f530])).
fof(f530,plain,(
  ! [X1,X0] : ((~sP11(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP11(X1,X0)))),
  inference(flattening,[],[f529])).
fof(f529,plain,(
  ! [X1,X0] : ((~sP11(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP11(X1,X0)))),
  inference(nnf_transformation,[],[f443])).
fof(f443,plain,(
  ! [X1,X0] : (sP11(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f7145,plain,(
  ( ! [X43,X44] : (sP11('const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')),'F_0')) ) | $spl160),
  inference(cnf_transformation,[],[f7145_D])).
fof(f7145_D,plain,(
  ( ! [X43,X44] : (sP11('const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')),'F_0')) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f5578,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | sP11('const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')),'F_0')) ) | $spl13),
  inference(superposition,[],[f2477,f596])).
fof(f7144,plain,(
  ( ! [X45] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')),'F_0')) ) | $spl158),
  inference(cnf_transformation,[],[f7144_D])).
fof(f7144_D,plain,(
  ( ! [X45] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')),'F_0')) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f5579,plain,(
  ( ! [X45] : (~p(s(bool,'T_0')) | sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')),'F_0')) ) | $spl13),
  inference(superposition,[],[f2477,f598])).
fof(f4219,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl82),
  inference(cnf_transformation,[],[f4219_D])).
fof(f4219_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f5766,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl75),
  inference(forward_demodulation,[],[f5727,f598])).
fof(f5727,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl75),
  inference(superposition,[],[f3854,f583])).
fof(f583,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(cnf_transformation,[],[f459])).
fof(f459,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) | s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2)) & (s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),X2) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))))),
  inference(nnf_transformation,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(flattening,[],[f293])).
fof(f293,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2)))) <=> s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2))),
  inference(rectify,[],[f100])).
fof(f100,axiom,(
  ! [X6,X7] : ! [X24,X26] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X26),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),X24)))) <=> s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),X24))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LIST_REL_NIL|split|1')).
fof(f5768,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl75),
  inference(forward_demodulation,[],[f5728,f598])).
fof(f5728,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl75),
  inference(superposition,[],[f3854,f581])).
fof(f581,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),X2) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X3),s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) )),
  inference(cnf_transformation,[],[f458])).
fof(f7143,plain,(
  ( ! [X37,X35,X36] : (sP11('F_0','const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')))) ) | $spl156),
  inference(cnf_transformation,[],[f7143_D])).
fof(f7143_D,plain,(
  ( ! [X37,X35,X36] : (sP11('F_0','const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f5900,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | sP11('F_0','const.list.LIST_REL_3'(s(fun(X35,fun(X36,bool)),X37),s('type.list.list'(X35),'const.list.NIL_0'),s('type.list.list'(X36),'const.list.NIL_0')))) ) | $spl13),
  inference(superposition,[],[f2478,f585])).
fof(f2478,plain,(
  ( ! [X167] : (~p(s(bool,X167)) | sP11('F_0',X167)) ) | $spl13),
  inference(resolution,[],[f1235,f764])).
fof(f764,plain,(
  ( ! [X0,X1] : (sP11(X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f531])).
fof(f7142,plain,(
  ( ! [X43,X44] : (sP11('F_0','const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')))) ) | $spl154),
  inference(cnf_transformation,[],[f7142_D])).
fof(f7142_D,plain,(
  ( ! [X43,X44] : (sP11('F_0','const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f5902,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | sP11('F_0','const.list.EVERY_2'(s(fun(X43,bool),X44),s('type.list.list'(X43),'const.list.NIL_0')))) ) | $spl13),
  inference(superposition,[],[f2478,f596])).
fof(f7141,plain,(
  ( ! [X45] : (sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')))) ) | $spl152),
  inference(cnf_transformation,[],[f7141_D])).
fof(f7141_D,plain,(
  ( ! [X45] : (sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f5903,plain,(
  ( ! [X45] : (~p(s(bool,'T_0')) | sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(X45),'const.list.NIL_0')))) ) | $spl13),
  inference(superposition,[],[f2478,f598])).
fof(f4924,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl102),
  inference(cnf_transformation,[],[f4924_D])).
fof(f4924_D,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f6849,plain,(
  ( ! [X6,X7] : (p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl66),
  inference(forward_demodulation,[],[f6816,f598])).
fof(f6816,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl66),
  inference(superposition,[],[f2746,f583])).
fof(f6850,plain,(
  ( ! [X8,X9] : (p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl66),
  inference(forward_demodulation,[],[f6817,f598])).
fof(f6817,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl66),
  inference(superposition,[],[f2746,f581])).
fof(f7140,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'F_0') | $spl150),
  inference(cnf_transformation,[],[f7140_D])).
fof(f7140_D,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'F_0') <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f7075,plain,(
  ( ! [X6,X7] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'F_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl13 | $spl66)),
  inference(superposition,[],[f6810,f583])).
fof(f6810,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)),'F_0') | ($spl13 | $spl66)),
  inference(resolution,[],[f2746,f2477])).
fof(f7076,plain,(
  ( ! [X8,X9] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'F_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl13 | $spl66)),
  inference(superposition,[],[f6810,f581])).
fof(f7138,plain,(
  sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | $spl148),
  inference(cnf_transformation,[],[f7138_D])).
fof(f7138_D,plain,(
  sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f7092,plain,(
  ( ! [X6,X7] : (sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl13 | $spl66)),
  inference(superposition,[],[f6811,f583])).
fof(f6811,plain,(
  sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | ($spl13 | $spl66)),
  inference(resolution,[],[f2746,f2478])).
fof(f7093,plain,(
  ( ! [X8,X9] : (sP11('F_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl13 | $spl66)),
  inference(superposition,[],[f6811,f581])).
fof(f7128,plain,(
  $false | ($spl8 | $spl138)),
  inference(subsumption_resolution,[],[f7127,f1189])).
fof(f7127,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl138)),
  inference(forward_demodulation,[],[f7126,f598])).
fof(f7126,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ($spl8 | $spl138)),
  inference(subsumption_resolution,[],[f7104,f1189])).
fof(f7104,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | $spl138),
  inference(resolution,[],[f6668,f760])).
fof(f760,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP11(X0,X1)) )),
  inference(cnf_transformation,[],[f531])).
fof(f7125,plain,(
  $false | ($spl8 | $spl138)),
  inference(subsumption_resolution,[],[f7124,f1189])).
fof(f7124,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl138)),
  inference(forward_demodulation,[],[f7123,f598])).
fof(f7123,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ($spl8 | $spl138)),
  inference(subsumption_resolution,[],[f7101,f1189])).
fof(f7101,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | $spl138),
  inference(resolution,[],[f6668,f767])).
fof(f767,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | ~sP11(X1,X0)) )),
  inference(cnf_transformation,[],[f532])).
fof(f532,plain,(
  ! [X0,X1] : ((((p(s(bool,X1)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)))) | sP11(X1,X0)) & (~sP11(X1,X0) | ((~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X0)) | p(s(bool,X1))))))),
  inference(nnf_transformation,[],[f444])).
fof(f444,plain,(
  ! [X0,X1] : ((p(s(bool,X1)) <=> ~p(s(bool,X0))) <=> sP11(X1,X0))),
  inference(definition_folding,[],[f349,f443])).
fof(f349,plain,(
  ! [X0,X1] : ((p(s(bool,X1)) <=> ~p(s(bool,X0))) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  inference(flattening,[],[f348])).
fof(f348,plain,(
  ! [X0,X1] : ((p(s(bool,X1)) <=> ~p(s(bool,X0))) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X52,X25] : ((p(s(bool,X25)) <=> ~p(s(bool,X52))) <=> ((p(s(bool,X25)) | p(s(bool,X52))) & (~p(s(bool,X52)) | ~p(s(bool,X25)))))),
  file('thm.list.ZIP_EQ_NIL','thm.sat.sat_29_prove_ltb')).
fof(f7122,plain,(
  $false | ($spl8 | $spl138)),
  inference(subsumption_resolution,[],[f7121,f1189])).
fof(f7121,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl138)),
  inference(forward_demodulation,[],[f7100,f598])).
fof(f7100,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ($spl8 | $spl138)),
  inference(resolution,[],[f6668,f2239])).
fof(f2239,plain,(
  ( ! [X166] : (~sP11('T_0',X166) | ~p(s(bool,X166))) ) | $spl8),
  inference(resolution,[],[f1189,f760])).
fof(f7026,plain,(
  $false | ($spl3 | $spl80)),
  inference(subsumption_resolution,[],[f4216,f3987])).
fof(f6984,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')),'T_0') | $spl146),
  inference(cnf_transformation,[],[f6984_D])).
fof(f6984_D,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')),'T_0') <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f6976,plain,(
  ( ! [X8,X9] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')),'T_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | ($spl8 | $spl75)),
  inference(superposition,[],[f5722,f581])).
fof(f5722,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)),'T_0') | ($spl8 | $spl75)),
  inference(resolution,[],[f3854,f2242])).
fof(f2242,plain,(
  ( ! [X169] : (p(s(bool,X169)) | sP11(X169,'T_0')) ) | $spl8),
  inference(resolution,[],[f1189,f764])).
fof(f6975,plain,(
  ( ! [X6,X7] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')),'T_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | ($spl8 | $spl75)),
  inference(superposition,[],[f5722,f583])).
fof(f6965,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl144),
  inference(cnf_transformation,[],[f6965_D])).
fof(f6965_D,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f6957,plain,(
  ( ! [X8,X9] : (sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | ($spl8 | $spl75)),
  inference(superposition,[],[f5721,f581])).
fof(f5721,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))) | ($spl8 | $spl75)),
  inference(resolution,[],[f3854,f2241])).
fof(f2241,plain,(
  ( ! [X168] : (p(s(bool,X168)) | sP11('T_0',X168)) ) | $spl8),
  inference(resolution,[],[f1189,f761])).
fof(f6956,plain,(
  ( ! [X6,X7] : (sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | ($spl8 | $spl75)),
  inference(superposition,[],[f5721,f583])).
fof(f6846,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl142),
  inference(cnf_transformation,[],[f6846_D])).
fof(f6846_D,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f6806,plain,(
  ( ! [X180,X181] : (p(s(bool,X180)) | p(s(bool,X181)) | s(bool,X181) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl66),
  inference(resolution,[],[f2746,f816])).
fof(f6723,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X28) != s(bool,X29)) ) | $spl66),
  inference(resolution,[],[f2746,f606])).
fof(f6720,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | ~p(s(bool,X19)) | p(s(bool,X20)) | s(bool,X20) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl66),
  inference(resolution,[],[f2746,f605])).
fof(f6719,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | p(s(bool,X16)) | s(bool,X15) != s(bool,X17) | s(bool,X16) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl66),
  inference(resolution,[],[f2746,f604])).
fof(f6718,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X13) != s(bool,X14)) ) | $spl66),
  inference(resolution,[],[f2746,f602])).
fof(f6716,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | p(s(bool,X7)) | s(bool,X6) != s(bool,X8) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl66),
  inference(resolution,[],[f2746,f600])).
fof(f5422,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl106),
  inference(cnf_transformation,[],[f5422_D])).
fof(f5422_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f2746,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl66),
  inference(cnf_transformation,[],[f2746_D])).
fof(f2746_D,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f6223,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl27),
  inference(trivial_inequality_removal,[],[f6207])).
fof(f6207,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK23(sK14,sK12)) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl27),
  inference(superposition,[],[f1333,f654])).
fof(f6687,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') | $spl140),
  inference(cnf_transformation,[],[f6687_D])).
fof(f6687_D,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f6679,plain,(
  ( ! [X8,X9] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl8 | $spl67)),
  inference(superposition,[],[f5386,f581])).
fof(f5386,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)),'T_0') | ($spl8 | $spl67)),
  inference(resolution,[],[f2747,f2242])).
fof(f6678,plain,(
  ( ! [X6,X7] : (sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl8 | $spl67)),
  inference(superposition,[],[f5386,f583])).
fof(f4215,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl81),
  inference(cnf_transformation,[],[f4215_D])).
fof(f4215_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f6677,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl8 | $spl67)),
  inference(superposition,[],[f5386,f589])).
fof(f6676,plain,(
  sP11('const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')),'T_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl8 | $spl67)),
  inference(superposition,[],[f5386,f591])).
fof(f591,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f461])).
fof(f461,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f305])).
fof(f305,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6] : ! [X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X32))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X32))),
  file('thm.list.ZIP_EQ_NIL','thm.list.LENGTH_NIL_SYM')).
fof(f6668,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | $spl138),
  inference(cnf_transformation,[],[f6668_D])).
fof(f6668_D,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f6660,plain,(
  ( ! [X8,X9] : (sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl8 | $spl67)),
  inference(superposition,[],[f5385,f581])).
fof(f5385,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | ($spl8 | $spl67)),
  inference(resolution,[],[f2747,f2241])).
fof(f6659,plain,(
  ( ! [X6,X7] : (sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | ($spl8 | $spl67)),
  inference(superposition,[],[f5385,f583])).
fof(f6658,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl8 | $spl67)),
  inference(superposition,[],[f5385,f589])).
fof(f6657,plain,(
  sP11('T_0','const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl8 | $spl67)),
  inference(superposition,[],[f5385,f591])).
fof(f6543,plain,(
  s('type.num.num',sK24(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) | $spl136),
  inference(cnf_transformation,[],[f6543_D])).
fof(f6543_D,plain,(
  s('type.num.num',sK24(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f6403,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK15,sK13)) | $spl129),
  inference(cnf_transformation,[],[f6403_D])).
fof(f6403_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK15,sK13)) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f6531,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK15,sK13)) | s('type.num.num',sK24(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) | $spl47),
  inference(superposition,[],[f1877,f811])).
fof(f811,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f552])).
fof(f552,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25])],[f383])).
fof(f383,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f138])).
fof(f138,axiom,(
  ! [X31] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X31) | ? [X15] : s('type.num.num',X31) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),
  file('thm.list.ZIP_EQ_NIL','thm.arithmetic.num_CASES')).
fof(f6541,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK15,sK13))))) ) | $spl134),
  inference(cnf_transformation,[],[f6541_D])).
fof(f6541_D,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK15,sK13))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f6528,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK15,sK13)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK15,sK13))))) ) | $spl47),
  inference(superposition,[],[f1877,f802])).
fof(f802,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f550])).
fof(f550,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f549])).
fof(f549,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f374])).
fof(f374,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f240])).
fof(f240,axiom,(
  ! [X31,X15] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X15))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X31) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X15)))),
  file('thm.list.ZIP_EQ_NIL','thm.arithmetic.ADD_EQ_|48|')).
fof(f6540,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num',X10)))) ) | $spl132),
  inference(cnf_transformation,[],[f6540_D])).
fof(f6540_D,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num',X10)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f6527,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK15,sK13)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num',X10)))) ) | $spl47),
  inference(superposition,[],[f1877,f801])).
fof(f801,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f550])).
fof(f6417,plain,(
  $false | ($spl46 | $spl75)),
  inference(trivial_inequality_removal,[],[f6416])).
fof(f6416,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) | ($spl46 | $spl75)),
  inference(forward_demodulation,[],[f6415,f1878])).
fof(f6415,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | ($spl46 | $spl75)),
  inference(subsumption_resolution,[],[f6390,f3854])).
fof(f6390,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl46),
  inference(trivial_inequality_removal,[],[f6278])).
fof(f6278,plain,(
  s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK23(sK15,sK13)) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl46),
  inference(superposition,[],[f655,f1878])).
fof(f6414,plain,(
  $false | ($spl46 | $spl75)),
  inference(subsumption_resolution,[],[f6413,f1878])).
fof(f6413,plain,(
  s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | ($spl46 | $spl75)),
  inference(subsumption_resolution,[],[f6391,f3854])).
fof(f6391,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl46),
  inference(trivial_inequality_removal,[],[f6277])).
fof(f6277,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl46),
  inference(superposition,[],[f655,f1878])).
fof(f6404,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK15,sK13)) | $spl128),
  inference(cnf_transformation,[],[f6404_D])).
fof(f6404_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK15,sK13)) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f6406,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) | $spl130),
  inference(cnf_transformation,[],[f6406_D])).
fof(f6406_D,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f6402,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK15,sK13)) | $spl46),
  inference(forward_demodulation,[],[f6269,f1878])).
fof(f6269,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK15,sK13)) | s('type.num.num',sK24(sK15,sK13)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK15,sK13))))) | $spl46),
  inference(superposition,[],[f1878,f811])).
fof(f6228,plain,(
  s('type.num.num',sK24(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) | $spl126),
  inference(cnf_transformation,[],[f6228_D])).
fof(f6228_D,plain,(
  s('type.num.num',sK24(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f6091,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK14,sK12)) | $spl119),
  inference(cnf_transformation,[],[f6091_D])).
fof(f6091_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK14,sK12)) <=> ~$spl119),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl119])])).
fof(f6216,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK14,sK12)) | s('type.num.num',sK24(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) | $spl27),
  inference(superposition,[],[f1333,f811])).
fof(f6226,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK14,sK12))))) ) | $spl124),
  inference(cnf_transformation,[],[f6226_D])).
fof(f6226_D,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK14,sK12))))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f6213,plain,(
  ( ! [X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK14,sK12)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK24(sK14,sK12))))) ) | $spl27),
  inference(superposition,[],[f1333,f802])).
fof(f6225,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num',X10)))) ) | $spl122),
  inference(cnf_transformation,[],[f6225_D])).
fof(f6225_D,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num',X10)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f6212,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK23(sK14,sK12)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num',X10)))) ) | $spl27),
  inference(superposition,[],[f1333,f801])).
fof(f6105,plain,(
  $false | ($spl26 | $spl67)),
  inference(trivial_inequality_removal,[],[f6104])).
fof(f6104,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) | ($spl26 | $spl67)),
  inference(forward_demodulation,[],[f6103,f1334])).
fof(f6103,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | ($spl26 | $spl67)),
  inference(subsumption_resolution,[],[f6078,f2747])).
fof(f6078,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl26),
  inference(trivial_inequality_removal,[],[f5966])).
fof(f5966,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK23(sK14,sK12)) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl26),
  inference(superposition,[],[f655,f1334])).
fof(f6102,plain,(
  $false | ($spl26 | $spl67)),
  inference(subsumption_resolution,[],[f6101,f1334])).
fof(f6101,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | ($spl26 | $spl67)),
  inference(subsumption_resolution,[],[f6079,f2747])).
fof(f6079,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl26),
  inference(trivial_inequality_removal,[],[f5965])).
fof(f5965,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl26),
  inference(superposition,[],[f655,f1334])).
fof(f6092,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK14,sK12)) | $spl118),
  inference(cnf_transformation,[],[f6092_D])).
fof(f6092_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK14,sK12)) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f6094,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) | $spl120),
  inference(cnf_transformation,[],[f6094_D])).
fof(f6094_D,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f6090,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK14,sK12)) | $spl26),
  inference(forward_demodulation,[],[f5957,f1334])).
fof(f5957,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK23(sK14,sK12)) | s('type.num.num',sK24(sK14,sK12)) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25(sK24(sK14,sK12))))) | $spl26),
  inference(superposition,[],[f1334,f811])).
fof(f5918,plain,(
  ( ! [X2,X0] : (sP11('F_0',X0) | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) | $spl116),
  inference(cnf_transformation,[],[f5918_D])).
fof(f5918_D,plain,(
  ( ! [X2,X0] : (sP11('F_0',X0) | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f5859,plain,(
  ( ! [X261,X263,X262] : (sP11('F_0',X261) | p(s(bool,X262)) | ~p(s(bool,X263)) | s(bool,X261) != s(bool,X263)) ) | $spl13),
  inference(resolution,[],[f2478,f816])).
fof(f5777,plain,(
  ( ! [X30,X28,X31,X29] : (sP11('F_0',X28) | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X30) | s(bool,X29) != s(bool,X31)) ) | $spl13),
  inference(resolution,[],[f2478,f606])).
fof(f5775,plain,(
  ( ! [X23,X21,X22,X20] : (sP11('F_0',X20) | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X20) != s(bool,X22)) ) | $spl13),
  inference(resolution,[],[f2478,f605])).
fof(f5773,plain,(
  ( ! [X14,X12,X15,X13] : (sP11('F_0',X12) | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl13),
  inference(resolution,[],[f2478,f604])).
fof(f5772,plain,(
  ( ! [X10,X8,X11,X9] : (sP11('F_0',X8) | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,X11)) ) | $spl13),
  inference(resolution,[],[f2478,f602])).
fof(f5770,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('F_0',X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl13),
  inference(resolution,[],[f2478,f600])).
fof(f5761,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) | $spl114),
  inference(cnf_transformation,[],[f5761_D])).
fof(f5761_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f5718,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,X173) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) | $spl75),
  inference(resolution,[],[f3854,f816])).
fof(f5636,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))) | s(bool,X21) != s(bool,X23)) ) | $spl75),
  inference(resolution,[],[f3854,f606])).
fof(f5634,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) | $spl75),
  inference(resolution,[],[f3854,f605])).
fof(f5632,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) | $spl75),
  inference(resolution,[],[f3854,f604])).
fof(f5631,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))) | s(bool,X6) != s(bool,X8)) ) | $spl75),
  inference(resolution,[],[f3854,f602])).
fof(f5629,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) ) | $spl75),
  inference(resolution,[],[f3854,f600])).
fof(f5759,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl113),
  inference(cnf_transformation,[],[f5759_D])).
fof(f5759_D,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f1877,plain,(
  s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl47),
  inference(cnf_transformation,[],[f1877_D])).
fof(f1877_D,plain,(
  s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f5628,plain,(
  s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl75),
  inference(resolution,[],[f3854,f655])).
fof(f5760,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl112),
  inference(cnf_transformation,[],[f5760_D])).
fof(f5760_D,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f1878,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | $spl46),
  inference(cnf_transformation,[],[f1878_D])).
fof(f1878_D,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f5627,plain,(
  s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl75),
  inference(resolution,[],[f3854,f654])).
fof(f5594,plain,(
  ( ! [X2,X0] : (sP11(X0,'F_0') | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) | $spl110),
  inference(cnf_transformation,[],[f5594_D])).
fof(f5594_D,plain,(
  ( ! [X2,X0] : (sP11(X0,'F_0') | s(bool,X0) != s(bool,X2) | ~p(s(bool,X2))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f5535,plain,(
  ( ! [X261,X263,X262] : (sP11(X261,'F_0') | p(s(bool,X262)) | ~p(s(bool,X263)) | s(bool,X261) != s(bool,X263)) ) | $spl13),
  inference(resolution,[],[f2477,f816])).
fof(f5453,plain,(
  ( ! [X30,X28,X31,X29] : (sP11(X28,'F_0') | ~p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X30) | s(bool,X29) != s(bool,X31)) ) | $spl13),
  inference(resolution,[],[f2477,f606])).
fof(f5451,plain,(
  ( ! [X23,X21,X22,X20] : (sP11(X20,'F_0') | p(s(bool,X21)) | ~p(s(bool,X22)) | ~p(s(bool,X23)) | s(bool,X20) != s(bool,X22)) ) | $spl13),
  inference(resolution,[],[f2477,f605])).
fof(f5449,plain,(
  ( ! [X14,X12,X15,X13] : (sP11(X12,'F_0') | p(s(bool,X13)) | ~p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl13),
  inference(resolution,[],[f2477,f604])).
fof(f5448,plain,(
  ( ! [X10,X8,X11,X9] : (sP11(X8,'F_0') | ~p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,X11)) ) | $spl13),
  inference(resolution,[],[f2477,f602])).
fof(f5446,plain,(
  ( ! [X2,X0,X3,X1] : (sP11(X0,'F_0') | p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl13),
  inference(resolution,[],[f2477,f600])).
fof(f5382,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,X173) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f816])).
fof(f5300,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,X22) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X21) != s(bool,X23)) ) | $spl67),
  inference(resolution,[],[f2747,f606])).
fof(f5298,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,X16) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f605])).
fof(f5296,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f604])).
fof(f5295,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,X7) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))) | s(bool,X6) != s(bool,X8)) ) | $spl67),
  inference(resolution,[],[f2747,f602])).
fof(f5293,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,X1) != s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) ) | $spl67),
  inference(resolution,[],[f2747,f600])).
fof(f5421,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl107),
  inference(cnf_transformation,[],[f5421_D])).
fof(f5421_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f1333,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl27),
  inference(cnf_transformation,[],[f1333_D])).
fof(f1333_D,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f5292,plain,(
  s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl67),
  inference(resolution,[],[f2747,f655])).
fof(f1334,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | $spl26),
  inference(cnf_transformation,[],[f1334_D])).
fof(f1334_D,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f5291,plain,(
  s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl67),
  inference(resolution,[],[f2747,f654])).
fof(f4927,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | $spl104),
  inference(cnf_transformation,[],[f4927_D])).
fof(f4927_D,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f4699,plain,(
  ( ! [X8,X9] : (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(superposition,[],[f823,f581])).
fof(f4698,plain,(
  ( ! [X6,X7] : (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) ) | $spl0),
  inference(superposition,[],[f823,f583])).
fof(f4928,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | $spl0),
  inference(forward_demodulation,[],[f4697,f553])).
fof(f4697,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl0),
  inference(superposition,[],[f823,f589])).
fof(f4925,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | $spl0),
  inference(forward_demodulation,[],[f4696,f553])).
fof(f4696,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl0),
  inference(superposition,[],[f823,f591])).
fof(f4923,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) | $spl100),
  inference(cnf_transformation,[],[f4923_D])).
fof(f4923_D,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f4687,plain,(
  ( ! [X8,X9] : (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK12,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl0),
  inference(superposition,[],[f823,f581])).
fof(f4686,plain,(
  ( ! [X6,X7] : (s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK12,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK12),sK14))))) ) | $spl0),
  inference(superposition,[],[f823,f583])).
fof(f4685,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl0),
  inference(superposition,[],[f823,f589])).
fof(f4684,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl0),
  inference(superposition,[],[f823,f591])).
fof(f4678,plain,(
  ( ! [X2,X0] : (sP11(X0,'T_0') | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) | $spl98),
  inference(cnf_transformation,[],[f4678_D])).
fof(f4678_D,plain,(
  ( ! [X2,X0] : (sP11(X0,'T_0') | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f4614,plain,(
  ( ! [X265,X264,X266] : (sP11(X264,'T_0') | p(s(bool,X265)) | p(s(bool,X266)) | s(bool,X264) != s(bool,X266)) ) | $spl8),
  inference(resolution,[],[f2242,f816])).
fof(f4531,plain,(
  ( ! [X30,X28,X31,X29] : (sP11(X28,'T_0') | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X29) | s(bool,X30) != s(bool,X31)) ) | $spl8),
  inference(resolution,[],[f2242,f606])).
fof(f4528,plain,(
  ( ! [X19,X17,X18,X16] : (sP11(X16,'T_0') | p(s(bool,X17)) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X16) != s(bool,X19)) ) | $spl8),
  inference(resolution,[],[f2242,f605])).
fof(f4527,plain,(
  ( ! [X14,X12,X15,X13] : (sP11(X12,'T_0') | p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl8),
  inference(resolution,[],[f2242,f604])).
fof(f4526,plain,(
  ( ! [X10,X8,X11,X9] : (sP11(X8,'T_0') | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X9) | s(bool,X10) != s(bool,X11)) ) | $spl8),
  inference(resolution,[],[f2242,f602])).
fof(f4524,plain,(
  ( ! [X2,X0,X3,X1] : (sP11(X0,'T_0') | p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl8),
  inference(resolution,[],[f2242,f600])).
fof(f4515,plain,(
  ( ! [X2,X0] : (sP11('T_0',X0) | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) | $spl96),
  inference(cnf_transformation,[],[f4515_D])).
fof(f4515_D,plain,(
  ( ! [X2,X0] : (sP11('T_0',X0) | s(bool,X0) != s(bool,X2) | p(s(bool,X2))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f4451,plain,(
  ( ! [X265,X264,X266] : (sP11('T_0',X264) | p(s(bool,X265)) | p(s(bool,X266)) | s(bool,X264) != s(bool,X266)) ) | $spl8),
  inference(resolution,[],[f2241,f816])).
fof(f4368,plain,(
  ( ! [X30,X28,X31,X29] : (sP11('T_0',X28) | p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X28) != s(bool,X29) | s(bool,X30) != s(bool,X31)) ) | $spl8),
  inference(resolution,[],[f2241,f606])).
fof(f4365,plain,(
  ( ! [X19,X17,X18,X16] : (sP11('T_0',X16) | p(s(bool,X17)) | ~p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X16) != s(bool,X19)) ) | $spl8),
  inference(resolution,[],[f2241,f605])).
fof(f4364,plain,(
  ( ! [X14,X12,X15,X13] : (sP11('T_0',X12) | p(s(bool,X13)) | p(s(bool,X14)) | s(bool,X13) != s(bool,X15) | s(bool,X12) != s(bool,X14)) ) | $spl8),
  inference(resolution,[],[f2241,f604])).
fof(f4363,plain,(
  ( ! [X10,X8,X11,X9] : (sP11('T_0',X8) | p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X8) != s(bool,X9) | s(bool,X10) != s(bool,X11)) ) | $spl8),
  inference(resolution,[],[f2241,f602])).
fof(f4361,plain,(
  ( ! [X2,X0,X3,X1] : (sP11('T_0',X0) | p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X1) != s(bool,X3) | s(bool,X0) != s(bool,X2)) ) | $spl8),
  inference(resolution,[],[f2241,f600])).
fof(f4216,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl80),
  inference(cnf_transformation,[],[f4216_D])).
fof(f4216_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f4233,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl84),
  inference(cnf_transformation,[],[f4233_D])).
fof(f4233_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f4322,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))),
  inference(forward_demodulation,[],[f4163,f553])).
fof(f4163,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))),
  inference(superposition,[],[f811,f553])).
fof(f3853,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl74),
  inference(cnf_transformation,[],[f3853_D])).
fof(f3853_D,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f4262,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl94),
  inference(cnf_transformation,[],[f4262_D])).
fof(f4262_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f4099,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))),
  inference(superposition,[],[f653,f553])).
fof(f4260,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl92),
  inference(cnf_transformation,[],[f4260_D])).
fof(f4260_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f4098,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))),
  inference(superposition,[],[f652,f553])).
fof(f3854,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl75),
  inference(cnf_transformation,[],[f3854_D])).
fof(f3854_D,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f4257,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK13),sK15)))) ) | $spl90),
  inference(cnf_transformation,[],[f4257_D])).
fof(f4257_D,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK13),sK15)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f4258,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK13),sK15))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4097,f553])).
fof(f4097,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK13),sK15))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f651,f553])).
fof(f4256,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK13),sK15))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4096,f553])).
fof(f4096,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK13),sK15))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f651,f553])).
fof(f4254,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X96) = s('type.num.num',X97)) ) | $spl88),
  inference(cnf_transformation,[],[f4254_D])).
fof(f4254_D,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X96) = s('type.num.num',X97)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f4255,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X98) = s('type.num.num',X99) | s(sK13,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4095,f553])).
fof(f4095,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X98) = s('type.num.num',X99) | s(sK13,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f650,f553])).
fof(f4253,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X96) = s('type.num.num',X97) | s(sK13,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4094,f553])).
fof(f4094,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | s('type.num.num',X96) = s('type.num.num',X97) | s(sK13,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f650,f553])).
fof(f4248,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74))))))))) ) | $spl86),
  inference(cnf_transformation,[],[f4248_D])).
fof(f4248_D,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74))))))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f4078,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f570,f553])).
fof(f4231,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))),
  inference(forward_demodulation,[],[f4047,f553])).
fof(f4047,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK25('const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))),
  inference(superposition,[],[f553,f811])).
fof(f4220,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4025,f597])).
fof(f4025,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X8,fun(sK13,bool)),X9),s('type.list.list'(X8),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f553,f581])).
fof(f4218,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) )),
  inference(forward_demodulation,[],[f4024,f597])).
fof(f4024,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(sK13,bool)),X7),s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(sK13),sK15))))) )),
  inference(superposition,[],[f553,f583])).
fof(f4214,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl79),
  inference(cnf_transformation,[],[f4214_D])).
fof(f4214_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f4217,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))),
  inference(forward_demodulation,[],[f4023,f597])).
fof(f4023,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))),
  inference(superposition,[],[f553,f589])).
fof(f4212,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))),
  inference(forward_demodulation,[],[f4022,f597])).
fof(f4022,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))),
  inference(superposition,[],[f553,f591])).
fof(f3859,plain,(
  $false | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f3828,f828])).
fof(f3828,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | $spl2),
  inference(trivial_inequality_removal,[],[f3704])).
fof(f3704,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | $spl2),
  inference(superposition,[],[f591,f3626])).
fof(f3626,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl2),
  inference(forward_demodulation,[],[f3625,f597])).
fof(f3625,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) | $spl2),
  inference(forward_demodulation,[],[f553,f825])).
fof(f3858,plain,(
  $false | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f3829,f828])).
fof(f3829,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | $spl2),
  inference(trivial_inequality_removal,[],[f3703])).
fof(f3703,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | $spl2),
  inference(superposition,[],[f589,f3626])).
fof(f3855,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74))))))))) ) | $spl76),
  inference(cnf_transformation,[],[f3855_D])).
fof(f3855_D,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74))))))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f3697,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X73),X74)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl2),
  inference(superposition,[],[f570,f3626])).
fof(f3624,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f3623,f573])).
fof(f573,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f283])).
fof(f283,plain,(
  ! [X0,X1] : s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X7),'const.list.NIL_0')))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.ZIP|split|0')).
fof(f3623,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK13),'const.list.NIL_0'))))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f2839,f825])).
fof(f2839,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),'const.list.NIL_0'))))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f824,f827])).
fof(f3522,plain,(
  $false | ($spl13 | $spl58)),
  inference(resolution,[],[f2041,f1235])).
fof(f2841,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X98) = s('type.num.num',X99)) ) | $spl72),
  inference(cnf_transformation,[],[f2841_D])).
fof(f2841_D,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X98) = s('type.num.num',X99)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f2754,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X96) = s('type.num.num',X97) | s(sK12,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(forward_demodulation,[],[f2604,f2274])).
fof(f2274,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl4),
  inference(forward_demodulation,[],[f2273,f597])).
fof(f2273,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl4),
  inference(forward_demodulation,[],[f553,f827])).
fof(f2604,plain,(
  ( ! [X97,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X96),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X96) = s('type.num.num',X97) | s(sK12,'const.list.EL_2'(s('type.num.num',X96),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X97),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(superposition,[],[f650,f2274])).
fof(f2755,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X98) = s('type.num.num',X99) | s(sK12,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(forward_demodulation,[],[f2605,f2274])).
fof(f2605,plain,(
  ( ! [X99,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X98) = s('type.num.num',X99) | s(sK12,'const.list.EL_2'(s('type.num.num',X98),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X99),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(superposition,[],[f650,f2274])).
fof(f2840,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK12),sK14)))) ) | $spl70),
  inference(cnf_transformation,[],[f2840_D])).
fof(f2840_D,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK12),sK14)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f2756,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK12),sK14))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(forward_demodulation,[],[f2606,f2274])).
fof(f2606,plain,(
  ( ! [X101,X100] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X100),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X101),s('type.list.list'(sK12),sK14))) | s('type.num.num',X100) != s('type.num.num',X101) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(superposition,[],[f651,f2274])).
fof(f2757,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK12),sK14))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(forward_demodulation,[],[f2607,f2274])).
fof(f2607,plain,(
  ( ! [X103,X102] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X102),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X102),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X103),s('type.list.list'(sK12),sK14))) | s('type.num.num',X102) != s('type.num.num',X103) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X103),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(superposition,[],[f651,f2274])).
fof(f1319,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl22),
  inference(cnf_transformation,[],[f1319_D])).
fof(f1319_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2608,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl4),
  inference(superposition,[],[f652,f2274])).
fof(f1327,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl24),
  inference(cnf_transformation,[],[f1327_D])).
fof(f1327_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2609,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl4),
  inference(superposition,[],[f653,f2274])).
fof(f2752,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f2721,f826])).
fof(f2721,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl4),
  inference(trivial_inequality_removal,[],[f2597])).
fof(f2597,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl4),
  inference(superposition,[],[f591,f2274])).
fof(f2751,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f2722,f826])).
fof(f2722,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl4),
  inference(trivial_inequality_removal,[],[f2596])).
fof(f2596,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl4),
  inference(superposition,[],[f589,f2274])).
fof(f2748,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X73),X74))))))))) ) | $spl68),
  inference(cnf_transformation,[],[f2748_D])).
fof(f2748_D,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X73),X74))))))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f2590,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X73)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X73)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X73),X74)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl4),
  inference(superposition,[],[f570,f2274])).
fof(f2508,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'F_0') != s(bool,X1)) ) | $spl64),
  inference(cnf_transformation,[],[f2508_D])).
fof(f2508_D,plain,(
  ( ! [X1] : (~p(s(bool,X1)) | s(bool,'F_0') != s(bool,X1)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f2483,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,'F_0') != s(bool,X173)) ) | $spl13),
  inference(resolution,[],[f1235,f816])).
fof(f2401,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'F_0') != s(bool,X22) | s(bool,X21) != s(bool,X23)) ) | $spl13),
  inference(resolution,[],[f1235,f606])).
fof(f2399,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,'F_0') != s(bool,X16)) ) | $spl13),
  inference(resolution,[],[f1235,f605])).
fof(f2397,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') != s(bool,X10)) ) | $spl13),
  inference(resolution,[],[f1235,f604])).
fof(f2396,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'F_0') != s(bool,X7) | s(bool,X6) != s(bool,X8)) ) | $spl13),
  inference(resolution,[],[f1235,f602])).
fof(f2394,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'F_0') != s(bool,X1)) ) | $spl13),
  inference(resolution,[],[f1235,f600])).
fof(f2392,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') != s(bool,X1)) ) | $spl62),
  inference(cnf_transformation,[],[f2392_D])).
fof(f2392_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'F_0') != s(bool,X1)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f2366,plain,(
  ( ! [X175,X174] : (p(s(bool,X174)) | p(s(bool,X175)) | s(bool,'F_0') != s(bool,X175)) ) | $spl12),
  inference(resolution,[],[f1234,f816])).
fof(f2283,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'F_0') != s(bool,X21) | s(bool,X22) != s(bool,X23)) ) | $spl12),
  inference(resolution,[],[f1234,f606])).
fof(f2280,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,'F_0') != s(bool,X14)) ) | $spl12),
  inference(resolution,[],[f1234,f605])).
fof(f2279,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'F_0') != s(bool,X10)) ) | $spl12),
  inference(resolution,[],[f1234,f604])).
fof(f2278,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) != s(bool,X8)) ) | $spl12),
  inference(resolution,[],[f1234,f602])).
fof(f2276,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'F_0') != s(bool,X1)) ) | $spl12),
  inference(resolution,[],[f1234,f600])).
fof(f2247,plain,(
  ( ! [X175,X174] : (p(s(bool,X174)) | p(s(bool,X175)) | s(bool,'T_0') != s(bool,X175)) ) | $spl8),
  inference(resolution,[],[f1189,f816])).
fof(f2164,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'T_0') != s(bool,X21) | s(bool,X22) != s(bool,X23)) ) | $spl8),
  inference(resolution,[],[f1189,f606])).
fof(f2161,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,'T_0') != s(bool,X14)) ) | $spl8),
  inference(resolution,[],[f1189,f605])).
fof(f2160,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') != s(bool,X10)) ) | $spl8),
  inference(resolution,[],[f1189,f604])).
fof(f2159,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'T_0') != s(bool,X6) | s(bool,X7) != s(bool,X8)) ) | $spl8),
  inference(resolution,[],[f1189,f602])).
fof(f2157,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') != s(bool,X1)) ) | $spl8),
  inference(resolution,[],[f1189,f600])).
fof(f2131,plain,(
  ( ! [X173,X172] : (p(s(bool,X172)) | ~p(s(bool,X173)) | s(bool,'T_0') != s(bool,X173)) ) | $spl9),
  inference(resolution,[],[f1190,f816])).
fof(f2049,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'T_0') != s(bool,X22) | s(bool,X21) != s(bool,X23)) ) | $spl9),
  inference(resolution,[],[f1190,f606])).
fof(f2047,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | ~p(s(bool,X17)) | s(bool,'T_0') != s(bool,X16)) ) | $spl9),
  inference(resolution,[],[f1190,f605])).
fof(f2045,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | ~p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') != s(bool,X10)) ) | $spl9),
  inference(resolution,[],[f1190,f604])).
fof(f2044,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'T_0') != s(bool,X7) | s(bool,X6) != s(bool,X8)) ) | $spl9),
  inference(resolution,[],[f1190,f602])).
fof(f2042,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') != s(bool,X1)) ) | $spl9),
  inference(resolution,[],[f1190,f600])).
fof(f2011,plain,(
  ( ! [X175,X174] : (p(s(bool,X174)) | p(s(bool,X175)) | s(bool,'T_0') != s(bool,X175)) ) | $spl8),
  inference(resolution,[],[f1189,f816])).
fof(f1928,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | s(bool,'T_0') != s(bool,X21) | s(bool,X22) != s(bool,X23)) ) | $spl8),
  inference(resolution,[],[f1189,f606])).
fof(f1925,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | p(s(bool,X14)) | s(bool,'T_0') != s(bool,X14)) ) | $spl8),
  inference(resolution,[],[f1189,f605])).
fof(f1924,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') != s(bool,X10)) ) | $spl8),
  inference(resolution,[],[f1189,f604])).
fof(f1923,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,X6)) | ~p(s(bool,X7)) | s(bool,'T_0') != s(bool,X6) | s(bool,X7) != s(bool,X8)) ) | $spl8),
  inference(resolution,[],[f1189,f602])).
fof(f1921,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') != s(bool,X1)) ) | $spl8),
  inference(resolution,[],[f1189,f600])).
fof(f1879,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl49),
  inference(cnf_transformation,[],[f1879_D])).
fof(f1879_D,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f1886,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1885,f827])).
fof(f1885,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(forward_demodulation,[],[f1510,f598])).
fof(f1510,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(superposition,[],[f655,f827])).
fof(f1884,plain,(
  p(s(bool,'T_0')) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1883,f598])).
fof(f1883,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1509,f827])).
fof(f1509,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s('type.num.num',sK23(sK15,sK13)) != s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(superposition,[],[f655,f827])).
fof(f1880,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl48),
  inference(cnf_transformation,[],[f1880_D])).
fof(f1880_D,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1882,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1881,f827])).
fof(f1881,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(forward_demodulation,[],[f1508,f598])).
fof(f1508,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(superposition,[],[f654,f827])).
fof(f1876,plain,(
  p(s(bool,'T_0')) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1875,f598])).
fof(f1875,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(forward_demodulation,[],[f1507,f827])).
fof(f1507,plain,(
  s(sK13,'const.list.EL_2'(s('type.num.num',sK23(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',sK24(sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | s('type.num.num',sK23(sK15,sK13)) = s('type.num.num',sK24(sK15,sK13)) | $spl4),
  inference(superposition,[],[f654,f827])).
fof(f1871,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl44),
  inference(cnf_transformation,[],[f1871_D])).
fof(f1871_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f1874,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f1873,f597])).
fof(f1873,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f1872,f827])).
fof(f1872,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl4),
  inference(forward_demodulation,[],[f1506,f598])).
fof(f1506,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl4),
  inference(superposition,[],[f653,f827])).
fof(f1869,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl4),
  inference(forward_demodulation,[],[f1868,f598])).
fof(f1868,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl4),
  inference(forward_demodulation,[],[f1867,f827])).
fof(f1867,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl4),
  inference(forward_demodulation,[],[f1505,f597])).
fof(f1505,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl4),
  inference(superposition,[],[f653,f827])).
fof(f1863,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl42),
  inference(cnf_transformation,[],[f1863_D])).
fof(f1863_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f1866,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f1865,f597])).
fof(f1865,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl4),
  inference(forward_demodulation,[],[f1864,f827])).
fof(f1864,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl4),
  inference(forward_demodulation,[],[f1504,f598])).
fof(f1504,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | $spl4),
  inference(superposition,[],[f652,f827])).
fof(f1861,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl4),
  inference(forward_demodulation,[],[f1860,f598])).
fof(f1860,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | $spl4),
  inference(forward_demodulation,[],[f1859,f827])).
fof(f1859,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl4),
  inference(forward_demodulation,[],[f1503,f597])).
fof(f1503,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15)))) | $spl4),
  inference(superposition,[],[f652,f827])).
fof(f1840,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X283) != s('type.num.num',X284) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0'))))) ) | $spl40),
  inference(cnf_transformation,[],[f1840_D])).
fof(f1840_D,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X283) != s('type.num.num',X284) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1858,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290)) ) | $spl4),
  inference(forward_demodulation,[],[f1857,f597])).
fof(f1857,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290)) ) | $spl4),
  inference(forward_demodulation,[],[f1856,f827])).
fof(f1856,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1855,f597])).
fof(f1855,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1854,f827])).
fof(f1854,plain,(
  ( ! [X290,X289] : (s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1853,f827])).
fof(f1853,plain,(
  ( ! [X290,X289] : (~p(s(bool,'T_0')) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),sK15))) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1502,f598])).
fof(f1502,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK13),sK15))) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f651,f827])).
fof(f1852,plain,(
  ( ! [X288,X287] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288)) ) | $spl4),
  inference(forward_demodulation,[],[f1851,f598])).
fof(f1851,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288)) ) | $spl4),
  inference(forward_demodulation,[],[f1850,f827])).
fof(f1850,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1849,f597])).
fof(f1849,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1848,f827])).
fof(f1848,plain,(
  ( ! [X288,X287] : (s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1847,f827])).
fof(f1847,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),sK15))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1501,f597])).
fof(f1501,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK13),sK15))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f651,f827])).
fof(f1846,plain,(
  ( ! [X285,X286] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286)) ) | $spl4),
  inference(forward_demodulation,[],[f1845,f598])).
fof(f1845,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286)) ) | $spl4),
  inference(forward_demodulation,[],[f1844,f827])).
fof(f1844,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1843,f597])).
fof(f1843,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1842,f827])).
fof(f1842,plain,(
  ( ! [X285,X286] : (s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1841,f827])).
fof(f1841,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),sK15))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1500,f597])).
fof(f1500,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK13),sK15))) = s(sK13,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK13),sK15))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f651,f827])).
fof(f1839,plain,(
  ( ! [X283,X284] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284)) ) | $spl4),
  inference(forward_demodulation,[],[f1838,f598])).
fof(f1838,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284)) ) | $spl4),
  inference(forward_demodulation,[],[f1837,f827])).
fof(f1837,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1836,f597])).
fof(f1836,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1835,f827])).
fof(f1835,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1834,f597])).
fof(f1834,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1499,f827])).
fof(f1499,plain,(
  ( ! [X283,X284] : (s(sK13,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK13),'const.list.NIL_0'))) = s(sK13,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f651,f827])).
fof(f1815,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X275) = s('type.num.num',X276) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0'))))) ) | $spl38),
  inference(cnf_transformation,[],[f1815_D])).
fof(f1815_D,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X275) = s('type.num.num',X276) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1833,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282)) ) | $spl4),
  inference(forward_demodulation,[],[f1832,f597])).
fof(f1832,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282)) ) | $spl4),
  inference(forward_demodulation,[],[f1831,f827])).
fof(f1831,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1830,f597])).
fof(f1830,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1829,f827])).
fof(f1829,plain,(
  ( ! [X282,X281] : (s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1828,f827])).
fof(f1828,plain,(
  ( ! [X282,X281] : (~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1498,f598])).
fof(f1498,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s('type.num.num',X281) = s('type.num.num',X282) | s(sK13,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f650,f827])).
fof(f1827,plain,(
  ( ! [X280,X279] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280)) ) | $spl4),
  inference(forward_demodulation,[],[f1826,f598])).
fof(f1826,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280)) ) | $spl4),
  inference(forward_demodulation,[],[f1825,f827])).
fof(f1825,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1824,f597])).
fof(f1824,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1823,f827])).
fof(f1823,plain,(
  ( ! [X280,X279] : (s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1822,f827])).
fof(f1822,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1497,f597])).
fof(f1497,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s('type.num.num',X279) = s('type.num.num',X280) | s(sK13,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f650,f827])).
fof(f1821,plain,(
  ( ! [X277,X278] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278)) ) | $spl4),
  inference(forward_demodulation,[],[f1820,f598])).
fof(f1820,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278)) ) | $spl4),
  inference(forward_demodulation,[],[f1819,f827])).
fof(f1819,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1818,f597])).
fof(f1818,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1817,f827])).
fof(f1817,plain,(
  ( ! [X277,X278] : (s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1816,f827])).
fof(f1816,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1496,f597])).
fof(f1496,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s('type.num.num',X277) = s('type.num.num',X278) | s(sK13,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK13),sK15))) != s(sK13,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f650,f827])).
fof(f1814,plain,(
  ( ! [X275,X276] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276)) ) | $spl4),
  inference(forward_demodulation,[],[f1813,f598])).
fof(f1813,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276)) ) | $spl4),
  inference(forward_demodulation,[],[f1812,f827])).
fof(f1812,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1811,f597])).
fof(f1811,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1810,f827])).
fof(f1810,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1809,f597])).
fof(f1809,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1495,f827])).
fof(f1495,plain,(
  ( ! [X275,X276] : (s(sK13,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK13),'const.list.NIL_0'))) != s(sK13,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f650,f827])).
fof(f1234,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(cnf_transformation,[],[f1234_D])).
fof(f1234_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1792,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl36),
  inference(cnf_transformation,[],[f1792_D])).
fof(f1792_D,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),'const.list.NIL_0')))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1800,plain,(
  ( ! [X259,X260] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'F_0')) | s(sK13,X259) != s(sK13,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f1799,f597])).
fof(f1799,plain,(
  ( ! [X259,X260] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'F_0')) | s(sK13,X259) != s(sK13,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f1798,f827])).
fof(f1798,plain,(
  ( ! [X259,X260] : (p(s(bool,'F_0')) | s(sK13,X259) != s(sK13,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1797,f595])).
fof(f595,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f310,plain,(
  ! [X0,X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f309])).
fof(f309,plain,(
  ! [X0] : ! [X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f215])).
fof(f215,axiom,(
  ! [X6] : ! [X23] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X6,X23),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.MEM|split|0')).
fof(f1797,plain,(
  ( ! [X259,X260] : (p(s(bool,'const.bool.IN_2'(s(sK13,X259),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,X259) != s(sK13,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1488,f827])).
fof(f1488,plain,(
  ( ! [X259,X260] : (s(sK13,X259) != s(sK13,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'const.bool.IN_2'(s(sK13,X259),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f645,f827])).
fof(f645,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f483])).
fof(f483,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',sK20(X2,X1,X0)),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20])],[f482])).
fof(f482,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | ? [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X4),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f481])).
fof(f481,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1))))) & (! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s(X0,X2) != s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))) | p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f324])).
fof(f324,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))) <=> ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',X3),s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f222])).
fof(f222,axiom,(
  ! [X6] : ! [X32,X23] : (p(s(bool,'const.bool.IN_2'(s(X6,X23),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X32)))))) <=> ? [X15] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X32)))))) & s(X6,X23) = s(X6,'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'(X6),X32)))))),
  file('thm.list.ZIP_EQ_NIL','thm.list.MEM_EL')).
fof(f1796,plain,(
  ( ! [X257,X258] : (s(sK13,X258) != s(sK13,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f1795,f827])).
fof(f1795,plain,(
  ( ! [X257,X258] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | s(sK13,X258) != s(sK13,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(forward_demodulation,[],[f1794,f595])).
fof(f1794,plain,(
  ( ! [X257,X258] : (p(s(bool,'const.bool.IN_2'(s(sK13,X258),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | s(sK13,X258) != s(sK13,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(forward_demodulation,[],[f1793,f827])).
fof(f1793,plain,(
  ( ! [X257,X258] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.bool.IN_2'(s(sK13,X258),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15)))))) | s(sK13,X258) != s(sK13,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(forward_demodulation,[],[f1487,f597])).
fof(f1487,plain,(
  ( ! [X257,X258] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'const.bool.IN_2'(s(sK13,X258),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15)))))) | s(sK13,X258) != s(sK13,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(superposition,[],[f645,f827])).
fof(f1791,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'F_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1790,f597])).
fof(f1790,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'F_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1789,f827])).
fof(f1789,plain,(
  ( ! [X255,X256] : (s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),'const.list.NIL_0'))) | p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1788,f827])).
fof(f1788,plain,(
  ( ! [X255,X256] : (p(s(bool,'F_0')) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1486,f595])).
fof(f1486,plain,(
  ( ! [X255,X256] : (p(s(bool,'const.bool.IN_2'(s(sK13,X255),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,X255) != s(sK13,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK13),sK15))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f645,f827])).
fof(f1235,plain,(
  ~p(s(bool,'F_0')) | $spl13),
  inference(cnf_transformation,[],[f1235_D])).
fof(f1235_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f1785,plain,(
  ( ! [X253] : (s(sK13,X253) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X253,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl34),
  inference(cnf_transformation,[],[f1785_D])).
fof(f1785_D,plain,(
  ( ! [X253] : (s(sK13,X253) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X253,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0')))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1787,plain,(
  ( ! [X254] : (s(sK13,X254) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X254,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'F_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1786,f827])).
fof(f1786,plain,(
  ( ! [X254] : (~p(s(bool,'F_0')) | s(sK13,X254) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X254,sK15,sK13)),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(forward_demodulation,[],[f1485,f595])).
fof(f1485,plain,(
  ( ! [X254] : (~p(s(bool,'const.bool.IN_2'(s(sK13,X254),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,X254) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X254,sK15,sK13)),s('type.list.list'(sK13),sK15)))) ) | $spl4),
  inference(superposition,[],[f644,f827])).
fof(f644,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.list.EL_2'(s('type.num.num',sK20(X2,X1,X0)),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f483])).
fof(f1784,plain,(
  ( ! [X253] : (~p(s(bool,'F_0')) | s(sK13,X253) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X253,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f1783,f595])).
fof(f1783,plain,(
  ( ! [X253] : (~p(s(bool,'const.bool.IN_2'(s(sK13,X253),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | s(sK13,X253) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X253,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f1484,f827])).
fof(f1484,plain,(
  ( ! [X253] : (s(sK13,X253) = s(sK13,'const.list.EL_2'(s('type.num.num',sK20(X253,sK15,sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | ~p(s(bool,'const.bool.IN_2'(s(sK13,X253),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f644,f827])).
fof(f1779,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.num.|48|_0'))))) ) | $spl32),
  inference(cnf_transformation,[],[f1779_D])).
fof(f1779_D,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1782,plain,(
  ( ! [X252] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'F_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1781,f597])).
fof(f1781,plain,(
  ( ! [X252] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'F_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1780,f827])).
fof(f1780,plain,(
  ( ! [X252] : (~p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1483,f595])).
fof(f1483,plain,(
  ( ! [X252] : (~p(s(bool,'const.bool.IN_2'(s(sK13,X252),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f643,f827])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f483])).
fof(f1778,plain,(
  ( ! [X251] : (~p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f1777,f595])).
fof(f1777,plain,(
  ( ! [X251] : (~p(s(bool,'const.bool.IN_2'(s(sK13,X251),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.num.|48|_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f1776,f827])).
fof(f1776,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.bool.IN_2'(s(sK13,X251),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1482,f597])).
fof(f1482,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK15,sK13)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0')))))) | ~p(s(bool,'const.bool.IN_2'(s(sK13,X251),s(fun(sK13,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK13),sK15))))))) ) | $spl4),
  inference(superposition,[],[f643,f827])).
fof(f1736,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl30),
  inference(cnf_transformation,[],[f1736_D])).
fof(f1736_D,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1747,plain,(
  ( ! [X204,X203] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1746,f597])).
fof(f1746,plain,(
  ( ! [X204,X203] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0'))) ) | $spl4),
  inference(forward_demodulation,[],[f1745,f827])).
fof(f1745,plain,(
  ( ! [X204,X203] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl4),
  inference(forward_demodulation,[],[f1744,f827])).
fof(f1744,plain,(
  ( ! [X204,X203] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X203),X204)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl4),
  inference(forward_demodulation,[],[f1453,f598])).
fof(f1453,plain,(
  ( ! [X204,X203] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X203),X204)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl4),
  inference(superposition,[],[f570,f827])).
fof(f1741,plain,(
  ( ! [X200,X199] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200)))) ) | $spl4),
  inference(forward_demodulation,[],[f1740,f598])).
fof(f1740,plain,(
  ( ! [X200,X199] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200)))) ) | $spl4),
  inference(forward_demodulation,[],[f1739,f827])).
fof(f1739,plain,(
  ( ! [X200,X199] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1738,f827])).
fof(f1738,plain,(
  ( ! [X200,X199] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X199),X200)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1451,f597])).
fof(f1451,plain,(
  ( ! [X200,X199] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK13),sK15),s('type.list.list'(X199),X200)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f570,f827])).
fof(f1735,plain,(
  ( ! [X196,X195] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1734,f598])).
fof(f1734,plain,(
  ( ! [X196,X195] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),'const.list.NIL_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f1733,f827])).
fof(f1733,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1732,f597])).
fof(f1732,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(forward_demodulation,[],[f1449,f827])).
fof(f1449,plain,(
  ( ! [X196,X195] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK13,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK13),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK13),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK13),sK15))))) ) | $spl4),
  inference(superposition,[],[f570,f827])).
fof(f1335,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | $spl29),
  inference(cnf_transformation,[],[f1335_D])).
fof(f1335_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f1342,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f1341,f825])).
fof(f1341,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl2),
  inference(forward_demodulation,[],[f962,f598])).
fof(f962,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl2),
  inference(superposition,[],[f655,f825])).
fof(f1340,plain,(
  p(s(bool,'T_0')) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f1339,f598])).
fof(f1339,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f961,f825])).
fof(f961,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s('type.num.num',sK23(sK14,sK12)) != s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(superposition,[],[f655,f825])).
fof(f1336,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | $spl28),
  inference(cnf_transformation,[],[f1336_D])).
fof(f1336_D,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1338,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'T_0')) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f1337,f825])).
fof(f1337,plain,(
  p(s(bool,'T_0')) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl2),
  inference(forward_demodulation,[],[f960,f598])).
fof(f960,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),sK14))) | $spl2),
  inference(superposition,[],[f654,f825])).
fof(f1332,plain,(
  p(s(bool,'T_0')) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f1331,f598])).
fof(f1331,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(forward_demodulation,[],[f959,f825])).
fof(f959,plain,(
  s(sK12,'const.list.EL_2'(s('type.num.num',sK23(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',sK24(sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | s('type.num.num',sK23(sK14,sK12)) = s('type.num.num',sK24(sK14,sK12)) | $spl2),
  inference(superposition,[],[f654,f825])).
fof(f1330,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl2),
  inference(forward_demodulation,[],[f1329,f597])).
fof(f1329,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl2),
  inference(forward_demodulation,[],[f1328,f825])).
fof(f1328,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl2),
  inference(forward_demodulation,[],[f958,f598])).
fof(f958,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl2),
  inference(superposition,[],[f653,f825])).
fof(f1325,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(forward_demodulation,[],[f1324,f598])).
fof(f1324,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(forward_demodulation,[],[f1323,f825])).
fof(f1323,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl2),
  inference(forward_demodulation,[],[f957,f597])).
fof(f957,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK24(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl2),
  inference(superposition,[],[f653,f825])).
fof(f1322,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'T_0')) | $spl2),
  inference(forward_demodulation,[],[f1321,f597])).
fof(f1321,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'T_0')) | $spl2),
  inference(forward_demodulation,[],[f1320,f825])).
fof(f1320,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl2),
  inference(forward_demodulation,[],[f956,f598])).
fof(f956,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | $spl2),
  inference(superposition,[],[f652,f825])).
fof(f1317,plain,(
  p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(forward_demodulation,[],[f1316,f598])).
fof(f1316,plain,(
  p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | $spl2),
  inference(forward_demodulation,[],[f1315,f825])).
fof(f1315,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl2),
  inference(forward_demodulation,[],[f955,f597])).
fof(f955,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK23(sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14)))) | $spl2),
  inference(superposition,[],[f652,f825])).
fof(f1296,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X283) != s('type.num.num',X284) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0'))))) ) | $spl20),
  inference(cnf_transformation,[],[f1296_D])).
fof(f1296_D,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X283) != s('type.num.num',X284) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1314,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290)) ) | $spl2),
  inference(forward_demodulation,[],[f1313,f597])).
fof(f1313,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290)) ) | $spl2),
  inference(forward_demodulation,[],[f1312,f825])).
fof(f1312,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1311,f597])).
fof(f1311,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1310,f825])).
fof(f1310,plain,(
  ( ! [X290,X289] : (s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1309,f825])).
fof(f1309,plain,(
  ( ! [X290,X289] : (~p(s(bool,'T_0')) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),sK14))) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f954,f598])).
fof(f954,plain,(
  ( ! [X290,X289] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X289),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X290),s('type.list.list'(sK12),sK14))) | s('type.num.num',X289) != s('type.num.num',X290) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X290),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X289),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f651,f825])).
fof(f1308,plain,(
  ( ! [X288,X287] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288)) ) | $spl2),
  inference(forward_demodulation,[],[f1307,f598])).
fof(f1307,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288)) ) | $spl2),
  inference(forward_demodulation,[],[f1306,f825])).
fof(f1306,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1305,f597])).
fof(f1305,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1304,f825])).
fof(f1304,plain,(
  ( ! [X288,X287] : (s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1303,f825])).
fof(f1303,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),sK14))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f953,f597])).
fof(f953,plain,(
  ( ! [X288,X287] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X287),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X287),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X288),s('type.list.list'(sK12),sK14))) | s('type.num.num',X287) != s('type.num.num',X288) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X288),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f651,f825])).
fof(f1302,plain,(
  ( ! [X285,X286] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286)) ) | $spl2),
  inference(forward_demodulation,[],[f1301,f598])).
fof(f1301,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286)) ) | $spl2),
  inference(forward_demodulation,[],[f1300,f825])).
fof(f1300,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1299,f597])).
fof(f1299,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1298,f825])).
fof(f1298,plain,(
  ( ! [X285,X286] : (s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1297,f825])).
fof(f1297,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),sK14))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f952,f597])).
fof(f952,plain,(
  ( ! [X285,X286] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X285),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X285),s('type.list.list'(sK12),sK14))) = s(sK12,'const.list.EL_2'(s('type.num.num',X286),s('type.list.list'(sK12),sK14))) | s('type.num.num',X285) != s('type.num.num',X286) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X286),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f651,f825])).
fof(f1295,plain,(
  ( ! [X283,X284] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284)) ) | $spl2),
  inference(forward_demodulation,[],[f1294,f598])).
fof(f1294,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284)) ) | $spl2),
  inference(forward_demodulation,[],[f1293,f825])).
fof(f1293,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1292,f597])).
fof(f1292,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1291,f825])).
fof(f1291,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1290,f597])).
fof(f1290,plain,(
  ( ! [X283,X284] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f951,f825])).
fof(f951,plain,(
  ( ! [X283,X284] : (s(sK12,'const.list.EL_2'(s('type.num.num',X283),s('type.list.list'(sK12),'const.list.NIL_0'))) = s(sK12,'const.list.EL_2'(s('type.num.num',X284),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X283) != s('type.num.num',X284) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X284),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X283),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f651,f825])).
fof(f1271,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X275) = s('type.num.num',X276) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0'))))) ) | $spl18),
  inference(cnf_transformation,[],[f1271_D])).
fof(f1271_D,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X275) = s('type.num.num',X276) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1289,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282)) ) | $spl2),
  inference(forward_demodulation,[],[f1288,f597])).
fof(f1288,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282)) ) | $spl2),
  inference(forward_demodulation,[],[f1287,f825])).
fof(f1287,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1286,f597])).
fof(f1286,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1285,f825])).
fof(f1285,plain,(
  ( ! [X282,X281] : (s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1284,f825])).
fof(f1284,plain,(
  ( ! [X282,X281] : (~p(s(bool,'T_0')) | s('type.num.num',X281) = s('type.num.num',X282) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f950,f598])).
fof(f950,plain,(
  ( ! [X282,X281] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s('type.num.num',X281) = s('type.num.num',X282) | s(sK12,'const.list.EL_2'(s('type.num.num',X281),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X282),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X281),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f650,f825])).
fof(f1283,plain,(
  ( ! [X280,X279] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280)) ) | $spl2),
  inference(forward_demodulation,[],[f1282,f598])).
fof(f1282,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280)) ) | $spl2),
  inference(forward_demodulation,[],[f1281,f825])).
fof(f1281,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1280,f597])).
fof(f1280,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1279,f825])).
fof(f1279,plain,(
  ( ! [X280,X279] : (s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1278,f825])).
fof(f1278,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X279) = s('type.num.num',X280) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f949,f597])).
fof(f949,plain,(
  ( ! [X280,X279] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X279),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s('type.num.num',X279) = s('type.num.num',X280) | s(sK12,'const.list.EL_2'(s('type.num.num',X279),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X280),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X280),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f650,f825])).
fof(f1277,plain,(
  ( ! [X277,X278] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278)) ) | $spl2),
  inference(forward_demodulation,[],[f1276,f598])).
fof(f1276,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278)) ) | $spl2),
  inference(forward_demodulation,[],[f1275,f825])).
fof(f1275,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1274,f597])).
fof(f1274,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1273,f825])).
fof(f1273,plain,(
  ( ! [X277,X278] : (s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1272,f825])).
fof(f1272,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.num.|48|_0')))) | s('type.num.num',X277) = s('type.num.num',X278) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f948,f597])).
fof(f948,plain,(
  ( ! [X277,X278] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X277),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s('type.num.num',X277) = s('type.num.num',X278) | s(sK12,'const.list.EL_2'(s('type.num.num',X277),s('type.list.list'(sK12),sK14))) != s(sK12,'const.list.EL_2'(s('type.num.num',X278),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X278),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f650,f825])).
fof(f1270,plain,(
  ( ! [X275,X276] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276)) ) | $spl2),
  inference(forward_demodulation,[],[f1269,f598])).
fof(f1269,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276)) ) | $spl2),
  inference(forward_demodulation,[],[f1268,f825])).
fof(f1268,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1267,f597])).
fof(f1267,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1266,f825])).
fof(f1266,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.num.|48|_0')))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1265,f597])).
fof(f1265,plain,(
  ( ! [X275,X276] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f947,f825])).
fof(f947,plain,(
  ( ! [X275,X276] : (s(sK12,'const.list.EL_2'(s('type.num.num',X275),s('type.list.list'(sK12),'const.list.NIL_0'))) != s(sK12,'const.list.EL_2'(s('type.num.num',X276),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.num.num',X275) = s('type.num.num',X276) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X276),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X275),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f650,f825])).
fof(f1248,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f1248_D])).
fof(f1248_D,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),'const.list.NIL_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1256,plain,(
  ( ! [X259,X260] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'F_0')) | s(sK12,X259) != s(sK12,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f1255,f597])).
fof(f1255,plain,(
  ( ! [X259,X260] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'F_0')) | s(sK12,X259) != s(sK12,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f1254,f825])).
fof(f1254,plain,(
  ( ! [X259,X260] : (p(s(bool,'F_0')) | s(sK12,X259) != s(sK12,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1253,f595])).
fof(f1253,plain,(
  ( ! [X259,X260] : (p(s(bool,'const.bool.IN_2'(s(sK12,X259),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,X259) != s(sK12,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f940,f825])).
fof(f940,plain,(
  ( ! [X259,X260] : (s(sK12,X259) != s(sK12,'const.list.EL_2'(s('type.num.num',X260),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'const.bool.IN_2'(s(sK12,X259),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X260),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f645,f825])).
fof(f1252,plain,(
  ( ! [X257,X258] : (s(sK12,X258) != s(sK12,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f1251,f825])).
fof(f1251,plain,(
  ( ! [X257,X258] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | s(sK12,X258) != s(sK12,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(forward_demodulation,[],[f1250,f595])).
fof(f1250,plain,(
  ( ! [X257,X258] : (p(s(bool,'const.bool.IN_2'(s(sK12,X258),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | s(sK12,X258) != s(sK12,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(forward_demodulation,[],[f1249,f825])).
fof(f1249,plain,(
  ( ! [X257,X258] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.bool.IN_2'(s(sK12,X258),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14)))))) | s(sK12,X258) != s(sK12,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(forward_demodulation,[],[f939,f597])).
fof(f939,plain,(
  ( ! [X257,X258] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X257),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'const.bool.IN_2'(s(sK12,X258),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14)))))) | s(sK12,X258) != s(sK12,'const.list.EL_2'(s('type.num.num',X257),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(superposition,[],[f645,f825])).
fof(f1247,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.num.|48|_0')))) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'F_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1246,f597])).
fof(f1246,plain,(
  ( ! [X255,X256] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'F_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1245,f825])).
fof(f1245,plain,(
  ( ! [X255,X256] : (s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),'const.list.NIL_0'))) | p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1244,f825])).
fof(f1244,plain,(
  ( ! [X255,X256] : (p(s(bool,'F_0')) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f938,f595])).
fof(f938,plain,(
  ( ! [X255,X256] : (p(s(bool,'const.bool.IN_2'(s(sK12,X255),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,X255) != s(sK12,'const.list.EL_2'(s('type.num.num',X256),s('type.list.list'(sK12),sK14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X256),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f645,f825])).
fof(f1241,plain,(
  ( ! [X253] : (s(sK12,X253) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X253,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl14),
  inference(cnf_transformation,[],[f1241_D])).
fof(f1241_D,plain,(
  ( ! [X253] : (s(sK12,X253) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X253,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0')))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1243,plain,(
  ( ! [X254] : (s(sK12,X254) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X254,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'F_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1242,f825])).
fof(f1242,plain,(
  ( ! [X254] : (~p(s(bool,'F_0')) | s(sK12,X254) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X254,sK14,sK12)),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(forward_demodulation,[],[f937,f595])).
fof(f937,plain,(
  ( ! [X254] : (~p(s(bool,'const.bool.IN_2'(s(sK12,X254),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,X254) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X254,sK14,sK12)),s('type.list.list'(sK12),sK14)))) ) | $spl2),
  inference(superposition,[],[f644,f825])).
fof(f1240,plain,(
  ( ! [X253] : (~p(s(bool,'F_0')) | s(sK12,X253) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X253,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f1239,f595])).
fof(f1239,plain,(
  ( ! [X253] : (~p(s(bool,'const.bool.IN_2'(s(sK12,X253),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | s(sK12,X253) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X253,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f936,f825])).
fof(f936,plain,(
  ( ! [X253] : (s(sK12,X253) = s(sK12,'const.list.EL_2'(s('type.num.num',sK20(X253,sK14,sK12)),s('type.list.list'(sK12),'const.list.NIL_0'))) | ~p(s(bool,'const.bool.IN_2'(s(sK12,X253),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f644,f825])).
fof(f1233,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.num.|48|_0'))))) ) | $spl10),
  inference(cnf_transformation,[],[f1233_D])).
fof(f1233_D,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1238,plain,(
  ( ! [X252] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'F_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1237,f597])).
fof(f1237,plain,(
  ( ! [X252] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'F_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1236,f825])).
fof(f1236,plain,(
  ( ! [X252] : (~p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f935,f595])).
fof(f935,plain,(
  ( ! [X252] : (~p(s(bool,'const.bool.IN_2'(s(sK12,X252),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X252,sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f643,f825])).
fof(f1232,plain,(
  ( ! [X251] : (~p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.num.|48|_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f1231,f595])).
fof(f1231,plain,(
  ( ! [X251] : (~p(s(bool,'const.bool.IN_2'(s(sK12,X251),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.num.|48|_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f1230,f825])).
fof(f1230,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.bool.IN_2'(s(sK12,X251),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(forward_demodulation,[],[f934,f597])).
fof(f934,plain,(
  ( ! [X251] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK20(X251,sK14,sK12)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0')))))) | ~p(s(bool,'const.bool.IN_2'(s(sK12,X251),s(fun(sK12,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK12),sK14))))))) ) | $spl2),
  inference(superposition,[],[f643,f825])).
fof(f1188,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl6),
  inference(cnf_transformation,[],[f1188_D])).
fof(f1188_D,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1201,plain,(
  ( ! [X204,X203] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1200,f597])).
fof(f1200,plain,(
  ( ! [X204,X203] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0'))) ) | $spl2),
  inference(forward_demodulation,[],[f1199,f825])).
fof(f1199,plain,(
  ( ! [X204,X203] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X203),X204)))))))) | ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl2),
  inference(forward_demodulation,[],[f1198,f825])).
fof(f1198,plain,(
  ( ! [X204,X203] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X203),X204)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl2),
  inference(forward_demodulation,[],[f905,f598])).
fof(f905,plain,(
  ( ! [X204,X203] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X203)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X203)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X203),X204)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),X204)))) ) | $spl2),
  inference(superposition,[],[f570,f825])).
fof(f1195,plain,(
  ( ! [X200,X199] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200)))) ) | $spl2),
  inference(forward_demodulation,[],[f1194,f598])).
fof(f1194,plain,(
  ( ! [X200,X199] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200)))) ) | $spl2),
  inference(forward_demodulation,[],[f1193,f825])).
fof(f1193,plain,(
  ( ! [X200,X199] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X199),X200)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1192,f825])).
fof(f1192,plain,(
  ( ! [X200,X199] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X199),X200)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f903,f597])).
fof(f903,plain,(
  ( ! [X200,X199] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X199),X200))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X199)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X199)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(X199),X200)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f570,f825])).
fof(f1187,plain,(
  ( ! [X196,X195] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1186,f598])).
fof(f1186,plain,(
  ( ! [X196,X195] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),'const.list.NIL_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196))))))))) ) | $spl2),
  inference(forward_demodulation,[],[f1185,f825])).
fof(f1185,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f1184,f597])).
fof(f1184,plain,(
  ( ! [X196,X195] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),'const.list.NIL_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(forward_demodulation,[],[f901,f825])).
fof(f901,plain,(
  ( ! [X196,X195] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'('type.pair.prod'(sK12,X195)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(X195)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(X195),X196)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X195),X196))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK12),sK14))))) ) | $spl2),
  inference(superposition,[],[f570,f825])).
fof(f823,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) | $spl0),
  inference(cnf_transformation,[],[f823_D])).
fof(f823_D,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f825,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | $spl2),
  inference(cnf_transformation,[],[f825_D])).
fof(f825_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f554,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK14) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))),
  inference(cnf_transformation,[],[f447])).
fof(f827,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | $spl4),
  inference(cnf_transformation,[],[f827_D])).
fof(f827_D,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f555,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK15) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))),
  inference(cnf_transformation,[],[f447])).
fof(f824,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) | $spl1),
  inference(cnf_transformation,[],[f824_D])).
fof(f824_D,plain,(
  s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f826,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) | $spl3),
  inference(cnf_transformation,[],[f826_D])).
fof(f826_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f828,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK15) | $spl5),
  inference(cnf_transformation,[],[f828_D])).
fof(f828_D,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK15) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f556,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK15) | s('type.list.list'(sK12),'const.list.NIL_0') != s('type.list.list'(sK12),sK14) | s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'(sK12,sK13)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK13)),'const.pair.,_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK13),sK15)))))),
  inference(cnf_transformation,[],[f447])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 300
% Passive clauses: 2453
% Generated clauses: 6923
% Final active clauses: 235
% Final passive clauses: 977
% Input formulas: 261
% Initial clauses: 263
% 
% Selected by SInE selection: 78
% SInE iterations: 1
% 
% Duplicate literals: 83
% Trivial inequalities: 54
% Fw subsumption resolutions: 280
% Fw demodulations: 1936
% Bw demodulations: 1
% 
% Simple tautologies: 158
% Equational tautologies: 1
% Forward subsumptions: 1703
% 
% Binary resolution: 2067
% Forward superposition: 829
% Backward superposition: 1428
% 
% Split clauses: 239
% Split components: 506
% SAT solver clauses: 256
% SAT solver binary clauses: 30
% 
% Sat splits: 239
% Sat splitting refutations: 16
% 
% Memory used [KB]: 4989
% Time elapsed: 0.163 s
% ------------------------------
% ------------------------------
% Success in time 11.93 s
