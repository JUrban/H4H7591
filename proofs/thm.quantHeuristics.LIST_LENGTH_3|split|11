Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (55982)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 206
% Passive clauses: 2672
% Generated clauses: 30800
% Final active clauses: 196
% Final passive clauses: 2347
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 89
% Trivial inequalities: 9
% Fw subsumption resolutions: 103
% Fw demodulations: 4640
% Bw demodulations: 7
% 
% Simple tautologies: 23
% Equational tautologies: 17
% Forward subsumptions: 23207
% Fw demodulations to eq. taut.: 35
% 
% Binary resolution: 46
% Forward superposition: 12641
% Backward superposition: 13315
% Self superposition: 181
% Equality factoring: 34
% Equality resolution: 3
% 
% Split clauses: 51
% Split components: 102
% SAT solver clauses: 64
% SAT solver unit clauses: 4
% SAT solver binary clauses: 15
% 
% Sat splits: 51
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 64
% TWLsolver calls for satisfiability: 12
% 
% Memory used [KB]: 31342
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (55997)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 139
% Passive clauses: 1013
% Generated clauses: 17903
% Final active clauses: 131
% Final passive clauses: 858
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 844
% Trivial inequalities: 139
% Fw subsumption resolutions: 962
% Fw demodulations: 1779
% Bw demodulations: 20
% Condensations: 1742
% 
% Simple tautologies: 133
% Equational tautologies: 21
% Forward subsumptions: 9717
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 23
% Forward superposition: 6303
% Backward superposition: 4710
% Self superposition: 220
% Equality factoring: 42
% Equality resolution: 15
% 
% Split clauses: 173
% Split components: 346
% SAT solver clauses: 1592
% SAT solver unit clauses: 70
% SAT solver binary clauses: 44
% 
% Sat splits: 173
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1592
% TWLsolver calls for satisfiability: 281
% 
% Memory used [KB]: 17142
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f7410,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f105,f156,f155,f104,f158,f103,f160,f154,f230,f233,f231,f702,f708,f706,f704,f712,f710,f1165,f1167,f1160,f1154,f1168,f1243,f1846,f1848,f1847,f2069,f2070,f2064,f2058,f2071,f2602,f2605,f2603,f2720,f2723,f1166,f2721,f2738,f2743,f2742,f3615,f3616,f3620,f3622,f3624,f3625,f3627,f3618,f3629,f3609,f3633,f3631,f3872,f3938,f3936,f3954,f4025,f4028,f4031,f4034,f4037,f4038,f3663,f4091,f4089,f4111,f4190,f4189,f4187,f4199,f4214,f4210,f4222,f4211,f4225,f4227,f4467,f4468,f4469,f4470,f6533,f6555,f6553,f6779,f6933,f6936,f6940,f6935,f6938,f6784,f6944,f6942,f7356,f7396,f7397,f7363,f4226,f7399,f7364,f4223,f7401])).
fof(f7401,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))))))) | $spl93),
  inference(cnf_transformation,[],[f7401_D])).
fof(f7401_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))))))) <=> ~$spl93),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl93])])).
fof(f4223,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2)))))) ) | $spl70),
  inference(cnf_transformation,[],[f4223_D])).
fof(f4223_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f7364,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0))))))))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f156,f4499])).
fof(f4499,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f131])).
fof(f131,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X2,X1,X0)),s('type.list.list'(X0),sK7(X2,X1,X0)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK8(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK9(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK10(X2,X1,X0)),s('type.list.list'(X0),sK7(X2,X1,X0)))))))))) & (! [X3,X4,X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9,sK10])],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ? [X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X7))))))))) & (! [X3,X4,X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))) & (! [X3,X4,X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X9)))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.quantHeuristics.LIST_LENGTH_3|split|10')).
fof(f7399,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))))) | $spl91),
  inference(cnf_transformation,[],[f7399_D])).
fof(f7399_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))))) <=> ~$spl91),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl91])])).
fof(f4226,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) | $spl74),
  inference(cnf_transformation,[],[f4226_D])).
fof(f4226_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f7363,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10(sK2,sK1,sK0)),s('type.list.list'(sK0),sK7(sK2,sK1,sK0))))))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f156,f4499])).
fof(f7397,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f7387,f4334])).
fof(f4334,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f130])).
fof(f130,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f7387,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f7362])).
fof(f7362,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))) | ($spl0 | $spl2)),
  inference(superposition,[],[f156,f4499])).
fof(f7396,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f7355,f4334])).
fof(f7355,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK2,sK1,sK0)))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f4499,f156])).
fof(f7356,plain,(
  $false | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f4334,f4499,f156])).
fof(f6942,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0)) | $spl86),
  inference(cnf_transformation,[],[f6942_D])).
fof(f6942_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0)) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f6944,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl89),
  inference(cnf_transformation,[],[f6944_D])).
fof(f6944_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl89),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl89])])).
fof(f6784,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0)) | $spl0),
  inference(superposition,[],[f125,f4337])).
fof(f4337,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f140])).
fof(f140,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK14(X3,X2,X1,X0)),s('type.list.list'(X0),sK15(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X13,X14] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) <=> ? [X15,X16] : (s('type.num.num',X13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) & s('type.num.num',X14) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X16))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X16)))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.list.LENGTH_EQ_SUM')).
fof(f125,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.list.LENGTH_NIL')).
fof(f6938,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl84),
  inference(cnf_transformation,[],[f6938_D])).
fof(f6938_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f6935,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl83),
  inference(cnf_transformation,[],[f6935_D])).
fof(f6935_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl83),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl83])])).
fof(f6940,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f6939,f4365])).
fof(f4365,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl0),
  inference(superposition,[],[f146,f154])).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X18,X17] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.arithmetic.ADD_SYM')).
fof(f6939,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f6782,f146])).
fof(f6782,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f3578,f4337])).
fof(f3578,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),X36))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),sK7(X36,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X35))))) ) | $spl6),
  inference(forward_demodulation,[],[f3535,f160])).
fof(f3535,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),X36))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X35),sK7(X36,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X35))))) ) | $spl6),
  inference(superposition,[],[f130,f160])).
fof(f6936,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f6781,f4365])).
fof(f6781,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f3612,f4337])).
fof(f3612,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f3578,f146])).
fof(f6933,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),sK1,sK0)))) | $spl80),
  inference(cnf_transformation,[],[f6933_D])).
fof(f6933_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),sK1,sK0)))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f6779,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK2,sK0),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f4363,f4337])).
fof(f4363,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(X3,sK1,X2))))) ) | $spl0),
  inference(superposition,[],[f130,f154])).
fof(f6553,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | $spl76),
  inference(cnf_transformation,[],[f6553_D])).
fof(f6553_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK1,sK0)))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f6555,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl79),
  inference(cnf_transformation,[],[f6555_D])).
fof(f6555_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f6533,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK1,sK0)))) | ($spl0 | $spl6)),
  inference(superposition,[],[f4363,f3816])).
fof(f3816,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))))) | $spl6),
  inference(forward_demodulation,[],[f3684,f127])).
fof(f127,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X25,X26] : s(X6,X26) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X25),s(X6,X26)))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.bool.COND_CLAUSES|split|1')).
fof(f3684,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(sK0),X0),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)))))))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f160,f160,f127,f143])).
fof(f143,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f4470,plain,(
  $false | ($spl0 | $spl63)),
  inference(subsumption_resolution,[],[f4365,f4091])).
fof(f4469,plain,(
  $false | ($spl0 | $spl63)),
  inference(subsumption_resolution,[],[f4364,f4091])).
fof(f4364,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl0),
  inference(superposition,[],[f146,f154])).
fof(f4468,plain,(
  $false | ($spl0 | $spl63)),
  inference(subsumption_resolution,[],[f4360,f4091])).
fof(f4360,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl0),
  inference(superposition,[],[f154,f146])).
fof(f4467,plain,(
  $false | ($spl0 | $spl63)),
  inference(subsumption_resolution,[],[f4359,f4091])).
fof(f4359,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl0),
  inference(superposition,[],[f154,f146])).
fof(f4227,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4213,f160])).
fof(f4213,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f4212])).
fof(f4212,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(superposition,[],[f156,f158])).
fof(f4225,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))) | $spl73),
  inference(cnf_transformation,[],[f4225_D])).
fof(f4225_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f4211,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f156,f158])).
fof(f4222,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) | $spl69),
  inference(cnf_transformation,[],[f4222_D])).
fof(f4222_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f4210,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f156,f158])).
fof(f4214,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4198,f160])).
fof(f4198,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f158,f156])).
fof(f4199,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f160,f158,f156])).
fof(f4187,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl64),
  inference(cnf_transformation,[],[f4187_D])).
fof(f4187_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f4189,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl67),
  inference(cnf_transformation,[],[f4189_D])).
fof(f4189_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f4190,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(forward_demodulation,[],[f4112,f146])).
fof(f4112,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(superposition,[],[f3578,f3870])).
fof(f3870,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f3816,f141])).
fof(f141,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f4111,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15(sK1,sK1,'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3)),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl6),
  inference(superposition,[],[f3612,f3870])).
fof(f4089,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl60),
  inference(cnf_transformation,[],[f4089_D])).
fof(f4089_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f4091,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl63),
  inference(cnf_transformation,[],[f4091_D])).
fof(f4091_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f3663,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f3612,f158])).
fof(f4038,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3948,f155])).
fof(f3948,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f160,f158,f132])).
fof(f132,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f91])).
fof(f4037,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4036,f155])).
fof(f4036,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4035,f160])).
fof(f4035,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f3949,f110])).
fof(f110,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X17] : s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.arithmetic.ADD|split|0')).
fof(f3949,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f110,f158,f132])).
fof(f4034,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4033,f155])).
fof(f4033,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4032,f160])).
fof(f4032,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f3950,f115])).
fof(f115,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X17] : s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.numeral.numeral_distrib|split|1')).
fof(f3950,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.num.|48|_0'))))) | $spl4),
  inference(unit_resulting_resolution,[],[f115,f158,f132])).
fof(f4031,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4030,f155])).
fof(f4030,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4029,f160])).
fof(f4029,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f3951,f116])).
fof(f116,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X17] : s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.numeral.numeral_distrib|split|7')).
fof(f3951,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.num.|48|_0'))))) | $spl4),
  inference(unit_resulting_resolution,[],[f116,f158,f132])).
fof(f4028,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f4027,f155])).
fof(f4027,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f4026,f160])).
fof(f4026,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl4),
  inference(forward_demodulation,[],[f3952,f127])).
fof(f3952,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f127,f158,f132])).
fof(f4025,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f3953,f160])).
fof(f3953,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl1 | $spl4)),
  inference(unit_resulting_resolution,[],[f155,f158,f132])).
fof(f3954,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f160,f155,f158,f132])).
fof(f3936,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) | $spl56),
  inference(cnf_transformation,[],[f3936_D])).
fof(f3936_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f3938,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl59),
  inference(cnf_transformation,[],[f3938_D])).
fof(f3938_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f3872,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK3),s('type.list.list'(sK0),sK3))) | $spl6),
  inference(superposition,[],[f125,f3816])).
fof(f3631,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl52),
  inference(cnf_transformation,[],[f3631_D])).
fof(f3631_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f3633,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl55),
  inference(cnf_transformation,[],[f3633_D])).
fof(f3633_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f3609,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7('const.list.NIL_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f3578,f718])).
fof(f718,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f713,f127])).
fof(f713,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f127,f126])).
fof(f126,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f87])).
fof(f3629,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl50),
  inference(cnf_transformation,[],[f3629_D])).
fof(f3629_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f3618,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl45),
  inference(cnf_transformation,[],[f3618_D])).
fof(f3618_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f3627,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3626,f718])).
fof(f3626,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3607,f146])).
fof(f3607,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f3578,f3451])).
fof(f3451,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0)) | $spl4),
  inference(superposition,[],[f3403,f158])).
fof(f3403,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3365,f125])).
fof(f3365,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f115,f141])).
fof(f3625,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X2),X3)),X3,X2),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2))))) ) | $spl48),
  inference(cnf_transformation,[],[f3625_D])).
fof(f3625_D,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X2),X3)),X3,X2),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f3624,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X2),X3)),X3,X2),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2))))) ) | $spl6),
  inference(forward_demodulation,[],[f3623,f718])).
fof(f3623,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X2),X3)),X3,X2),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2))))) ) | $spl6),
  inference(forward_demodulation,[],[f3606,f146])).
fof(f3606,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK7(sK15('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X2),X3)),X3,X2),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2))))) ) | $spl6),
  inference(superposition,[],[f3578,f3403])).
fof(f3622,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl46),
  inference(cnf_transformation,[],[f3622_D])).
fof(f3622_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f3620,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3619,f718])).
fof(f3619,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f3605,f146])).
fof(f3605,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | ($spl4 | $spl6)),
  inference(superposition,[],[f3578,f3347])).
fof(f3347,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK14('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3)))))),sK0)) | $spl4),
  inference(superposition,[],[f3300,f158])).
fof(f3300,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3261,f125])).
fof(f3261,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f110,f140])).
fof(f3616,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl42),
  inference(cnf_transformation,[],[f3616_D])).
fof(f3616_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f3615,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f3614,f718])).
fof(f3614,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f3604,f146])).
fof(f3604,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK7(sK14('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl6),
  inference(superposition,[],[f3578,f3300])).
fof(f2742,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl38),
  inference(cnf_transformation,[],[f2742_D])).
fof(f2742_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2743,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) | $spl40),
  inference(cnf_transformation,[],[f2743_D])).
fof(f2743_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num'))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2738,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(condensation,[],[f2727])).
fof(f2727,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',sK1))) | s(bool,X7) = s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X5,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X6,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X5),s('type.num.num',sK1)))) ) | $spl6),
  inference(superposition,[],[f1142,f1094])).
fof(f1094,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,'type.num.num')) | s(bool,'T_0') = s(bool,X21)) ) | $spl6),
  inference(subsumption_resolution,[],[f966,f106])).
fof(f106,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11',aHL_TRUTH)).
fof(f966,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,'type.num.num')) | s(bool,X21) = s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X21)) ) | $spl6),
  inference(superposition,[],[f781,f225])).
fof(f225,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f124,f124])).
fof(f124,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11',aHL_BOOL_CASES)).
fof(f781,plain,(
  ( ! [X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X25,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f756,f160])).
fof(f756,plain,(
  ( ! [X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X25,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f134,f160])).
fof(f134,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK11(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK11(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X22,X24] : (? [X7] : (s(X6,X7) = s(X6,X24) & p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X24)))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.bool.UNWIND_THM2')).
fof(f1142,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,X0) = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(equality_factoring,[],[f1094])).
fof(f2721,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK13('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl36),
  inference(cnf_transformation,[],[f2721_D])).
fof(f2721_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK13('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1166,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f1166_D])).
fof(f1166_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2723,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK13('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2722])).
fof(f2722,plain,(
  ( ! [X37,X35,X38,X36,X34] : (p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK13('T_0',X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) | s(bool,X34) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f2709,f952])).
fof(f952,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f106,f225])).
fof(f2709,plain,(
  ( ! [X37,X35,X38,X36,X34] : (~p(s(bool,X34)) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK13('T_0',X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) | s(bool,X34) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f138,f225])).
fof(f138,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK13(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X22,X23] : (? [X7] : (p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X23))) <=> (? [X7] : p(s(bool,happ(s(fun(X6,bool),X22),s(X6,X7)))) & p(s(bool,X23))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f2720,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK13('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2719])).
fof(f2719,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK13('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f2708,f952])).
fof(f2708,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK13('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f138,f225])).
fof(f2603,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK12('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl34),
  inference(cnf_transformation,[],[f2603_D])).
fof(f2603_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK12('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2605,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK12('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2604])).
fof(f2604,plain,(
  ( ! [X37,X35,X38,X36,X34] : (p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK12('T_0',X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) | s(bool,X34) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f2592,f952])).
fof(f2592,plain,(
  ( ! [X37,X35,X38,X36,X34] : (~p(s(bool,X34)) | p(s(bool,happ(s(fun(X35,bool),X36),s(X35,sK12('T_0',X36,X35))))) | ~p(s(bool,happ(s(fun(X35,bool),X36),s(X35,X37)))) | s(bool,X34) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f136,f225])).
fof(f136,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK12(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f2602,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK12('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2601])).
fof(f2601,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK12('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f2591,f952])).
fof(f2591,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK12('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f136,f225])).
fof(f2071,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num'),X22,'type.num.num'))) ) | $spl32),
  inference(cnf_transformation,[],[f2071_D])).
fof(f2071_D,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num'),X22,'type.num.num'))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2058,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'),X1,'type.num.num'))) ) | $spl26),
  inference(duplicate_literal_removal,[],[f2016])).
fof(f2016,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl26),
  inference(superposition,[],[f124,f1888])).
fof(f1888,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'),X0,'type.num.num')) | s(bool,X2) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl26),
  inference(subsumption_resolution,[],[f1883,f106])).
fof(f1883,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'),X0,'type.num.num')) | s(bool,X2) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl26),
  inference(superposition,[],[f1881,f225])).
fof(f1881,plain,(
  ( ! [X33,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X33,'type.num.num'),X34,'type.num.num'))) ) | $spl26),
  inference(forward_demodulation,[],[f1877,f1847])).
fof(f1877,plain,(
  ( ! [X33,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',sK1)))) | s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X33,'type.num.num')) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X33,'type.num.num'),X34,'type.num.num'))) ) | $spl26),
  inference(superposition,[],[f134,f1847])).
fof(f2064,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num'),X22,'type.num.num')) | s(bool,'T_0') = s(bool,X21)) ) | $spl26),
  inference(duplicate_literal_removal,[],[f1974])).
fof(f1974,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X23,'type.num.num'),X22,'type.num.num')) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl26),
  inference(superposition,[],[f1888,f124])).
fof(f2070,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'type.num.num'),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'),X2,'type.num.num'))) ) | $spl30),
  inference(cnf_transformation,[],[f2070_D])).
fof(f2070_D,plain,(
  ( ! [X4,X2,X3,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'type.num.num'),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'),X2,'type.num.num'))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2069,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'type.num.num'),X1,'type.num.num'))) ) | $spl26),
  inference(duplicate_literal_removal,[],[f1969])).
fof(f1969,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11(sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'type.num.num'),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl26),
  inference(superposition,[],[f1888,f1888])).
fof(f1847,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'))) ) | $spl26),
  inference(cnf_transformation,[],[f1847_D])).
fof(f1847_D,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1848,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) ) | $spl28),
  inference(cnf_transformation,[],[f1848_D])).
fof(f1848_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1846,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1836,f781])).
fof(f1836,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num',sK1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) ) | $spl6),
  inference(superposition,[],[f135,f1094])).
fof(f135,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK11(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f1243,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f1169,f106])).
fof(f1169,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(backward_demodulation,[],[f1166,f109])).
fof(f109,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11',aHL_FALSITY)).
fof(f1168,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) | $spl24),
  inference(cnf_transformation,[],[f1168_D])).
fof(f1168_D,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1154,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1114])).
fof(f1114,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f124,f1094])).
fof(f1160,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1100])).
fof(f1100,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(superposition,[],[f1094,f124])).
fof(f1167,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) | $spl22),
  inference(cnf_transformation,[],[f1167_D])).
fof(f1167_D,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1165,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1095])).
fof(f1095,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK11('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f1094,f1094])).
fof(f710,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl16),
  inference(cnf_transformation,[],[f710_D])).
fof(f710_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f712,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl19),
  inference(cnf_transformation,[],[f712_D])).
fof(f712_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f704,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f125,f160])).
fof(f706,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) | $spl12),
  inference(cnf_transformation,[],[f706_D])).
fof(f706_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f708,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl15),
  inference(cnf_transformation,[],[f708_D])).
fof(f708_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f702,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(superposition,[],[f125,f158])).
fof(f231,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f233,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f124])).
fof(f154,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f160,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f103,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | ! [X3,X4,X5,X6] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),X3)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f85])).
fof(f85,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ? [X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X7))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ! [X3,X4,X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))))),
  inference(rectify,[],[f84])).
fof(f84,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) | ! [X3,X4,X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3))))))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) <~> ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X3)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X9)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X9)))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_3|split|11','thm.quantHeuristics.LIST_LENGTH_3|split|11')).
fof(f158,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) | $spl4),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f104,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),sK3))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f86])).
fof(f155,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f156,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),X3))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),X3))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f105,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),X3))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1)))) )),
  inference(cnf_transformation,[],[f86])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 134
% Passive clauses: 1279
% Generated clauses: 7342
% Final active clauses: 110
% Final passive clauses: 986
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 111
% Trivial inequalities: 18
% Fw subsumption resolutions: 70
% Fw demodulations: 2029
% Bw demodulations: 100
% Condensations: 100
% 
% Simple tautologies: 31
% Equational tautologies: 27
% Forward subsumptions: 3548
% Fw demodulations to eq. taut.: 75
% Bw demodulations to eq. taut.: 20
% 
% Unit resulting resolution: 970
% Forward superposition: 1587
% Backward superposition: 2071
% Self superposition: 73
% Equality factoring: 34
% Equality resolution: 4
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 1371
% SAT solver unit clauses: 147
% SAT solver binary clauses: 393
% 
% Sat splits: 36
% Sat splitting refutations: 18
% 
% Memory used [KB]: 9210
% Time elapsed: 0.301 s
% ------------------------------
% ------------------------------
% Success in time 1.612 s
