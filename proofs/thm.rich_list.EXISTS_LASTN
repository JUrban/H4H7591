Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (85525)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 110
% Passive clauses: 1431
% Generated clauses: 22403
% Final active clauses: 98
% Final passive clauses: 1146
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 1294
% Trivial inequalities: 280
% Fw subsumption resolutions: 2887
% Fw demodulations: 2680
% Bw demodulations: 9
% 
% Simple tautologies: 388
% Equational tautologies: 75
% Forward subsumptions: 10793
% 
% Binary resolution: 68
% Forward superposition: 8257
% Backward superposition: 6082
% Self superposition: 373
% Equality factoring: 238
% Equality resolution: 16
% 
% Split clauses: 1340
% Split components: 2766
% SAT solver clauses: 2070
% SAT solver unit clauses: 23
% SAT solver binary clauses: 204
% 
% Sat splits: 1340
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2051
% TWLsolver calls for satisfiability: 153
% 
% Memory used [KB]: 9722
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f639,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f635,f34,f50,f77,f78,f35,f52,f36,f53,f37,f54,f79,f81,f32,f46,f123,f125,f60,f61,f40,f57,f41,f58,f74,f76,f31,f48,f384,f386,f38,f55,f596,f597,f39,f56,f444,f451,f449,f364,f365,f33,f44,f62,f72,f476])).
fof(f476,plain,(
  $false | ($spl6 | $spl9 | $spl76)),
  inference(subsumption_resolution,[],[f459,f50])).
fof(f459,plain,(
  ~p(s(bool,'T_0')) | ($spl9 | $spl76)),
  inference(backward_demodulation,[],[f449,f52])).
fof(f72,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl26),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f62,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f54,f54])).
fof(f44,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f33,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) & (p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ? [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_LASTN','thm.rich_list.EXISTS_LASTN')).
fof(f365,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X13)) ) | $spl62),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f364,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl1 | $spl6 | $spl26)),
  inference(subsumption_resolution,[],[f233,f50])).
fof(f233,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,X13) = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl1 | $spl26)),
  inference(superposition,[],[f44,f72])).
fof(f449,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl76),
  inference(cnf_transformation,[],[f449_D])).
fof(f449_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f451,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | $spl78),
  inference(cnf_transformation,[],[f451_D])).
fof(f451_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f444,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl62)),
  inference(duplicate_literal_removal,[],[f396])).
fof(f396,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl12 | $spl62)),
  inference(superposition,[],[f365,f54])).
fof(f56,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl16),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f39,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ! [X4] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X7,X11,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X11))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X11),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_LASTN','thm.rich_list.EXISTS_SEG')).
fof(f597,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl90),
  inference(cnf_transformation,[],[f597_D])).
fof(f597_D,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f596,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl9 | $spl16 | $spl78)),
  inference(subsumption_resolution,[],[f585,f52])).
fof(f585,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl16 | $spl78)),
  inference(superposition,[],[f56,f451])).
fof(f55,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2)))) ) | $spl14),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f38,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.rich_list.LASTN_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num',X1))),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X10,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.rich_list.LASTN_2'(s('type.num.num',X10),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num',X10))),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.EXISTS_LASTN','thm.rich_list.LASTN_SEG')).
fof(f386,plain,(
  s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.list.list'(sK0),sK2))) | $spl70),
  inference(cnf_transformation,[],[f386_D])).
fof(f386_D,plain,(
  s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.list.list'(sK0),sK2))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f384,plain,(
  s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.list.list'(sK0),sK2))) | ($spl6 | $spl14 | $spl30)),
  inference(subsumption_resolution,[],[f374,f50])).
fof(f374,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))),s('type.list.list'(sK0),sK2))) | ($spl14 | $spl30)),
  inference(superposition,[],[f55,f76])).
fof(f48,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f31,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f29])).
fof(f76,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl30),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f74,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f66,f52])).
fof(f66,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl12)),
  inference(superposition,[],[f48,f54])).
fof(f58,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | $spl20),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f41,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X7)))) => s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X10))),s('type.num.num',X10))))),
  file('thm.rich_list.EXISTS_LASTN','thm.arithmetic.SUB_ADD')).
fof(f57,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f40,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X10] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X7)))),
  file('thm.rich_list.EXISTS_LASTN','thm.arithmetic.ADD_SYM')).
fof(f61,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl24),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f60,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | ($spl18 | $spl20)),
  inference(backward_demodulation,[],[f57,f58])).
fof(f125,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))) | $spl44),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f123,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))) | ($spl6 | $spl24 | $spl30)),
  inference(subsumption_resolution,[],[f119,f50])).
fof(f119,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))) | ($spl24 | $spl30)),
  inference(superposition,[],[f61,f76])).
fof(f46,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f46_D])).
fof(f46_D,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f32,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f29])).
fof(f81,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | $spl34),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f79,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f69,f52])).
fof(f69,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl12)),
  inference(superposition,[],[f46,f54])).
fof(f54,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f37,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.rich_list.EXISTS_LASTN',aHL_BOOL_CASES)).
fof(f53,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl10),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f36,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X7))))),
  file('thm.rich_list.EXISTS_LASTN','thm.arithmetic.LESS_EQ_REFL')).
fof(f52,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f35,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.EXISTS_LASTN',aHL_FALSITY)).
fof(f78,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl32),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f77,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f67,f52])).
fof(f67,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl10 | $spl12)),
  inference(superposition,[],[f53,f54])).
fof(f50,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f34,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.EXISTS_LASTN',aHL_TRUTH)).
fof(f635,plain,(
  $false | ($spl6 | $spl32 | $spl34 | $spl44 | $spl70 | $spl90)),
  inference(subsumption_resolution,[],[f634,f50])).
fof(f634,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl32 | $spl34 | $spl44 | $spl70 | $spl90)),
  inference(forward_demodulation,[],[f633,f78])).
fof(f633,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl34 | $spl44 | $spl70 | $spl90)),
  inference(forward_demodulation,[],[f632,f125])).
fof(f632,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl34 | $spl70 | $spl90)),
  inference(subsumption_resolution,[],[f631,f50])).
fof(f631,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl34 | $spl70 | $spl90)),
  inference(forward_demodulation,[],[f616,f81])).
fof(f616,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.LASTN_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl70 | $spl90)),
  inference(superposition,[],[f597,f386])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 68
% Generated clauses: 607
% Final active clauses: 22
% Final passive clauses: 14
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 64
% Trivial inequalities: 5
% Fw subsumption resolutions: 34
% Fw demodulations: 27
% Bw demodulations: 30
% Condensations: 54
% 
% Simple tautologies: 21
% Equational tautologies: 15
% Forward subsumptions: 232
% 
% Binary resolution: 8
% Forward superposition: 149
% Backward superposition: 94
% Self superposition: 29
% Equality factoring: 28
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 88
% SAT solver unit clauses: 19
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 1
% 
% Sat splits: 5
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 87
% TWLsolver calls for satisfiability: 52
% 
% Memory used [KB]: 1151
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.643 s
