Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f2232,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2231,f132,f232,f230,f228,f1241,f1491])).
fof(f1491,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f134])).
fof(f134,plain,(
  ( ! [X3] : (s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK7))) | s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8))),s('type.num.num','const.num.|48|_0'))) | s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10)))))) & ! [X4] : s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) & ! [X3] : s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))) & ! [X1,X2] : s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10])],[f89])).
fof(f89,plain,(
  ? [X0] : ((? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) | ? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) | ? [X5,X6] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) & ! [X4] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) & ! [X3] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))) & ! [X1,X2] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((? [X4] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | ? [X3] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))) | ? [X1,X2] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) & ! [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) & ! [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) & ! [X5,X6] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((? [X4] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | ? [X3] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))) | ? [X1,X2] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) & (! [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) & ! [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) & ! [X5,X6] : s('type.pair.prod'('type.num.num','type.num.num'),X0) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((? [X4] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | ? [X3] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))) | ? [X1,X2] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) => (? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))) | ? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))) | ? [X5,X6] : s('type.pair.prod'('type.num.num','type.num.num'),X0) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | ? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | ? [X8,X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) => (? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | ? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | ? [X8,X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | ? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | ? [X8,X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) => (? [X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | ? [X8] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | ? [X8,X7] : s('type.pair.prod'('type.num.num','type.num.num'),X6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  file('thm.gcd.gcd_|49||48|_prove_ltb','thm.gcd.gcd_|49||48|_prove_ltb')).
fof(f1241,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f228,f133])).
fof(f133,plain,(
  ( ! [X4] : (s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f228,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK7))) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK7))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8))),s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f232,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10))))) | $spl4),
  inference(cnf_transformation,[],[f232_D])).
fof(f232_D,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f132,plain,(
  s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK10))))) | s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK8))),s('type.num.num','const.num.|48|_0'))) | s('type.pair.prod'('type.num.num','type.num.num'),sK6) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK7)))),
  inference(cnf_transformation,[],[f90])).
fof(f2231,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f232,f135])).
fof(f135,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),sK6) != s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 185
% Passive clauses: 897
% Generated clauses: 2093
% Final active clauses: 185
% Final passive clauses: 647
% Input formulas: 26
% Initial clauses: 94
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 144
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 909
% 
% Binary resolution: 1410
% Factoring: 204
% Forward superposition: 104
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 88
% SAT solver clauses: 81
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 80
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 1407
% Time elapsed: 0.048 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
