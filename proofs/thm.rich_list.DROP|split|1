Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (68000)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 167
% Passive clauses: 3417
% Generated clauses: 19899
% Final active clauses: 128
% Final passive clauses: 2930
% Input formulas: 22
% Initial clauses: 40
% 
% Duplicate literals: 738
% Trivial inequalities: 385
% Fw subsumption resolutions: 2421
% Fw demodulations: 3046
% Bw demodulations: 35
% 
% Simple tautologies: 347
% Equational tautologies: 39
% Forward subsumptions: 9130
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 387
% Factoring: 2
% Forward superposition: 7318
% Backward superposition: 5496
% Self superposition: 173
% Equality factoring: 76
% Equality resolution: 40
% 
% Split clauses: 288
% Split components: 600
% SAT solver clauses: 631
% SAT solver unit clauses: 51
% SAT solver binary clauses: 161
% 
% Sat splits: 288
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 615
% TWLsolver calls for satisfiability: 132
% 
% Memory used [KB]: 12153
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f10570,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f10465,f1836,f91,f129,f94,f132,f244,f247,f88,f127,f98,f136,f3929,f76,f117,f2112,f3944,f80,f122,f100,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3)))))) ) | $spl28),
  inference(cnf_transformation,[],[f134_D])).
fof(f134_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3)))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f100,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,sK4(X3,X2,X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | p(s(bool,sK4(X3,X2,X1,X0)))) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,sK4(X3,X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : ((~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | p(s(bool,X4))) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : (((~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | p(s(bool,X4)))) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X7,X8,X20] : ? [X21] : ((p(s(bool,X21)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) & s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X20))))) = s('type.list.list'(X6),'const.bool.COND_3'(s(bool,X21),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X20))),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X20))))))),
  file('thm.rich_list.DROP|split|1','thm.list.DROP_def|split|1')).
fof(f122,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl6),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f80,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.rich_list.DROP|split|1','thm.arithmetic.SUC_SUB|49|')).
fof(f3944,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X1),'const.bool.COND_3'(s(bool,sK4(X3,X2,'const.num.SUC_1'(s('type.num.num',X0)),X1)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))),s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num',X0),s('type.list.list'(X1),X3)))))) ) | $spl624),
  inference(cnf_transformation,[],[f3944_D])).
fof(f3944_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X1),'const.bool.COND_3'(s(bool,sK4(X3,X2,'const.num.SUC_1'(s('type.num.num',X0)),X1)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))),s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num',X0),s('type.list.list'(X1),X3)))))) ) <=> ~$spl624),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl624])])).
fof(f2112,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X1),'const.bool.COND_3'(s(bool,sK4(X3,X2,'const.num.SUC_1'(s('type.num.num',X0)),X1)),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3))),s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num',X0),s('type.list.list'(X1),X3)))))) ) | ($spl6 | $spl28)),
  inference(superposition,[],[f134,f122])).
fof(f117,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3))))) | $spl1),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f76,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3)))))),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))) != s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X7),s('type.list.list'(X6),X9))) = s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.DROP|split|1','thm.rich_list.DROP|split|1')).
fof(f3929,plain,(
  $false | ($spl1 | $spl274)),
  inference(trivial_inequality_removal,[],[f3916])).
fof(f3916,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) != s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK3))) | ($spl1 | $spl274)),
  inference(superposition,[],[f117,f1836])).
fof(f136,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,sK4(X3,X2,X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl32),
  inference(cnf_transformation,[],[f136_D])).
fof(f136_D,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,sK4(X3,X2,X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f98,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ~p(s(bool,sK4(X3,X2,X1,X0)))) )),
  inference(cnf_transformation,[],[f72])).
fof(f127,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f88,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.rich_list.DROP|split|1','thm.bool.EQ_CLAUSES|split|3')).
fof(f247,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,sK4(X1,X2,X0,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl72),
  inference(cnf_transformation,[],[f247_D])).
fof(f247_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,sK4(X1,X2,X0,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f244,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s(bool,'F_0') = s(bool,sK4(X1,X2,X0,X3))) ) | ($spl14 | $spl32)),
  inference(resolution,[],[f136,f127])).
fof(f132,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) | $spl24),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f94,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X12) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X11),s(X6,X12)))),
  file('thm.rich_list.DROP|split|1','thm.bool.COND_CLAUSES|split|1')).
fof(f129,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) | $spl18),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f91,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))),
  file('thm.rich_list.DROP|split|1','thm.num.NOT_SUC')).
fof(f1836,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num',X0),s('type.list.list'(X1),X3))) = s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3)))))) ) | $spl274),
  inference(cnf_transformation,[],[f1836_D])).
fof(f1836_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num',X0),s('type.list.list'(X1),X3))) = s('type.list.list'(X1),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),X3)))))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f10465,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X3),X0))) = s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X1),s('type.list.list'(X3),X0)))))) ) | ($spl18 | $spl24 | $spl72 | $spl624)),
  inference(forward_demodulation,[],[f10464,f132])).
fof(f10464,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X1),s('type.list.list'(X3),X0))))) = s('type.list.list'(X3),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X1),s('type.list.list'(X3),X0))),s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X3),X0)))))) ) | ($spl18 | $spl72 | $spl624)),
  inference(subsumption_resolution,[],[f10360,f129])).
fof(f10360,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X1),s('type.list.list'(X3),X0))))) = s('type.list.list'(X3),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X3),'const.list.CONS_2'(s(X3,X1),s('type.list.list'(X3),X0))),s('type.list.list'(X3),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X3),X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))) ) | ($spl72 | $spl624)),
  inference(superposition,[],[f3944,f247])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 110
% Passive clauses: 601
% Generated clauses: 10217
% Final active clauses: 92
% Final passive clauses: 420
% Input formulas: 22
% Initial clauses: 40
% 
% Duplicate literals: 555
% Trivial inequalities: 128
% Fw subsumption resolutions: 674
% Fw demodulations: 1013
% Bw demodulations: 72
% Condensations: 747
% Global subsumptions: 1
% 
% Simple tautologies: 204
% Equational tautologies: 33
% Forward subsumptions: 5062
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 146
% Factoring: 1
% Forward superposition: 3315
% Backward superposition: 2623
% Self superposition: 107
% Equality factoring: 60
% Equality resolution: 26
% 
% Split clauses: 37
% Split components: 85
% SAT solver clauses: 1222
% SAT solver unit clauses: 44
% SAT solver binary clauses: 47
% SAT solver learnt clauses: 3
% 
% Sat splits: 37
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 1142
% TWLsolver calls for satisfiability: 283
% 
% Memory used [KB]: 10362
% Time elapsed: 0.563 s
% ------------------------------
% ------------------------------
% Success in time 1.17 s
