Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f889,plain,(
  $false),
  inference(equality_resolution,[],[f83])).
fof(f83,plain,(
  ( ! [X2] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))))))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X2] : (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f51])).
fof(f51,plain,(
  ? [X0,X1] : ! [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1] : ? [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : ? [X2] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ? [X8] : (~s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int',X8) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ? [X8] : (~s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int',X8) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))))))),
  file('thm.integer.integer_3|49|5_prove_ltb','thm.integer.integer_3|49|5_prove_ltb')).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 35
% Passive clauses: 136
% Generated clauses: 772
% Final active clauses: 35
% Final passive clauses: 78
% Input formulas: 22
% Initial clauses: 47
% 
% Duplicate literals: 81
% Trivial inequalities: 59
% Fw subsumption resolutions: 37
% Fw demodulations: 19
% 
% Simple tautologies: 55
% Equational tautologies: 15
% Forward subsumptions: 381
% 
% Binary resolution: 23
% Forward superposition: 196
% Backward superposition: 265
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 6
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 11
% SAT solver unit clauses: 3
% SAT solver binary clauses: 8
% 
% Sat splits: 8
% 
% TWLsolver clauses: 11
% TWLsolver calls for satisfiability: 3
% 
% Memory used [KB]: 1023
% Time elapsed: 0.025 s
% ------------------------------
% ------------------------------
% Success in time 0.029 s
