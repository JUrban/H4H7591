Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f53,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f52,f28,f45,f43,f49,f27,f44,f42])).
fof(f42,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | $spl0),
  inference(cnf_transformation,[],[f42_D])).
fof(f42_D,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f44,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) | $spl2),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f27,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) | s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0)))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  (s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))) & (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f23])).
fof(f23,plain,(
  ? [X0,X1] : ((s('type.integer.int',X1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))) & (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ? [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) <~> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) <=> s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.integer.int',X7) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))) <=> s('type.integer.int',X6) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.integer.int',X7) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))) <=> s('type.integer.int',X6) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))),
  file('thm.integer.INT_NEG_EQ','thm.integer.INT_NEG_EQ')).
fof(f49,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f48,f45])).
fof(f48,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) | $spl0),
  inference(superposition,[],[f32,f42])).
fof(f32,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : s('type.integer.int',X6) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6)))))),
  file('thm.integer.INT_NEG_EQ','thm.integer.INT_NEGNEG')).
fof(f43,plain,(
  s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | $spl1),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f45,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) | $spl3),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f28,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))) | s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0)))),
  inference(cnf_transformation,[],[f24])).
fof(f52,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f50,f43])).
fof(f50,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))) | $spl2),
  inference(superposition,[],[f32,f44])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 7
% Passive clauses: 13
% Generated clauses: 26
% Final active clauses: 5
% Final passive clauses: 4
% Input formulas: 9
% Initial clauses: 14
% 
% Trivial inequalities: 1
% Fw subsumption resolutions: 2
% 
% Simple tautologies: 2
% Equational tautologies: 1
% Forward subsumptions: 5
% 
% Forward superposition: 2
% Backward superposition: 2
% Self superposition: 1
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 6
% SAT solver unit clauses: 1
% SAT solver binary clauses: 4
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 2
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 4
% TWLsolver calls for satisfiability: 2
% 
% Memory used [KB]: 639
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------
% Success in time 0.014 s
