Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f9170,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9152,f288,f503,f9023,f973,f975,f506,f8528,f281,f501,f499,f280,f500,f498])).
fof(f498,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl0),
  inference(cnf_transformation,[],[f498_D])).
fof(f498_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f500,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) | $spl3),
  inference(cnf_transformation,[],[f500_D])).
fof(f500_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f280,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12)))),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f179])).
fof(f179,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))))),
  inference(flattening,[],[f178])).
fof(f178,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & ((s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f133])).
fof(f133,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) <~> s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f57])).
fof(f57,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) <=> s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) <=> ~s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6))) <=> ~s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X6))))),s('type.num.num',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6))) <=> ~s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X6))))),s('type.num.num',X6)))))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.arithmetic.MOD_SUC_IFF')).
fof(f499,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl1),
  inference(cnf_transformation,[],[f499_D])).
fof(f499_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f501,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) | $spl2),
  inference(cnf_transformation,[],[f501_D])).
fof(f501_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f281,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK13),s('type.num.num',sK12))))),s('type.num.num',sK12))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12)))),
  inference(cnf_transformation,[],[f180])).
fof(f8528,plain,(
  $false | ($spl1 | $spl3 | $spl23)),
  inference(subsumption_resolution,[],[f8527,f975])).
fof(f8527,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl3)),
  inference(forward_demodulation,[],[f8526,f517])).
fof(f517,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))),
  inference(resolution,[],[f303,f279])).
fof(f279,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))))),
  inference(cnf_transformation,[],[f180])).
fof(f303,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.bool.EQ_CLAUSES|split|0')).
fof(f8526,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | ($spl1 | $spl3)),
  inference(subsumption_resolution,[],[f8525,f499])).
fof(f8525,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | $spl3),
  inference(trivial_inequality_removal,[],[f8513])).
fof(f8513,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | $spl3),
  inference(superposition,[],[f500,f4398])).
fof(f4398,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',X1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(resolution,[],[f368,f307])).
fof(f307,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.bool.EQ_CLAUSES|split|2')).
fof(f368,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))) => s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & ~s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X0)))) => s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & ~s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X6))))),s('type.num.num',X6)))) => s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6))))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.arithmetic.MOD_SUC')).
fof(f506,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl8),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f975,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl23),
  inference(cnf_transformation,[],[f975_D])).
fof(f975_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f973,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f933,f302])).
fof(f302,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f183])).
fof(f933,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f302,f290])).
fof(f290,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) | s(bool,'F_0') = s(bool,X10))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.bool.BOOL_CASES_AX')).
fof(f9023,plain,(
  $false | ($spl0 | $spl2 | $spl23)),
  inference(subsumption_resolution,[],[f9011,f359])).
fof(f359,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.arithmetic.SUC_NOT')).
fof(f9011,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK13),s('type.num.num',sK12))))) | ($spl0 | $spl2 | $spl23)),
  inference(backward_demodulation,[],[f8887,f498])).
fof(f8887,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | ($spl2 | $spl23)),
  inference(subsumption_resolution,[],[f8886,f975])).
fof(f8886,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | $spl2),
  inference(forward_demodulation,[],[f8874,f517])).
fof(f8874,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))),s('type.num.num',sK12))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) | $spl2),
  inference(superposition,[],[f4284,f501])).
fof(f4284,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(resolution,[],[f294,f307])).
fof(f294,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => ! [X9] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X8))))),
  file('thm.arithmetic.MOD_SUC_IFF','thm.arithmetic.MOD_EQ_|48|')).
fof(f503,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f503_D])).
fof(f503_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f288,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.MOD_SUC_IFF',aHL_FALSITY)).
fof(f9152,plain,(
  $false | ($spl5 | $spl8)),
  inference(resolution,[],[f506,f503])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 505
% Passive clauses: 2915
% Generated clauses: 8939
% Final active clauses: 498
% Final passive clauses: 2047
% Input formulas: 54
% Initial clauses: 212
% 
% Duplicate literals: 255
% Trivial inequalities: 14
% Fw subsumption resolutions: 910
% Fw demodulations: 133
% Bw demodulations: 3
% 
% Simple tautologies: 211
% Equational tautologies: 50
% Forward subsumptions: 4099
% 
% Binary resolution: 4444
% Factoring: 1019
% Forward superposition: 887
% Backward superposition: 731
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 386
% Split components: 780
% SAT solver clauses: 588
% SAT solver unit clauses: 14
% SAT solver binary clauses: 137
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 3
% 
% Sat splits: 386
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 582
% TWLsolver calls for satisfiability: 292
% 
% Memory used [KB]: 4477
% Time elapsed: 0.233 s
% ------------------------------
% ------------------------------
% Success in time 0.236 s
