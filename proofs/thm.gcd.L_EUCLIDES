Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% (66883)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 712
% Passive clauses: 8141
% Generated clauses: 21636
% Final active clauses: 706
% Final passive clauses: 7021
% Input formulas: 65
% Initial clauses: 220
% 
% Duplicate literals: 346
% Trivial inequalities: 16
% Fw subsumption resolutions: 1662
% Fw demodulations: 1471
% Bw demodulations: 5
% 
% Simple tautologies: 254
% Equational tautologies: 56
% Forward subsumptions: 9468
% 
% Binary resolution: 9699
% Factoring: 1212
% Forward superposition: 4367
% Backward superposition: 2415
% Self superposition: 46
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 323
% Split components: 652
% SAT solver clauses: 639
% SAT solver unit clauses: 18
% SAT solver binary clauses: 124
% 
% Sat splits: 323
% 
% TWLsolver clauses: 639
% TWLsolver calls for satisfiability: 440
% 
% Memory used [KB]: 11001
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f3711,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3707,f308,f544,f443,f592,f673,f676,f315,f551,f334,f558,f3146,f3148,f545,f547,f394,f574,f672,f675,f306,f540,f684,f689,f307,f538,f338,f560,f2583,f2584,f305,f542,f319,f555,f524,f661])).
fof(f661,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))))))) ) | $spl194),
  inference(cnf_transformation,[],[f661_D])).
fof(f661_D,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))))))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f524,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1)))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))),
  inference(flattening,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))),
  inference(ennf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0)))))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6,X7,X8,X19] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num',X6)))))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num',X7))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X7)))))))))),
  file('thm.gcd.L_EUCLIDES','thm.gcd.gcd_28_prove_ltb')).
fof(f555,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(cnf_transformation,[],[f555_D])).
fof(f555_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f319,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.gcd.L_EUCLIDES','thm.arithmetic.MULT_RIGHT_|49|')).
fof(f542,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(cnf_transformation,[],[f542_D])).
fof(f542_D,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f305,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f210])).
fof(f210,plain,(
  s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK12),s('type.num.num',sK13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14)))))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f156])).
fof(f156,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2)))))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ~! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X7))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X7))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num',X8)))))),
  file('thm.gcd.L_EUCLIDES','thm.gcd.L_EUCLIDES')).
fof(f2584,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK12))))))) ) | $spl886),
  inference(cnf_transformation,[],[f2584_D])).
fof(f2584_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK12))))))) ) <=> ~$spl886),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl886])])).
fof(f2583,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK12))))))) ) | ($spl4 | $spl18 | $spl194)),
  inference(forward_demodulation,[],[f2513,f555])).
fof(f2513,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK12))))))) ) | ($spl4 | $spl194)),
  inference(superposition,[],[f661,f542])).
fof(f560,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl26),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f338,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.gcd.L_EUCLIDES','thm.bool.EQ_CLAUSES|split|2')).
fof(f538,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14)))) | $spl1),
  inference(cnf_transformation,[],[f538_D])).
fof(f538_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f307,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))))),
  inference(cnf_transformation,[],[f210])).
fof(f689,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))) | $spl206),
  inference(cnf_transformation,[],[f689_D])).
fof(f689_D,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f684,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))) | ($spl1 | $spl26)),
  inference(resolution,[],[f560,f538])).
fof(f540,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14)))))) | $spl2),
  inference(cnf_transformation,[],[f540_D])).
fof(f540_D,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f306,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14))))))),
  inference(cnf_transformation,[],[f210])).
fof(f675,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14))))) | $spl202),
  inference(cnf_transformation,[],[f675_D])).
fof(f675_D,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14))))) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f672,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14))))) | ($spl2 | $spl22)),
  inference(resolution,[],[f558,f540])).
fof(f574,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl30),
  inference(cnf_transformation,[],[f574_D])).
fof(f574_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f394,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9,X10] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.gcd.L_EUCLIDES','thm.arithmetic.MULT_SYM')).
fof(f547,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f547_D])).
fof(f547_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f545,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f311,f308])).
fof(f311,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f37])).
fof(f37,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.gcd.L_EUCLIDES','thm.bool.NOT_CLAUSES|split|1')).
fof(f3148,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) | $spl1047),
  inference(cnf_transformation,[],[f3148_D])).
fof(f3148_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) <=> ~$spl1047),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1047])])).
fof(f3146,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) | ($spl6 | $spl9 | $spl30 | $spl202 | $spl206 | $spl886)),
  inference(subsumption_resolution,[],[f3145,f544])).
fof(f3145,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) | ($spl9 | $spl30 | $spl202 | $spl206 | $spl886)),
  inference(forward_demodulation,[],[f3144,f675])).
fof(f3144,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK12),s('type.num.num',sK14)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) | ($spl9 | $spl30 | $spl206 | $spl886)),
  inference(forward_demodulation,[],[f3143,f574])).
fof(f3143,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK13),s('type.num.num',sK14)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK14),s('type.num.num',sK12)))))) | ($spl9 | $spl30 | $spl206 | $spl886)),
  inference(forward_demodulation,[],[f3142,f574])).
fof(f3142,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK14),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK14),s('type.num.num',sK12)))))) | ($spl9 | $spl206 | $spl886)),
  inference(subsumption_resolution,[],[f3074,f547])).
fof(f3074,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK14),s('type.num.num',sK13)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK14),s('type.num.num',sK12)))))) | ($spl206 | $spl886)),
  inference(superposition,[],[f2584,f689])).
fof(f558,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl22),
  inference(cnf_transformation,[],[f558_D])).
fof(f558_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f334,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.gcd.L_EUCLIDES','thm.bool.EQ_CLAUSES|split|1')).
fof(f551,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl10),
  inference(cnf_transformation,[],[f551_D])).
fof(f551_D,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f315,plain,(
  ( ! [X0] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6] : p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X6))))),
  file('thm.gcd.L_EUCLIDES','thm.divides.DIVIDES_REFL')).
fof(f676,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl204),
  inference(cnf_transformation,[],[f676_D])).
fof(f676_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f673,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl10 | $spl22)),
  inference(resolution,[],[f558,f551])).
fof(f592,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | $spl56),
  inference(cnf_transformation,[],[f592_D])).
fof(f592_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f443,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8)))))))),
  file('thm.gcd.L_EUCLIDES','thm.divides.DIVIDES_MULT')).
fof(f544,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f544_D])).
fof(f544_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f308,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.L_EUCLIDES',aHL_TRUTH)).
fof(f3707,plain,(
  $false | ($spl6 | $spl56 | $spl204 | $spl1047)),
  inference(subsumption_resolution,[],[f3706,f544])).
fof(f3706,plain,(
  ~p(s(bool,'T_0')) | ($spl56 | $spl204 | $spl1047)),
  inference(forward_demodulation,[],[f3678,f676])).
fof(f3678,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK13)))) | ($spl56 | $spl1047)),
  inference(resolution,[],[f3148,f592])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 250
% Passive clauses: 660
% Generated clauses: 3370
% Final active clauses: 244
% Final passive clauses: 406
% Input formulas: 65
% Initial clauses: 220
% 
% Duplicate literals: 80
% Trivial inequalities: 9
% Fw subsumption resolutions: 229
% Fw demodulations: 256
% Bw demodulations: 10
% Condensations: 33
% Global subsumptions: 22
% 
% Simple tautologies: 204
% Equational tautologies: 5
% Forward subsumptions: 1066
% 
% Binary resolution: 1100
% Factoring: 52
% Forward superposition: 444
% Backward superposition: 234
% Self superposition: 14
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 1042
% SAT solver unit clauses: 227
% SAT solver binary clauses: 66
% SAT solver learnt clauses: 45
% SAT solver learnt literals: 10
% 
% Sat splits: 2
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 953
% TWLsolver calls for satisfiability: 1620
% 
% Memory used [KB]: 3709
% Time elapsed: 0.085 s
% ------------------------------
% ------------------------------
% Success in time 0.705 s
