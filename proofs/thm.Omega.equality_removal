Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f1633,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1632,f160,f163,f161,f159,f162,f156,f168])).
fof(f168,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f156,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f142])).
fof(f142,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X14] : ! [X7] : (s(X14,X7) = s(X14,X7) <=> p(s(bool,'T_0')))),
  file('thm.Omega.equality_removal','thm.bool.REFL_CLAUSE')).
fof(f162,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | $spl2),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f159,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3)))))),
  inference(duplicate_literal_removal,[],[f98])).
fof(f98,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3)))))),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0)))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | (s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',sK4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | ! [X4] : (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ? [X5] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X5))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ! [X4] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))))),
  inference(rectify,[],[f63])).
fof(f63,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ? [X4] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ! [X4] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ? [X4] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ! [X4] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3)))))))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) <~> ? [X4] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) <=> ? [X4] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X8),s('type.list.list'('type.integer.int'),X9))))) <=> ? [X10] : (s('type.integer.int',X7) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X10))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X8))),s('type.list.list'('type.integer.int'),X9))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X8),s('type.list.list'('type.integer.int'),X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))) => (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X8),s('type.list.list'('type.integer.int'),X9))))) <=> ? [X10] : (s('type.integer.int',X7) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X10))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X8))),s('type.list.list'('type.integer.int'),X9))))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X8),s('type.list.list'('type.integer.int'),X9))))))))),
  file('thm.Omega.equality_removal','thm.Omega.equality_removal')).
fof(f161,plain,(
  ( ! [X4] : (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3)))))) ) | $spl0),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  ( ! [X4] : (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f163,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | $spl3),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f160,plain,(
  ( ! [X4] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3)))))) )),
  inference(duplicate_literal_removal,[],[f99])).
fof(f99,plain,(
  ( ! [X4] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3))))) | s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),sK2),s('type.list.list'('type.integer.int'),sK3)))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f1632,plain,(
  $false | ($spl0 | $spl2 | $spl8)),
  inference(subsumption_resolution,[],[f1631,f168])).
fof(f1631,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f1630,f178])).
fof(f178,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0)))),
  inference(resolution,[],[f96,f105])).
fof(f105,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.Omega.equality_removal','thm.bool.EQ_CLAUSES|split|0')).
fof(f96,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))))),
  inference(cnf_transformation,[],[f65])).
fof(f1630,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0)))) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f1616,f161])).
fof(f1616,plain,(
  s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',sK6(sK3,sK2,sK1,sK0)))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0)))) | $spl2),
  inference(trivial_inequality_removal,[],[f1615])).
fof(f1615,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',sK6(sK3,sK2,sK1,sK0)))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),sK2))),s('type.list.list'('type.integer.int'),sK3))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0)))) | $spl2),
  inference(superposition,[],[f155,f162])).
fof(f155,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',sK6(X3,X2,X1,X0)))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',sK6(X3,X2,X1,X0)))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3))))) | ? [X4] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3)))))) | ? [X4] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))))),
  inference(ennf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X2),s('type.list.list'('type.integer.int'),X3)))))) => ? [X4] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X4))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X2))),s('type.list.list'('type.integer.int'),X3))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),X8),s('type.list.list'('type.integer.int'),X9)))))) => ? [X10] : s('type.integer.int',X7) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int',X10))),s('type.integer.int','const.Omega.sumc_2'(s('type.list.list'('type.integer.int'),'const.list.MAP_2'(s(fun('type.integer.int','type.integer.int'),'_dst_x1x0_2'(s(fun('type.integer.int',fun('type.integer.int','type.integer.int')),'const.Omega.modhat_0'),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.integer.int'),X8))),s('type.list.list'('type.integer.int'),X9))))))),
  file('thm.Omega.equality_removal','thm.Omega.Omega_2|49|_prove_ltb')).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 42
% Passive clauses: 371
% Generated clauses: 1472
% Final active clauses: 40
% Final passive clauses: 273
% Input formulas: 26
% Initial clauses: 60
% 
% Duplicate literals: 113
% Trivial inequalities: 30
% Fw subsumption resolutions: 179
% Fw demodulations: 55
% Bw demodulations: 2
% 
% Simple tautologies: 83
% Equational tautologies: 34
% Forward subsumptions: 579
% 
% Binary resolution: 82
% Factoring: 1
% Forward superposition: 378
% Backward superposition: 435
% Self superposition: 61
% Equality factoring: 52
% Equality resolution: 11
% 
% Split clauses: 37
% Split components: 74
% SAT solver clauses: 85
% SAT solver unit clauses: 17
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 1
% 
% Sat splits: 37
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 84
% TWLsolver calls for satisfiability: 47
% 
% Memory used [KB]: 2046
% Time elapsed: 0.053 s
% ------------------------------
% ------------------------------
% Success in time 0.055 s
