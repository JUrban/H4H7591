Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f481,plain,(
  $false),
  inference(subsumption_resolution,[],[f211,f412])).
fof(f412,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',X0))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X0)))))) )),
  inference(subsumption_resolution,[],[f403,f22])).
fof(f22,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.INT_DIVIDES_RADD',aHL_TRUTH)).
fof(f403,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',X0))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X0)))))) )),
  inference(superposition,[],[f27,f35])).
fof(f35,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))),
  inference(subsumption_resolution,[],[f32,f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.integer.INT_DIVIDES_RADD',aHL_FALSITY)).
fof(f32,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))),
  inference(superposition,[],[f20,f24])).
fof(f24,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.integer.INT_DIVIDES_RADD',aHL_BOOL_CASES)).
fof(f20,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) & s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK2),s('type.integer.int',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) & s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))))))),
  file('thm.integer.INT_DIVIDES_RADD','thm.integer.INT_DIVIDES_RADD')).
fof(f27,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X2))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) => s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int',X8))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))))),
  file('thm.integer.INT_DIVIDES_RADD','thm.integer.INT_DIVIDES_LADD')).
fof(f211,plain,(
  s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))))),
  inference(forward_demodulation,[],[f21,f25])).
fof(f25,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int',X9)))),
  file('thm.integer.INT_DIVIDES_RADD','thm.integer.INT_ADD_SYM')).
fof(f21,plain,(
  s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) != s(bool,'const.integer.int_divides_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK2),s('type.integer.int',sK1)))))),
  inference(cnf_transformation,[],[f18])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 78
% Generated clauses: 450
% Final active clauses: 14
% Final passive clauses: 38
% Input formulas: 7
% Initial clauses: 8
% 
% Duplicate literals: 71
% Trivial inequalities: 8
% Fw subsumption resolutions: 21
% Fw demodulations: 11
% Bw demodulations: 6
% 
% Simple tautologies: 24
% Equational tautologies: 15
% Forward subsumptions: 192
% 
% Binary resolution: 7
% Forward superposition: 131
% Backward superposition: 104
% Self superposition: 32
% Equality factoring: 28
% Equality resolution: 1
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 27
% SAT solver unit clauses: 2
% SAT solver binary clauses: 15
% 
% Sat splits: 12
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 27
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 767
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
