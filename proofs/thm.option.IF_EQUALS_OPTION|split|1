Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f1660,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1656,f93,f148,f146,f1361,f94,f149,f147,f1365,f1380])).
fof(f1380,plain,(
  s(bool,'F_0') = s(bool,sK2) | $spl16),
  inference(cnf_transformation,[],[f1380_D])).
fof(f1380_D,plain,(
  s(bool,'F_0') = s(bool,sK2) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1365,plain,(
  s(bool,'F_0') = s(bool,sK2) | $spl3),
  inference(resolution,[],[f149,f110])).
fof(f110,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f147,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | $spl1),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f149,plain,(
  ~p(s(bool,sK2)) | $spl3),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ~p(s(bool,sK2)) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f94,plain,(
  ~p(s(bool,sK2)) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1)))))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  (s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | p(s(bool,sK2))) & (s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | ~p(s(bool,sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f70])).
fof(f70,plain,(
  ? [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,X2),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))) | p(s(bool,X2))) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.bool.COND_3'(s(bool,X2),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))) | ~p(s(bool,X2))))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,X2),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))) <~> p(s(bool,X2)))),
  inference(ennf_transformation,[],[f30])).
fof(f30,plain,(
  ~! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,X2),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))) <=> p(s(bool,X2)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.bool.COND_3'(s(bool,X2),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))))) <=> p(s(bool,X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.bool.COND_3'(s(bool,X8),s('type.option.option'(X6),'const.option.NONE_0'),s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))))) <=> p(s(bool,X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.bool.COND_3'(s(bool,X8),s('type.option.option'(X6),'const.option.NONE_0'),s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))))) <=> p(s(bool,X8)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.option.IF_EQUALS_OPTION|split|1')).
fof(f1361,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f1360,f134])).
fof(f134,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X9,X10] : s(X6,X9) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X9),s(X6,X10)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.bool.COND_CLAUSES|split|0')).
fof(f1360,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,'T_0'),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f147,f157])).
fof(f157,plain,(
  s(bool,'T_0') = s(bool,sK2) | $spl2),
  inference(resolution,[],[f106,f148])).
fof(f106,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f146,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | $spl0),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f148,plain,(
  p(s(bool,sK2)) | $spl2),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  p(s(bool,sK2)) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f93,plain,(
  p(s(bool,sK2)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,sK2),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1)))))),
  inference(cnf_transformation,[],[f71])).
fof(f1656,plain,(
  $false | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f1641,f132])).
fof(f132,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X7] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.option.NOT_NONE_SOME')).
fof(f1641,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))) | ($spl0 | $spl16)),
  inference(superposition,[],[f1590,f133])).
fof(f133,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X9,X10] : s(X6,X10) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X9),s(X6,X10)))),
  file('thm.option.IF_EQUALS_OPTION|split|1','thm.bool.COND_CLAUSES|split|1')).
fof(f1590,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK1))))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f146,f1380])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 34
% Passive clauses: 310
% Generated clauses: 1510
% Final active clauses: 28
% Final passive clauses: 225
% Input formulas: 27
% Initial clauses: 51
% 
% Duplicate literals: 129
% Trivial inequalities: 27
% Fw subsumption resolutions: 142
% Fw demodulations: 99
% Bw demodulations: 2
% 
% Simple tautologies: 89
% Equational tautologies: 33
% Forward subsumptions: 670
% 
% Binary resolution: 41
% Factoring: 1
% Forward superposition: 295
% Backward superposition: 602
% Self superposition: 50
% Equality factoring: 54
% Equality resolution: 8
% 
% Split clauses: 20
% Split components: 40
% SAT solver clauses: 37
% SAT solver unit clauses: 6
% SAT solver binary clauses: 23
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 20
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 34
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 1151
% Time elapsed: 0.036 s
% ------------------------------
% ------------------------------
% Success in time 0.038 s
