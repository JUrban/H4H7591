Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% (89427)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 282
% Passive clauses: 3699
% Generated clauses: 32112
% Final active clauses: 179
% Final passive clauses: 3016
% Input formulas: 108
% Initial clauses: 144
% 
% Duplicate literals: 981
% Trivial inequalities: 192
% Fw subsumption resolutions: 1678
% Fw demodulations: 5579
% Bw demodulations: 82
% 
% Simple tautologies: 322
% Equational tautologies: 54
% Forward subsumptions: 19350
% Fw demodulations to eq. taut.: 40
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 255
% Factoring: 2
% Forward superposition: 12400
% Backward superposition: 10398
% Self superposition: 188
% Equality factoring: 100
% Equality resolution: 30
% 
% Split clauses: 214
% Split components: 432
% SAT solver clauses: 483
% SAT solver unit clauses: 6
% SAT solver binary clauses: 96
% 
% Sat splits: 214
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 474
% TWLsolver calls for satisfiability: 86
% 
% Memory used [KB]: 21108
% Time elapsed: 0.617 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (89454)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 292
% Passive clauses: 1258
% Generated clauses: 27505
% Final active clauses: 189
% Final passive clauses: 590
% Input formulas: 108
% Initial clauses: 144
% 
% Duplicate literals: 160
% Trivial inequalities: 456
% Fw subsumption resolutions: 1584
% Fw demodulations: 6619
% Bw demodulations: 384
% Condensations: 144
% Global subsumptions: 7
% 
% Simple tautologies: 114
% Equational tautologies: 19
% Forward subsumptions: 14932
% Fw demodulations to eq. taut.: 29
% Bw demodulations to eq. taut.: 23
% 
% Binary resolution: 287
% Factoring: 3
% Forward superposition: 8082
% Backward superposition: 7877
% Self superposition: 118
% Equality factoring: 26
% Equality resolution: 11
% 
% Split clauses: 155
% Split components: 311
% SAT solver clauses: 2199
% SAT solver unit clauses: 219
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 18
% SAT solver learnt literals: 8
% 
% Sat splits: 155
% Sat splitting refutations: 63
% 
% TWLsolver clauses: 2167
% TWLsolver calls for satisfiability: 526
% 
% Memory used [KB]: 19061
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% (89476)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1428
% Passive clauses: 13879
% Generated clauses: 303989
% Final active clauses: 555
% Final passive clauses: 2924
% Input formulas: 108
% Initial clauses: 144
% Discarded non-redundant clauses: 23785
% 
% Duplicate literals: 3591
% Trivial inequalities: 1204
% Fw subsumption resolutions: 8893
% Fw demodulations: 59697
% Bw demodulations: 5704
% Condensations: 4302
% Global subsumptions: 215
% 
% Simple tautologies: 953
% Equational tautologies: 743
% Forward subsumptions: 208366
% Fw demodulations to eq. taut.: 739
% Bw demodulations to eq. taut.: 314
% 
% Unit resulting resolution: 14533
% Factoring: 4
% Forward superposition: 123545
% Backward superposition: 72848
% Self superposition: 556
% Equality factoring: 246
% Equality resolution: 51
% 
% Split clauses: 153
% Split components: 315
% SAT solver clauses: 15224
% SAT solver unit clauses: 2715
% SAT solver binary clauses: 5756
% 
% Sat splits: 153
% Sat splitting refutations: 822
% 
% Memory used [KB]: 180125
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f157377,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f321,f322,f347,f323,f324,f348,f349,f352,f353,f358,f360,f363,f367,f373,f371,f369,f337,f338,f377,f341,f342,f390,f391,f397,f422,f423,f399,f466,f467,f375,f513,f523,f665,f666,f689,f687,f907,f911,f910,f913,f915,f890,f921,f940,f941,f966,f942,f943,f967,f1276,f1277,f1311,f1294,f1295,f1326,f1296,f1297,f1330,f1504,f1505,f1530,f1661,f1662,f1711,f1709,f1679,f1680,f1730,f1728,f1734,f1738,f1692,f1693,f1743,f1741,f1704,f1705,f1746,f1786,f1787,f1806,f1850,f1851,f1866,f1867,f1871,f1745,f1924,f1925,f1966,f1964,f1972,f1976,f1974,f1937,f1983,f1981,f2016,f2017,f2025,f2294,f2295,f2325,f2323,f2307,f2308,f2643,f2645,f1857,f2655,f2659,f2810,f2811,f2819,f3633,f3635,f917,f4022,f4023,f4065,f4518,f1736,f4605,f4606,f1808,f4625,f5574,f5575,f5601,f1328,f5631,f6758,f6759,f6813,f6812,f7256,f7219,f7223,f7224,f7265,f7277,f9034,f2657,f9732,f9733,f9793,f9792,f10423,f10445,f919,f10808,f10809,f10961,f10964,f10882,f10883,f10956,f10957,f11070,f11112,f11171,f11316,f11315,f11331,f11792,f11791,f11806,f13238,f13239,f13264,f13240,f13241,f13265,f13477,f13478,f13679,f13479,f13480,f13680,f4520,f13681,f13682,f13683,f13690,f13267,f13623,f13634,f13766,f13764,f13650,f13771,f13759,f13269,f13266,f13274,f13276,f13270,f13268,f4519,f14424,f14423,f14440,f14524,f14800,f14801,f14845,f14805,f14851,f14849,f14868,f14869,f14878,f12962,f12961,f14881,f12015,f12014,f14886,f12005,f12004,f14887,f10142,f10141,f1189,f1188,f14917,f14924,f14927,f14932,f14933,f14934,f14935,f10762,f1216,f10175,f14028,f14958,f12966,f14977,f12991,f7276,f12984,f7272,f12013,f15228,f15278,f15280,f15279,f15281,f15282,f15283,f346,f15287,f365,f15274,f15275,f379,f15924,f15925,f16116,f15926,f15927,f16117,f15934,f16125,f16041,f14847,f16063,f16203,f16194,f12024,f12023,f12059,f12057,f14926,f12027,f12025,f973,f16123,f972,f971,f362,f487,f970,f969,f968,f486,f14834,f14836,f14199,f14197,f974,f381,f14945,f17486,f17550,f17551,f18008,f18009,f2334,f2333,f19282,f19283,f19345,f19344,f20519,f24411,f24410,f24429,f24925,f24926,f2821,f24963,f25052,f25053,f25072,f25073,f25141,f25140,f25142,f25146,f25162,f25194,f25195,f2027,f25207,f25268,f25269,f25290,f25291,f26296,f26297,f26336,f26689,f26691,f9036,f26785,f26786,f26824,f26334,f27945,f27962,f27963,f28018,f27977,f29229,f29269,f29244,f29245,f29271,f29281,f29285,f29288,f29287,f29258,f29291,f29289,f30267,f30310,f30282,f30283,f30312,f30322,f33077,f33081,f33078,f33101,f33105,f33103,f33051,f33052,f33080,f33108,f33056,f33112,f33110,f33057,f33058,f33115,f33113,f34933,f34936,f1327,f34934,f35620,f35653,f35651,f35792,f35793,f35890,f35894,f35893,f35892,f36492,f36627,f36493,f36628,f36543,f36544,f36629,f36563,f36564,f36646,f36645,f36565,f36566,f36647,f36679,f36678,f36748,f36750,f36751,f36752,f36753,f37032,f37035,f37033,f37036,f37039,f37037,f37346,f37351,f37349,f37355,f37359,f37357,f37318,f37363,f37406,f37407,f37420,f37494,f37495,f37511,f37598,f37597,f37615,f37614,f37690,f37692,f37693,f37694,f37695,f37835,f37836,f37856,f38412,f38413,f38414,f38415,f36648,f38416,f40084,f40140,f40099,f40100,f40142,f40157,f40163,f40166,f40165,f40426,f40428,f41669,f41672,f41671,f41632,f41633,f41675,f41673,f41652,f41653,f41676,f429,f45204,f45251,f45221,f45222,f45253,f45268,f45274,f45277,f45276,f52614,f52630,f52628,f52633,f48546,f48544,f48478,f52639,f37302,f37301,f37347,f52641,f52642,f52644,f52643,f27979,f27978,f52645,f27654,f27653,f52646,f24793,f24792,f1313,f52647,f48582,f38626,f30617,f52650,f23864,f52651,f21529,f15026,f17778,f17776,f345,f51034,f52653,f23863,f52654,f21528,f52655,f521,f52894,f48672,f48670,f48581,f48580,f48579,f48296,f48294,f48094,f38246,f38244,f38243,f38242,f52899,f37016,f37015,f52913,f52911,f34453,f34452,f34479,f34477,f33967,f33966,f52918,f33996,f33994,f52920,f33799,f33797,f33709,f33708,f33701,f33699,f33582,f33580,f33428,f28178,f28176,f28175,f52901,f26077,f26075,f25989,f38627,f21923,f21921,f21837,f21680,f21678,f21589,f36630,f19485,f19483,f19393,f14938,f52945,f49111,f49081,f49108,f49078,f49432,f49429,f4231,f10176,f4066,f10156,f10154,f10153,f10152,f12974,f7263,f12973,f12971,f1203,f1201,f1200,f1199,f12969,f52963,f52962,f4067,f52960,f52959,f14940,f53051,f53050,f53049,f53048,f53045,f53035,f53034,f53033,f53032,f53031,f53030,f53029,f53028,f53027,f53026,f53011,f53008,f53007,f53157,f53158,f53159,f53160,f53161,f53162,f53163,f53164,f53165,f53166,f53167,f53168,f53169,f53170,f53171,f53172,f53173,f53174,f53359,f53360,f53361,f53362,f53385,f53384,f52634,f52636,f53376,f53375,f14916,f52638,f53505,f351,f53506,f59974,f59975,f25097,f60058,f60059,f60075,f25164,f60140,f60141,f25099,f25313,f60162,f60163,f25145,f61797,f61814,f61815,f27995,f61866,f28020,f61829,f28024,f65928,f65929,f35889,f35887,f67496,f67500,f67530,f67533,f67532,f67555,f67557,f25166,f67568,f67570,f67573,f67575,f67578,f67580,f67498,f67683,f25144,f67684,f68434,f68436,f69557,f69570,f69568,f73749,f68437,f73751,f75891,f75895,f75893,f80186,f80201,f80199,f83181,f83184,f83183,f97540,f97541,f97604,f97675,f97679,f97677,f97634,f97635,f97698,f97696,f97703,f97707,f97705,f97872,f97875,f97874,f98573,f98576,f98575,f98842,f98845,f98844,f99969,f99970,f100031,f97603,f100099,f100103,f100101,f100060,f100061,f100122,f100120,f100309,f100310,f100396,f100395,f109874,f109876,f52648,f109896,f109898,f10962,f119527,f119530,f119529,f119776,f119779,f119778,f119918,f119919,f119961,f119959,f121805,f122524,f122526,f122525,f124798,f124799,f13761,f124804,f126633,f126632,f126640,f130610,f130613,f130612,f908,f131054,f131057,f131055,f135280,f135283,f135282,f136142,f136143,f136151,f136211,f136212,f136224,f136344,f136345,f136361,f37418,f144609,f144637,f144848,f144847,f144859,f2644,f146756,f146873,f146871,f146757,f146877,f146875,f146758,f146879,f146759,f146882,f146760,f146884,f146761,f146881,f146886,f148111,f148115,f148113,f150168,f150171,f150169,f151130,f151133,f151132,f152220,f144639,f152262,f152221,f152265,f152263,f153280,f153281,f153314,f1528,f154609,f154612,f154611,f154600,f154601,f154637,f154636,f156080,f27993,f156098,f156099,f156127,f28013,f156151,f28021,f156153,f157130,f157157,f157155,f157328,f157376])).
fof(f157376,plain,(
  $false | ($spl1 | $spl613)),
  inference(subsumption_resolution,[],[f146947,f146880])).
fof(f146880,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | $spl613),
  inference(cnf_transformation,[],[f146880_D])).
fof(f146880_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) <=> ~$spl613),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl613])])).
fof(f146947,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | $spl1),
  inference(subsumption_resolution,[],[f146817,f308])).
fof(f308,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f194])).
fof(f194,plain,(
  ! [X0] : (~p(s(bool,'F_0')) | p(s(bool,X0)))),
  inference(ennf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0] : (p(s(bool,'F_0')) => p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X13] : (p(s(bool,'F_0')) => p(s(bool,X13)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.FALSITY')).
fof(f146817,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | $spl1),
  inference(superposition,[],[f143836,f53298])).
fof(f53298,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2))) | $spl1),
  inference(resolution,[],[f799,f297])).
fof(f297,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f217])).
fof(f217,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X13] : ((p(s(bool,X13)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X13))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.IMP_F_EQ_F')).
fof(f799,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl1),
  inference(trivial_inequality_removal,[],[f793])).
fof(f793,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl1),
  inference(superposition,[],[f759,f319])).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f181])).
fof(f181,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num',X2)))) => s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6] : ! [X18,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X18))),s('type.num.num',X8)))) => s('type.list.list'(X6),X18) = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X18))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.list.TAKE_LENGTH_TOO_LONG')).
fof(f759,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(forward_demodulation,[],[f699,f257])).
fof(f257,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f137])).
fof(f137,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X12) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X11),s(X6,X12)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.COND_CLAUSES|split|1')).
fof(f699,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(backward_demodulation,[],[f456,f225])).
fof(f225,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f183])).
fof(f183,plain,(
  ? [X0,X1,X2] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(ennf_transformation,[],[f111])).
fof(f111,plain,(
  ~! [X0,X1,X2] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ~! [X0] : ! [X1,X2] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))),s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))),s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))))),s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.list.LENGTH_TAKE_EQ')).
fof(f456,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(resolution,[],[f345,f297])).
fof(f143836,plain,(
  ( ! [X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK2))))) )),
  inference(resolution,[],[f86987,f261])).
fof(f261,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X9,X8] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.NOT_LESS')).
fof(f86987,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f86939,f266])).
fof(f266,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f109])).
fof(f109,axiom,(
  ! [X8,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|6')).
fof(f86939,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) )),
  inference(superposition,[],[f18047,f265])).
fof(f265,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f107])).
fof(f107,axiom,(
  ! [X8,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|4')).
fof(f18047,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X0))))) )),
  inference(resolution,[],[f15301,f258])).
fof(f258,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X9,X8,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X10))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.LESS_EQ_TRANS')).
fof(f15301,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))),
  inference(resolution,[],[f355,f264])).
fof(f264,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f108])).
fof(f108,axiom,(
  ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|5')).
fof(f355,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(subsumption_resolution,[],[f354,f318])).
fof(f318,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f179])).
fof(f179,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6] : ! [X8,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X18)))))) => s('type.num.num',X8) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X18))))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.list.LENGTH_TAKE')).
fof(f354,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f329,f256])).
fof(f256,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.bool.COND_3'(s(bool,'T_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X11) = s(X6,'const.bool.COND_3'(s(bool,'T_0'),s(X6,X11),s(X6,X12)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.COND_CLAUSES|split|0')).
fof(f329,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f305])).
fof(f305,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.EQ_CLAUSES|split|1')).
fof(f157328,plain,(
  $false | $spl612),
  inference(equality_resolution,[],[f157249])).
fof(f157249,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))) ) | $spl612),
  inference(subsumption_resolution,[],[f157248,f272])).
fof(f272,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X8] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ZERO_LESS_EQ')).
fof(f157248,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))) ) | $spl612),
  inference(forward_demodulation,[],[f157209,f226])).
fof(f226,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X9,X8,X10] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X10))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ADD_MONO_LESS_EQ')).
fof(f157209,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0'))))))) ) | $spl612),
  inference(superposition,[],[f147020,f254])).
fof(f254,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|1')).
fof(f147020,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl612),
  inference(superposition,[],[f146952,f228])).
fof(f228,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) <=> s('type.num.num',X8) = s('type.num.num',X9))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|19')).
fof(f146952,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | $spl612),
  inference(resolution,[],[f146881,f262])).
fof(f262,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f157155,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl652),
  inference(cnf_transformation,[],[f157155_D])).
fof(f157155_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl652),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl652])])).
fof(f157157,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl655),
  inference(cnf_transformation,[],[f157157_D])).
fof(f157157_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl655),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl655])])).
fof(f157130,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl11 | $spl606)),
  inference(superposition,[],[f12241,f153392])).
fof(f153392,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.list.list'(sK0),sK1))) | $spl606),
  inference(resolution,[],[f146875,f319])).
fof(f12241,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl11),
  inference(superposition,[],[f9809,f228])).
fof(f9809,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl11),
  inference(superposition,[],[f362,f228])).
fof(f156153,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl651),
  inference(cnf_transformation,[],[f156153_D])).
fof(f156153_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) <=> ~$spl651),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl651])])).
fof(f28021,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68)))))) ) | $spl296),
  inference(cnf_transformation,[],[f28021_D])).
fof(f28021_D,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68)))))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f156151,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) ) | $spl25),
  inference(forward_demodulation,[],[f156150,f255])).
fof(f255,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f62])).
fof(f62,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|13')).
fof(f156150,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl25),
  inference(forward_demodulation,[],[f156104,f248])).
fof(f248,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|14')).
fof(f156104,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl25),
  inference(superposition,[],[f22014,f255])).
fof(f22014,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl25),
  inference(superposition,[],[f16254,f229])).
fof(f229,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f198])).
fof(f16254,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl25),
  inference(superposition,[],[f381,f228])).
fof(f28013,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))) ) | $spl292),
  inference(cnf_transformation,[],[f28013_D])).
fof(f28013_D,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))) ) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f156127,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | $spl649),
  inference(cnf_transformation,[],[f156127_D])).
fof(f156127_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl649),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl649])])).
fof(f156099,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))))) | s('type.num.num',X59) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X58)) ) | $spl25),
  inference(superposition,[],[f22014,f243])).
fof(f243,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X8))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|17')).
fof(f156098,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))))) | s('type.num.num',X57) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | $spl25),
  inference(superposition,[],[f22014,f245])).
fof(f245,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X8))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|18')).
fof(f27993,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl288),
  inference(cnf_transformation,[],[f27993_D])).
fof(f27993_D,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f156080,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | ($spl25 | $spl146)),
  inference(superposition,[],[f22014,f6183])).
fof(f6183,plain,(
  ( ! [X78,X79] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X78),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X78),X79)))))) ) | $spl146),
  inference(forward_demodulation,[],[f6182,f5600])).
fof(f5600,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | $spl146),
  inference(cnf_transformation,[],[f5600_D])).
fof(f5600_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f6182,plain,(
  ( ! [X78,X79] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X78),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))),s('type.list.list'(X78),X79)))))) ) | $spl146),
  inference(subsumption_resolution,[],[f6088,f272])).
fof(f6088,plain,(
  ( ! [X78,X79] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X78),X79)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X78),'const.list.TAKE_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))),s('type.list.list'(X78),X79)))))) ) | $spl146),
  inference(superposition,[],[f318,f5600])).
fof(f154636,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))))) | $spl645),
  inference(cnf_transformation,[],[f154636_D])).
fof(f154636_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))))) <=> ~$spl645),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl645])])).
fof(f154637,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num',X10) != s('type.num.num','const.bool.COND_3'(s(bool,X11),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X11))) ) | $spl646),
  inference(cnf_transformation,[],[f154637_D])).
fof(f154637_D,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num',X10) != s('type.num.num','const.bool.COND_3'(s(bool,X11),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X11))) ) <=> ~$spl646),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl646])])).
fof(f154601,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) | p(s(bool,X13)) | s('type.num.num',X12) != s('type.num.num','const.bool.COND_3'(s(bool,X13),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))))) ) | $spl54),
  inference(superposition,[],[f21532,f242])).
fof(f242,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f200])).
fof(f21532,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | p(s(bool,X4)) | s('type.num.num',X3) != s('type.num.num','const.bool.COND_3'(s(bool,X4),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl54),
  inference(superposition,[],[f966,f228])).
fof(f154600,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | p(s(bool,X11)) | s('type.num.num',X10) != s('type.num.num','const.bool.COND_3'(s(bool,X11),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))))) ) | $spl54),
  inference(superposition,[],[f21532,f244])).
fof(f244,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f201])).
fof(f154611,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl641),
  inference(cnf_transformation,[],[f154611_D])).
fof(f154611_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl641),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl641])])).
fof(f154612,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X17))) ) | $spl642),
  inference(cnf_transformation,[],[f154612_D])).
fof(f154612_D,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X17))) ) <=> ~$spl642),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl642])])).
fof(f154609,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | p(s(bool,X17))) ) | ($spl54 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f154608,f37348])).
fof(f37348,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl378),
  inference(cnf_transformation,[],[f37348_D])).
fof(f37348_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl378),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl378])])).
fof(f154608,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | p(s(bool,X17)) | s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl54 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f154607,f14846])).
fof(f14846,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl208),
  inference(cnf_transformation,[],[f14846_D])).
fof(f14846_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f154607,plain,(
  ( ! [X17] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | p(s(bool,X17)) | s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl54 | $spl378)),
  inference(forward_demodulation,[],[f154556,f248])).
fof(f154556,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | p(s(bool,X17)) | s('type.num.num','const.bool.COND_3'(s(bool,X17),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl54 | $spl378)),
  inference(superposition,[],[f21532,f37348])).
fof(f1528,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl70),
  inference(cnf_transformation,[],[f1528_D])).
fof(f1528_D,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f153314,plain,(
  ( ! [X52] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) | $spl638),
  inference(cnf_transformation,[],[f153314_D])).
fof(f153314_D,plain,(
  ( ! [X52] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) <=> ~$spl638),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl638])])).
fof(f153281,plain,(
  ( ! [X54,X55] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))) ) | $spl11),
  inference(superposition,[],[f12628,f242])).
fof(f12628,plain,(
  ( ! [X35,X36] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl11),
  inference(superposition,[],[f9815,f229])).
fof(f9815,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl11),
  inference(superposition,[],[f362,f228])).
fof(f153280,plain,(
  ( ! [X52,X53] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) | $spl11),
  inference(superposition,[],[f12628,f244])).
fof(f152263,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) ) | $spl634),
  inference(cnf_transformation,[],[f152263_D])).
fof(f152263_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) ) <=> ~$spl634),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl634])])).
fof(f152265,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl637),
  inference(cnf_transformation,[],[f152265_D])).
fof(f152265_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl637),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl637])])).
fof(f152221,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) ) | ($spl11 | $spl602)),
  inference(superposition,[],[f12241,f147837])).
fof(f147837,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.list.list'(sK0),sK1))) | $spl602),
  inference(resolution,[],[f146871,f319])).
fof(f152262,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl632),
  inference(cnf_transformation,[],[f152262_D])).
fof(f152262_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl632),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl632])])).
fof(f144639,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl599),
  inference(cnf_transformation,[],[f144639_D])).
fof(f144639_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl599),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl599])])).
fof(f152220,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl11 | $spl555)),
  inference(superposition,[],[f12241,f143962])).
fof(f143962,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))) | $spl555),
  inference(resolution,[],[f143951,f319])).
fof(f143951,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl555),
  inference(subsumption_resolution,[],[f143893,f320])).
fof(f320,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f293])).
fof(f293,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X14] : (s(X6,X14) = s(X6,X14) <=> p(s(bool,'T_0')))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.REFL_CLAUSE')).
fof(f143893,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl555),
  inference(superposition,[],[f86987,f100491])).
fof(f100491,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl555),
  inference(resolution,[],[f100426,f305])).
fof(f100426,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl555),
  inference(resolution,[],[f100395,f261])).
fof(f151132,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl629),
  inference(cnf_transformation,[],[f151132_D])).
fof(f151132_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl629),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl629])])).
fof(f151133,plain,(
  ( ! [X67] : (s('type.num.num',X67) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))))) ) | $spl630),
  inference(cnf_transformation,[],[f151133_D])).
fof(f151133_D,plain,(
  ( ! [X67] : (s('type.num.num',X67) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))))) ) <=> ~$spl630),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl630])])).
fof(f151130,plain,(
  ( ! [X67] : (s('type.num.num',X67) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67)))))) ) | $spl8),
  inference(forward_demodulation,[],[f151129,f255])).
fof(f151129,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67))))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(forward_demodulation,[],[f151076,f248])).
fof(f151076,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X67))))) | s('type.num.num',X67) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(superposition,[],[f58633,f255])).
fof(f58633,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl8),
  inference(superposition,[],[f53426,f229])).
fof(f53426,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f360,f228])).
fof(f150169,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl624),
  inference(cnf_transformation,[],[f150169_D])).
fof(f150169_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl624),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl624])])).
fof(f150171,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl627),
  inference(cnf_transformation,[],[f150171_D])).
fof(f150171_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl627),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl627])])).
fof(f150168,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl347),
  inference(forward_demodulation,[],[f150066,f257])).
fof(f150066,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl347),
  inference(superposition,[],[f1706,f147683])).
fof(f147683,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl347),
  inference(resolution,[],[f147603,f297])).
fof(f147603,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl347),
  inference(resolution,[],[f146942,f262])).
fof(f146942,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | $spl347),
  inference(subsumption_resolution,[],[f146814,f308])).
fof(f146814,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))) | $spl347),
  inference(superposition,[],[f143836,f80214])).
fof(f80214,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl347),
  inference(resolution,[],[f80191,f297])).
fof(f80191,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl347),
  inference(trivial_inequality_removal,[],[f80185])).
fof(f80185,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl347),
  inference(superposition,[],[f35889,f319])).
fof(f1706,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9))),s('type.num.num',sK2),s('type.num.num',X9))) | s('type.num.num',X8) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) )),
  inference(superposition,[],[f339,f228])).
fof(f339,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0)))) )),
  inference(superposition,[],[f225,f228])).
fof(f148113,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | $spl621),
  inference(cnf_transformation,[],[f148113_D])).
fof(f148113_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) <=> ~$spl621),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl621])])).
fof(f148115,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl623),
  inference(cnf_transformation,[],[f148115_D])).
fof(f148115_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl623),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl623])])).
fof(f148111,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl25 | $spl378)),
  inference(forward_demodulation,[],[f148110,f248])).
fof(f148110,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl25 | $spl378)),
  inference(forward_demodulation,[],[f148109,f236])).
fof(f236,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X8,X9] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f148109,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl25 | $spl378)),
  inference(forward_demodulation,[],[f148108,f37348])).
fof(f148108,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl25 | $spl378)),
  inference(forward_demodulation,[],[f148066,f239])).
fof(f239,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9,X8] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ADD_SYM')).
fof(f148066,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl25 | $spl378)),
  inference(superposition,[],[f22041,f37348])).
fof(f22041,plain,(
  ( ! [X29] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl25),
  inference(forward_demodulation,[],[f22008,f248])).
fof(f22008,plain,(
  ( ! [X29] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl25),
  inference(superposition,[],[f16254,f249])).
fof(f249,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_add|split|7')).
fof(f146886,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl618),
  inference(cnf_transformation,[],[f146886_D])).
fof(f146886_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl618),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl618])])).
fof(f146881,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | $spl612),
  inference(cnf_transformation,[],[f146881_D])).
fof(f146881_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) <=> ~$spl612),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl612])])).
fof(f146761,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(resolution,[],[f143836,f56811])).
fof(f56811,plain,(
  ( ! [X14] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',sK2)))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X14)))) ) | $spl1),
  inference(resolution,[],[f53287,f297])).
fof(f53287,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK2))))) ) | $spl1),
  inference(resolution,[],[f799,f258])).
fof(f146884,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl617),
  inference(cnf_transformation,[],[f146884_D])).
fof(f146884_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl617),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl617])])).
fof(f146760,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(resolution,[],[f143836,f56814])).
fof(f56814,plain,(
  ( ! [X17] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK2)))) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X17)))) ) | $spl1),
  inference(resolution,[],[f53287,f304])).
fof(f304,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f221])).
fof(f146882,plain,(
  ( ! [X41] : (s(bool,X41) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X41))) ) | $spl614),
  inference(cnf_transformation,[],[f146882_D])).
fof(f146882_D,plain,(
  ( ! [X41] : (s(bool,X41) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X41))) ) <=> ~$spl614),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl614])])).
fof(f146759,plain,(
  ( ! [X41] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | s(bool,X41) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X41))) ) | $spl1),
  inference(resolution,[],[f143836,f56809])).
fof(f56809,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK2)))) | s(bool,X11) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X10))) | p(s(bool,X11))) ) | $spl1),
  inference(resolution,[],[f53287,f230])).
fof(f230,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f184])).
fof(f184,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X11,X12] : ((p(s(bool,X11)) => p(s(bool,X12))) => ((p(s(bool,X12)) => p(s(bool,X11))) => s(bool,X11) = s(bool,X12)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.IMP_ANTISYM_AX')).
fof(f146879,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl610),
  inference(cnf_transformation,[],[f146879_D])).
fof(f146879_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl610),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl610])])).
fof(f146758,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl1),
  inference(resolution,[],[f143836,f91159])).
fof(f91159,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl1),
  inference(forward_demodulation,[],[f91086,f237])).
fof(f237,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X8,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|3')).
fof(f91086,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))))) ) | $spl1),
  inference(superposition,[],[f55395,f265])).
fof(f55395,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))))) ) | $spl1),
  inference(resolution,[],[f53290,f258])).
fof(f53290,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | $spl1),
  inference(resolution,[],[f799,f264])).
fof(f146875,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | $spl606),
  inference(cnf_transformation,[],[f146875_D])).
fof(f146875_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) <=> ~$spl606),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl606])])).
fof(f146877,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK2)))) | $spl608),
  inference(cnf_transformation,[],[f146877_D])).
fof(f146877_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK2)))) <=> ~$spl608),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl608])])).
fof(f146757,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | $spl1),
  inference(resolution,[],[f143836,f55395])).
fof(f146871,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) | $spl602),
  inference(cnf_transformation,[],[f146871_D])).
fof(f146871_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) <=> ~$spl602),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl602])])).
fof(f146873,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | $spl604),
  inference(cnf_transformation,[],[f146873_D])).
fof(f146873_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) <=> ~$spl604),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl604])])).
fof(f146756,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))),
  inference(resolution,[],[f143836,f18048])).
fof(f18048,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))) )),
  inference(resolution,[],[f15301,f258])).
fof(f2644,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl126),
  inference(cnf_transformation,[],[f2644_D])).
fof(f2644_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f144859,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75)))))))) ) | $spl600),
  inference(cnf_transformation,[],[f144859_D])).
fof(f144859_D,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75)))))))) ) <=> ~$spl600),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl600])])).
fof(f144847,plain,(
  ( ! [X78,X76,X77] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X77),X78))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76)))) ) | ($spl25 | $spl146)),
  inference(trivial_inequality_removal,[],[f144836])).
fof(f144836,plain,(
  ( ! [X78,X76,X77] : (s('type.num.num',X76) != s('type.num.num',X76) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X77),X78))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76)))) ) | ($spl25 | $spl146)),
  inference(superposition,[],[f22200,f242])).
fof(f22200,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))))) ) | ($spl25 | $spl146)),
  inference(subsumption_resolution,[],[f22166,f13388])).
fof(f13388,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))))) ) | $spl146),
  inference(trivial_inequality_removal,[],[f13379])).
fof(f13379,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2)) ) | $spl146),
  inference(superposition,[],[f9430,f243])).
fof(f9430,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | $spl146),
  inference(subsumption_resolution,[],[f9429,f320])).
fof(f9429,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl146),
  inference(forward_demodulation,[],[f9374,f270])).
fof(f270,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X8] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|0')).
fof(f9374,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl146),
  inference(superposition,[],[f6149,f244])).
fof(f6149,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X44))))) ) | $spl146),
  inference(forward_demodulation,[],[f6148,f5600])).
fof(f6148,plain,(
  ( ! [X45,X44] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X44)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f6051,f272])).
fof(f6051,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X44)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))) ) | $spl146),
  inference(superposition,[],[f258,f5600])).
fof(f22166,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))))))) ) | $spl25),
  inference(superposition,[],[f16260,f318])).
fof(f16260,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl25),
  inference(superposition,[],[f381,f228])).
fof(f144848,plain,(
  ( ! [X74,X75,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))) ) | ($spl25 | $spl146)),
  inference(trivial_inequality_removal,[],[f144835])).
fof(f144835,plain,(
  ( ! [X74,X75,X73] : (s('type.num.num',X73) != s('type.num.num',X73) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))) ) | ($spl25 | $spl146)),
  inference(superposition,[],[f22200,f244])).
fof(f144637,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl597),
  inference(cnf_transformation,[],[f144637_D])).
fof(f144637_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl597),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl597])])).
fof(f144609,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl11 | $spl555)),
  inference(superposition,[],[f9809,f143962])).
fof(f37418,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl386),
  inference(cnf_transformation,[],[f37418_D])).
fof(f37418_D,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl386),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl386])])).
fof(f136361,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl595),
  inference(cnf_transformation,[],[f136361_D])).
fof(f136361_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl595),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl595])])).
fof(f136345,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136208,f242])).
fof(f136208,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136139,f248])).
fof(f136139,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136092,f248])).
fof(f136092,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136036,f248])).
fof(f136036,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(equality_resolution,[],[f127598])).
fof(f127598,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f127552,f228])).
fof(f127552,plain,(
  ( ! [X29] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))) ) | ($spl146 | $spl378 | $spl558)),
  inference(subsumption_resolution,[],[f127551,f311])).
fof(f311,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.list.LENGTH_TAKE_EQ',aHL_FALSITY)).
fof(f127551,plain,(
  ( ! [X29] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))) ) | ($spl146 | $spl378 | $spl558)),
  inference(forward_demodulation,[],[f127550,f72208])).
fof(f72208,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl146 | $spl378)),
  inference(resolution,[],[f72134,f297])).
fof(f72134,plain,(
  ( ! [X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl146 | $spl378)),
  inference(subsumption_resolution,[],[f72133,f320])).
fof(f72133,plain,(
  ( ! [X29] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl146 | $spl378)),
  inference(forward_demodulation,[],[f72066,f41525])).
fof(f41525,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) ) | $spl146),
  inference(resolution,[],[f41483,f305])).
fof(f41483,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f41392,f320])).
fof(f41392,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) ) | $spl146),
  inference(superposition,[],[f40189,f36762])).
fof(f36762,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | $spl146),
  inference(resolution,[],[f36502,f305])).
fof(f36502,plain,(
  ( ! [X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))))))) ) | $spl146),
  inference(resolution,[],[f10768,f272])).
fof(f10768,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X15)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))) ) | $spl146),
  inference(resolution,[],[f9361,f260])).
fof(f260,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X9,X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.NOT_LEQ')).
fof(f9361,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) ) | $spl146),
  inference(resolution,[],[f6149,f261])).
fof(f40189,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7))))) ) | $spl146),
  inference(resolution,[],[f39755,f262])).
fof(f39755,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X5))))) ) | $spl146),
  inference(resolution,[],[f38633,f261])).
fof(f38633,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) ) | $spl146),
  inference(forward_demodulation,[],[f38442,f246])).
fof(f246,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X8] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0')))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|27')).
fof(f38442,plain,(
  ( ! [X4,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.|48|_0'))))) ) | $spl146),
  inference(resolution,[],[f10858,f262])).
fof(f10858,plain,(
  ( ! [X12,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X13)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))))) ) | $spl146),
  inference(superposition,[],[f9361,f235])).
fof(f235,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f77])).
fof(f77,axiom,(
  ! [X8,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|28')).
fof(f72066,plain,(
  ( ! [X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl378),
  inference(superposition,[],[f67464,f249])).
fof(f67464,plain,(
  ( ! [X56] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X56))))) ) | $spl378),
  inference(forward_demodulation,[],[f67463,f37348])).
fof(f67463,plain,(
  ( ! [X56] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X56),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X56))))) ) | $spl378),
  inference(forward_demodulation,[],[f67462,f267])).
fof(f267,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9,X8] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X8))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.LESS_EQ')).
fof(f67462,plain,(
  ( ! [X56] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X56)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))))) ) | $spl378),
  inference(forward_demodulation,[],[f67029,f267])).
fof(f67029,plain,(
  ( ! [X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X56)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))))) ) | $spl378),
  inference(superposition,[],[f260,f37348])).
fof(f127550,plain,(
  ( ! [X29] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))) ) | $spl558),
  inference(forward_demodulation,[],[f127519,f248])).
fof(f127519,plain,(
  ( ! [X29] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl558),
  inference(superposition,[],[f110068,f249])).
fof(f110068,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl558),
  inference(superposition,[],[f109876,f229])).
fof(f136344,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136208,f244])).
fof(f136224,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl593),
  inference(cnf_transformation,[],[f136224_D])).
fof(f136224_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl593),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl593])])).
fof(f136212,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136139,f242])).
fof(f136211,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136139,f244])).
fof(f136151,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl591),
  inference(cnf_transformation,[],[f136151_D])).
fof(f136151_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl591),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl591])])).
fof(f136143,plain,(
  ( ! [X8] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136092,f242])).
fof(f136142,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl378 | $spl558)),
  inference(superposition,[],[f136092,f244])).
fof(f135282,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl587),
  inference(cnf_transformation,[],[f135282_D])).
fof(f135282_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) <=> ~$spl587),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl587])])).
fof(f135283,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18))))) ) | $spl588),
  inference(cnf_transformation,[],[f135283_D])).
fof(f135283_D,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18))))) ) <=> ~$spl588),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl588])])).
fof(f135280,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18))))) ) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f135279,f37348])).
fof(f135279,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f135278,f14846])).
fof(f135278,plain,(
  ( ! [X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | $spl378),
  inference(forward_demodulation,[],[f135225,f248])).
fof(f135225,plain,(
  ( ! [X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | $spl378),
  inference(superposition,[],[f20237,f37348])).
fof(f20237,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num',X8) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))) )),
  inference(superposition,[],[f15319,f228])).
fof(f15319,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))))) )),
  inference(superposition,[],[f355,f228])).
fof(f131055,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl582),
  inference(cnf_transformation,[],[f131055_D])).
fof(f131055_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl582),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl582])])).
fof(f131057,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl585),
  inference(cnf_transformation,[],[f131057_D])).
fof(f131057_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl585),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl585])])).
fof(f131054,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl580),
  inference(forward_demodulation,[],[f130964,f257])).
fof(f130964,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl580),
  inference(superposition,[],[f1706,f130689])).
fof(f130689,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl580),
  inference(resolution,[],[f130623,f297])).
fof(f130623,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) | $spl580),
  inference(resolution,[],[f130612,f262])).
fof(f908,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl42),
  inference(cnf_transformation,[],[f908_D])).
fof(f908_D,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f130612,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | $spl580),
  inference(cnf_transformation,[],[f130612_D])).
fof(f130612_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) <=> ~$spl580),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl580])])).
fof(f130613,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl61 | $spl146 | $spl208 | $spl378)),
  inference(subsumption_resolution,[],[f130552,f9457])).
fof(f9457,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num',X57))))) ) | $spl146),
  inference(subsumption_resolution,[],[f9397,f272])).
fof(f9397,plain,(
  ( ! [X57,X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num',X57)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | $spl146),
  inference(superposition,[],[f6149,f245])).
fof(f130552,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl61 | $spl208 | $spl378)),
  inference(superposition,[],[f122196,f243])).
fof(f122196,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(superposition,[],[f107662,f237])).
fof(f107662,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',sK2))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(resolution,[],[f73383,f261])).
fof(f73383,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(resolution,[],[f73336,f258])).
fof(f73336,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl61 | $spl208 | $spl378)),
  inference(resolution,[],[f73307,f262])).
fof(f73307,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | ($spl61 | $spl208 | $spl378)),
  inference(trivial_inequality_removal,[],[f73302])).
fof(f73302,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | ($spl61 | $spl208 | $spl378)),
  inference(superposition,[],[f67770,f255])).
fof(f67770,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK2))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67769,f14846])).
fof(f67769,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK2))))) ) | ($spl61 | $spl378)),
  inference(forward_demodulation,[],[f67744,f248])).
fof(f67744,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl61 | $spl378)),
  inference(superposition,[],[f67623,f228])).
fof(f67623,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | ($spl61 | $spl378)),
  inference(forward_demodulation,[],[f67622,f37348])).
fof(f67622,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | ($spl61 | $spl378)),
  inference(subsumption_resolution,[],[f67621,f320])).
fof(f67621,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | ($spl61 | $spl378)),
  inference(forward_demodulation,[],[f67620,f3337])).
fof(f3337,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl61),
  inference(resolution,[],[f3293,f305])).
fof(f3293,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl61),
  inference(resolution,[],[f3291,f261])).
fof(f3291,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl61),
  inference(trivial_inequality_removal,[],[f3285])).
fof(f3285,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl61),
  inference(superposition,[],[f1313,f319])).
fof(f67620,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | $spl378),
  inference(forward_demodulation,[],[f67229,f267])).
fof(f67229,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2)))) | $spl378),
  inference(superposition,[],[f19395,f37348])).
fof(f19395,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',sK2))))) )),
  inference(resolution,[],[f15304,f261])).
fof(f15304,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(resolution,[],[f355,f258])).
fof(f130610,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl61 | $spl146 | $spl208 | $spl378)),
  inference(subsumption_resolution,[],[f130551,f9457])).
fof(f130551,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl61 | $spl208 | $spl378)),
  inference(superposition,[],[f122196,f245])).
fof(f126640,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75)))))) ) | $spl578),
  inference(cnf_transformation,[],[f126640_D])).
fof(f126640_D,plain,(
  ( ! [X74,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75)))))) ) <=> ~$spl578),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl578])])).
fof(f126632,plain,(
  ( ! [X78,X76,X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X77),X78)))))) ) | ($spl21 | $spl146 | $spl208 | $spl224)),
  inference(duplicate_literal_removal,[],[f126608])).
fof(f126608,plain,(
  ( ! [X78,X76,X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X77),X78))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76)))) ) | ($spl21 | $spl146 | $spl208 | $spl224)),
  inference(superposition,[],[f24505,f242])).
fof(f24505,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) ) | ($spl21 | $spl146 | $spl208 | $spl224)),
  inference(subsumption_resolution,[],[f24462,f9430])).
fof(f24462,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))))))) ) | ($spl21 | $spl208 | $spl224)),
  inference(superposition,[],[f24303,f318])).
fof(f24303,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))) ) | ($spl21 | $spl208 | $spl224)),
  inference(forward_demodulation,[],[f24302,f14846])).
fof(f24302,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))) ) | ($spl21 | $spl224)),
  inference(forward_demodulation,[],[f24301,f257])).
fof(f24301,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))) ) | ($spl21 | $spl224)),
  inference(forward_demodulation,[],[f16964,f16696])).
fof(f16696,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl224),
  inference(resolution,[],[f16614,f297])).
fof(f16614,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl224),
  inference(resolution,[],[f14926,f262])).
fof(f16964,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl21),
  inference(superposition,[],[f377,f228])).
fof(f126633,plain,(
  ( ! [X74,X75,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75)))))) ) | ($spl21 | $spl146 | $spl208 | $spl224)),
  inference(duplicate_literal_removal,[],[f126607])).
fof(f126607,plain,(
  ( ! [X74,X75,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X74),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X74),X75))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X73)))) ) | ($spl21 | $spl146 | $spl208 | $spl224)),
  inference(superposition,[],[f24505,f244])).
fof(f124804,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))))) ) | $spl576),
  inference(cnf_transformation,[],[f124804_D])).
fof(f124804_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))))) ) <=> ~$spl576),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl576])])).
fof(f13761,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl197),
  inference(cnf_transformation,[],[f13761_D])).
fof(f13761_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl197),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl197])])).
fof(f124799,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X7),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f59691,f242])).
fof(f59691,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl2 | $spl4)),
  inference(equality_resolution,[],[f53669])).
fof(f53669,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f15191,f228])).
fof(f15191,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | ($spl2 | $spl4)),
  inference(subsumption_resolution,[],[f348,f347])).
fof(f124798,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X6),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f59691,f244])).
fof(f122525,plain,(
  ( ! [X52] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) | $spl574),
  inference(cnf_transformation,[],[f122525_D])).
fof(f122525_D,plain,(
  ( ! [X52] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) <=> ~$spl574),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl574])])).
fof(f122526,plain,(
  ( ! [X54,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))) ) | ($spl1 | $spl146)),
  inference(subsumption_resolution,[],[f122455,f9457])).
fof(f122455,plain,(
  ( ! [X54,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54)))) ) | $spl1),
  inference(superposition,[],[f56845,f242])).
fof(f56845,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num',sK2)))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl1),
  inference(superposition,[],[f53287,f229])).
fof(f122524,plain,(
  ( ! [X52,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) | ($spl1 | $spl146)),
  inference(subsumption_resolution,[],[f122454,f9457])).
fof(f122454,plain,(
  ( ! [X52,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52)))) ) | $spl1),
  inference(superposition,[],[f56845,f244])).
fof(f121805,plain,(
  $false | ($spl146 | $spl518)),
  inference(equality_resolution,[],[f121766])).
fof(f121766,plain,(
  ( ! [X56] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | ($spl146 | $spl518)),
  inference(subsumption_resolution,[],[f97603,f30587])).
fof(f30587,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))))))))) ) | $spl146),
  inference(trivial_inequality_removal,[],[f30577])).
fof(f30577,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) ) | $spl146),
  inference(superposition,[],[f28773,f243])).
fof(f28773,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))))))) ) | $spl146),
  inference(superposition,[],[f28603,f229])).
fof(f28603,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl146),
  inference(resolution,[],[f28485,f262])).
fof(f28485,plain,(
  ( ! [X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X15))))) ) | $spl146),
  inference(resolution,[],[f9411,f272])).
fof(f9411,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num',X6))))) ) | $spl146),
  inference(superposition,[],[f6149,f246])).
fof(f119959,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl570),
  inference(cnf_transformation,[],[f119959_D])).
fof(f119959_D,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) <=> ~$spl570),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl570])])).
fof(f119961,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | $spl573),
  inference(cnf_transformation,[],[f119961_D])).
fof(f119961_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl573),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl573])])).
fof(f119919,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl21 | $spl254)),
  inference(superposition,[],[f24067,f243])).
fof(f24067,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))) ) | ($spl21 | $spl254)),
  inference(forward_demodulation,[],[f24066,f257])).
fof(f24066,plain,(
  ( ! [X26] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))) ) | ($spl21 | $spl254)),
  inference(forward_demodulation,[],[f24065,f20528])).
fof(f20528,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl254),
  inference(resolution,[],[f19345,f297])).
fof(f24065,plain,(
  ( ! [X26] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))) ) | $spl21),
  inference(forward_demodulation,[],[f24064,f267])).
fof(f24064,plain,(
  ( ! [X26] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))) ) | $spl21),
  inference(forward_demodulation,[],[f24063,f247])).
fof(f247,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.SUC_ONE_ADD')).
fof(f24063,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(forward_demodulation,[],[f24022,f248])).
fof(f24022,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(superposition,[],[f16954,f247])).
fof(f16954,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(superposition,[],[f377,f228])).
fof(f119918,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl21 | $spl254)),
  inference(superposition,[],[f24067,f245])).
fof(f119778,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl567),
  inference(cnf_transformation,[],[f119778_D])).
fof(f119778_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl567),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl567])])).
fof(f119779,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl568),
  inference(cnf_transformation,[],[f119779_D])).
fof(f119779_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl568),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl568])])).
fof(f119776,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl563),
  inference(forward_demodulation,[],[f119775,f248])).
fof(f119775,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl563),
  inference(forward_demodulation,[],[f119687,f257])).
fof(f119687,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl563),
  inference(superposition,[],[f1706,f119556])).
fof(f119556,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl563),
  inference(resolution,[],[f119529,f297])).
fof(f119529,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl563),
  inference(cnf_transformation,[],[f119529_D])).
fof(f119529_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) <=> ~$spl563),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl563])])).
fof(f119530,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl564),
  inference(cnf_transformation,[],[f119530_D])).
fof(f119530_D,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) <=> ~$spl564),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl564])])).
fof(f119527,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f119526,f255])).
fof(f119526,plain,(
  ( ! [X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f119458,f248])).
fof(f119458,plain,(
  ( ! [X69] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f19434,f255])).
fof(f19434,plain,(
  ( ! [X35,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num',X35) != s('type.num.num',X36)) )),
  inference(superposition,[],[f15304,f229])).
fof(f10962,plain,(
  ( ! [X67] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67))))) ) | $spl174),
  inference(cnf_transformation,[],[f10962_D])).
fof(f10962_D,plain,(
  ( ! [X67] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f109898,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl560),
  inference(cnf_transformation,[],[f109898_D])).
fof(f109898_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl560),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl560])])).
fof(f109896,plain,(
  ( ! [X69] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))))) ) | $spl146),
  inference(forward_demodulation,[],[f109895,f255])).
fof(f109895,plain,(
  ( ! [X69] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(forward_demodulation,[],[f109628,f267])).
fof(f109628,plain,(
  ( ! [X69] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X69)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(superposition,[],[f85915,f255])).
fof(f85915,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5))))) ) | $spl146),
  inference(resolution,[],[f28606,f261])).
fof(f28606,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))))) ) | $spl146),
  inference(resolution,[],[f28485,f258])).
fof(f52648,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8))))) ) | $spl452),
  inference(cnf_transformation,[],[f52648_D])).
fof(f52648_D,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8))))) ) <=> ~$spl452),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl452])])).
fof(f109876,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl558),
  inference(cnf_transformation,[],[f109876_D])).
fof(f109876_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl558),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl558])])).
fof(f109874,plain,(
  ( ! [X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18))))) ) | ($spl146 | $spl378)),
  inference(forward_demodulation,[],[f109873,f37348])).
fof(f109873,plain,(
  ( ! [X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))))) ) | ($spl146 | $spl378)),
  inference(forward_demodulation,[],[f109606,f267])).
fof(f109606,plain,(
  ( ! [X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X18)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))))) ) | ($spl146 | $spl378)),
  inference(superposition,[],[f85915,f37348])).
fof(f100395,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | $spl555),
  inference(cnf_transformation,[],[f100395_D])).
fof(f100395_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) <=> ~$spl555),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl555])])).
fof(f100396,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl556),
  inference(cnf_transformation,[],[f100396_D])).
fof(f100396_D,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) <=> ~$spl556),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl556])])).
fof(f100310,plain,(
  ( ! [X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X32)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl1),
  inference(superposition,[],[f56888,f242])).
fof(f56888,plain,(
  ( ! [X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2))))) ) | $spl1),
  inference(forward_demodulation,[],[f56839,f267])).
fof(f56839,plain,(
  ( ! [X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))) ) | $spl1),
  inference(superposition,[],[f53287,f249])).
fof(f100309,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl1),
  inference(superposition,[],[f56888,f244])).
fof(f100120,plain,(
  ( ! [X33] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl550),
  inference(cnf_transformation,[],[f100120_D])).
fof(f100120_D,plain,(
  ( ! [X33] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) <=> ~$spl550),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl550])])).
fof(f100122,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl553),
  inference(cnf_transformation,[],[f100122_D])).
fof(f100122_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) <=> ~$spl553),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl553])])).
fof(f100061,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl1),
  inference(superposition,[],[f55417,f243])).
fof(f55417,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0))))) ) | $spl1),
  inference(superposition,[],[f53290,f228])).
fof(f100060,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl1),
  inference(superposition,[],[f55417,f245])).
fof(f100101,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl547),
  inference(cnf_transformation,[],[f100101_D])).
fof(f100101_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) <=> ~$spl547),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl547])])).
fof(f100103,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl548),
  inference(cnf_transformation,[],[f100103_D])).
fof(f100103_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl548),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl548])])).
fof(f100099,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ($spl1 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f100098,f37348])).
fof(f100098,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | ($spl1 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f100097,f14846])).
fof(f100097,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | ($spl1 | $spl378)),
  inference(forward_demodulation,[],[f100046,f248])).
fof(f100046,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | ($spl1 | $spl378)),
  inference(superposition,[],[f55417,f37348])).
fof(f97603,plain,(
  ( ! [X56] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | $spl518),
  inference(cnf_transformation,[],[f97603_D])).
fof(f97603_D,plain,(
  ( ! [X56] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) <=> ~$spl518),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl518])])).
fof(f100031,plain,(
  ( ! [X57] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))) ) | $spl544),
  inference(cnf_transformation,[],[f100031_D])).
fof(f100031_D,plain,(
  ( ! [X57] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))) ) <=> ~$spl544),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl544])])).
fof(f99970,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X59))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X58)) ) | $spl146),
  inference(superposition,[],[f38919,f243])).
fof(f38919,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))))) ) | $spl146),
  inference(superposition,[],[f38680,f229])).
fof(f38680,plain,(
  ( ! [X20] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X20))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f38529,f308])).
fof(f38529,plain,(
  ( ! [X20] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X20))))))))) ) | $spl146),
  inference(superposition,[],[f10858,f269])).
fof(f269,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f105])).
fof(f105,axiom,(
  ! [X8] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|2')).
fof(f99969,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | $spl146),
  inference(superposition,[],[f38919,f245])).
fof(f98844,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl541),
  inference(cnf_transformation,[],[f98844_D])).
fof(f98844_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl541),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl541])])).
fof(f98845,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl542),
  inference(cnf_transformation,[],[f98845_D])).
fof(f98845_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl542),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl542])])).
fof(f98842,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl269),
  inference(forward_demodulation,[],[f98841,f248])).
fof(f98841,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl269),
  inference(forward_demodulation,[],[f98840,f248])).
fof(f98840,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl269),
  inference(forward_demodulation,[],[f98762,f257])).
fof(f98762,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl269),
  inference(superposition,[],[f1706,f98139])).
fof(f98139,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl269),
  inference(resolution,[],[f98039,f297])).
fof(f98039,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl269),
  inference(forward_demodulation,[],[f98038,f255])).
fof(f98038,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl269),
  inference(subsumption_resolution,[],[f98037,f320])).
fof(f98037,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl269),
  inference(forward_demodulation,[],[f98036,f69392])).
fof(f69392,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl269),
  inference(resolution,[],[f69337,f305])).
fof(f69337,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl269),
  inference(resolution,[],[f69332,f261])).
fof(f69332,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl269),
  inference(trivial_inequality_removal,[],[f69326])).
fof(f69326,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl269),
  inference(superposition,[],[f25144,f319])).
fof(f98036,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(forward_demodulation,[],[f98035,f250])).
fof(f250,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8)))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_add|split|6')).
fof(f98035,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(forward_demodulation,[],[f98034,f236])).
fof(f98034,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(forward_demodulation,[],[f97929,f239])).
fof(f97929,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(superposition,[],[f19477,f255])).
fof(f19477,plain,(
  ( ! [X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))))))) )),
  inference(forward_demodulation,[],[f19428,f267])).
fof(f19428,plain,(
  ( ! [X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(superposition,[],[f15304,f249])).
fof(f98575,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl537),
  inference(cnf_transformation,[],[f98575_D])).
fof(f98575_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl537),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl537])])).
fof(f98576,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl538),
  inference(cnf_transformation,[],[f98576_D])).
fof(f98576_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl538),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl538])])).
fof(f98573,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl208 | $spl378 | $spl433)),
  inference(forward_demodulation,[],[f98572,f14846])).
fof(f98572,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl378 | $spl433)),
  inference(forward_demodulation,[],[f98571,f248])).
fof(f98571,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl378 | $spl433)),
  inference(forward_demodulation,[],[f98570,f248])).
fof(f98570,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl378 | $spl433)),
  inference(forward_demodulation,[],[f98488,f257])).
fof(f98488,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl378 | $spl433)),
  inference(superposition,[],[f1706,f98071])).
fof(f98071,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl378 | $spl433)),
  inference(resolution,[],[f97983,f297])).
fof(f97983,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ($spl378 | $spl433)),
  inference(forward_demodulation,[],[f97982,f37348])).
fof(f97982,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | ($spl378 | $spl433)),
  inference(subsumption_resolution,[],[f97981,f320])).
fof(f97981,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | ($spl378 | $spl433)),
  inference(forward_demodulation,[],[f97980,f68678])).
fof(f68678,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ($spl378 | $spl433)),
  inference(resolution,[],[f68615,f305])).
fof(f68615,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl378 | $spl433)),
  inference(resolution,[],[f67410,f261])).
fof(f67410,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl378 | $spl433)),
  inference(subsumption_resolution,[],[f66959,f52630])).
fof(f66959,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl378),
  inference(superposition,[],[f37348,f319])).
fof(f97980,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | $spl378),
  inference(forward_demodulation,[],[f97979,f249])).
fof(f97979,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | $spl378),
  inference(forward_demodulation,[],[f97978,f236])).
fof(f97978,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | $spl378),
  inference(forward_demodulation,[],[f97907,f239])).
fof(f97907,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))))) | $spl378),
  inference(superposition,[],[f19477,f37348])).
fof(f97874,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | $spl535),
  inference(cnf_transformation,[],[f97874_D])).
fof(f97874_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) <=> ~$spl535),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl535])])).
fof(f97875,plain,(
  ( ! [X34] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl208 | $spl529)),
  inference(subsumption_resolution,[],[f97839,f26277])).
fof(f26277,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) ) | $spl208),
  inference(subsumption_resolution,[],[f26220,f14846])).
fof(f26220,plain,(
  ( ! [X33] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl208),
  inference(superposition,[],[f16318,f245])).
fof(f16318,plain,(
  ( ! [X23] : (s('type.num.num',X23) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))) ) | $spl208),
  inference(superposition,[],[f229,f14846])).
fof(f97839,plain,(
  ( ! [X34] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl529),
  inference(superposition,[],[f97737,f243])).
fof(f97737,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl529),
  inference(superposition,[],[f97698,f229])).
fof(f97872,plain,(
  ( ! [X33] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl208 | $spl529)),
  inference(subsumption_resolution,[],[f97838,f26277])).
fof(f97838,plain,(
  ( ! [X33] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl529),
  inference(superposition,[],[f97737,f245])).
fof(f97705,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | $spl531),
  inference(cnf_transformation,[],[f97705_D])).
fof(f97705_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) <=> ~$spl531),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl531])])).
fof(f97707,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl532),
  inference(cnf_transformation,[],[f97707_D])).
fof(f97707_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl532),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl532])])).
fof(f97703,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))),
  inference(forward_demodulation,[],[f97702,f255])).
fof(f97702,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(forward_demodulation,[],[f97640,f248])).
fof(f97640,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(superposition,[],[f18070,f255])).
fof(f18070,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f15301,f228])).
fof(f97696,plain,(
  ( ! [X33] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl526),
  inference(cnf_transformation,[],[f97696_D])).
fof(f97696_D,plain,(
  ( ! [X33] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) <=> ~$spl526),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl526])])).
fof(f97698,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | $spl529),
  inference(cnf_transformation,[],[f97698_D])).
fof(f97698_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) <=> ~$spl529),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl529])])).
fof(f97635,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) )),
  inference(superposition,[],[f18070,f243])).
fof(f97634,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) )),
  inference(superposition,[],[f18070,f245])).
fof(f97677,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | $spl523),
  inference(cnf_transformation,[],[f97677_D])).
fof(f97677_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) <=> ~$spl523),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl523])])).
fof(f97679,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl524),
  inference(cnf_transformation,[],[f97679_D])).
fof(f97679_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl524),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl524])])).
fof(f97675,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f97674,f37348])).
fof(f97674,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f97673,f14846])).
fof(f97673,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | $spl378),
  inference(forward_demodulation,[],[f97620,f248])).
fof(f97620,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))))) | $spl378),
  inference(superposition,[],[f18070,f37348])).
fof(f97604,plain,(
  ( ! [X57] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))) ) | $spl520),
  inference(cnf_transformation,[],[f97604_D])).
fof(f97604_D,plain,(
  ( ! [X57] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))) ) <=> ~$spl520),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl520])])).
fof(f97541,plain,(
  ( ! [X59,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X59))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X58)) ) | $spl146),
  inference(superposition,[],[f38839,f243])).
fof(f38839,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))))) ) | $spl146),
  inference(superposition,[],[f38678,f229])).
fof(f38678,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f38520,f308])).
fof(f38520,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))))) ) | $spl146),
  inference(superposition,[],[f10858,f268])).
fof(f268,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X8] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_lte|split|1')).
fof(f97540,plain,(
  ( ! [X57,X56] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X56)) ) | $spl146),
  inference(superposition,[],[f38839,f245])).
fof(f83183,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl515),
  inference(cnf_transformation,[],[f83183_D])).
fof(f83183_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl515),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl515])])).
fof(f83184,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) ) | $spl516),
  inference(cnf_transformation,[],[f83184_D])).
fof(f83184_D,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) ) <=> ~$spl516),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl516])])).
fof(f83181,plain,(
  ( ! [X69] : (s('type.num.num',X69) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) ) | $spl15),
  inference(forward_demodulation,[],[f83180,f255])).
fof(f83180,plain,(
  ( ! [X69] : (s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl15),
  inference(forward_demodulation,[],[f83153,f248])).
fof(f83153,plain,(
  ( ! [X69] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69))))) | s('type.num.num',X69) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl15),
  inference(superposition,[],[f667,f255])).
fof(f667,plain,(
  ( ! [X33,X34] : (s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))) | s('type.num.num',X33) != s('type.num.num',X34)) ) | $spl15),
  inference(superposition,[],[f388,f229])).
fof(f388,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl15),
  inference(superposition,[],[f369,f229])).
fof(f80199,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl511),
  inference(cnf_transformation,[],[f80199_D])).
fof(f80199_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl511),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl511])])).
fof(f80201,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl513),
  inference(cnf_transformation,[],[f80201_D])).
fof(f80201_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl513),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl513])])).
fof(f80186,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl347),
  inference(superposition,[],[f35889,f318])).
fof(f75893,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl507),
  inference(cnf_transformation,[],[f75893_D])).
fof(f75893_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl507),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl507])])).
fof(f75895,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl509),
  inference(cnf_transformation,[],[f75895_D])).
fof(f75895_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl509),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl509])])).
fof(f75891,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl53 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f75890,f14846])).
fof(f75890,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl53 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f75850,f248])).
fof(f75850,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl53 | $spl208 | $spl378)),
  inference(superposition,[],[f26188,f37348])).
fof(f26188,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | ($spl53 | $spl208)),
  inference(superposition,[],[f26178,f229])).
fof(f26178,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl53 | $spl208)),
  inference(subsumption_resolution,[],[f26177,f921])).
fof(f26177,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl208),
  inference(forward_demodulation,[],[f26176,f14846])).
fof(f26176,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl208),
  inference(forward_demodulation,[],[f26175,f255])).
fof(f26175,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl208),
  inference(forward_demodulation,[],[f26123,f248])).
fof(f26123,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl208),
  inference(superposition,[],[f16314,f255])).
fof(f16314,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl208),
  inference(superposition,[],[f228,f14846])).
fof(f73751,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl505),
  inference(cnf_transformation,[],[f73751_D])).
fof(f73751_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl505),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl505])])).
fof(f68437,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl498),
  inference(cnf_transformation,[],[f68437_D])).
fof(f68437_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl498),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl498])])).
fof(f73749,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f73748,f255])).
fof(f73748,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f73674,f257])).
fof(f73674,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(superposition,[],[f1706,f73394])).
fof(f73394,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl61 | $spl208 | $spl378)),
  inference(resolution,[],[f73336,f297])).
fof(f69568,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl501),
  inference(cnf_transformation,[],[f69568_D])).
fof(f69568_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl501),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl501])])).
fof(f69570,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl503),
  inference(cnf_transformation,[],[f69570_D])).
fof(f69570_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl503),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl503])])).
fof(f69557,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl349),
  inference(superposition,[],[f35892,f318])).
fof(f68436,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl497),
  inference(cnf_transformation,[],[f68436_D])).
fof(f68436_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl497),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl497])])).
fof(f68434,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f68433,f14846])).
fof(f68433,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl378)),
  inference(forward_demodulation,[],[f68432,f248])).
fof(f68432,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl378)),
  inference(forward_demodulation,[],[f68361,f257])).
fof(f68361,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl61 | $spl378)),
  inference(superposition,[],[f1706,f67788])).
fof(f67788,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl61 | $spl378)),
  inference(resolution,[],[f67728,f297])).
fof(f67728,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl61 | $spl378)),
  inference(resolution,[],[f67623,f262])).
fof(f67684,plain,(
  ( ! [X158] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X158))))) | s('type.num.num',X158) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | $spl494),
  inference(cnf_transformation,[],[f67684_D])).
fof(f67684_D,plain,(
  ( ! [X158] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X158))))) | s('type.num.num',X158) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl494),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl494])])).
fof(f25144,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | $spl269),
  inference(cnf_transformation,[],[f25144_D])).
fof(f25144_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl269),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl269])])).
fof(f67683,plain,(
  ( ! [X158] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X158))))) | s('type.num.num',X158) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl8 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67682,f14846])).
fof(f67682,plain,(
  ( ! [X158] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X158))))) | s('type.num.num',X158) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl8 | $spl378)),
  inference(forward_demodulation,[],[f67370,f248])).
fof(f67370,plain,(
  ( ! [X158] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X158))))) | s('type.num.num',X158) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl8 | $spl378)),
  inference(superposition,[],[f53975,f37348])).
fof(f53975,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl8),
  inference(superposition,[],[f53551,f229])).
fof(f53551,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f53495,f228])).
fof(f53495,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f53418,f257])).
fof(f53418,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(backward_demodulation,[],[f360,f225])).
fof(f67498,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl479),
  inference(cnf_transformation,[],[f67498_D])).
fof(f67498_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl479),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl479])])).
fof(f67580,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl493),
  inference(cnf_transformation,[],[f67580_D])).
fof(f67580_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl493),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl493])])).
fof(f67578,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl99 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67577,f37348])).
fof(f67577,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl99 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67576,f14846])).
fof(f67576,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl99 | $spl378)),
  inference(forward_demodulation,[],[f67164,f248])).
fof(f67164,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl99 | $spl378)),
  inference(superposition,[],[f8991,f37348])).
fof(f8991,plain,(
  ( ! [X19] : (s('type.num.num',X19) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))) ) | $spl99),
  inference(superposition,[],[f8876,f253])).
fof(f253,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ADD|split|0')).
fof(f8876,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl99),
  inference(trivial_inequality_removal,[],[f8867])).
fof(f8867,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl99),
  inference(superposition,[],[f2660,f243])).
fof(f2660,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl99),
  inference(superposition,[],[f1857,f244])).
fof(f67575,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl491),
  inference(cnf_transformation,[],[f67575_D])).
fof(f67575_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl491),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl491])])).
fof(f67573,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl99 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67572,f37348])).
fof(f67572,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl99 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67571,f14846])).
fof(f67571,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl99 | $spl378)),
  inference(forward_demodulation,[],[f67163,f248])).
fof(f67163,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl99 | $spl378)),
  inference(superposition,[],[f8989,f37348])).
fof(f8989,plain,(
  ( ! [X17] : (s('type.num.num',X17) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.|48|_0')))) ) | $spl99),
  inference(superposition,[],[f8876,f254])).
fof(f67570,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl489),
  inference(cnf_transformation,[],[f67570_D])).
fof(f67570_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl489),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl489])])).
fof(f67568,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl99 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67567,f14846])).
fof(f67567,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl99 | $spl378)),
  inference(forward_demodulation,[],[f67162,f248])).
fof(f67162,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | ($spl99 | $spl378)),
  inference(superposition,[],[f8876,f37348])).
fof(f25166,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl275),
  inference(cnf_transformation,[],[f25166_D])).
fof(f25166_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl275),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl275])])).
fof(f67557,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl487),
  inference(cnf_transformation,[],[f67557_D])).
fof(f67557_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl487),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl487])])).
fof(f67555,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f67554,f37348])).
fof(f67554,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f67553,f14846])).
fof(f67553,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl378),
  inference(forward_demodulation,[],[f67120,f248])).
fof(f67120,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl378),
  inference(superposition,[],[f1956,f37348])).
fof(f1956,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f1955,f267])).
fof(f1955,plain,(
  ( ! [X24] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))))) )),
  inference(forward_demodulation,[],[f1954,f247])).
fof(f1954,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f1920,f248])).
fof(f1920,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X24))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f335,f247])).
fof(f335,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(superposition,[],[f225,f228])).
fof(f67532,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl483),
  inference(cnf_transformation,[],[f67532_D])).
fof(f67532_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) <=> ~$spl483),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl483])])).
fof(f67533,plain,(
  ( ! [X101] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl484),
  inference(cnf_transformation,[],[f67533_D])).
fof(f67533_D,plain,(
  ( ! [X101] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl484),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl484])])).
fof(f67530,plain,(
  ( ! [X101] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f67529,f37348])).
fof(f67529,plain,(
  ( ! [X101] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | ($spl208 | $spl378)),
  inference(forward_demodulation,[],[f67528,f14846])).
fof(f67528,plain,(
  ( ! [X101] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | $spl378),
  inference(forward_demodulation,[],[f67113,f248])).
fof(f67113,plain,(
  ( ! [X101] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X101),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X101),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1)))))) ) | $spl378),
  inference(superposition,[],[f1904,f37348])).
fof(f1904,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X9),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X8) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))) )),
  inference(superposition,[],[f335,f228])).
fof(f67500,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl481),
  inference(cnf_transformation,[],[f67500_D])).
fof(f67500_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl481),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl481])])).
fof(f67496,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl45 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67495,f37348])).
fof(f67495,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl45 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f67494,f14846])).
fof(f67494,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl45 | $spl378)),
  inference(forward_demodulation,[],[f67081,f248])).
fof(f67081,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))))) | ($spl45 | $spl378)),
  inference(superposition,[],[f922,f37348])).
fof(f922,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl45),
  inference(superposition,[],[f910,f228])).
fof(f35887,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) ) | $spl344),
  inference(cnf_transformation,[],[f35887_D])).
fof(f35887_D,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f35889,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | $spl347),
  inference(cnf_transformation,[],[f35889_D])).
fof(f35889_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) <=> ~$spl347),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl347])])).
fof(f65929,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))) ) | $spl8),
  inference(superposition,[],[f54001,f242])).
fof(f54001,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))))))) ) | $spl8),
  inference(forward_demodulation,[],[f53968,f248])).
fof(f53968,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))))))) ) | $spl8),
  inference(superposition,[],[f53551,f234])).
fof(f234,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))),
  inference(rectify,[],[f93])).
fof(f93,axiom,(
  ! [X8,X9] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9)))))))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_add|split|8')).
fof(f65928,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) ) | $spl8),
  inference(superposition,[],[f54001,f244])).
fof(f28024,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl298),
  inference(cnf_transformation,[],[f28024_D])).
fof(f28024_D,plain,(
  ( ! [X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f61829,plain,(
  ( ! [X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl8),
  inference(superposition,[],[f53975,f255])).
fof(f28020,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl295),
  inference(cnf_transformation,[],[f28020_D])).
fof(f28020_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) <=> ~$spl295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl295])])).
fof(f61866,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68)))))) ) | $spl8),
  inference(forward_demodulation,[],[f61865,f255])).
fof(f61865,plain,(
  ( ! [X68] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(forward_demodulation,[],[f61820,f248])).
fof(f61820,plain,(
  ( ! [X68] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(superposition,[],[f53975,f255])).
fof(f27995,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | $spl291),
  inference(cnf_transformation,[],[f27995_D])).
fof(f27995_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl291),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl291])])).
fof(f61815,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) ) | $spl8),
  inference(superposition,[],[f53975,f243])).
fof(f61814,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl8),
  inference(superposition,[],[f53975,f245])).
fof(f61797,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | ($spl8 | $spl146)),
  inference(superposition,[],[f53975,f6183])).
fof(f25145,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl270),
  inference(cnf_transformation,[],[f25145_D])).
fof(f25145_D,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f60163,plain,(
  ( ! [X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(superposition,[],[f54003,f243])).
fof(f54003,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X30)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f53970,f248])).
fof(f53970,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X30)))))))) ) | $spl8),
  inference(superposition,[],[f53551,f250])).
fof(f60162,plain,(
  ( ! [X33] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(superposition,[],[f54003,f245])).
fof(f25313,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl278),
  inference(cnf_transformation,[],[f25313_D])).
fof(f25313_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f25099,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl263),
  inference(cnf_transformation,[],[f25099_D])).
fof(f25099_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl263),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl263])])).
fof(f60141,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl8),
  inference(superposition,[],[f54003,f242])).
fof(f60140,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f54003,f244])).
fof(f25164,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl273),
  inference(cnf_transformation,[],[f25164_D])).
fof(f25164_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) <=> ~$spl273),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl273])])).
fof(f60075,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl8 | $spl208)),
  inference(forward_demodulation,[],[f60074,f14846])).
fof(f60074,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60073,f251])).
fof(f251,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f60073,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60072,f239])).
fof(f60072,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60071,f248])).
fof(f60071,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60070,f236])).
fof(f60070,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60069,f255])).
fof(f60069,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f60002,f239])).
fof(f60002,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl8),
  inference(superposition,[],[f54002,f255])).
fof(f54002,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl8),
  inference(forward_demodulation,[],[f53969,f248])).
fof(f53969,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl8),
  inference(superposition,[],[f53551,f249])).
fof(f60059,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(forward_demodulation,[],[f59997,f239])).
fof(f59997,plain,(
  ( ! [X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(superposition,[],[f54002,f243])).
fof(f60058,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(forward_demodulation,[],[f59996,f239])).
fof(f59996,plain,(
  ( ! [X33] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(superposition,[],[f54002,f245])).
fof(f25097,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl260),
  inference(cnf_transformation,[],[f25097_D])).
fof(f25097_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f59975,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl8),
  inference(superposition,[],[f54002,f242])).
fof(f59974,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f54002,f244])).
fof(f53506,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl476),
  inference(cnf_transformation,[],[f53506_D])).
fof(f53506_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl476),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl476])])).
fof(f351,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl7),
  inference(cnf_transformation,[],[f351_D])).
fof(f351_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f53505,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f53504,f257])).
fof(f53504,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f53436,f228])).
fof(f53436,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(superposition,[],[f1706,f360])).
fof(f52638,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl438),
  inference(cnf_transformation,[],[f52638_D])).
fof(f52638_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl438),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl438])])).
fof(f14916,plain,(
  ( ! [X15] : (p(s(bool,X15))) ) | $spl220),
  inference(cnf_transformation,[],[f14916_D])).
fof(f14916_D,plain,(
  ( ! [X15] : (p(s(bool,X15))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f53375,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl61),
  inference(duplicate_literal_removal,[],[f3349])).
fof(f3349,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl61),
  inference(superposition,[],[f3293,f230])).
fof(f53376,plain,(
  ( ! [X1] : (p(s(bool,X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl61),
  inference(duplicate_literal_removal,[],[f3350])).
fof(f3350,plain,(
  ( ! [X1] : (p(s(bool,X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,X1))) ) | $spl61),
  inference(superposition,[],[f3293,f230])).
fof(f52636,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl437),
  inference(cnf_transformation,[],[f52636_D])).
fof(f52636_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl437),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl437])])).
fof(f52634,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) | $spl434),
  inference(cnf_transformation,[],[f52634_D])).
fof(f52634_D,plain,(
  ( ! [X3] : (~p(s(bool,X3))) ) <=> ~$spl434),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl434])])).
fof(f53384,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl61),
  inference(duplicate_literal_removal,[],[f3316])).
fof(f3316,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2))) ) | $spl61),
  inference(superposition,[],[f3291,f233])).
fof(f233,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f185])).
fof(f53385,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl61),
  inference(duplicate_literal_removal,[],[f3317])).
fof(f3317,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl61),
  inference(superposition,[],[f3291,f233])).
fof(f53362,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f53350,f15310])).
fof(f15310,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(resolution,[],[f355,f304])).
fof(f53350,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl9),
  inference(trivial_inequality_removal,[],[f53349])).
fof(f53349,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl9),
  inference(superposition,[],[f359,f309])).
fof(f309,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.LENGTH_TAKE_EQ',aHL_BOOL_CASES)).
fof(f359,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl9),
  inference(cnf_transformation,[],[f359_D])).
fof(f359_D,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f53361,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f53351,f355])).
fof(f53351,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(trivial_inequality_removal,[],[f53345])).
fof(f53345,plain,(
  s(bool,'F_0') != s(bool,'F_0') | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(superposition,[],[f359,f303])).
fof(f303,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f169])).
fof(f169,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.EQ_CLAUSES|split|3')).
fof(f53360,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f53352,f355])).
fof(f53352,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(trivial_inequality_removal,[],[f53344])).
fof(f53344,plain,(
  s(bool,'F_0') != s(bool,'F_0') | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(superposition,[],[f359,f301])).
fof(f301,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.EQ_CLAUSES|split|2')).
fof(f53359,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f53354,f355])).
fof(f53354,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(trivial_inequality_removal,[],[f53342])).
fof(f53342,plain,(
  s(bool,'F_0') != s(bool,'F_0') | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl9),
  inference(superposition,[],[f359,f297])).
fof(f53174,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53047,f52634])).
fof(f53047,plain,(
  ( ! [X43,X44] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f39755])).
fof(f53173,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53046,f52634])).
fof(f53046,plain,(
  ( ! [X42] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X42),s('type.num.num',sK2))))) ) | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f40197])).
fof(f40197,plain,(
  ( ! [X27] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X27)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f39755,f25991])).
fof(f25991,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',sK2))))) ) | $spl143),
  inference(resolution,[],[f13780,f261])).
fof(f13780,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl143),
  inference(resolution,[],[f4520,f258])).
fof(f53172,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53044,f52634])).
fof(f53044,plain,(
  ( ! [X41,X40] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f10858])).
fof(f53171,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53043,f52634])).
fof(f53043,plain,(
  ( ! [X39,X38] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X38),s('type.num.num',X39))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f9361])).
fof(f53170,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53042,f52634])).
fof(f53042,plain,(
  ( ! [X37] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',sK2))))) ) | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f32146])).
fof(f32146,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f25991,f9361])).
fof(f53169,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53038,f52634])).
fof(f53038,plain,(
  ( ! [X31] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))))) ) | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f32146])).
fof(f53168,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53037,f52634])).
fof(f53037,plain,(
  ( ! [X30] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X30))))) ) | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f40197])).
fof(f53167,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53036,f52634])).
fof(f53036,plain,(
  ( ! [X28,X29] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',X29))))) ) | $spl434),
  inference(resolution,[],[f52634,f261])).
fof(f53166,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53025,f52634])).
fof(f53025,plain,(
  ( ! [X26,X27] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num',X27))))) ) | $spl434),
  inference(resolution,[],[f52634,f264])).
fof(f53165,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53024,f52634])).
fof(f53024,plain,(
  ( ! [X24,X25] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X25))))) ) | $spl434),
  inference(resolution,[],[f52634,f259])).
fof(f259,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f53164,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53023,f52634])).
fof(f53023,plain,(
  ( ! [X23] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X23))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f39755])).
fof(f53163,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53022,f52634])).
fof(f53022,plain,(
  ( ! [X22] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f10858])).
fof(f53162,plain,(
  $false | ($spl146 | $spl434)),
  inference(subsumption_resolution,[],[f53019,f52634])).
fof(f53019,plain,(
  ( ! [X19] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))))) ) | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f9361])).
fof(f53161,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53018,f52634])).
fof(f53018,plain,(
  ( ! [X17,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X18))))))) ) | $spl434),
  inference(resolution,[],[f52634,f264])).
fof(f53160,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53017,f52634])).
fof(f53017,plain,(
  ( ! [X15,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X16))))) ) | $spl434),
  inference(resolution,[],[f52634,f261])).
fof(f53159,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53016,f52634])).
fof(f53016,plain,(
  ( ! [X14,X13] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))))) ) | $spl434),
  inference(resolution,[],[f52634,f259])).
fof(f53158,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53010,f52634])).
fof(f53010,plain,(
  p(s(bool,'F_0')) | $spl434),
  inference(resolution,[],[f52634,f312])).
fof(f312,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f177])).
fof(f177,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f33])).
fof(f33,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.NOT_CLAUSES|split|2')).
fof(f53157,plain,(
  $false | $spl434),
  inference(subsumption_resolution,[],[f53009,f52634])).
fof(f53009,plain,(
  p(s(bool,'F_0')) | $spl434),
  inference(resolution,[],[f52634,f314])).
fof(f314,plain,(
  p(s(bool,'F_0')) | p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f178])).
fof(f178,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f32])).
fof(f32,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.NOT_CLAUSES|split|1')).
fof(f53007,plain,(
  $false | $spl434),
  inference(resolution,[],[f52634,f317])).
fof(f317,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.list.LENGTH_TAKE_EQ',aHL_TRUTH)).
fof(f53008,plain,(
  $false | $spl434),
  inference(resolution,[],[f52634,f316])).
fof(f316,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f26])).
fof(f26,axiom,(
  p(s(bool,'T_0'))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.TRUTH')).
fof(f53011,plain,(
  $false | $spl434),
  inference(resolution,[],[f52634,f320])).
fof(f53026,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f44163])).
fof(f44163,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl146),
  inference(subsumption_resolution,[],[f44102,f308])).
fof(f44102,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl146),
  inference(superposition,[],[f264,f43949])).
fof(f43949,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | $spl146),
  inference(superposition,[],[f42416,f255])).
fof(f42416,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.num.|48|_0')))) ) | $spl146),
  inference(resolution,[],[f41836,f9368])).
fof(f9368,plain,(
  ( ! [X19,X18] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X19)))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')))) ) | $spl146),
  inference(resolution,[],[f6149,f297])).
fof(f41836,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl146),
  inference(resolution,[],[f41491,f262])).
fof(f41491,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f41403,f320])).
fof(f41403,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))))) ) | $spl146),
  inference(superposition,[],[f40189,f38797])).
fof(f38797,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9)))))))) ) | $spl146),
  inference(resolution,[],[f38678,f305])).
fof(f53027,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f44575])).
fof(f44575,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl146),
  inference(subsumption_resolution,[],[f44509,f308])).
fof(f44509,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl146),
  inference(superposition,[],[f264,f44359])).
fof(f44359,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl146),
  inference(superposition,[],[f42422,f255])).
fof(f42422,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14))))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl146),
  inference(resolution,[],[f41836,f297])).
fof(f53028,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f42503])).
fof(f42503,plain,(
  ( ! [X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))) ) | $spl146),
  inference(resolution,[],[f41918,f264])).
fof(f41918,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl146),
  inference(resolution,[],[f41492,f262])).
fof(f41492,plain,(
  ( ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f41404,f320])).
fof(f41404,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9))))))))) ) | $spl146),
  inference(superposition,[],[f40189,f38878])).
fof(f38878,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))))))) ) | $spl146),
  inference(resolution,[],[f38680,f305])).
fof(f53029,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f44852])).
fof(f44852,plain,(
  ( ! [X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f44791,f308])).
fof(f44791,plain,(
  ( ! [X16] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16))))))))))) ) | $spl146),
  inference(superposition,[],[f264,f42505])).
fof(f42505,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))),s('type.num.num','const.num.|48|_0')))) ) | $spl146),
  inference(resolution,[],[f41918,f9368])).
fof(f53030,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f42414])).
fof(f42414,plain,(
  ( ! [X4] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))) ) | $spl146),
  inference(resolution,[],[f41836,f264])).
fof(f53031,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f44040])).
fof(f44040,plain,(
  ( ! [X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f43979,f308])).
fof(f43979,plain,(
  ( ! [X16] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))))))))))) ) | $spl146),
  inference(superposition,[],[f264,f42416])).
fof(f53032,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f6511])).
fof(f6511,plain,(
  ( ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) ) | $spl146),
  inference(resolution,[],[f6176,f264])).
fof(f6176,plain,(
  ( ! [X64] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl146),
  inference(forward_demodulation,[],[f6175,f5600])).
fof(f6175,plain,(
  ( ! [X64] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f6070,f272])).
fof(f6070,plain,(
  ( ! [X64] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))))) ) | $spl146),
  inference(superposition,[],[f263,f5600])).
fof(f263,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f204])).
fof(f53033,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f32700])).
fof(f32700,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32364,f264])).
fof(f32364,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32271,f262])).
fof(f32271,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2)))) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f32203,f320])).
fof(f32203,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2)))) | ($spl143 | $spl146)),
  inference(superposition,[],[f25991,f28808])).
fof(f28808,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X18)))) ) | $spl146),
  inference(resolution,[],[f28609,f305])).
fof(f28609,plain,(
  ( ! [X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X10))))) ) | $spl146),
  inference(resolution,[],[f28485,f9411])).
fof(f53034,plain,(
  $false | $spl434),
  inference(resolution,[],[f52634,f272])).
fof(f53035,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f29604])).
fof(f29604,plain,(
  ( ! [X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',X10))))) ) | $spl146),
  inference(resolution,[],[f28802,f9411])).
fof(f28802,plain,(
  ( ! [X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X10))))) ) | $spl146),
  inference(resolution,[],[f28609,f9411])).
fof(f53045,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f38685])).
fof(f38685,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f38545,f308])).
fof(f38545,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f10858,f13783])).
fof(f13783,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl143),
  inference(resolution,[],[f4520,f297])).
fof(f53048,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f52656])).
fof(f52656,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f38685,f40189])).
fof(f53049,plain,(
  $false | ($spl224 | $spl434)),
  inference(resolution,[],[f52634,f23316])).
fof(f23316,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))))) | $spl224),
  inference(resolution,[],[f17615,f261])).
fof(f17615,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl224),
  inference(resolution,[],[f16690,f263])).
fof(f16690,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) | $spl224),
  inference(resolution,[],[f16614,f264])).
fof(f53050,plain,(
  $false | ($spl146 | $spl434)),
  inference(resolution,[],[f52634,f30627])).
fof(f30627,plain,(
  ( ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))) ) | $spl146),
  inference(resolution,[],[f28795,f261])).
fof(f28795,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))))) ) | $spl146),
  inference(resolution,[],[f28609,f263])).
fof(f53051,plain,(
  $false | ($spl143 | $spl146 | $spl434)),
  inference(resolution,[],[f52634,f32153])).
fof(f32153,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num',sK2)))) | ($spl143 | $spl146)),
  inference(resolution,[],[f25991,f29604])).
fof(f14940,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl228),
  inference(cnf_transformation,[],[f14940_D])).
fof(f14940_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f52959,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl1 | $spl146)),
  inference(duplicate_literal_removal,[],[f16595])).
fof(f16595,plain,(
  ( ! [X0] : (p(s(bool,X0)) | p(s(bool,X0)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl1 | $spl146)),
  inference(superposition,[],[f10976,f230])).
fof(f10976,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl1 | $spl146)),
  inference(subsumption_resolution,[],[f10865,f308])).
fof(f10865,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl1 | $spl146)),
  inference(superposition,[],[f9361,f456])).
fof(f52960,plain,(
  ( ! [X1] : (p(s(bool,X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl1 | $spl146)),
  inference(duplicate_literal_removal,[],[f16596])).
fof(f16596,plain,(
  ( ! [X1] : (p(s(bool,X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | p(s(bool,X1))) ) | ($spl1 | $spl146)),
  inference(superposition,[],[f10976,f230])).
fof(f4067,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | $spl141),
  inference(cnf_transformation,[],[f4067_D])).
fof(f4067_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) <=> ~$spl141),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl141])])).
fof(f52962,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))))) ) | ($spl1 | $spl146)),
  inference(duplicate_literal_removal,[],[f16674])).
fof(f16674,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X2))) ) | ($spl1 | $spl146)),
  inference(superposition,[],[f16581,f233])).
fof(f16581,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ($spl1 | $spl146)),
  inference(resolution,[],[f10976,f262])).
fof(f52963,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))))) ) | ($spl1 | $spl146)),
  inference(duplicate_literal_removal,[],[f16675])).
fof(f16675,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))))) ) | ($spl1 | $spl146)),
  inference(superposition,[],[f16581,f233])).
fof(f12969,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(forward_demodulation,[],[f12968,f257])).
fof(f12968,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(subsumption_resolution,[],[f12898,f304])).
fof(f12898,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X8) | p(s(bool,X8))) ) | $spl2),
  inference(superposition,[],[f1204,f297])).
fof(f1204,plain,(
  ( ! [X19] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X19),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X19)) ) | $spl2),
  inference(subsumption_resolution,[],[f1160,f311])).
fof(f1160,plain,(
  ( ! [X19] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X19),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X19)) ) | $spl2),
  inference(superposition,[],[f347,f309])).
fof(f1199,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(forward_demodulation,[],[f1196,f257])).
fof(f1196,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f1149])).
fof(f1149,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X8)) | p(s(bool,X8))) ) | $spl2),
  inference(superposition,[],[f347,f297])).
fof(f1200,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(forward_demodulation,[],[f1195,f257])).
fof(f1195,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f1151])).
fof(f1151,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X10)) | p(s(bool,X10))) ) | $spl2),
  inference(superposition,[],[f347,f301])).
fof(f1201,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(forward_demodulation,[],[f1194,f257])).
fof(f1194,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f1152])).
fof(f1152,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X11)) | p(s(bool,X11))) ) | $spl2),
  inference(superposition,[],[f347,f303])).
fof(f1203,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl2),
  inference(forward_demodulation,[],[f1202,f257])).
fof(f1202,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl2),
  inference(subsumption_resolution,[],[f1156,f304])).
fof(f1156,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X15)) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(superposition,[],[f347,f309])).
fof(f12971,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(forward_demodulation,[],[f12970,f257])).
fof(f12970,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(subsumption_resolution,[],[f12900,f304])).
fof(f12900,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X10) | p(s(bool,X10))) ) | $spl2),
  inference(superposition,[],[f1204,f301])).
fof(f12973,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(forward_demodulation,[],[f12972,f257])).
fof(f12972,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(subsumption_resolution,[],[f12901,f304])).
fof(f12901,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X11) | p(s(bool,X11))) ) | $spl2),
  inference(superposition,[],[f1204,f303])).
fof(f7263,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) | $spl152),
  inference(cnf_transformation,[],[f7263_D])).
fof(f7263_D,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f12974,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(forward_demodulation,[],[f12967,f257])).
fof(f12967,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(duplicate_literal_removal,[],[f12905])).
fof(f12905,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(superposition,[],[f1204,f309])).
fof(f10152,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(forward_demodulation,[],[f10149,f257])).
fof(f10149,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f10084])).
fof(f10084,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X8)) | p(s(bool,X8))) ) | $spl2),
  inference(superposition,[],[f347,f297])).
fof(f10153,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(forward_demodulation,[],[f10148,f257])).
fof(f10148,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f10086])).
fof(f10086,plain,(
  ( ! [X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X10)) | p(s(bool,X10))) ) | $spl2),
  inference(superposition,[],[f347,f301])).
fof(f10154,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(forward_demodulation,[],[f10147,f257])).
fof(f10147,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl2),
  inference(duplicate_literal_removal,[],[f10087])).
fof(f10087,plain,(
  ( ! [X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X11)) | p(s(bool,X11))) ) | $spl2),
  inference(superposition,[],[f347,f303])).
fof(f10156,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl2),
  inference(forward_demodulation,[],[f10155,f257])).
fof(f10155,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl2),
  inference(subsumption_resolution,[],[f10091,f304])).
fof(f10091,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X15)) | s(bool,'T_0') = s(bool,X15)) ) | $spl2),
  inference(superposition,[],[f347,f309])).
fof(f4066,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | $spl140),
  inference(cnf_transformation,[],[f4066_D])).
fof(f4066_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f10176,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ($spl2 | $spl141)),
  inference(forward_demodulation,[],[f10119,f257])).
fof(f10119,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ($spl2 | $spl141)),
  inference(superposition,[],[f347,f4079])).
fof(f4079,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | $spl141),
  inference(resolution,[],[f4067,f297])).
fof(f4231,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ($spl2 | $spl141)),
  inference(forward_demodulation,[],[f4192,f257])).
fof(f4192,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ($spl2 | $spl141)),
  inference(superposition,[],[f347,f4079])).
fof(f49429,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49428,f246])).
fof(f49428,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49415,f305])).
fof(f49415,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f49120,f233])).
fof(f49120,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49058,f311])).
fof(f49058,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl146)),
  inference(superposition,[],[f304,f43353])).
fof(f43353,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl146)),
  inference(resolution,[],[f43300,f9368])).
fof(f43300,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl35 | $spl146)),
  inference(resolution,[],[f41490,f262])).
fof(f41490,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f41402,f320])).
fof(f41402,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | ($spl35 | $spl146)),
  inference(superposition,[],[f40189,f39299])).
fof(f39299,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ($spl35 | $spl146)),
  inference(resolution,[],[f38672,f305])).
fof(f38672,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f38512,f308])).
fof(f38512,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) | ($spl35 | $spl146)),
  inference(superposition,[],[f10858,f565])).
fof(f565,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2))) | $spl35),
  inference(resolution,[],[f521,f297])).
fof(f49432,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X3))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49431,f246])).
fof(f49431,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49416,f305])).
fof(f49416,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f49120,f233])).
fof(f49078,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49077,f246])).
fof(f49077,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49018,f300])).
fof(f300,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f219])).
fof(f49018,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X2))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f43353,f233])).
fof(f49108,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X9))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49107,f246])).
fof(f49107,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X9))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49044,f300])).
fof(f49044,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,X9) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,X9))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f233,f43353])).
fof(f49081,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X3))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49080,f246])).
fof(f49080,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49019,f300])).
fof(f49019,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,X3) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f43353,f233])).
fof(f49111,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X10))) ) | ($spl35 | $spl146)),
  inference(forward_demodulation,[],[f49110,f246])).
fof(f49110,plain,(
  ( ! [X10] : (~p(s(bool,X10)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f49045,f300])).
fof(f49045,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,X10) | ~p(s(bool,X10)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl35 | $spl146)),
  inference(superposition,[],[f233,f43353])).
fof(f52945,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f346,f355])).
fof(f14938,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl226),
  inference(cnf_transformation,[],[f14938_D])).
fof(f14938_D,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f19393,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | $spl146),
  inference(resolution,[],[f15304,f9361])).
fof(f19483,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl146),
  inference(subsumption_resolution,[],[f19432,f9457])).
fof(f19432,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) )),
  inference(superposition,[],[f15304,f245])).
fof(f19485,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl146),
  inference(subsumption_resolution,[],[f19433,f9457])).
fof(f19433,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) )),
  inference(superposition,[],[f15304,f243])).
fof(f36630,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl358),
  inference(cnf_transformation,[],[f36630_D])).
fof(f36630_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) <=> ~$spl358),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl358])])).
fof(f21589,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl146 | $spl224)),
  inference(resolution,[],[f16693,f9361])).
fof(f16693,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl224),
  inference(resolution,[],[f16614,f258])).
fof(f21678,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl146 | $spl224)),
  inference(subsumption_resolution,[],[f21628,f9457])).
fof(f21628,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl224),
  inference(superposition,[],[f16693,f245])).
fof(f21680,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl146 | $spl224)),
  inference(subsumption_resolution,[],[f21629,f9457])).
fof(f21629,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl224),
  inference(superposition,[],[f16693,f243])).
fof(f21837,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl146 | $spl224)),
  inference(resolution,[],[f21591,f10764])).
fof(f10764,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X5)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))))) ) | $spl146),
  inference(resolution,[],[f9361,f262])).
fof(f21591,plain,(
  ( ! [X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl224),
  inference(resolution,[],[f16693,f261])).
fof(f21921,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl146 | $spl224)),
  inference(subsumption_resolution,[],[f21868,f9457])).
fof(f21868,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl224),
  inference(superposition,[],[f21591,f245])).
fof(f21923,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl146 | $spl224)),
  inference(subsumption_resolution,[],[f21869,f9457])).
fof(f21869,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl224),
  inference(superposition,[],[f21591,f243])).
fof(f38627,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl396),
  inference(cnf_transformation,[],[f38627_D])).
fof(f38627_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) <=> ~$spl396),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl396])])).
fof(f25989,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f13780,f9361])).
fof(f26075,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f26028,f9457])).
fof(f26028,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl143),
  inference(superposition,[],[f13780,f245])).
fof(f26077,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f26029,f9457])).
fof(f26029,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl143),
  inference(superposition,[],[f13780,f243])).
fof(f52901,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | $spl466),
  inference(cnf_transformation,[],[f52901_D])).
fof(f52901_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) <=> ~$spl466),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl466])])).
fof(f28175,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f9368,f13780])).
fof(f28176,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl146 | $spl224)),
  inference(resolution,[],[f9368,f16693])).
fof(f28178,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl146),
  inference(resolution,[],[f9368,f15304])).
fof(f33428,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f32146,f10764])).
fof(f33580,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f33469,f14661])).
fof(f14661,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))))))) ) | $spl146),
  inference(superposition,[],[f14530,f229])).
fof(f14530,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl146),
  inference(resolution,[],[f14422,f262])).
fof(f14422,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))) ) | $spl146),
  inference(equality_resolution,[],[f9457])).
fof(f33469,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f32146,f245])).
fof(f33582,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f33470,f14661])).
fof(f33470,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f32146,f243])).
fof(f33699,plain,(
  ( ! [X31] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | ($spl143 | $spl208)),
  inference(forward_demodulation,[],[f33683,f14846])).
fof(f33683,plain,(
  ( ! [X31] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl143),
  inference(trivial_inequality_removal,[],[f33670])).
fof(f33670,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num',X31) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl143),
  inference(superposition,[],[f32250,f244])).
fof(f32250,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num',sK2))))) ) | $spl143),
  inference(subsumption_resolution,[],[f32184,f272])).
fof(f32184,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl143),
  inference(superposition,[],[f25991,f245])).
fof(f33701,plain,(
  ( ! [X32] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | ($spl143 | $spl208)),
  inference(forward_demodulation,[],[f33682,f14846])).
fof(f33682,plain,(
  ( ! [X32] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl143),
  inference(trivial_inequality_removal,[],[f33671])).
fof(f33671,plain,(
  ( ! [X32] : (s('type.num.num',X32) != s('type.num.num',X32) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl143),
  inference(superposition,[],[f32250,f242])).
fof(f33708,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f33429,f9368])).
fof(f33429,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f32146,f262])).
fof(f33709,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f33429,f9361])).
fof(f33797,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f33748,f14661])).
fof(f33748,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f33429,f245])).
fof(f33799,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f33749,f14661])).
fof(f33749,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f33429,f243])).
fof(f52920,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | $spl475),
  inference(cnf_transformation,[],[f52920_D])).
fof(f52920_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) <=> ~$spl475),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl475])])).
fof(f33994,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146 | $spl208)),
  inference(forward_demodulation,[],[f33962,f14846])).
fof(f33962,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f32153,f244])).
fof(f33996,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146 | $spl208)),
  inference(forward_demodulation,[],[f33963,f14846])).
fof(f33963,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f32153,f242])).
fof(f52918,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl473),
  inference(cnf_transformation,[],[f52918_D])).
fof(f52918_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl473),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl473])])).
fof(f33966,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f32153,f245])).
fof(f33967,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f32153,f243])).
fof(f34477,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146 | $spl208)),
  inference(forward_demodulation,[],[f34448,f14846])).
fof(f34448,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f33932,f244])).
fof(f33932,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32153,f262])).
fof(f34479,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146 | $spl208)),
  inference(forward_demodulation,[],[f34449,f14846])).
fof(f34449,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f33932,f242])).
fof(f34452,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f33932,f245])).
fof(f34453,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl143 | $spl146)),
  inference(superposition,[],[f33932,f243])).
fof(f52911,plain,(
  ( ! [X57,X58] : (s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl468),
  inference(cnf_transformation,[],[f52911_D])).
fof(f52911_D,plain,(
  ( ! [X57,X58] : (s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl468),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl468])])).
fof(f52913,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | $spl471),
  inference(cnf_transformation,[],[f52913_D])).
fof(f52913_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) <=> ~$spl471),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl471])])).
fof(f37015,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) )),
  inference(superposition,[],[f1706,f245])).
fof(f37016,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) )),
  inference(superposition,[],[f1706,f243])).
fof(f52899,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl464),
  inference(cnf_transformation,[],[f52899_D])).
fof(f52899_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) <=> ~$spl464),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl464])])).
fof(f38242,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f10786,f33429])).
fof(f10786,plain,(
  ( ! [X14,X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)))) ) | $spl146),
  inference(resolution,[],[f9361,f305])).
fof(f38243,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f10786,f13780])).
fof(f38244,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl146 | $spl224)),
  inference(resolution,[],[f10786,f16693])).
fof(f38246,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl146),
  inference(resolution,[],[f10786,f15304])).
fof(f48094,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f40197,f10764])).
fof(f48294,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f48189,f14661])).
fof(f48189,plain,(
  ( ! [X33] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f40197,f245])).
fof(f48296,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f48190,f14661])).
fof(f48190,plain,(
  ( ! [X34] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f40197,f243])).
fof(f48579,plain,(
  ( ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X5)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f48095,f9361])).
fof(f48095,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X2))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f40197,f262])).
fof(f48580,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f48095,f9368])).
fof(f48581,plain,(
  ( ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f48095,f10786])).
fof(f48670,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f48618,f14661])).
fof(f48618,plain,(
  ( ! [X33] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f48095,f245])).
fof(f48672,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f48619,f14661])).
fof(f48619,plain,(
  ( ! [X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f48095,f243])).
fof(f52894,plain,(
  $false | ($spl1 | $spl34)),
  inference(subsumption_resolution,[],[f520,f799])).
fof(f520,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl34),
  inference(cnf_transformation,[],[f520_D])).
fof(f520_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f521,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl35),
  inference(cnf_transformation,[],[f521_D])).
fof(f521_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f52655,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) | $spl462),
  inference(cnf_transformation,[],[f52655_D])).
fof(f52655_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) <=> ~$spl462),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl462])])).
fof(f21528,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2))))) ) | $spl54),
  inference(superposition,[],[f966,f319])).
fof(f52654,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl460),
  inference(cnf_transformation,[],[f52654_D])).
fof(f52654_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl460),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl460])])).
fof(f23863,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f16817,f319])).
fof(f16817,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f15191,f228])).
fof(f52653,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl459),
  inference(cnf_transformation,[],[f52653_D])).
fof(f52653_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl459),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl459])])).
fof(f51034,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl11),
  inference(superposition,[],[f12634,f319])).
fof(f12634,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl11),
  inference(equality_resolution,[],[f9815])).
fof(f345,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl1),
  inference(cnf_transformation,[],[f345_D])).
fof(f345_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f17776,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,X2))) )),
  inference(subsumption_resolution,[],[f17763,f305])).
fof(f17763,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,X2))) )),
  inference(superposition,[],[f15310,f233])).
fof(f17778,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(subsumption_resolution,[],[f17764,f305])).
fof(f17764,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(superposition,[],[f15310,f233])).
fof(f15026,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) | $spl236),
  inference(cnf_transformation,[],[f15026_D])).
fof(f15026_D,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f21529,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl54),
  inference(superposition,[],[f966,f318])).
fof(f52651,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK2) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl456),
  inference(cnf_transformation,[],[f52651_D])).
fof(f52651_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK2) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl456),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl456])])).
fof(f23864,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK2) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f16817,f318])).
fof(f52650,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl455),
  inference(cnf_transformation,[],[f52650_D])).
fof(f52650_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl455),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl455])])).
fof(f30617,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl317),
  inference(superposition,[],[f30312,f318])).
fof(f38626,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | $spl394),
  inference(cnf_transformation,[],[f38626_D])).
fof(f38626_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) <=> ~$spl394),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl394])])).
fof(f48582,plain,(
  ( ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f48095,f10858])).
fof(f52647,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))) ) | $spl450),
  inference(cnf_transformation,[],[f52647_D])).
fof(f52647_D,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))) ) <=> ~$spl450),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl450])])).
fof(f1313,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | $spl61),
  inference(cnf_transformation,[],[f1313_D])).
fof(f1313_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f24792,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) ) | $spl8),
  inference(superposition,[],[f17342,f244])).
fof(f17342,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14)))))) ) | $spl8),
  inference(superposition,[],[f15443,f239])).
fof(f15443,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f15402,f228])).
fof(f15402,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f15339,f257])).
fof(f15339,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(backward_demodulation,[],[f360,f225])).
fof(f24793,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))) ) | $spl8),
  inference(superposition,[],[f17342,f242])).
fof(f52646,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl448),
  inference(cnf_transformation,[],[f52646_D])).
fof(f52646_D,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) <=> ~$spl448),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl448])])).
fof(f27653,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f17336,f244])).
fof(f17336,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl8),
  inference(superposition,[],[f15443,f228])).
fof(f27654,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))) ) | $spl8),
  inference(superposition,[],[f17336,f242])).
fof(f52645,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num',X17)) ) | $spl446),
  inference(cnf_transformation,[],[f52645_D])).
fof(f52645_D,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num',X17)) ) <=> ~$spl446),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl446])])).
fof(f27978,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))))) | s('type.num.num',X14) != s('type.num.num',X15) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))))) ) | $spl8),
  inference(superposition,[],[f17358,f244])).
fof(f17358,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl8),
  inference(superposition,[],[f15443,f229])).
fof(f27979,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num',X16) != s('type.num.num',X17) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16)))))) ) | $spl8),
  inference(superposition,[],[f17358,f242])).
fof(f52643,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X4),X5))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl444),
  inference(cnf_transformation,[],[f52643_D])).
fof(f52643_D,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X4),X5))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) <=> ~$spl444),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl444])])).
fof(f52644,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(X1),X2))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl8 | $spl146)),
  inference(subsumption_resolution,[],[f34868,f9430])).
fof(f34868,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(X1),X2))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f17338,f244])).
fof(f17338,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))))))) ) | $spl8),
  inference(superposition,[],[f15443,f318])).
fof(f52642,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X4),X5))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | ($spl8 | $spl146)),
  inference(subsumption_resolution,[],[f34869,f9430])).
fof(f34869,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),'const.list.TAKE_2'(s('type.num.num',X3),s('type.list.list'(X4),X5))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl8),
  inference(superposition,[],[f17338,f242])).
fof(f52641,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl443),
  inference(cnf_transformation,[],[f52641_D])).
fof(f52641_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl443),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl443])])).
fof(f37347,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) | $spl376),
  inference(cnf_transformation,[],[f37347_D])).
fof(f37347_D,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) <=> ~$spl376),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl376])])).
fof(f37301,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) )),
  inference(superposition,[],[f1956,f244])).
fof(f37302,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) )),
  inference(superposition,[],[f1956,f242])).
fof(f52639,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK2))))) ) | $spl440),
  inference(cnf_transformation,[],[f52639_D])).
fof(f52639_D,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK2))))) ) <=> ~$spl440),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl440])])).
fof(f48478,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | ($spl35 | $spl146)),
  inference(resolution,[],[f562,f39755])).
fof(f562,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK2))))) ) | $spl35),
  inference(resolution,[],[f521,f258])).
fof(f48544,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f48491,f9430])).
fof(f48491,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl35),
  inference(superposition,[],[f562,f244])).
fof(f48546,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl35 | $spl146)),
  inference(subsumption_resolution,[],[f48492,f9430])).
fof(f48492,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl35),
  inference(superposition,[],[f562,f242])).
fof(f52633,plain,(
  $false | ($spl61 | $spl379)),
  inference(subsumption_resolution,[],[f52632,f317])).
fof(f52632,plain,(
  ~p(s(bool,'T_0')) | ($spl61 | $spl379)),
  inference(forward_demodulation,[],[f52631,f3337])).
fof(f52631,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl379),
  inference(forward_demodulation,[],[f52620,f267])).
fof(f52620,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl379),
  inference(trivial_inequality_removal,[],[f52615])).
fof(f52615,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl379),
  inference(superposition,[],[f37349,f318])).
fof(f52628,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl431),
  inference(cnf_transformation,[],[f52628_D])).
fof(f52628_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl431),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl431])])).
fof(f52630,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl433),
  inference(cnf_transformation,[],[f52630_D])).
fof(f52630_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl433),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl433])])).
fof(f52614,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl379),
  inference(superposition,[],[f37349,f319])).
fof(f45276,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl427),
  inference(cnf_transformation,[],[f45276_D])).
fof(f45276_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl427),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl427])])).
fof(f45277,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl428),
  inference(cnf_transformation,[],[f45277_D])).
fof(f45277_D,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl428),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl428])])).
fof(f45274,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f45273,f255])).
fof(f45273,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f45272,f248])).
fof(f45272,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f45227,f248])).
fof(f45227,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1926,f255])).
fof(f1926,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X33) != s('type.num.num',X34)) )),
  inference(superposition,[],[f335,f229])).
fof(f45268,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))) ) | $spl424),
  inference(cnf_transformation,[],[f45268_D])).
fof(f45268_D,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))) ) <=> ~$spl424),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl424])])).
fof(f45253,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl423),
  inference(cnf_transformation,[],[f45253_D])).
fof(f45253_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl423),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl423])])).
fof(f45222,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) )),
  inference(superposition,[],[f1926,f243])).
fof(f45221,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) )),
  inference(superposition,[],[f1926,f245])).
fof(f45251,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl420),
  inference(cnf_transformation,[],[f45251_D])).
fof(f45251_D,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) <=> ~$spl420),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl420])])).
fof(f45204,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl146),
  inference(superposition,[],[f1926,f6183])).
fof(f429,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))))) | $spl31),
  inference(cnf_transformation,[],[f429_D])).
fof(f429_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f41676,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X11),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl418),
  inference(cnf_transformation,[],[f41676_D])).
fof(f41676_D,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X11),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl418),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl418])])).
fof(f41653,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X13),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))))) )),
  inference(superposition,[],[f1904,f242])).
fof(f41652,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X11),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))))) )),
  inference(superposition,[],[f1904,f244])).
fof(f41673,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X13),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))) ) | $spl414),
  inference(cnf_transformation,[],[f41673_D])).
fof(f41673_D,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X13),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))) ) <=> ~$spl414),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl414])])).
fof(f41675,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl417),
  inference(cnf_transformation,[],[f41675_D])).
fof(f41675_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) <=> ~$spl417),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl417])])).
fof(f41633,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X15),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X14) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))))) )),
  inference(superposition,[],[f1904,f242])).
fof(f41632,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X13),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) )),
  inference(superposition,[],[f1904,f244])).
fof(f41671,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl411),
  inference(cnf_transformation,[],[f41671_D])).
fof(f41671_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) <=> ~$spl411),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl411])])).
fof(f41672,plain,(
  ( ! [X65] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X65),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl412),
  inference(cnf_transformation,[],[f41672_D])).
fof(f41672_D,plain,(
  ( ! [X65] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X65),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl412),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl412])])).
fof(f41669,plain,(
  ( ! [X65] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X65),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f41668,f255])).
fof(f41668,plain,(
  ( ! [X65] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X65),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f41624,f248])).
fof(f41624,plain,(
  ( ! [X65] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X65),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',X65),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1904,f255])).
fof(f40428,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl408),
  inference(cnf_transformation,[],[f40428_D])).
fof(f40428_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl408),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl408])])).
fof(f40426,plain,(
  ( ! [X68] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) ) | $spl146),
  inference(forward_demodulation,[],[f40425,f255])).
fof(f40425,plain,(
  ( ! [X68] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(forward_demodulation,[],[f40250,f267])).
fof(f40250,plain,(
  ( ! [X68] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X68)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(superposition,[],[f39755,f255])).
fof(f40165,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl405),
  inference(cnf_transformation,[],[f40165_D])).
fof(f40165_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl405),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl405])])).
fof(f40166,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))))) ) | $spl406),
  inference(cnf_transformation,[],[f40166_D])).
fof(f40166_D,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))))) ) <=> ~$spl406),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl406])])).
fof(f40163,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66)))))) )),
  inference(forward_demodulation,[],[f40162,f255])).
fof(f40162,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f40161,f248])).
fof(f40161,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f40105,f248])).
fof(f40105,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1681,f255])).
fof(f1681,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))) | s('type.num.num',X33) != s('type.num.num',X34)) )),
  inference(superposition,[],[f339,f229])).
fof(f40157,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl402),
  inference(cnf_transformation,[],[f40157_D])).
fof(f40157_D,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) <=> ~$spl402),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl402])])).
fof(f40142,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl401),
  inference(cnf_transformation,[],[f40142_D])).
fof(f40142_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl401),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl401])])).
fof(f40100,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) )),
  inference(superposition,[],[f1681,f243])).
fof(f40099,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53)) )),
  inference(superposition,[],[f1681,f245])).
fof(f40140,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl398),
  inference(cnf_transformation,[],[f40140_D])).
fof(f40140_D,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) <=> ~$spl398),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl398])])).
fof(f40084,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl146),
  inference(superposition,[],[f1681,f6183])).
fof(f38416,plain,(
  ( ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl146),
  inference(resolution,[],[f10858,f15304])).
fof(f36648,plain,(
  ( ! [X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num','const.num.|48|_0'))))) ) | $spl366),
  inference(cnf_transformation,[],[f36648_D])).
fof(f36648_D,plain,(
  ( ! [X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num','const.num.|48|_0'))))) ) <=> ~$spl366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl366])])).
fof(f38415,plain,(
  ( ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))))) ) | ($spl1 | $spl146)),
  inference(resolution,[],[f10858,f16657])).
fof(f16657,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | ($spl1 | $spl146)),
  inference(resolution,[],[f16581,f258])).
fof(f38414,plain,(
  ( ! [X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl146 | $spl224)),
  inference(resolution,[],[f10858,f16693])).
fof(f38413,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f10858,f13780])).
fof(f38412,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) | ($spl143 | $spl146)),
  inference(resolution,[],[f10858,f33429])).
fof(f37856,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl393),
  inference(cnf_transformation,[],[f37856_D])).
fof(f37856_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl393),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl393])])).
fof(f37836,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f37491,f242])).
fof(f37491,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f37403,f248])).
fof(f37403,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f36959,f248])).
fof(f36959,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f36871,f248])).
fof(f36871,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f36824,f248])).
fof(f36824,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | ($spl146 | $spl171)),
  inference(subsumption_resolution,[],[f36823,f311])).
fof(f36823,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | ($spl146 | $spl171)),
  inference(forward_demodulation,[],[f36800,f11080])).
fof(f11080,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl171),
  inference(resolution,[],[f10955,f297])).
fof(f10955,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl171),
  inference(cnf_transformation,[],[f10955_D])).
fof(f10955_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl171),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl171])])).
fof(f36800,plain,(
  ( ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl146),
  inference(superposition,[],[f36502,f244])).
fof(f37835,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f37491,f244])).
fof(f37695,plain,(
  $false | ($spl146 | $spl358)),
  inference(subsumption_resolution,[],[f37668,f317])).
fof(f37668,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl358)),
  inference(superposition,[],[f36630,f29610])).
fof(f29610,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',X18)))) ) | $spl146),
  inference(resolution,[],[f28802,f305])).
fof(f37694,plain,(
  $false | ($spl146 | $spl358)),
  inference(subsumption_resolution,[],[f37667,f317])).
fof(f37667,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl358)),
  inference(superposition,[],[f36630,f28808])).
fof(f37693,plain,(
  $false | ($spl146 | $spl358)),
  inference(subsumption_resolution,[],[f37666,f317])).
fof(f37666,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl358)),
  inference(superposition,[],[f36630,f28615])).
fof(f28615,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X18)))) ) | $spl146),
  inference(resolution,[],[f28485,f305])).
fof(f37692,plain,(
  $false | $spl358),
  inference(subsumption_resolution,[],[f37664,f317])).
fof(f37664,plain,(
  ~p(s(bool,'T_0')) | $spl358),
  inference(superposition,[],[f36630,f270])).
fof(f37690,plain,(
  $false | $spl358),
  inference(subsumption_resolution,[],[f37662,f317])).
fof(f37662,plain,(
  ~p(s(bool,'T_0')) | $spl358),
  inference(superposition,[],[f36630,f271])).
fof(f271,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f75])).
fof(f75,axiom,(
  ! [X8] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.numeral.numeral_distrib|split|26')).
fof(f37614,plain,(
  $false | $spl358),
  inference(resolution,[],[f36630,f272])).
fof(f37615,plain,(
  $false | ($spl146 | $spl358)),
  inference(resolution,[],[f36630,f29604])).
fof(f37597,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl362),
  inference(duplicate_literal_removal,[],[f37573])).
fof(f37573,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl362),
  inference(superposition,[],[f36646,f242])).
fof(f37598,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl362),
  inference(duplicate_literal_removal,[],[f37572])).
fof(f37572,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl362),
  inference(superposition,[],[f36646,f244])).
fof(f37511,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl391),
  inference(cnf_transformation,[],[f37511_D])).
fof(f37511_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl391),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl391])])).
fof(f37495,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f37403,f242])).
fof(f37494,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f37403,f244])).
fof(f37420,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl389),
  inference(cnf_transformation,[],[f37420_D])).
fof(f37420_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl389),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl389])])).
fof(f37407,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f36959,f242])).
fof(f37406,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl146 | $spl171)),
  inference(superposition,[],[f36959,f244])).
fof(f37363,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl385),
  inference(cnf_transformation,[],[f37363_D])).
fof(f37363_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl385),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl385])])).
fof(f37318,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f1956,f255])).
fof(f37357,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl381),
  inference(cnf_transformation,[],[f37357_D])).
fof(f37357_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl381),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl381])])).
fof(f37359,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl383),
  inference(cnf_transformation,[],[f37359_D])).
fof(f37359_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl383),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl383])])).
fof(f37355,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f37354,f255])).
fof(f37354,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f37309,f248])).
fof(f37309,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f1956,f255])).
fof(f37349,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl379),
  inference(cnf_transformation,[],[f37349_D])).
fof(f37349_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl379),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl379])])).
fof(f37351,plain,(
  ( ! [X32] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl61),
  inference(forward_demodulation,[],[f37350,f256])).
fof(f37350,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl61),
  inference(forward_demodulation,[],[f37302,f3337])).
fof(f37346,plain,(
  ( ! [X31] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl61),
  inference(forward_demodulation,[],[f37345,f256])).
fof(f37345,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl61),
  inference(forward_demodulation,[],[f37301,f3337])).
fof(f37037,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl372),
  inference(cnf_transformation,[],[f37037_D])).
fof(f37037_D,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl372),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl372])])).
fof(f37039,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl375),
  inference(cnf_transformation,[],[f37039_D])).
fof(f37039_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl375),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl375])])).
fof(f37036,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl143 | $spl146)),
  inference(forward_demodulation,[],[f36976,f257])).
fof(f36976,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f1706,f33313])).
fof(f33313,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32753,f297])).
fof(f32753,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32272,f262])).
fof(f32272,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',sK2)))) | ($spl143 | $spl146)),
  inference(subsumption_resolution,[],[f32204,f320])).
fof(f32204,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',sK2)))) | ($spl143 | $spl146)),
  inference(superposition,[],[f25991,f29610])).
fof(f37033,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl368),
  inference(cnf_transformation,[],[f37033_D])).
fof(f37033_D,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl368),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl368])])).
fof(f37035,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl371),
  inference(cnf_transformation,[],[f37035_D])).
fof(f37035_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl371),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl371])])).
fof(f37032,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl143 | $spl146)),
  inference(forward_demodulation,[],[f36975,f257])).
fof(f36975,plain,(
  ( ! [X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',X5) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | ($spl143 | $spl146)),
  inference(superposition,[],[f1706,f32706])).
fof(f32706,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl143 | $spl146)),
  inference(resolution,[],[f32364,f297])).
fof(f36753,plain,(
  $false | ($spl146 | $spl366)),
  inference(subsumption_resolution,[],[f36729,f317])).
fof(f36729,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl366)),
  inference(superposition,[],[f36648,f29610])).
fof(f36752,plain,(
  $false | ($spl146 | $spl366)),
  inference(subsumption_resolution,[],[f36728,f317])).
fof(f36728,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl366)),
  inference(superposition,[],[f36648,f28808])).
fof(f36751,plain,(
  $false | ($spl146 | $spl366)),
  inference(subsumption_resolution,[],[f36727,f317])).
fof(f36727,plain,(
  ~p(s(bool,'T_0')) | ($spl146 | $spl366)),
  inference(superposition,[],[f36648,f28615])).
fof(f36750,plain,(
  $false | $spl366),
  inference(subsumption_resolution,[],[f36724,f317])).
fof(f36724,plain,(
  ~p(s(bool,'T_0')) | $spl366),
  inference(superposition,[],[f36648,f270])).
fof(f36748,plain,(
  $false | $spl366),
  inference(subsumption_resolution,[],[f36722,f317])).
fof(f36722,plain,(
  ~p(s(bool,'T_0')) | $spl366),
  inference(superposition,[],[f36648,f271])).
fof(f36678,plain,(
  $false | $spl366),
  inference(resolution,[],[f36648,f272])).
fof(f36679,plain,(
  $false | ($spl146 | $spl366)),
  inference(resolution,[],[f36648,f29604])).
fof(f36647,plain,(
  ( ! [X55] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl364),
  inference(cnf_transformation,[],[f36647_D])).
fof(f36647_D,plain,(
  ( ! [X55] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) <=> ~$spl364),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl364])])).
fof(f36566,plain,(
  ( ! [X57,X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) ) | $spl146),
  inference(superposition,[],[f10768,f243])).
fof(f36565,plain,(
  ( ! [X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl146),
  inference(superposition,[],[f10768,f245])).
fof(f36645,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl360),
  inference(cnf_transformation,[],[f36645_D])).
fof(f36645_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl360),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl360])])).
fof(f36646,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X51))))) ) | $spl362),
  inference(cnf_transformation,[],[f36646_D])).
fof(f36646_D,plain,(
  ( ! [X52,X51] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X51))))) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f36564,plain,(
  ( ! [X54,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num',X53)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl146),
  inference(superposition,[],[f10768,f242])).
fof(f36563,plain,(
  ( ! [X52,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X51)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl146),
  inference(superposition,[],[f10768,f244])).
fof(f36629,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl356),
  inference(cnf_transformation,[],[f36629_D])).
fof(f36629_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl356])])).
fof(f36544,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))) ) | $spl146),
  inference(superposition,[],[f10768,f242])).
fof(f36543,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl146),
  inference(superposition,[],[f10768,f244])).
fof(f36628,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) | $spl354),
  inference(cnf_transformation,[],[f36628_D])).
fof(f36628_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f36493,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))))) ) | $spl146),
  inference(resolution,[],[f10768,f9361])).
fof(f36627,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) | $spl352),
  inference(cnf_transformation,[],[f36627_D])).
fof(f36627_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl352),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl352])])).
fof(f36492,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) | $spl146),
  inference(resolution,[],[f10768,f9368])).
fof(f35892,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | $spl349),
  inference(cnf_transformation,[],[f35892_D])).
fof(f35892_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) <=> ~$spl349),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl349])])).
fof(f35893,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))))))))) ) | $spl350),
  inference(cnf_transformation,[],[f35893_D])).
fof(f35893_D,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))))))))) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f35894,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))))) ) | $spl8),
  inference(forward_demodulation,[],[f35800,f248])).
fof(f35800,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))) ) | $spl8),
  inference(superposition,[],[f17384,f242])).
fof(f17384,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))))))) ) | $spl8),
  inference(forward_demodulation,[],[f17351,f248])).
fof(f17351,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))))))))) ) | $spl8),
  inference(superposition,[],[f15443,f234])).
fof(f35890,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))))))))) ) | $spl8),
  inference(forward_demodulation,[],[f35799,f248])).
fof(f35799,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) ) | $spl8),
  inference(superposition,[],[f17384,f244])).
fof(f35793,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X19))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))) ) | $spl8),
  inference(superposition,[],[f17384,f242])).
fof(f35792,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) ) | $spl8),
  inference(superposition,[],[f17384,f244])).
fof(f35651,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl341),
  inference(cnf_transformation,[],[f35651_D])).
fof(f35651_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl341),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl341])])).
fof(f35653,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl343),
  inference(cnf_transformation,[],[f35653_D])).
fof(f35653_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl343),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl343])])).
fof(f35620,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.|48|_0'))) | $spl99),
  inference(superposition,[],[f8989,f255])).
fof(f34934,plain,(
  ( ! [X72,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X72),X73)))))))) ) | $spl338),
  inference(cnf_transformation,[],[f34934_D])).
fof(f34934_D,plain,(
  ( ! [X72,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X72),X73)))))))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f1327,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X29),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))) ) | $spl64),
  inference(cnf_transformation,[],[f1327_D])).
fof(f1327_D,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X29),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f34936,plain,(
  ( ! [X76,X74,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X74),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X75),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X75),X76))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))) ) | $spl8),
  inference(subsumption_resolution,[],[f34935,f320])).
fof(f34935,plain,(
  ( ! [X76,X74,X75] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X74),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X75),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X75),X76))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))) ) | $spl8),
  inference(forward_demodulation,[],[f34889,f270])).
fof(f34889,plain,(
  ( ! [X76,X74,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X74),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X75),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X75),X76))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X75),X76)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X74)))) ) | $spl8),
  inference(superposition,[],[f17338,f242])).
fof(f34933,plain,(
  ( ! [X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X71),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X72),X73))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71)))) ) | $spl8),
  inference(subsumption_resolution,[],[f34932,f320])).
fof(f34932,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,'T_0')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X71),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X72),X73))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71)))) ) | $spl8),
  inference(forward_demodulation,[],[f34888,f270])).
fof(f34888,plain,(
  ( ! [X72,X71,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X71),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X72),X73))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X72),X73)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71)))) ) | $spl8),
  inference(superposition,[],[f17338,f244])).
fof(f33113,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl334),
  inference(cnf_transformation,[],[f33113_D])).
fof(f33113_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f33115,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl337),
  inference(cnf_transformation,[],[f33115_D])).
fof(f33115_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl337),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl337])])).
fof(f33058,plain,(
  ( ! [X8] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) )),
  inference(superposition,[],[f1691,f242])).
fof(f1691,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f339,f248])).
fof(f33057,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f1691,f244])).
fof(f33110,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl331),
  inference(cnf_transformation,[],[f33110_D])).
fof(f33110_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl331),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl331])])).
fof(f33112,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl333),
  inference(cnf_transformation,[],[f33112_D])).
fof(f33112_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl333),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl333])])).
fof(f33056,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f1691,f255])).
fof(f33108,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl328),
  inference(cnf_transformation,[],[f33108_D])).
fof(f33108_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f33080,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl323),
  inference(cnf_transformation,[],[f33080_D])).
fof(f33080_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl323),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl323])])).
fof(f33052,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) )),
  inference(superposition,[],[f1691,f243])).
fof(f33051,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(superposition,[],[f1691,f245])).
fof(f33103,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl325),
  inference(cnf_transformation,[],[f33103_D])).
fof(f33103_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl325),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl325])])).
fof(f33105,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl327),
  inference(cnf_transformation,[],[f33105_D])).
fof(f33105_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl327),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl327])])).
fof(f33101,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f33100,f255])).
fof(f33100,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f33048,f248])).
fof(f33048,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f1691,f255])).
fof(f33078,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl320),
  inference(cnf_transformation,[],[f33078_D])).
fof(f33078_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f33081,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl208),
  inference(forward_demodulation,[],[f33023,f14846])).
fof(f33023,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f1691,f242])).
fof(f33077,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl208),
  inference(forward_demodulation,[],[f33022,f14846])).
fof(f33022,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f1691,f244])).
fof(f30322,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl318),
  inference(cnf_transformation,[],[f30322_D])).
fof(f30322_D,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f30312,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl317),
  inference(cnf_transformation,[],[f30312_D])).
fof(f30312_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl317),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl317])])).
fof(f30283,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl8),
  inference(superposition,[],[f17997,f243])).
fof(f17997,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl8),
  inference(superposition,[],[f17973,f229])).
fof(f17973,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl8),
  inference(forward_demodulation,[],[f17972,f257])).
fof(f17972,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))) ) | $spl8),
  inference(forward_demodulation,[],[f343,f360])).
fof(f343,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) )),
  inference(superposition,[],[f225,f228])).
fof(f30282,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53)) ) | $spl8),
  inference(superposition,[],[f17997,f245])).
fof(f30310,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl314),
  inference(cnf_transformation,[],[f30310_D])).
fof(f30310_D,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f30267,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | ($spl8 | $spl146)),
  inference(superposition,[],[f17997,f6183])).
fof(f29289,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl310),
  inference(cnf_transformation,[],[f29289_D])).
fof(f29289_D,plain,(
  ( ! [X12] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f29291,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl313),
  inference(cnf_transformation,[],[f29291_D])).
fof(f29291_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl313),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl313])])).
fof(f29258,plain,(
  ( ! [X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X12) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl8),
  inference(superposition,[],[f17418,f255])).
fof(f17418,plain,(
  ( ! [X35,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X35) != s('type.num.num',X36)) ) | $spl8),
  inference(superposition,[],[f15449,f229])).
fof(f15449,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(superposition,[],[f15402,f228])).
fof(f29287,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl307),
  inference(cnf_transformation,[],[f29287_D])).
fof(f29287_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl307),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl307])])).
fof(f29288,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl308),
  inference(cnf_transformation,[],[f29288_D])).
fof(f29288_D,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f29285,plain,(
  ( ! [X66] : (s('type.num.num',X66) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f29284,f255])).
fof(f29284,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(forward_demodulation,[],[f29250,f248])).
fof(f29250,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X66))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X66) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(superposition,[],[f17418,f255])).
fof(f29281,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl304),
  inference(cnf_transformation,[],[f29281_D])).
fof(f29281_D,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f29271,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl303),
  inference(cnf_transformation,[],[f29271_D])).
fof(f29271_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl303),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl303])])).
fof(f29245,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl8),
  inference(superposition,[],[f17418,f243])).
fof(f29244,plain,(
  ( ! [X54,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X54) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X53)) ) | $spl8),
  inference(superposition,[],[f17418,f245])).
fof(f29269,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | $spl300),
  inference(cnf_transformation,[],[f29269_D])).
fof(f29269_D,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f29229,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | ($spl8 | $spl146)),
  inference(superposition,[],[f17418,f6183])).
fof(f27977,plain,(
  ( ! [X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))))) | s('type.num.num',X13) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl8),
  inference(superposition,[],[f17358,f255])).
fof(f28018,plain,(
  ( ! [X68] : (s('type.num.num',X68) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68)))))) ) | $spl8),
  inference(forward_demodulation,[],[f28017,f255])).
fof(f28017,plain,(
  ( ! [X68] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(forward_demodulation,[],[f27968,f248])).
fof(f27968,plain,(
  ( ! [X68] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))))) | s('type.num.num',X68) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl8),
  inference(superposition,[],[f17358,f255])).
fof(f27963,plain,(
  ( ! [X57,X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s('type.num.num',X58) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X57)) ) | $spl8),
  inference(superposition,[],[f17358,f243])).
fof(f27962,plain,(
  ( ! [X56,X55] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))))) | s('type.num.num',X56) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X55)) ) | $spl8),
  inference(superposition,[],[f17358,f245])).
fof(f27945,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X14),X15)))))) ) | ($spl8 | $spl146)),
  inference(superposition,[],[f17358,f6183])).
fof(f26334,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl280),
  inference(cnf_transformation,[],[f26334_D])).
fof(f26334_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f26824,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl287),
  inference(cnf_transformation,[],[f26824_D])).
fof(f26824_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl287),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl287])])).
fof(f26786,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl53),
  inference(superposition,[],[f934,f242])).
fof(f934,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl53),
  inference(superposition,[],[f921,f228])).
fof(f26785,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl53),
  inference(superposition,[],[f934,f244])).
fof(f9036,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl163),
  inference(cnf_transformation,[],[f9036_D])).
fof(f9036_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl163),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl163])])).
fof(f26691,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl285),
  inference(cnf_transformation,[],[f26691_D])).
fof(f26691_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl285),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl285])])).
fof(f26689,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl45),
  inference(forward_demodulation,[],[f26688,f255])).
fof(f26688,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl45),
  inference(forward_demodulation,[],[f26654,f248])).
fof(f26654,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl45),
  inference(superposition,[],[f922,f255])).
fof(f26336,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl283),
  inference(cnf_transformation,[],[f26336_D])).
fof(f26336_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl283),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl283])])).
fof(f26297,plain,(
  ( ! [X1] : (s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl233),
  inference(superposition,[],[f16575,f242])).
fof(f16575,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl233),
  inference(superposition,[],[f14958,f228])).
fof(f26296,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl233),
  inference(superposition,[],[f16575,f244])).
fof(f25291,plain,(
  ( ! [X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(superposition,[],[f17386,f243])).
fof(f17386,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X30)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f17353,f248])).
fof(f17353,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X30)))))))) ) | $spl8),
  inference(superposition,[],[f15443,f250])).
fof(f25290,plain,(
  ( ! [X33] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(superposition,[],[f17386,f245])).
fof(f25269,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl8),
  inference(superposition,[],[f17386,f242])).
fof(f25268,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f17386,f244])).
fof(f25207,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl277),
  inference(cnf_transformation,[],[f25207_D])).
fof(f25207_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl277),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl277])])).
fof(f2027,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | $spl117),
  inference(cnf_transformation,[],[f2027_D])).
fof(f2027_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) <=> ~$spl117),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl117])])).
fof(f25195,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl265),
  inference(superposition,[],[f25140,f242])).
fof(f25194,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl265),
  inference(superposition,[],[f25140,f244])).
fof(f25162,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | ($spl8 | $spl208)),
  inference(forward_demodulation,[],[f25161,f14846])).
fof(f25161,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25160,f251])).
fof(f25160,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25159,f239])).
fof(f25159,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25158,f248])).
fof(f25158,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25157,f236])).
fof(f25157,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25156,f255])).
fof(f25156,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(forward_demodulation,[],[f25080,f239])).
fof(f25080,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl8),
  inference(superposition,[],[f17385,f255])).
fof(f17385,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl8),
  inference(forward_demodulation,[],[f17352,f248])).
fof(f17352,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl8),
  inference(superposition,[],[f15443,f249])).
fof(f25146,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(forward_demodulation,[],[f25075,f239])).
fof(f25075,plain,(
  ( ! [X34] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X34)) ) | $spl8),
  inference(superposition,[],[f17385,f243])).
fof(f25142,plain,(
  ( ! [X33] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(forward_demodulation,[],[f25074,f239])).
fof(f25074,plain,(
  ( ! [X33] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X33)) ) | $spl8),
  inference(superposition,[],[f17385,f245])).
fof(f25140,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl265),
  inference(cnf_transformation,[],[f25140_D])).
fof(f25140_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl265),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl265])])).
fof(f25141,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl266),
  inference(cnf_transformation,[],[f25141_D])).
fof(f25141_D,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f25073,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl8),
  inference(superposition,[],[f17385,f242])).
fof(f25072,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl8),
  inference(superposition,[],[f17385,f244])).
fof(f25053,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl8),
  inference(superposition,[],[f17385,f242])).
fof(f25052,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(superposition,[],[f17385,f244])).
fof(f24963,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl258),
  inference(cnf_transformation,[],[f24963_D])).
fof(f24963_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f2821,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl135),
  inference(cnf_transformation,[],[f2821_D])).
fof(f2821_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl135),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl135])])).
fof(f24926,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl29),
  inference(superposition,[],[f889,f242])).
fof(f889,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl29),
  inference(superposition,[],[f430,f248])).
fof(f430,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl29),
  inference(superposition,[],[f399,f244])).
fof(f24925,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl29),
  inference(superposition,[],[f889,f244])).
fof(f24429,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl257),
  inference(cnf_transformation,[],[f24429_D])).
fof(f24429_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl257),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl257])])).
fof(f24410,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl29),
  inference(duplicate_literal_removal,[],[f24386])).
fof(f24386,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl29),
  inference(superposition,[],[f865,f242])).
fof(f865,plain,(
  ( ! [X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')))) ) | $spl29),
  inference(superposition,[],[f430,f254])).
fof(f24411,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl29),
  inference(duplicate_literal_removal,[],[f24385])).
fof(f24385,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl29),
  inference(superposition,[],[f865,f244])).
fof(f20519,plain,(
  $false | ($spl171 | $spl208 | $spl252)),
  inference(trivial_inequality_removal,[],[f20513])).
fof(f20513,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ($spl171 | $spl208 | $spl252)),
  inference(superposition,[],[f20476,f14846])).
fof(f20476,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl171 | $spl252)),
  inference(subsumption_resolution,[],[f19344,f11088])).
fof(f11088,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) | $spl171),
  inference(superposition,[],[f10955,f244])).
fof(f19344,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl252),
  inference(cnf_transformation,[],[f19344_D])).
fof(f19344_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f19345,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl254),
  inference(cnf_transformation,[],[f19345_D])).
fof(f19345_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f19283,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))) ) | $spl146),
  inference(superposition,[],[f10764,f242])).
fof(f19282,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl146),
  inference(superposition,[],[f10764,f244])).
fof(f2333,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl123),
  inference(cnf_transformation,[],[f2333_D])).
fof(f2333_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f2334,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl124),
  inference(cnf_transformation,[],[f2334_D])).
fof(f2334_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f18009,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(superposition,[],[f17973,f242])).
fof(f18008,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl8),
  inference(superposition,[],[f17973,f244])).
fof(f17551,plain,(
  $false | $spl226),
  inference(subsumption_resolution,[],[f17532,f317])).
fof(f17532,plain,(
  ~p(s(bool,'T_0')) | $spl226),
  inference(superposition,[],[f14938,f270])).
fof(f17550,plain,(
  $false | $spl226),
  inference(subsumption_resolution,[],[f17530,f317])).
fof(f17530,plain,(
  ~p(s(bool,'T_0')) | $spl226),
  inference(superposition,[],[f14938,f271])).
fof(f17486,plain,(
  $false | $spl226),
  inference(resolution,[],[f14938,f272])).
fof(f14945,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl230),
  inference(cnf_transformation,[],[f14945_D])).
fof(f14945_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f381,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl25),
  inference(cnf_transformation,[],[f381_D])).
fof(f381_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f974,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(forward_demodulation,[],[f951,f257])).
fof(f951,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(superposition,[],[f377,f309])).
fof(f14197,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14196,f257])).
fof(f14196,plain,(
  ( ! [X31] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14179,f981])).
fof(f981,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl33),
  inference(resolution,[],[f487,f297])).
fof(f14179,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(duplicate_literal_removal,[],[f14156])).
fof(f14156,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl21),
  inference(superposition,[],[f956,f244])).
fof(f956,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0)))) ) | $spl21),
  inference(superposition,[],[f377,f244])).
fof(f14199,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14198,f257])).
fof(f14198,plain,(
  ( ! [X32] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14178,f981])).
fof(f14178,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl21),
  inference(duplicate_literal_removal,[],[f14157])).
fof(f14157,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl21),
  inference(superposition,[],[f956,f242])).
fof(f14836,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14835,f257])).
fof(f14835,plain,(
  ( ! [X32] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14811,f981])).
fof(f14811,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl21),
  inference(trivial_inequality_removal,[],[f14791])).
fof(f14791,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl21),
  inference(superposition,[],[f960,f242])).
fof(f960,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X2))),s('type.num.num',sK2),s('type.num.num',X2)))) ) | $spl21),
  inference(superposition,[],[f377,f228])).
fof(f14834,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14833,f257])).
fof(f14833,plain,(
  ( ! [X31] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | ($spl21 | $spl33)),
  inference(forward_demodulation,[],[f14812,f981])).
fof(f14812,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl21),
  inference(trivial_inequality_removal,[],[f14790])).
fof(f14790,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl21),
  inference(superposition,[],[f960,f244])).
fof(f486,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl32),
  inference(cnf_transformation,[],[f486_D])).
fof(f486_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f968,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(forward_demodulation,[],[f944,f257])).
fof(f944,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(superposition,[],[f377,f297])).
fof(f969,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(forward_demodulation,[],[f946,f257])).
fof(f946,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(superposition,[],[f377,f301])).
fof(f970,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(forward_demodulation,[],[f947,f257])).
fof(f947,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(superposition,[],[f377,f303])).
fof(f487,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl33),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f362,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl11),
  inference(cnf_transformation,[],[f362_D])).
fof(f362_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f971,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(forward_demodulation,[],[f948,f256])).
fof(f948,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(superposition,[],[f377,f305])).
fof(f972,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(forward_demodulation,[],[f949,f256])).
fof(f949,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl21),
  inference(superposition,[],[f377,f307])).
fof(f307,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.list.LENGTH_TAKE_EQ','thm.bool.EQ_CLAUSES|split|0')).
fof(f16123,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl244),
  inference(cnf_transformation,[],[f16123_D])).
fof(f16123_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f973,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(forward_demodulation,[],[f950,f256])).
fof(f950,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(superposition,[],[f377,f309])).
fof(f12025,plain,(
  ( ! [X11] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl54),
  inference(forward_demodulation,[],[f12018,f257])).
fof(f12018,plain,(
  ( ! [X11] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11))) ) | $spl54),
  inference(duplicate_literal_removal,[],[f11958])).
fof(f11958,plain,(
  ( ! [X11] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X11)) | p(s(bool,X11))) ) | $spl54),
  inference(superposition,[],[f966,f303])).
fof(f12027,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl54),
  inference(forward_demodulation,[],[f12026,f257])).
fof(f12026,plain,(
  ( ! [X15] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X15))) ) | $spl54),
  inference(subsumption_resolution,[],[f11962,f304])).
fof(f11962,plain,(
  ( ! [X15] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X15)) | s(bool,'T_0') = s(bool,X15)) ) | $spl54),
  inference(superposition,[],[f966,f309])).
fof(f14926,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | $spl224),
  inference(cnf_transformation,[],[f14926_D])).
fof(f14926_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f12057,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | ($spl33 | $spl54)),
  inference(forward_demodulation,[],[f11993,f256])).
fof(f11993,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | ($spl33 | $spl54)),
  inference(superposition,[],[f966,f1020])).
fof(f1020,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2))) | $spl33),
  inference(resolution,[],[f976,f305])).
fof(f976,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | $spl33),
  inference(resolution,[],[f487,f261])).
fof(f12059,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl54 | $spl141)),
  inference(forward_demodulation,[],[f11995,f256])).
fof(f11995,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl54 | $spl141)),
  inference(superposition,[],[f966,f4114])).
fof(f4114,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl141),
  inference(resolution,[],[f4074,f305])).
fof(f4074,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl141),
  inference(resolution,[],[f4067,f261])).
fof(f12023,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl54),
  inference(forward_demodulation,[],[f12020,f257])).
fof(f12020,plain,(
  ( ! [X8] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8))) ) | $spl54),
  inference(duplicate_literal_removal,[],[f11955])).
fof(f11955,plain,(
  ( ! [X8] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X8)) | p(s(bool,X8))) ) | $spl54),
  inference(superposition,[],[f966,f297])).
fof(f12024,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl54),
  inference(forward_demodulation,[],[f12019,f257])).
fof(f12019,plain,(
  ( ! [X10] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10))) ) | $spl54),
  inference(duplicate_literal_removal,[],[f11957])).
fof(f11957,plain,(
  ( ! [X10] : (s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X10)) | p(s(bool,X10))) ) | $spl54),
  inference(superposition,[],[f966,f301])).
fof(f16194,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl249),
  inference(cnf_transformation,[],[f16194_D])).
fof(f16194_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl249),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl249])])).
fof(f16203,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl251),
  inference(cnf_transformation,[],[f16203_D])).
fof(f16203_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl251),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl251])])).
fof(f16063,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl20 | $spl24 | $spl49)),
  inference(superposition,[],[f3642,f15923])).
fof(f15923,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl20 | $spl24)),
  inference(forward_demodulation,[],[f376,f380])).
fof(f380,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl24),
  inference(cnf_transformation,[],[f380_D])).
fof(f380_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f376,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl20),
  inference(cnf_transformation,[],[f376_D])).
fof(f376_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f3642,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl49),
  inference(superposition,[],[f917,f229])).
fof(f14847,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl209),
  inference(cnf_transformation,[],[f14847_D])).
fof(f14847_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl209),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl209])])).
fof(f16041,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl20 | $spl24 | $spl29)),
  inference(superposition,[],[f430,f15923])).
fof(f16125,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl246),
  inference(cnf_transformation,[],[f16125_D])).
fof(f16125_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f15934,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl20 | $spl24)),
  inference(superposition,[],[f15923,f309])).
fof(f16117,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,X2))) ) | $spl242),
  inference(cnf_transformation,[],[f16117_D])).
fof(f16117_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,X2))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f15927,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl20 | $spl24)),
  inference(superposition,[],[f15923,f233])).
fof(f15926,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2))) ) | ($spl20 | $spl24)),
  inference(superposition,[],[f15923,f233])).
fof(f16116,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) | $spl240),
  inference(cnf_transformation,[],[f16116_D])).
fof(f16116_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f15925,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X1))) ) | ($spl20 | $spl24)),
  inference(superposition,[],[f15923,f230])).
fof(f15924,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | ($spl20 | $spl24)),
  inference(superposition,[],[f15923,f230])).
fof(f379,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl23),
  inference(cnf_transformation,[],[f379_D])).
fof(f379_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f15275,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))),
  inference(superposition,[],[f225,f242])).
fof(f15274,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))),
  inference(superposition,[],[f225,f244])).
fof(f365,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl12),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f15287,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f15265,f257])).
fof(f15265,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f225,f309])).
fof(f346,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl0),
  inference(cnf_transformation,[],[f346_D])).
fof(f346_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f15283,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f15261,f257])).
fof(f15261,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f303])).
fof(f15282,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f15260,f257])).
fof(f15260,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f301])).
fof(f15281,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f15258,f257])).
fof(f15258,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f297])).
fof(f15279,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl238),
  inference(cnf_transformation,[],[f15279_D])).
fof(f15279_D,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f15280,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f15257,f347])).
fof(f15257,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(superposition,[],[f225,f233])).
fof(f15278,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f15256,f347])).
fof(f15256,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,X2))) )),
  inference(superposition,[],[f225,f233])).
fof(f15228,plain,(
  $false | ($spl138 | $spl146)),
  inference(equality_resolution,[],[f14943])).
fof(f14943,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | ($spl138 | $spl146)),
  inference(subsumption_resolution,[],[f4065,f9457])).
fof(f12013,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X0)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl54),
  inference(superposition,[],[f966,f318])).
fof(f7272,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl156),
  inference(cnf_transformation,[],[f7272_D])).
fof(f7272_D,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f12984,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f12922,f257])).
fof(f12922,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X32))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl2),
  inference(superposition,[],[f1204,f268])).
fof(f7276,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl158),
  inference(cnf_transformation,[],[f7276_D])).
fof(f7276_D,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f12991,plain,(
  ( ! [X41] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f12928,f257])).
fof(f12928,plain,(
  ( ! [X41] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl2),
  inference(superposition,[],[f1204,f269])).
fof(f14977,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl234),
  inference(cnf_transformation,[],[f14977_D])).
fof(f14977_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f12966,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'F_0') | $spl2),
  inference(superposition,[],[f1204,f257])).
fof(f14958,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl233),
  inference(cnf_transformation,[],[f14958_D])).
fof(f14958_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl233),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl233])])).
fof(f14028,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ($spl85 | $spl143)),
  inference(superposition,[],[f13963,f318])).
fof(f13963,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ($spl85 | $spl143)),
  inference(forward_demodulation,[],[f13962,f257])).
fof(f13962,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl85 | $spl143)),
  inference(forward_demodulation,[],[f1738,f13783])).
fof(f10175,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl2 | $spl33)),
  inference(forward_demodulation,[],[f10118,f257])).
fof(f10118,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl2 | $spl33)),
  inference(superposition,[],[f347,f981])).
fof(f1216,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl2 | $spl33)),
  inference(forward_demodulation,[],[f1177,f257])).
fof(f1177,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl2 | $spl33)),
  inference(superposition,[],[f347,f981])).
fof(f10762,plain,(
  ( ! [X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | ($spl1 | $spl146)),
  inference(resolution,[],[f9361,f453])).
fof(f453,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) ) | $spl1),
  inference(resolution,[],[f345,f258])).
fof(f14935,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl1 | $spl146)),
  inference(subsumption_resolution,[],[f4002,f9430])).
fof(f4002,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1),
  inference(superposition,[],[f453,f244])).
fof(f14934,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl1 | $spl146)),
  inference(subsumption_resolution,[],[f4003,f9430])).
fof(f4003,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl1),
  inference(superposition,[],[f453,f242])).
fof(f14933,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl141 | $spl146)),
  inference(subsumption_resolution,[],[f9280,f9430])).
fof(f9280,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl141),
  inference(superposition,[],[f4076,f244])).
fof(f4076,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl141),
  inference(resolution,[],[f4067,f258])).
fof(f14932,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl141 | $spl146)),
  inference(subsumption_resolution,[],[f9281,f9430])).
fof(f9281,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl141),
  inference(superposition,[],[f4076,f242])).
fof(f14927,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl141 | $spl146)),
  inference(subsumption_resolution,[],[f10676,f9430])).
fof(f10676,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl141),
  inference(superposition,[],[f9265,f244])).
fof(f9265,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))))) ) | $spl141),
  inference(resolution,[],[f4076,f261])).
fof(f14924,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl141 | $spl146)),
  inference(subsumption_resolution,[],[f10677,f9430])).
fof(f10677,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl141),
  inference(superposition,[],[f9265,f242])).
fof(f14917,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,X1))) ) | $spl222),
  inference(cnf_transformation,[],[f14917_D])).
fof(f14917_D,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | p(s(bool,X1))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f1188,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f347,f244])).
fof(f1189,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f347,f242])).
fof(f10141,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f347,f244])).
fof(f10142,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f347,f242])).
fof(f14887,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl218),
  inference(cnf_transformation,[],[f14887_D])).
fof(f14887_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f12004,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl54),
  inference(superposition,[],[f966,f244])).
fof(f12005,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl54),
  inference(superposition,[],[f966,f242])).
fof(f14886,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X2))) ) | $spl216),
  inference(cnf_transformation,[],[f14886_D])).
fof(f14886_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X2))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f12014,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X1)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl54),
  inference(superposition,[],[f966,f244])).
fof(f12015,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl54),
  inference(superposition,[],[f966,f242])).
fof(f14881,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl214),
  inference(cnf_transformation,[],[f14881_D])).
fof(f14881_D,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f12961,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f1204,f244])).
fof(f12962,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) ) | $spl2),
  inference(superposition,[],[f1204,f242])).
fof(f14878,plain,(
  $false | ($spl20 | $spl25 | $spl33)),
  inference(subsumption_resolution,[],[f14877,f381])).
fof(f14877,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ($spl20 | $spl33)),
  inference(forward_demodulation,[],[f14876,f257])).
fof(f14876,plain,(
  s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ($spl20 | $spl33)),
  inference(forward_demodulation,[],[f376,f981])).
fof(f14869,plain,(
  $false | $spl209),
  inference(trivial_inequality_removal,[],[f14860])).
fof(f14860,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl209),
  inference(superposition,[],[f14847,f245])).
fof(f14868,plain,(
  $false | $spl209),
  inference(trivial_inequality_removal,[],[f14861])).
fof(f14861,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl209),
  inference(superposition,[],[f14847,f243])).
fof(f14849,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl211),
  inference(cnf_transformation,[],[f14849_D])).
fof(f14849_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl211),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl211])])).
fof(f14851,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl213),
  inference(cnf_transformation,[],[f14851_D])).
fof(f14851_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl213])])).
fof(f14805,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl21),
  inference(superposition,[],[f960,f255])).
fof(f14845,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0)))) ) | $spl206),
  inference(cnf_transformation,[],[f14845_D])).
fof(f14845_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0)))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f14801,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK2),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl21),
  inference(superposition,[],[f960,f243])).
fof(f14800,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl21),
  inference(superposition,[],[f960,f245])).
fof(f14524,plain,(
  $false | $spl126),
  inference(equality_resolution,[],[f14484])).
fof(f14484,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl126),
  inference(trivial_inequality_removal,[],[f14475])).
fof(f14475,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl126),
  inference(superposition,[],[f2644,f243])).
fof(f14440,plain,(
  ( ! [X52] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X52))))) ) | $spl204),
  inference(cnf_transformation,[],[f14440_D])).
fof(f14440_D,plain,(
  ( ! [X52] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X52))))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f14423,plain,(
  ( ! [X54,X53] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X54)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl146),
  inference(trivial_inequality_removal,[],[f14413])).
fof(f14413,plain,(
  ( ! [X54,X53] : (s('type.num.num',X53) != s('type.num.num',X53) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X54)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl146),
  inference(superposition,[],[f9457,f242])).
fof(f14424,plain,(
  ( ! [X52,X51] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X52)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl146),
  inference(trivial_inequality_removal,[],[f14412])).
fof(f14412,plain,(
  ( ! [X52,X51] : (s('type.num.num',X51) != s('type.num.num',X51) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X52)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl146),
  inference(superposition,[],[f9457,f244])).
fof(f4519,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl142),
  inference(cnf_transformation,[],[f4519_D])).
fof(f4519_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f13268,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl187),
  inference(cnf_transformation,[],[f13268_D])).
fof(f13268_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl187),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl187])])).
fof(f13270,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(forward_demodulation,[],[f13245,f257])).
fof(f13245,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(superposition,[],[f1738,f303])).
fof(f13276,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl188),
  inference(cnf_transformation,[],[f13276_D])).
fof(f13276_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f13274,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl85),
  inference(forward_demodulation,[],[f13249,f257])).
fof(f13249,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl85),
  inference(superposition,[],[f1738,f309])).
fof(f13266,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(forward_demodulation,[],[f13242,f257])).
fof(f13242,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(superposition,[],[f1738,f297])).
fof(f13269,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(forward_demodulation,[],[f13244,f257])).
fof(f13244,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl85),
  inference(superposition,[],[f1738,f301])).
fof(f13759,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl195),
  inference(cnf_transformation,[],[f13759_D])).
fof(f13759_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl195),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl195])])).
fof(f13771,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl203),
  inference(cnf_transformation,[],[f13771_D])).
fof(f13771_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl203),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl203])])).
fof(f13650,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl84 | $spl99)),
  inference(superposition,[],[f8876,f1737])).
fof(f1737,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl84),
  inference(cnf_transformation,[],[f1737_D])).
fof(f1737_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f13764,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl199),
  inference(cnf_transformation,[],[f13764_D])).
fof(f13764_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl199),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl199])])).
fof(f13766,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))))) | $spl201),
  inference(cnf_transformation,[],[f13766_D])).
fof(f13766_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))))) <=> ~$spl201),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl201])])).
fof(f13634,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl49 | $spl84)),
  inference(superposition,[],[f3642,f1737])).
fof(f13623,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl29 | $spl84)),
  inference(superposition,[],[f1570,f1737])).
fof(f1570,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl29),
  inference(trivial_inequality_removal,[],[f1562])).
fof(f1562,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl29),
  inference(superposition,[],[f895,f243])).
fof(f895,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl29),
  inference(trivial_inequality_removal,[],[f886])).
fof(f886,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl29),
  inference(superposition,[],[f430,f243])).
fof(f13267,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl186),
  inference(cnf_transformation,[],[f13267_D])).
fof(f13267_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f13690,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl84),
  inference(forward_demodulation,[],[f13488,f257])).
fof(f13488,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl84),
  inference(superposition,[],[f1737,f309])).
fof(f13683,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(forward_demodulation,[],[f13484,f257])).
fof(f13484,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(superposition,[],[f1737,f303])).
fof(f13682,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(forward_demodulation,[],[f13483,f257])).
fof(f13483,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(superposition,[],[f1737,f301])).
fof(f13681,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(forward_demodulation,[],[f13481,f257])).
fof(f13481,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl84),
  inference(superposition,[],[f1737,f297])).
fof(f4520,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl143),
  inference(cnf_transformation,[],[f4520_D])).
fof(f4520_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl143),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl143])])).
fof(f13680,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X2))) ) | $spl192),
  inference(cnf_transformation,[],[f13680_D])).
fof(f13680_D,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X2))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f13480,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl84),
  inference(superposition,[],[f1737,f233])).
fof(f13479,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,X2))) ) | $spl84),
  inference(superposition,[],[f1737,f233])).
fof(f13679,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0))) ) | $spl190),
  inference(cnf_transformation,[],[f13679_D])).
fof(f13679_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f13478,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,X1))) ) | $spl84),
  inference(superposition,[],[f1737,f230])).
fof(f13477,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) = s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl84),
  inference(superposition,[],[f1737,f230])).
fof(f13265,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X2))) ) | $spl184),
  inference(cnf_transformation,[],[f13265_D])).
fof(f13265_D,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X2))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f13241,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl85),
  inference(superposition,[],[f1738,f233])).
fof(f13240,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,X2))) ) | $spl85),
  inference(superposition,[],[f1738,f233])).
fof(f13264,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0))) ) | $spl182),
  inference(cnf_transformation,[],[f13264_D])).
fof(f13264_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f13239,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,X1))) ) | $spl85),
  inference(superposition,[],[f1738,f230])).
fof(f13238,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,X0)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) ) | $spl85),
  inference(superposition,[],[f1738,f230])).
fof(f11806,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl181),
  inference(cnf_transformation,[],[f11806_D])).
fof(f11806_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl181),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl181])])).
fof(f11791,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl25),
  inference(trivial_inequality_removal,[],[f11781])).
fof(f11781,plain,(
  ( ! [X32] : (s('type.num.num',X32) != s('type.num.num',X32) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl25),
  inference(superposition,[],[f639,f242])).
fof(f639,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl25),
  inference(superposition,[],[f381,f228])).
fof(f11792,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl25),
  inference(trivial_inequality_removal,[],[f11780])).
fof(f11780,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num',X31) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl25),
  inference(superposition,[],[f639,f244])).
fof(f11331,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl179),
  inference(cnf_transformation,[],[f11331_D])).
fof(f11331_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl179])])).
fof(f11315,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl66),
  inference(trivial_inequality_removal,[],[f11305])).
fof(f11305,plain,(
  ( ! [X32] : (s('type.num.num',X32) != s('type.num.num',X32) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl66),
  inference(superposition,[],[f1328,f242])).
fof(f11316,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl66),
  inference(trivial_inequality_removal,[],[f11304])).
fof(f11304,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num',X31) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl66),
  inference(superposition,[],[f1328,f244])).
fof(f11171,plain,(
  $false | ($spl146 | $spl174)),
  inference(subsumption_resolution,[],[f11154,f311])).
fof(f11154,plain,(
  p(s(bool,'F_0')) | ($spl146 | $spl174)),
  inference(superposition,[],[f10962,f6244])).
fof(f6244,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) ) | $spl146),
  inference(resolution,[],[f6164,f297])).
fof(f6164,plain,(
  ( ! [X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))))) ) | $spl146),
  inference(forward_demodulation,[],[f6163,f5600])).
fof(f6163,plain,(
  ( ! [X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))) ) | $spl146),
  inference(forward_demodulation,[],[f6162,f267])).
fof(f6162,plain,(
  ( ! [X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))) ) | $spl146),
  inference(subsumption_resolution,[],[f6059,f272])).
fof(f6059,plain,(
  ( ! [X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X53))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))))))) ) | $spl146),
  inference(superposition,[],[f260,f5600])).
fof(f11112,plain,(
  $false | ($spl171 | $spl174)),
  inference(resolution,[],[f10962,f10955])).
fof(f11070,plain,(
  $false | $spl170),
  inference(subsumption_resolution,[],[f11069,f317])).
fof(f11069,plain,(
  ~p(s(bool,'T_0')) | $spl170),
  inference(forward_demodulation,[],[f11039,f270])).
fof(f11039,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))) | $spl170),
  inference(resolution,[],[f10956,f262])).
fof(f10957,plain,(
  ( ! [X52,X51] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X52)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl172),
  inference(cnf_transformation,[],[f10957_D])).
fof(f10957_D,plain,(
  ( ! [X52,X51] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X52)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f10956,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl170),
  inference(cnf_transformation,[],[f10956_D])).
fof(f10956_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f10883,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))) ) | $spl146),
  inference(superposition,[],[f9361,f242])).
fof(f10882,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl146),
  inference(superposition,[],[f9361,f244])).
fof(f10964,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl176),
  inference(cnf_transformation,[],[f10964_D])).
fof(f10964_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f10961,plain,(
  ( ! [X67] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67))))) ) | $spl146),
  inference(forward_demodulation,[],[f10960,f255])).
fof(f10960,plain,(
  ( ! [X67] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X67)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(forward_demodulation,[],[f10815,f267])).
fof(f10815,plain,(
  ( ! [X67] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X67)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl146),
  inference(superposition,[],[f9361,f255])).
fof(f10809,plain,(
  ( ! [X54,X53] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X54)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))) ) | $spl146),
  inference(superposition,[],[f9361,f242])).
fof(f10808,plain,(
  ( ! [X52,X51] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X52)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))) ) | $spl146),
  inference(superposition,[],[f9361,f244])).
fof(f919,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(cnf_transformation,[],[f919_D])).
fof(f919_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f10445,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl169),
  inference(cnf_transformation,[],[f10445_D])).
fof(f10445_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl169),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl169])])).
fof(f10423,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl49),
  inference(superposition,[],[f3642,f255])).
fof(f9792,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | $spl164),
  inference(cnf_transformation,[],[f9792_D])).
fof(f9792_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f9793,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl166),
  inference(cnf_transformation,[],[f9793_D])).
fof(f9793_D,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',sK2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f9733,plain,(
  ( ! [X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))) ) | $spl10),
  inference(superposition,[],[f5663,f242])).
fof(f5663,plain,(
  ( ! [X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',sK2)))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl10),
  inference(superposition,[],[f318,f361])).
fof(f361,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl10),
  inference(cnf_transformation,[],[f361_D])).
fof(f361_D,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f9732,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))) ) | $spl10),
  inference(superposition,[],[f5663,f244])).
fof(f2657,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl129),
  inference(cnf_transformation,[],[f2657_D])).
fof(f2657_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f9034,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl99),
  inference(forward_demodulation,[],[f9006,f248])).
fof(f9006,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl99),
  inference(superposition,[],[f8876,f255])).
fof(f7277,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl160),
  inference(cnf_transformation,[],[f7277_D])).
fof(f7277_D,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f7265,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl155),
  inference(cnf_transformation,[],[f7265_D])).
fof(f7265_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f7224,plain,(
  ( ! [X42] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl2 | $spl10 | $spl146)),
  inference(superposition,[],[f5941,f6517])).
fof(f6517,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl146),
  inference(resolution,[],[f6176,f297])).
fof(f5941,plain,(
  ( ! [X19] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X19),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl2 | $spl10)),
  inference(subsumption_resolution,[],[f5881,f311])).
fof(f5881,plain,(
  ( ! [X19] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X19),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X19)) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f5644,f309])).
fof(f5644,plain,(
  ( ! [X0] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X0))) ) | ($spl2 | $spl10)),
  inference(backward_demodulation,[],[f361,f347])).
fof(f7223,plain,(
  ( ! [X41] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f5941,f269])).
fof(f7219,plain,(
  ( ! [X35] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f5941,f268])).
fof(f7256,plain,(
  ( ! [X15] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl2 | $spl10)),
  inference(duplicate_literal_removal,[],[f7201])).
fof(f7201,plain,(
  ( ! [X15] : (s('type.num.num',sK2) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | ($spl2 | $spl10)),
  inference(superposition,[],[f5941,f309])).
fof(f6812,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl149),
  inference(cnf_transformation,[],[f6812_D])).
fof(f6812_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f6813,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) ) | $spl150),
  inference(cnf_transformation,[],[f6813_D])).
fof(f6813_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f6759,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl146),
  inference(superposition,[],[f6512,f242])).
fof(f6512,plain,(
  ( ! [X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) ) | $spl146),
  inference(resolution,[],[f6176,f261])).
fof(f6758,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl146),
  inference(superposition,[],[f6512,f244])).
fof(f5631,plain,(
  $false | $spl147),
  inference(subsumption_resolution,[],[f5630,f272])).
fof(f5630,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl147),
  inference(trivial_inequality_removal,[],[f5625])).
fof(f5625,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | $spl147),
  inference(superposition,[],[f5601,f318])).
fof(f1328,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) | $spl66),
  inference(cnf_transformation,[],[f1328_D])).
fof(f1328_D,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f5601,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | $spl147),
  inference(cnf_transformation,[],[f5601_D])).
fof(f5601_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) <=> ~$spl147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl147])])).
fof(f5575,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl11),
  inference(superposition,[],[f511,f243])).
fof(f511,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl11),
  inference(superposition,[],[f362,f228])).
fof(f5574,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl11),
  inference(superposition,[],[f511,f245])).
fof(f4625,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl145),
  inference(cnf_transformation,[],[f4625_D])).
fof(f4625_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl145),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl145])])).
fof(f1808,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl97),
  inference(cnf_transformation,[],[f1808_D])).
fof(f1808_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f4606,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl141),
  inference(superposition,[],[f4526,f242])).
fof(f4526,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | $spl141),
  inference(resolution,[],[f4073,f262])).
fof(f4073,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) | $spl141),
  inference(resolution,[],[f4067,f264])).
fof(f4605,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl141),
  inference(superposition,[],[f4526,f244])).
fof(f1736,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl83),
  inference(cnf_transformation,[],[f1736_D])).
fof(f1736_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl83),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl83])])).
fof(f4518,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(forward_demodulation,[],[f4517,f255])).
fof(f4517,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(forward_demodulation,[],[f4474,f248])).
fof(f4474,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(superposition,[],[f468,f255])).
fof(f468,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))))) ) | $spl1),
  inference(superposition,[],[f345,f228])).
fof(f4065,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl138),
  inference(cnf_transformation,[],[f4065_D])).
fof(f4065_D,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f4023,plain,(
  ( ! [X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl1),
  inference(superposition,[],[f453,f243])).
fof(f4022,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl1),
  inference(superposition,[],[f453,f245])).
fof(f917,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl49),
  inference(cnf_transformation,[],[f917_D])).
fof(f917_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f3635,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl137),
  inference(cnf_transformation,[],[f3635_D])).
fof(f3635_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl137),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl137])])).
fof(f3633,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl15),
  inference(forward_demodulation,[],[f3632,f255])).
fof(f3632,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl15),
  inference(forward_demodulation,[],[f3597,f248])).
fof(f3597,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl15),
  inference(superposition,[],[f384,f255])).
fof(f384,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl15),
  inference(superposition,[],[f369,f228])).
fof(f2819,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl133),
  inference(cnf_transformation,[],[f2819_D])).
fof(f2819_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f2811,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl131),
  inference(superposition,[],[f2735,f242])).
fof(f2735,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl131),
  inference(superposition,[],[f2719,f248])).
fof(f2719,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl131),
  inference(trivial_inequality_removal,[],[f2716])).
fof(f2716,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl131),
  inference(superposition,[],[f2659,f242])).
fof(f2810,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl131),
  inference(superposition,[],[f2735,f244])).
fof(f2659,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl131),
  inference(cnf_transformation,[],[f2659_D])).
fof(f2659_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl131),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl131])])).
fof(f2655,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl29),
  inference(forward_demodulation,[],[f2624,f248])).
fof(f2624,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl29),
  inference(superposition,[],[f1570,f255])).
fof(f1857,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl99),
  inference(cnf_transformation,[],[f1857_D])).
fof(f1857_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl99),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl99])])).
fof(f2645,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl29),
  inference(subsumption_resolution,[],[f2600,f242])).
fof(f2600,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl29),
  inference(superposition,[],[f1570,f242])).
fof(f2643,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl29),
  inference(subsumption_resolution,[],[f2599,f242])).
fof(f2599,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl29),
  inference(superposition,[],[f1570,f244])).
fof(f2308,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl1),
  inference(superposition,[],[f2181,f242])).
fof(f2181,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) ) | $spl1),
  inference(forward_demodulation,[],[f2180,f257])).
fof(f2180,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))) ) | $spl1),
  inference(forward_demodulation,[],[f343,f456])).
fof(f2307,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl1),
  inference(superposition,[],[f2181,f244])).
fof(f2323,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl118),
  inference(cnf_transformation,[],[f2323_D])).
fof(f2323_D,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f2325,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | $spl121),
  inference(cnf_transformation,[],[f2325_D])).
fof(f2325_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) <=> ~$spl121),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl121])])).
fof(f2295,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl1),
  inference(superposition,[],[f2181,f243])).
fof(f2294,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl1),
  inference(superposition,[],[f2181,f245])).
fof(f2025,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl115),
  inference(cnf_transformation,[],[f2025_D])).
fof(f2025_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl115),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl115])])).
fof(f2017,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl107),
  inference(superposition,[],[f1974,f242])).
fof(f2016,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl107),
  inference(superposition,[],[f1974,f244])).
fof(f1981,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl111),
  inference(cnf_transformation,[],[f1981_D])).
fof(f1981_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl111])])).
fof(f1983,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | $spl113),
  inference(cnf_transformation,[],[f1983_D])).
fof(f1983_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f1937,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f335,f255])).
fof(f1974,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl107),
  inference(cnf_transformation,[],[f1974_D])).
fof(f1974_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f1976,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl109),
  inference(cnf_transformation,[],[f1976_D])).
fof(f1976_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl109),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl109])])).
fof(f1972,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f1971,f267])).
fof(f1971,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f1970,f255])).
fof(f1970,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f1929,f248])).
fof(f1929,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f335,f255])).
fof(f1964,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl102),
  inference(cnf_transformation,[],[f1964_D])).
fof(f1964_D,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f1966,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | $spl105),
  inference(cnf_transformation,[],[f1966_D])).
fof(f1966_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) <=> ~$spl105),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl105])])).
fof(f1925,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) )),
  inference(superposition,[],[f335,f243])).
fof(f1924,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) )),
  inference(superposition,[],[f335,f245])).
fof(f1745,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl91),
  inference(cnf_transformation,[],[f1745_D])).
fof(f1745_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) <=> ~$spl91),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl91])])).
fof(f1871,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl101),
  inference(cnf_transformation,[],[f1871_D])).
fof(f1871_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl101),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl101])])).
fof(f1867,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl81),
  inference(superposition,[],[f1730,f242])).
fof(f1866,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl81),
  inference(superposition,[],[f1730,f244])).
fof(f1851,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl77),
  inference(superposition,[],[f1711,f242])).
fof(f1850,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) | $spl77),
  inference(superposition,[],[f1711,f244])).
fof(f1806,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl95),
  inference(cnf_transformation,[],[f1806_D])).
fof(f1806_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl95),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl95])])).
fof(f1787,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl33),
  inference(superposition,[],[f1577,f242])).
fof(f1577,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl33),
  inference(resolution,[],[f975,f262])).
fof(f975,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2)))))) | $spl33),
  inference(resolution,[],[f487,f264])).
fof(f1786,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl33),
  inference(superposition,[],[f1577,f244])).
fof(f1746,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X6))),s('type.num.num',sK2),s('type.num.num',X6)))) ) | $spl92),
  inference(cnf_transformation,[],[f1746_D])).
fof(f1746_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X6))),s('type.num.num',sK2),s('type.num.num',X6)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f1705,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X7))),s('type.num.num',sK2),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) )),
  inference(superposition,[],[f339,f242])).
fof(f1704,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X6))),s('type.num.num',sK2),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))) )),
  inference(superposition,[],[f339,f244])).
fof(f1741,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X7))),s('type.num.num',sK2),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl86),
  inference(cnf_transformation,[],[f1741_D])).
fof(f1741_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X7))),s('type.num.num',sK2),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f1743,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl89),
  inference(cnf_transformation,[],[f1743_D])).
fof(f1743_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl89),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl89])])).
fof(f1693,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X8))),s('type.num.num',sK2),s('type.num.num',X8))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) )),
  inference(superposition,[],[f339,f242])).
fof(f1692,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X7))),s('type.num.num',sK2),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f339,f244])).
fof(f1738,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl85),
  inference(cnf_transformation,[],[f1738_D])).
fof(f1738_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl85),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl85])])).
fof(f1734,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f1733,f255])).
fof(f1733,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(forward_demodulation,[],[f1684,f248])).
fof(f1684,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f339,f255])).
fof(f1728,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl78),
  inference(cnf_transformation,[],[f1728_D])).
fof(f1728_D,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f1730,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl81),
  inference(cnf_transformation,[],[f1730_D])).
fof(f1730_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f1680,plain,(
  ( ! [X32] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) )),
  inference(superposition,[],[f339,f243])).
fof(f1679,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) )),
  inference(superposition,[],[f339,f245])).
fof(f1709,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl74),
  inference(cnf_transformation,[],[f1709_D])).
fof(f1709_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f1711,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl77),
  inference(cnf_transformation,[],[f1711_D])).
fof(f1711_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f1662,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X1))),s('type.num.num',sK2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f339,f242])).
fof(f1661,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f339,f244])).
fof(f1530,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl73),
  inference(cnf_transformation,[],[f1530_D])).
fof(f1530_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f1505,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl1),
  inference(superposition,[],[f797,f243])).
fof(f797,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))))))) ) | $spl1),
  inference(superposition,[],[f759,f228])).
fof(f1504,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl1),
  inference(superposition,[],[f797,f245])).
fof(f1330,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | $spl69),
  inference(cnf_transformation,[],[f1330_D])).
fof(f1330_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f1297,plain,(
  ( ! [X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl1),
  inference(superposition,[],[f791,f243])).
fof(f791,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X0),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1),
  inference(superposition,[],[f759,f228])).
fof(f1296,plain,(
  ( ! [X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl1),
  inference(superposition,[],[f791,f245])).
fof(f1326,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | $spl63),
  inference(cnf_transformation,[],[f1326_D])).
fof(f1326_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f1295,plain,(
  ( ! [X30] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X30),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30)))) ) | $spl1),
  inference(superposition,[],[f791,f242])).
fof(f1294,plain,(
  ( ! [X29] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',X29),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))) ) | $spl1),
  inference(superposition,[],[f791,f244])).
fof(f1311,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl58),
  inference(cnf_transformation,[],[f1311_D])).
fof(f1311_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f1277,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl1),
  inference(superposition,[],[f791,f242])).
fof(f1276,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1),
  inference(superposition,[],[f791,f244])).
fof(f967,plain,(
  ( ! [X2] : (s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X2))) ) | $spl56),
  inference(cnf_transformation,[],[f967_D])).
fof(f967_D,plain,(
  ( ! [X2] : (s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X2))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f943,plain,(
  ( ! [X3] : (s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl21),
  inference(superposition,[],[f377,f233])).
fof(f942,plain,(
  ( ! [X2] : (s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X2))) ) | $spl21),
  inference(superposition,[],[f377,f233])).
fof(f966,plain,(
  ( ! [X0] : (s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0))) ) | $spl54),
  inference(cnf_transformation,[],[f966_D])).
fof(f966_D,plain,(
  ( ! [X0] : (s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f941,plain,(
  ( ! [X1] : (s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X1))) ) | $spl21),
  inference(superposition,[],[f377,f230])).
fof(f940,plain,(
  ( ! [X0] : (s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,X0)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl21),
  inference(superposition,[],[f377,f230])).
fof(f921,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl53),
  inference(cnf_transformation,[],[f921_D])).
fof(f921_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f890,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl29),
  inference(superposition,[],[f430,f255])).
fof(f915,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl47),
  inference(cnf_transformation,[],[f915_D])).
fof(f915_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f913,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl29),
  inference(forward_demodulation,[],[f882,f248])).
fof(f882,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl29),
  inference(superposition,[],[f430,f255])).
fof(f910,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl45),
  inference(cnf_transformation,[],[f910_D])).
fof(f910_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f911,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl29),
  inference(subsumption_resolution,[],[f878,f243])).
fof(f878,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl29),
  inference(superposition,[],[f430,f243])).
fof(f907,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl29),
  inference(subsumption_resolution,[],[f877,f243])).
fof(f877,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl29),
  inference(superposition,[],[f430,f245])).
fof(f687,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl38),
  inference(cnf_transformation,[],[f687_D])).
fof(f687_D,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f689,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl41),
  inference(cnf_transformation,[],[f689_D])).
fof(f689_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f666,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X32)) ) | $spl15),
  inference(superposition,[],[f388,f243])).
fof(f665,plain,(
  ( ! [X31] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X31)) ) | $spl15),
  inference(superposition,[],[f388,f245])).
fof(f523,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | $spl37),
  inference(cnf_transformation,[],[f523_D])).
fof(f523_D,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f513,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))),s('type.num.num',sK2)))) | $spl11),
  inference(superposition,[],[f362,f319])).
fof(f375,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl19),
  inference(cnf_transformation,[],[f375_D])).
fof(f375_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f467,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(superposition,[],[f345,f242])).
fof(f466,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl1),
  inference(superposition,[],[f345,f244])).
fof(f399,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl29),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f423,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))))) | $spl27),
  inference(superposition,[],[f397,f242])).
fof(f422,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))))) | $spl27),
  inference(superposition,[],[f397,f244])).
fof(f397,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl27),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f391,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl15),
  inference(superposition,[],[f369,f242])).
fof(f390,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))))) | $spl15),
  inference(superposition,[],[f369,f244])).
fof(f342,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))),
  inference(superposition,[],[f225,f242])).
fof(f341,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))))),
  inference(superposition,[],[f225,f244])).
fof(f377,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl21),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f338,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f225,f242])).
fof(f337,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK2),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f225,f244])).
fof(f369,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) | $spl15),
  inference(cnf_transformation,[],[f369_D])).
fof(f369_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f371,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | $spl17),
  inference(cnf_transformation,[],[f371_D])).
fof(f371_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f373,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(forward_demodulation,[],[f372,f256])).
fof(f372,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(forward_demodulation,[],[f334,f270])).
fof(f334,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(superposition,[],[f225,f242])).
fof(f367,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(forward_demodulation,[],[f366,f256])).
fof(f366,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(forward_demodulation,[],[f333,f270])).
fof(f333,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK2)))),
  inference(superposition,[],[f225,f244])).
fof(f363,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f332,f257])).
fof(f332,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f225,f309])).
fof(f360,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | $spl8),
  inference(cnf_transformation,[],[f360_D])).
fof(f360_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f358,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f331,f256])).
fof(f331,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'T_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f225,f309])).
fof(f353,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f328,f257])).
fof(f328,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f303])).
fof(f352,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f327,f257])).
fof(f327,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f301])).
fof(f349,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(forward_demodulation,[],[f325,f257])).
fof(f325,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(superposition,[],[f225,f297])).
fof(f348,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X2))) ) | $spl4),
  inference(cnf_transformation,[],[f348_D])).
fof(f348_D,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X2))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f324,plain,(
  ( ! [X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X3),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,X3)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(superposition,[],[f225,f233])).
fof(f323,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X2),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | ~p(s(bool,X2))) )),
  inference(superposition,[],[f225,f233])).
fof(f347,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X0))) ) | $spl2),
  inference(cnf_transformation,[],[f347_D])).
fof(f347_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X0))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f322,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X1),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) | p(s(bool,X1))) )),
  inference(superposition,[],[f225,f230])).
fof(f321,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))))) != s('type.num.num','const.bool.COND_3'(s(bool,X0),s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))) | p(s(bool,X0)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))) )),
  inference(superposition,[],[f225,f230])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 2105
% Passive clauses: 33300
% Generated clauses: 158097
% Final active clauses: 1503
% Final passive clauses: 24247
% Input formulas: 108
% Initial clauses: 95
% 
% Selected by SInE selection: 60
% SInE iterations: 1
% 
% Duplicate literals: 1736
% Trivial inequalities: 3552
% Fw subsumption resolutions: 10044
% Fw demodulations: 33678
% Bw demodulations: 409
% 
% Simple tautologies: 1844
% Equational tautologies: 1
% Forward subsumptions: 77157
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 9074
% Forward superposition: 82519
% Backward superposition: 15062
% Equality resolution: 434
% 
% Split clauses: 498
% Split components: 996
% SAT solver clauses: 578
% SAT solver unit clauses: 32
% SAT solver binary clauses: 95
% 
% Sat splits: 498
% Sat splitting refutations: 73
% 
% Memory used [KB]: 46822
% Time elapsed: 3.031 s
% ------------------------------
% ------------------------------
% Success in time 14.773 s
