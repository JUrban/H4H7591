Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f117,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f115,f40,f62,f60,f107,f41,f63,f61])).
fof(f61,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl1),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f63,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl2),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f41,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f30])).
fof(f30,plain,(
  ? [X0] : ((p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <~> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ~! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.ODD_EVEN','thm.arithmetic.ODD_EVEN')).
fof(f107,plain,(
  $false | ($spl1 | $spl3)),
  inference(subsumption_resolution,[],[f103,f61])).
fof(f103,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl3),
  inference(resolution,[],[f51,f62])).
fof(f51,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) <=> ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.ODD_EVEN','thm.arithmetic.EVEN_ODD')).
fof(f60,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl0),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f62,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl3),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f40,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f31])).
fof(f115,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f112,f60])).
fof(f112,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl2),
  inference(resolution,[],[f63,f50])).
fof(f50,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f34])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 28
% Generated clauses: 76
% Final active clauses: 9
% Final passive clauses: 8
% Input formulas: 12
% Initial clauses: 19
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% Fw subsumption resolutions: 5
% Bw demodulations: 2
% 
% Simple tautologies: 7
% Equational tautologies: 3
% Forward subsumptions: 19
% 
% Binary resolution: 8
% Forward superposition: 16
% Backward superposition: 8
% Self superposition: 4
% Equality factoring: 2
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 16
% SAT solver unit clauses: 5
% SAT solver binary clauses: 9
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 639
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
