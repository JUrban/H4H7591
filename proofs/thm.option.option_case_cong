Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f6552,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6551,f28,f41,f39,f6507,f6530,f6514])).
fof(f6514,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK4) | $spl210),
  inference(cnf_transformation,[],[f6514_D])).
fof(f6514_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK4) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f6530,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK4) | $spl0),
  inference(backward_demodulation,[],[f38,f27])).
fof(f27,plain,(
  s('type.option.option'(sK0),sK4) = s('type.option.option'(sK0),sK5)),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  s('type.option.option'(sK0),sK4) = s('type.option.option'(sK0),sK5) & (s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK5) | s(sK1,sK2) = s(sK1,sK6)) & ! [X8] : (s('type.option.option'(sK0),sK5) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X8))) | s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,X8))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,X8)))) & s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK6),s(fun(sK0,sK1),sK7))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK5),s(sK1,sK2),s(fun(sK0,sK1),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f22])).
fof(f22,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.option.option'(X0),X4) = s('type.option.option'(X0),X5) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X5) | s(X1,X2) = s(X1,X6)) & ! [X8] : (s('type.option.option'(X0),X5) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X8))) | s(X1,happ(s(fun(X0,X1),X3),s(X0,X8))) = s(X1,happ(s(fun(X0,X1),X7),s(X0,X8)))) & s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X4),s(X1,X6),s(fun(X0,X1),X7))) != s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X5),s(X1,X2),s(fun(X0,X1),X3))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.option.option'(X0),X4) = s('type.option.option'(X0),X5) & (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X5) | s(X1,X2) = s(X1,X6)) & ! [X8] : (s('type.option.option'(X0),X5) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X8))) | s(X1,happ(s(fun(X0,X1),X3),s(X0,X8))) = s(X1,happ(s(fun(X0,X1),X7),s(X0,X8))))) & s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X4),s(X1,X6),s(fun(X0,X1),X7))) != s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X5),s(X1,X2),s(fun(X0,X1),X3))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.option.option'(X0),X4) = s('type.option.option'(X0),X5) & (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X5) => s(X1,X2) = s(X1,X6)) & ! [X8] : (s('type.option.option'(X0),X5) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X8))) => s(X1,happ(s(fun(X0,X1),X3),s(X0,X8))) = s(X1,happ(s(fun(X0,X1),X7),s(X0,X8))))) => s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X4),s(X1,X6),s(fun(X0,X1),X7))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X5),s(X1,X2),s(fun(X0,X1),X3))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : ((s('type.option.option'(X0),X4) = s('type.option.option'(X0),X5) & (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X5) => s(X1,X2) = s(X1,X6)) & ! [X8] : (s('type.option.option'(X0),X5) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X8))) => s(X1,happ(s(fun(X0,X1),X3),s(X0,X8))) = s(X1,happ(s(fun(X0,X1),X7),s(X0,X8))))) => s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X4),s(X1,X6),s(fun(X0,X1),X7))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X5),s(X1,X2),s(fun(X0,X1),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13] : ((s('type.option.option'(X6),X10) = s('type.option.option'(X6),X11) & (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X11) => s(X7,X8) = s(X7,X12)) & ! [X14] : (s('type.option.option'(X6),X11) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))) => s(X7,happ(s(fun(X6,X7),X9),s(X6,X14))) = s(X7,happ(s(fun(X6,X7),X13),s(X6,X14))))) => s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X10),s(X7,X12),s(fun(X6,X7),X13))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X11),s(X7,X8),s(fun(X6,X7),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13] : ((s('type.option.option'(X6),X10) = s('type.option.option'(X6),X11) & (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X11) => s(X7,X8) = s(X7,X12)) & ! [X14] : (s('type.option.option'(X6),X11) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))) => s(X7,happ(s(fun(X6,X7),X9),s(X6,X14))) = s(X7,happ(s(fun(X6,X7),X13),s(X6,X14))))) => s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X10),s(X7,X12),s(fun(X6,X7),X13))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X11),s(X7,X8),s(fun(X6,X7),X9))))),
  file('thm.option.option_case_cong','thm.option.option_case_cong')).
fof(f38,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK5) | $spl0),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK5) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f6507,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f6506,f5913])).
fof(f5913,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK4,sK0)))) != s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | $spl1),
  inference(backward_demodulation,[],[f5891,f5887])).
fof(f5887,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK5,sK0)))) != s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | $spl1),
  inference(forward_demodulation,[],[f5716,f5690])).
fof(f5690,plain,(
  ( ! [X90,X91,X89] : (s(X89,happ(s(fun(sK0,X89),X90),s(sK0,sK8(sK5,sK0)))) = s(X89,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(X89,X91),s(fun(sK0,X89),X90)))) ) | $spl1),
  inference(subsumption_resolution,[],[f5391,f39])).
fof(f5391,plain,(
  ( ! [X90,X91,X89] : (s(X89,happ(s(fun(sK0,X89),X90),s(sK0,sK8(sK5,sK0)))) = s(X89,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(X89,X91),s(fun(sK0,X89),X90))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK5)) )),
  inference(superposition,[],[f277,f27])).
fof(f277,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X2,happ(s(fun(X0,X2),X3),s(X0,sK8(X1,X0)))) = s(X2,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(X2,X4),s(fun(X0,X2),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f37,f34])).
fof(f34,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK8(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK8(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f14])).
fof(f14,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X15] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X15) | ? [X14] : s('type.option.option'(X6),X15) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))))),
  file('thm.option.option_case_cong','thm.option.option_nchotomy')).
fof(f37,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7,X6] : ! [X14,X12,X13] : s(X7,happ(s(fun(X6,X7),X13),s(X6,X14))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))),s(X7,X12),s(fun(X6,X7),X13)))),
  file('thm.option.option_case_cong','thm.option.option_case_def|split|1')).
fof(f5716,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK2),s(fun(sK0,sK1),sK3))) | $spl1),
  inference(backward_demodulation,[],[f5690,f678])).
fof(f678,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK2),s(fun(sK0,sK1),sK3))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK6),s(fun(sK0,sK1),sK7)))),
  inference(forward_demodulation,[],[f30,f27])).
fof(f30,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK6),s(fun(sK0,sK1),sK7))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK5),s(sK1,sK2),s(fun(sK0,sK1),sK3)))),
  inference(cnf_transformation,[],[f24])).
fof(f5891,plain,(
  ( ! [X81,X79] : (s(X79,happ(s(fun(sK0,X79),X81),s(sK0,sK8(sK4,sK0)))) = s(X79,happ(s(fun(sK0,X79),X81),s(sK0,sK8(sK5,sK0))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5804,f42])).
fof(f42,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK4) | $spl1),
  inference(superposition,[],[f39,f27])).
fof(f5804,plain,(
  ( ! [X81,X79] : (s(X79,happ(s(fun(sK0,X79),X81),s(sK0,sK8(sK4,sK0)))) = s(X79,happ(s(fun(sK0,X79),X81),s(sK0,sK8(sK5,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK4)) ) | $spl1),
  inference(superposition,[],[f5690,f277])).
fof(f6506,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK4,sK0)))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | $spl1),
  inference(forward_demodulation,[],[f6505,f5891])).
fof(f6505,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK5,sK0)))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | $spl1),
  inference(subsumption_resolution,[],[f6504,f39])).
fof(f6504,plain,(
  s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK5,sK0)))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK5)),
  inference(trivial_inequality_removal,[],[f6497])).
fof(f6497,plain,(
  s('type.option.option'(sK0),sK4) != s('type.option.option'(sK0),sK4) | s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(sK5,sK0)))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(sK5,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK5)),
  inference(superposition,[],[f2462,f27])).
fof(f2462,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK4) != s('type.option.option'(sK0),X0) | s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK8(X0,sK0)))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,sK8(X0,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) )),
  inference(superposition,[],[f1940,f34])).
fof(f1940,plain,(
  ( ! [X8] : (s('type.option.option'(sK0),sK4) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X8))) | s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,X8))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,X8)))) )),
  inference(forward_demodulation,[],[f29,f27])).
fof(f29,plain,(
  ( ! [X8] : (s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,X8))) = s(sK1,happ(s(fun(sK0,sK1),sK7),s(sK0,X8))) | s('type.option.option'(sK0),sK5) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X8)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f39,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK5) | $spl1),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK5) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f41,plain,(
  s(sK1,sK2) = s(sK1,sK6) | $spl2),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  s(sK1,sK2) = s(sK1,sK6) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f28,plain,(
  s(sK1,sK2) = s(sK1,sK6) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK5)),
  inference(cnf_transformation,[],[f24])).
fof(f6551,plain,(
  $false | ($spl2 | $spl210)),
  inference(subsumption_resolution,[],[f6550,f35])).
fof(f35,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X12,X13] : s(X7,X12) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X7,X12),s(fun(X6,X7),X13)))),
  file('thm.option.option_case_cong','thm.option.option_case_def|split|0')).
fof(f6550,plain,(
  s(sK1,sK2) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK2),s(fun(sK0,sK1),sK3))) | ($spl2 | $spl210)),
  inference(forward_demodulation,[],[f6549,f35])).
fof(f6549,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK2),s(fun(sK0,sK1),sK3))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(sK1,sK2),s(fun(sK0,sK1),sK7))) | ($spl2 | $spl210)),
  inference(forward_demodulation,[],[f6548,f6514])).
fof(f6548,plain,(
  s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK2),s(fun(sK0,sK1),sK3))) != s(sK1,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK4),s(sK1,sK2),s(fun(sK0,sK1),sK7))) | $spl2),
  inference(forward_demodulation,[],[f678,f41])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 81
% Passive clauses: 815
% Generated clauses: 6281
% Final active clauses: 52
% Final passive clauses: 550
% Input formulas: 8
% Initial clauses: 11
% 
% Duplicate literals: 529
% Trivial inequalities: 87
% Fw subsumption resolutions: 329
% Fw demodulations: 364
% Bw demodulations: 13
% 
% Simple tautologies: 103
% Equational tautologies: 40
% Forward subsumptions: 3720
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 7
% Forward superposition: 2504
% Backward superposition: 2052
% Self superposition: 186
% Equality factoring: 99
% Equality resolution: 7
% 
% Split clauses: 194
% Split components: 389
% SAT solver clauses: 331
% SAT solver unit clauses: 10
% SAT solver binary clauses: 77
% SAT solver learnt clauses: 1
% 
% Sat splits: 194
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 325
% TWLsolver calls for satisfiability: 52
% 
% Memory used [KB]: 4605
% Time elapsed: 0.174 s
% ------------------------------
% ------------------------------
% Success in time 0.176 s
