Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.int_arith
% (76523)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1033
% Passive clauses: 5848
% Generated clauses: 29130
% Final active clauses: 889
% Final passive clauses: 4131
% Input formulas: 112
% Initial clauses: 287
% 
% Duplicate literals: 326
% Trivial inequalities: 54
% Fw subsumption resolutions: 2402
% Fw demodulations: 3518
% Bw demodulations: 141
% 
% Simple tautologies: 277
% Equational tautologies: 43
% Forward subsumptions: 16662
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 6349
% Factoring: 1307
% Forward superposition: 6289
% Backward superposition: 8128
% Self superposition: 61
% Equality factoring: 26
% Equality resolution: 14
% 
% Split clauses: 423
% Split components: 848
% SAT solver clauses: 661
% SAT solver unit clauses: 14
% SAT solver binary clauses: 89
% 
% Sat splits: 423
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 661
% TWLsolver calls for satisfiability: 439
% 
% Memory used [KB]: 17398
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.int_arith
% (76536)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 533
% Passive clauses: 2369
% Generated clauses: 22254
% Final active clauses: 457
% Final passive clauses: 1708
% Input formulas: 112
% Initial clauses: 287
% 
% Duplicate literals: 82
% Trivial inequalities: 58
% Fw subsumption resolutions: 718
% Fw demodulations: 6579
% Bw demodulations: 193
% Condensations: 41
% Global subsumptions: 24
% 
% Simple tautologies: 291
% Equational tautologies: 8
% Forward subsumptions: 9202
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 1383
% Factoring: 53
% Forward superposition: 5317
% Backward superposition: 4879
% Self superposition: 55
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 3192
% SAT solver unit clauses: 323
% SAT solver binary clauses: 88
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 47
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 3096
% TWLsolver calls for satisfiability: 2023
% 
% Memory used [KB]: 21108
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f84527,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f416,f724,f723,f415,f726,f722,f2687,f2699,f2688,f2702,f2694,f2703,f2695,f2706,f2704,f2696,f2708,f2697,f2712,f2710,f4992,f3712,f5003,f3606,f2701,f5005,f13270,f13267,f13271,f13273,f13391,f13388,f14997,f14998,f15021,f15019,f15047,f15171,f15172,f15195,f15193,f15221,f15223,f13393,f15190,f15225,f15189,f15226,f15187,f15228,f15185,f15230,f15184,f15231,f15181,f15234,f15180,f13394,f13392,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19290,f19241,f19292,f19244,f19294,f19247,f19296,f19250,f19298,f19253,f19300,f19256,f19302,f19259,f19304,f15224,f19262,f19622,f19623,f19625,f19629,f19631,f19633,f19635,f19637,f19639,f19641,f19643,f19645,f19647,f19649,f19651,f19653,f19655,f19657,f19659,f19661,f19663,f19665,f19667,f19669,f19671,f19673,f19675,f19677,f19679,f19681,f19683,f19687,f19689,f19691,f19693,f19695,f19697,f19699,f19701,f19703,f19705,f19707,f19709,f19711,f19715,f19718,f19720,f19722,f19724,f19726,f19728,f19730,f19732,f19734,f19736,f19738,f19740,f19742,f19744,f19746,f19748,f19750,f19752,f19754,f19756,f19758,f19760,f19762,f19764,f19766,f19768,f19770,f19772,f19774,f19776,f19778,f19780,f19782,f19784,f19786,f19788,f19790,f19792,f19794,f19796,f19798,f19800,f19802,f19804,f19806,f19808,f19810,f19812,f19814,f19816,f19818,f19822,f19826,f19830,f19850,f19852,f19854,f19856,f19858,f19860,f19862,f19864,f19866,f19868,f19870,f19872,f19874,f19876,f19878,f19880,f19882,f19884,f19886,f19888,f19890,f19891,f19892,f19893,f19895,f19897,f19899,f19901,f19903,f19905,f19907,f19909,f19911,f19913,f19915,f19917,f19919,f19921,f19923,f19925,f19927,f19929,f19931,f19933,f19935,f19937,f19939,f19941,f19943,f19945,f19947,f19949,f19951,f19953,f19955,f19957,f19959,f19961,f19963,f19965,f19967,f19969,f19971,f19973,f19975,f19976,f19977,f19978,f19980,f19982,f19984,f19986,f19988,f19990,f19992,f19994,f19996,f19998,f20000,f20002,f20004,f20006,f20008,f20010,f20012,f20014,f20016,f20018,f29744,f30120,f29745,f30121,f29746,f30122,f29747,f30123,f29748,f30124,f29749,f30125,f29750,f30126,f29751,f30127,f29756,f30130,f29757,f30131,f29758,f30132,f29759,f30133,f29760,f30134,f29761,f30135,f29762,f30136,f29763,f30137,f29799,f29808,f30144,f30139,f30163,f30164,f30165,f30166,f30167,f30168,f30169,f30170,f30171,f30172,f30173,f30174,f30175,f30176,f30177,f30119,f30178,f30179,f30180,f30181,f30182,f30183,f30184,f30185,f30186,f30187,f30188,f30189,f30190,f30191,f30192,f30193,f30129,f30194,f30199,f30201,f30203,f30143,f30141,f30212,f30213,f30217,f30218,f30140,f30409,f30465,f30975,f31355,f30976,f31356,f30977,f31357,f30978,f31358,f30979,f31359,f30980,f31360,f30981,f31361,f30982,f31362,f30987,f31365,f30988,f31366,f30989,f31367,f30990,f31368,f30991,f31369,f30992,f31370,f30993,f31371,f30994,f31372,f31030,f31039,f31379,f31374,f31398,f31399,f31400,f31401,f31402,f31403,f31404,f31405,f31406,f31407,f31408,f31409,f31410,f31411,f31412,f31354,f31413,f31414,f31415,f31416,f31417,f31418,f31419,f31420,f31421,f31422,f31423,f31424,f31425,f31426,f31427,f31428,f31364,f31429,f31434,f31436,f31438,f31378,f31376,f31447,f31448,f31452,f31453,f31375,f31640,f31700,f31732,f31740,f31697,f31701,f45844,f45845,f45846,f45847,f45886,f45848,f45885,f45883,f45887,f45888,f45851,f45882,f45880,f45922,f45878,f45924,f45877,f31702,f45926,f45869,f45927,f45868,f45928,f45866,f45930,f45865,f45931,f45864,f45932,f45863,f45933,f45862,f45934,f45861,f45935,f45860,f45936,f45859,f31703,f45937,f66220,f66229,f66221,f66222,f66223,f66233,f66226,f66224,f66232,f66227,f66230,f73005,f73008,f73026,f73024,f83403,f83510,f83505,f83725,f84526])).
fof(f84526,plain,(
  $false | ($spl0 | $spl2 | $spl18)),
  inference(subsumption_resolution,[],[f84525,f724])).
fof(f84525,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(sK15,sK14,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK13,sK12,sK11,sK10)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f84524,f35199])).
fof(f35199,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(backward_demodulation,[],[f35194,f5042])).
fof(f5042,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f734])).
fof(f734,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f454,f421])).
fof(f421,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f75])).
fof(f75,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|13')).
fof(f454,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X10] : s('type.integer.int',X10) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.integer.INT_DIV_|49|')).
fof(f5012,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl18),
  inference(backward_demodulation,[],[f2708,f420])).
fof(f420,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f77])).
fof(f77,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.prim_rec.PRE|split|0')).
fof(f35194,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(backward_demodulation,[],[f35193,f5015])).
fof(f5015,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f421])).
fof(f35193,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(subsumption_resolution,[],[f35164,f5433])).
fof(f5433,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3488])).
fof(f3488,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f446,f2731])).
fof(f2731,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2717,f732])).
fof(f732,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f452,f421])).
fof(f452,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT_RIGHT_|49|')).
fof(f2717,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(unit_resulting_resolution,[],[f732,f479])).
fof(f479,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f80])).
fof(f80,axiom,(
  ! [X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|18')).
fof(f446,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X13] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|14')).
fof(f35164,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5453,f5015])).
fof(f5453,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f3927])).
fof(f3927,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f565,f421])).
fof(f565,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f351])).
fof(f351,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f81])).
fof(f81,axiom,(
  ! [X13,X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) <=> s('type.num.num',X6) = s('type.num.num',X13))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|19')).
fof(f84524,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(sK15,sK14,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK13,sK12,sK11,sK10)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f83752,f35199])).
fof(f83752,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',sK13),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(sK15,sK14,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK13,sK12,sK11,sK10)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl18)),
  inference(unit_resulting_resolution,[],[f5013,f5014,f3239,f35314,f35195,f722,f5557])).
fof(f5557,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(forward_demodulation,[],[f5556,f5012])).
fof(f5556,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(forward_demodulation,[],[f5036,f5012])).
fof(f5036,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f697])).
fof(f697,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f411])).
fof(f411,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | ! [X7] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18])],[f410])).
fof(f410,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X8] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | ! [X7] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))))))),
  inference(rectify,[],[f409])).
fof(f409,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | ! [X7] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))))))),
  inference(flattening,[],[f408])).
fof(f408,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))) & ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | ! [X7] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4)))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))))))),
  inference(nnf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))))),
  inference(flattening,[],[f279])).
fof(f279,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))))),
  inference(ennf_transformation,[],[f244])).
fof(f244,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X4) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))))),
  inference(flattening,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X4) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) & ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6,X7,X8,X9,X23,X10,X11] : ((s('type.num.num',X23) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6))) & s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X23))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X23) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int',X8))),s('type.integer.int',X9)))))) <=> (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X23))),s('type.integer.int',X9)))) & ? [X12] : s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X23))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X23))))))))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.int_arith.gcdthm2')).
fof(f35195,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | $spl18),
  inference(backward_demodulation,[],[f35194,f5038])).
fof(f5038,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f727])).
fof(f727,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))))),
  inference(backward_demodulation,[],[f421,f412])).
fof(f412,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))))),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK10) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK11) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) | s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) | ! [X6] : s('type.integer.int',sK12) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15,sK16])],[f298])).
fof(f298,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ? [X7] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ! [X6] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(rectify,[],[f297])).
fof(f297,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ! [X6] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(flattening,[],[f296])).
fof(f296,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & ((p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | ! [X6] : s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))))))),
  inference(nnf_transformation,[],[f246])).
fof(f246,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <~> ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(flattening,[],[f245])).
fof(f245,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <~> ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(ennf_transformation,[],[f115])).
fof(f115,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) <=> ? [X6] : s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10,X11] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int',X8))),s('type.integer.int',X9)))))) <=> ? [X12] : s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10))),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10,X11] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) => (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int',X8))),s('type.integer.int',X9)))))) <=> ? [X12] : s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10))),s('type.integer.int',X9))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.int_arith.gcd2|49|_thm')).
fof(f35314,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))) | $spl18),
  inference(backward_demodulation,[],[f35194,f8689])).
fof(f8689,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))) | $spl18),
  inference(unit_resulting_resolution,[],[f5038,f5564])).
fof(f5564,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f5046,f5012])).
fof(f5046,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f744])).
fof(f744,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f743,f421])).
fof(f743,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f687,f421])).
fof(f687,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) )),
  inference(cnf_transformation,[],[f276])).
fof(f276,plain,(
  ! [X0,X1,X2,X3] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2,X3] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) => s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6,X13,X10,X11] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) => s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X6),s('type.num.num',X13))))),
  file('thm.int_arith.gcd2|49|_thm','thm.int_arith.gcd|49|thm')).
fof(f3239,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f3188,f728])).
fof(f728,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f423,f417])).
fof(f417,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.gcd2|49|_thm',aHL_TRUTH)).
fof(f423,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f300])).
fof(f300,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f116])).
fof(f116,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f41])).
fof(f41,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.int_arith.gcd2|49|_thm','thm.bool.NOT_CLAUSES|split|1')).
fof(f3188,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f563,f444])).
fof(f444,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f99])).
fof(f99,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|1')).
fof(f563,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f350])).
fof(f350,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f349])).
fof(f349,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X13] : (s('type.num.num',X6) = s('type.num.num',X13) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X13)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X6))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.EQ_LESS_EQ')).
fof(f5014,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK11) | $spl18),
  inference(backward_demodulation,[],[f5012,f414])).
fof(f414,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK11)),
  inference(cnf_transformation,[],[f299])).
fof(f5013,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK10) | $spl18),
  inference(backward_demodulation,[],[f5012,f413])).
fof(f413,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK10)),
  inference(cnf_transformation,[],[f299])).
fof(f83725,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f2710,f3239])).
fof(f83505,plain,(
  $false | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f726,f724])).
fof(f83510,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f83509])).
fof(f83509,plain,(
  s('type.integer.int',sK12) != s('type.integer.int',sK12) | ($spl2 | $spl4)),
  inference(superposition,[],[f724,f726])).
fof(f83403,plain,(
  $false | ($spl1 | $spl4 | $spl18 | $spl23)),
  inference(subsumption_resolution,[],[f83402,f728])).
fof(f83402,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl18 | $spl23)),
  inference(forward_demodulation,[],[f83354,f1208])).
fof(f1208,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13))))) | $spl1),
  inference(unit_resulting_resolution,[],[f723,f475])).
fof(f475,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f304])).
fof(f304,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.int_arith.gcd2|49|_thm','thm.bool.EQ_CLAUSES|split|2')).
fof(f83354,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) | ($spl4 | $spl18 | $spl23)),
  inference(unit_resulting_resolution,[],[f5013,f5014,f726,f35195,f35329])).
fof(f35329,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0))))))) ) | ($spl18 | $spl23)),
  inference(backward_demodulation,[],[f35194,f9427])).
fof(f9427,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0))))))) ) | ($spl18 | $spl23)),
  inference(subsumption_resolution,[],[f9426,f5564])).
fof(f9426,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0))))))) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9425,f5015])).
fof(f9425,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9424,f5015])).
fof(f9424,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | ($spl18 | $spl23)),
  inference(subsumption_resolution,[],[f9423,f5241])).
fof(f5241,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl18 | $spl23)),
  inference(backward_demodulation,[],[f5012,f2712])).
fof(f9423,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f9422,f5015])).
fof(f9422,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f9421,f5042])).
fof(f9421,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f9420,f5042])).
fof(f9420,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f9419,f5015])).
fof(f9419,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(subsumption_resolution,[],[f9418,f417])).
fof(f9418,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(forward_demodulation,[],[f9393,f5152])).
fof(f5152,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f2471])).
fof(f2471,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f733,f561])).
fof(f561,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f262])).
fof(f262,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f261])).
fof(f261,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f211])).
fof(f211,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X14,X15] : ((p(s(bool,X14)) => p(s(bool,X15))) => ((p(s(bool,X15)) => p(s(bool,X14))) => s(bool,X14) = s(bool,X15)))),
  file('thm.int_arith.gcd2|49|_thm','thm.bool.IMP_ANTISYM_AX')).
fof(f733,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0))))) )),
  inference(forward_demodulation,[],[f453,f421])).
fof(f453,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0] : p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X0))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X8] : p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8))))),
  file('thm.int_arith.gcd2|49|_thm','thm.integer.INT_DIVIDES_|49||split|0')).
fof(f9393,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X2) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))),s('type.integer.int',X3))),s('type.integer.int',X0)))))) | s('type.integer.int',X3) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X2))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl18),
  inference(superposition,[],[f5559,f5015])).
fof(f5559,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(forward_demodulation,[],[f5558,f5012])).
fof(f5558,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(forward_demodulation,[],[f5037,f5012])).
fof(f5037,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f698])).
fof(f698,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f411])).
fof(f73024,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK17(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK17(X2,X3,bool,bool))))) ) | $spl284),
  inference(cnf_transformation,[],[f73024_D])).
fof(f73024_D,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK17(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK17(X2,X3,bool,bool))))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f73026,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl287),
  inference(cnf_transformation,[],[f73026_D])).
fof(f73026_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl287),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl287])])).
fof(f73008,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK17(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK17(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f8631,f1282])).
fof(f1282,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f459,f459])).
fof(f459,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.gcd2|49|_thm',aHL_BOOL_CASES)).
fof(f8631,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK17(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK17(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f610,f459])).
fof(f610,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK17(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK17(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f371])).
fof(f371,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK17(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK17(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17])],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f229])).
fof(f229,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.int_arith.gcd2|49|_thm',aHL_EXT)).
fof(f73005,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK17(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK17(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f8631,f1282])).
fof(f66230,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl278),
  inference(cnf_transformation,[],[f66230_D])).
fof(f66230_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f66227,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK17(X0,X1,bool,bool))) ) | $spl274),
  inference(cnf_transformation,[],[f66227_D])).
fof(f66227_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK17(X0,X1,bool,bool))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f66232,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl281),
  inference(cnf_transformation,[],[f66232_D])).
fof(f66232_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl281),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl281])])).
fof(f66224,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK17(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f8630,f1282])).
fof(f8630,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK17(X0,X1,X2,bool))) )),
  inference(superposition,[],[f610,f459])).
fof(f66226,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl272),
  inference(cnf_transformation,[],[f66226_D])).
fof(f66226_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f66233,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl282),
  inference(cnf_transformation,[],[f66233_D])).
fof(f66233_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f66223,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK17(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f8630,f1282])).
fof(f66222,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK17(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f8630,f1282])).
fof(f66221,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK17(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f8630,f1282])).
fof(f66229,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl277),
  inference(cnf_transformation,[],[f66229_D])).
fof(f66229_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl277),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl277])])).
fof(f66220,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK17(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f8630,f459])).
fof(f45937,plain,(
  ( ! [X3] : (sP0(X3,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl270),
  inference(cnf_transformation,[],[f45937_D])).
fof(f45937_D,plain,(
  ( ! [X3] : (sP0(X3,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f31703,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl237),
  inference(cnf_transformation,[],[f31703_D])).
fof(f31703_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl237),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl237])])).
fof(f45859,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X3,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(superposition,[],[f578,f35290])).
fof(f35290,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(backward_demodulation,[],[f35194,f5498])).
fof(f5498,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(backward_demodulation,[],[f5012,f4345])).
fof(f4345,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f455,f421])).
fof(f455,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X13] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|24')).
fof(f578,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f358])).
fof(f358,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f357])).
fof(f357,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f281])).
fof(f281,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f45936,plain,(
  ( ! [X4] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X4)) ) | $spl268),
  inference(cnf_transformation,[],[f45936_D])).
fof(f45936_D,plain,(
  ( ! [X4] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X4)) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f45860,plain,(
  ( ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X4)) ) | $spl18),
  inference(superposition,[],[f579,f35290])).
fof(f579,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f358])).
fof(f45935,plain,(
  ( ! [X5] : (p(s(bool,X5)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X5)) ) | $spl266),
  inference(cnf_transformation,[],[f45935_D])).
fof(f45935_D,plain,(
  ( ! [X5] : (p(s(bool,X5)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X5)) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f45861,plain,(
  ( ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,X5)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X5)) ) | $spl18),
  inference(superposition,[],[f594,f35290])).
fof(f594,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f365])).
fof(f365,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f364])).
fof(f364,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f363])).
fof(f363,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f283])).
fof(f283,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f45934,plain,(
  ( ! [X6] : (p(s(bool,X6)) | sP1(X6,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl264),
  inference(cnf_transformation,[],[f45934_D])).
fof(f45934_D,plain,(
  ( ! [X6] : (p(s(bool,X6)) | sP1(X6,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f45862,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,X6)) | sP1(X6,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(superposition,[],[f597,f35290])).
fof(f597,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f365])).
fof(f45933,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X8,X7)) ) | $spl262),
  inference(cnf_transformation,[],[f45933_D])).
fof(f45933_D,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X8,X7)) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f45863,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X7)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X8,X7)) ) | $spl18),
  inference(superposition,[],[f665,f35290])).
fof(f665,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f396])).
fof(f396,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP7(X2,X0,X1))),
  inference(definition_folding,[],[f238,f291,f290])).
fof(f290,plain,(
  ! [X2,X0,X1] : (sP6(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f291,plain,(
  ! [X2,X0,X1] : (sP7(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f238,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f237])).
fof(f237,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f111])).
fof(f111,axiom,(
  ! [X24,X11,X10] : ((p(s(bool,X10)) <=> (p(s(bool,X11)) | p(s(bool,X24)))) <=> ((p(s(bool,X10)) | ~p(s(bool,X11))) & (p(s(bool,X10)) | ~p(s(bool,X24))) & (p(s(bool,X11)) | p(s(bool,X24)) | ~p(s(bool,X10)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.sat.sat_25_prove_ltb')).
fof(f45932,plain,(
  ( ! [X10,X9] : (~p(s(bool,X9)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X9,X10)) ) | $spl260),
  inference(cnf_transformation,[],[f45932_D])).
fof(f45932_D,plain,(
  ( ! [X10,X9] : (~p(s(bool,X9)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X9,X10)) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f45864,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X9)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X9,X10)) ) | $spl18),
  inference(superposition,[],[f666,f35290])).
fof(f666,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f397])).
fof(f45931,plain,(
  ( ! [X12,X11] : (p(s(bool,X11)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X12,X11)) ) | $spl258),
  inference(cnf_transformation,[],[f45931_D])).
fof(f45931_D,plain,(
  ( ! [X12,X11] : (p(s(bool,X11)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X12,X11)) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f45865,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,X11)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X12,X11)) ) | $spl18),
  inference(superposition,[],[f682,f35290])).
fof(f682,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f405])).
fof(f405,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f404])).
fof(f404,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP9(X2,X0,X1))),
  inference(definition_folding,[],[f275,f294,f293])).
fof(f293,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f294,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f275,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f112])).
fof(f112,axiom,(
  ! [X24,X11,X10] : ((p(s(bool,X10)) <=> (p(s(bool,X11)) => p(s(bool,X24)))) <=> ((p(s(bool,X10)) | p(s(bool,X11))) & (p(s(bool,X10)) | ~p(s(bool,X24))) & (~p(s(bool,X11)) | p(s(bool,X24)) | ~p(s(bool,X10)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.sat.sat_27_prove_ltb')).
fof(f45930,plain,(
  ( ! [X14,X13] : (~p(s(bool,X13)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X13,X14)) ) | $spl256),
  inference(cnf_transformation,[],[f45930_D])).
fof(f45930_D,plain,(
  ( ! [X14,X13] : (~p(s(bool,X13)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X13,X14)) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f45866,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X13)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X13,X14)) ) | $spl18),
  inference(superposition,[],[f683,f35290])).
fof(f683,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f405])).
fof(f45928,plain,(
  ( ! [X17,X16] : (~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17)) ) | $spl254),
  inference(cnf_transformation,[],[f45928_D])).
fof(f45928_D,plain,(
  ( ! [X17,X16] : (~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17)) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f45868,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X16,X17)) ) | $spl18),
  inference(superposition,[],[f711,f35290])).
fof(f711,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f673])).
fof(f673,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP8(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f399])).
fof(f399,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f398])).
fof(f398,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1)) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f294])).
fof(f45927,plain,(
  ( ! [X19,X18] : (~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19)) ) | $spl252),
  inference(cnf_transformation,[],[f45927_D])).
fof(f45927_D,plain,(
  ( ! [X19,X18] : (~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19)) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f45869,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),X18,X19)) ) | $spl18),
  inference(superposition,[],[f712,f35290])).
fof(f712,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP6(X0,X1,X2) | sP7(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f656])).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f392])).
fof(f392,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP6(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP6(X0,X1,X2) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f391])).
fof(f391,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP6(X2,X0,X1) | sP7(X2,X0,X1)))),
  inference(flattening,[],[f390])).
fof(f390,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP6(X2,X0,X1)) | sP7(X2,X0,X1)))),
  inference(nnf_transformation,[],[f291])).
fof(f45926,plain,(
  sP1('T_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl250),
  inference(cnf_transformation,[],[f45926_D])).
fof(f45926_D,plain,(
  sP1('T_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f31702,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl236),
  inference(cnf_transformation,[],[f31702_D])).
fof(f31702_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f45877,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP1('T_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl18 | $spl58)),
  inference(superposition,[],[f19241,f35290])).
fof(f45924,plain,(
  sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),'T_0') | $spl248),
  inference(cnf_transformation,[],[f45924_D])).
fof(f45924_D,plain,(
  sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),'T_0') <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f45878,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')),'T_0') | ($spl18 | $spl60)),
  inference(superposition,[],[f19244,f35290])).
fof(f45922,plain,(
  $false | ($spl18 | $spl237 | $spl238)),
  inference(subsumption_resolution,[],[f45921,f779])).
fof(f779,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f728,f470])).
fof(f470,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.int_arith.gcd2|49|_thm','thm.bool.EQ_CLAUSES|split|1')).
fof(f45921,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl18 | $spl237 | $spl238)),
  inference(backward_demodulation,[],[f45880,f45890])).
fof(f45890,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl18 | $spl237)),
  inference(subsumption_resolution,[],[f45855,f31703])).
fof(f45855,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(superposition,[],[f475,f35290])).
fof(f45880,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl238),
  inference(cnf_transformation,[],[f45880_D])).
fof(f45880_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f45882,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl240),
  inference(cnf_transformation,[],[f45882_D])).
fof(f45882_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f45851,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(superposition,[],[f459,f35290])).
fof(f45888,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(forward_demodulation,[],[f45850,f5341])).
fof(f5341,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK11))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3255])).
fof(f3255,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f558])).
fof(f558,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f262])).
fof(f2826,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11))))),
  inference(unit_resulting_resolution,[],[f414,f482])).
fof(f482,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f170])).
fof(f170,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X13] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X13))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|30')).
fof(f45850,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK11))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(superposition,[],[f35290,f14936])).
fof(f14936,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK11))) | s(bool,'T_0') = s(bool,X46)) ) | $spl18),
  inference(subsumption_resolution,[],[f14914,f728])).
fof(f14914,plain,(
  ( ! [X46] : (p(s(bool,'F_0')) | s(bool,X46) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK11))) | s(bool,'T_0') = s(bool,X46)) ) | $spl18),
  inference(superposition,[],[f1368,f5341])).
fof(f1368,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1350,f728])).
fof(f1350,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f558,f459])).
fof(f45887,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(forward_demodulation,[],[f45849,f5249])).
fof(f5249,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK10))) | $spl18),
  inference(backward_demodulation,[],[f5012,f2851])).
fof(f2851,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f558])).
fof(f2825,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10))))),
  inference(unit_resulting_resolution,[],[f413,f482])).
fof(f45849,plain,(
  s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK10))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(superposition,[],[f35290,f14935])).
fof(f14935,plain,(
  ( ! [X45] : (s(bool,X45) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK10))) | s(bool,'T_0') = s(bool,X45)) ) | $spl18),
  inference(subsumption_resolution,[],[f14913,f728])).
fof(f14913,plain,(
  ( ! [X45] : (p(s(bool,'F_0')) | s(bool,X45) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK10))) | s(bool,'T_0') = s(bool,X45)) ) | $spl18),
  inference(superposition,[],[f1368,f5249])).
fof(f45883,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl242),
  inference(cnf_transformation,[],[f45883_D])).
fof(f45883_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f45885,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl244),
  inference(cnf_transformation,[],[f45885_D])).
fof(f45885_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f45848,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X3) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f35290,f1282])).
fof(f45886,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl246),
  inference(cnf_transformation,[],[f45886_D])).
fof(f45886_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f45847,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl18),
  inference(superposition,[],[f35290,f1282])).
fof(f45846,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(superposition,[],[f35290,f1282])).
fof(f45845,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,X0) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f35290,f1282])).
fof(f45844,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(superposition,[],[f35290,f459])).
fof(f31701,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl234),
  inference(cnf_transformation,[],[f31701_D])).
fof(f31701_D,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f31697,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl18),
  inference(superposition,[],[f5500,f5015])).
fof(f5500,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4356])).
fof(f4356,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)))) | sP0(X12,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f578,f455])).
fof(f31740,plain,(
  ( ! [X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X44,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f31739,f5531])).
fof(f5531,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f4477])).
fof(f4477,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f457,f421])).
fof(f457,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f83])).
fof(f83,axiom,(
  ! [X13] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|21')).
fof(f31739,plain,(
  ( ! [X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X44,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f31738,f5039])).
fof(f5039,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f730])).
fof(f730,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f447,f421])).
fof(f447,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f73])).
fof(f73,axiom,(
  ! [X13] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|11')).
fof(f31738,plain,(
  ( ! [X43,X44] : (sP0(X44,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31690,f5433])).
fof(f31690,plain,(
  ( ! [X43,X44] : (sP0(X44,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl18),
  inference(superposition,[],[f5500,f5039])).
fof(f31732,plain,(
  ( ! [X35] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X35,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f31731,f5531])).
fof(f31731,plain,(
  ( ! [X35] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X35,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f31730,f8689])).
fof(f31730,plain,(
  ( ! [X35] : (sP0(X35,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31686,f5433])).
fof(f31686,plain,(
  ( ! [X35] : (sP0(X35,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))))))) ) | $spl18),
  inference(superposition,[],[f5500,f8689])).
fof(f31700,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f31699,f5030])).
fof(f5030,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f457])).
fof(f31699,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31669,f5433])).
fof(f31669,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f5500,f5015])).
fof(f31640,plain,(
  $false | ($spl155 | $spl190)),
  inference(subsumption_resolution,[],[f31639,f417])).
fof(f31639,plain,(
  ~p(s(bool,'T_0')) | ($spl155 | $spl190)),
  inference(forward_demodulation,[],[f31638,f2821])).
fof(f2821,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2745,f783])).
fof(f783,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f419,f471])).
fof(f471,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f302])).
fof(f419,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f97])).
fof(f97,axiom,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|35')).
fof(f2745,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f442,f2731])).
fof(f442,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f95])).
fof(f95,axiom,(
  ! [X13] : s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X13))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|33')).
fof(f31638,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl155 | $spl190)),
  inference(forward_demodulation,[],[f31354,f31374])).
fof(f31375,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl192),
  inference(cnf_transformation,[],[f31375_D])).
fof(f31375_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f31453,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl232),
  inference(cnf_transformation,[],[f31453_D])).
fof(f31453_D,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f31452,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | $spl18),
  inference(forward_demodulation,[],[f31451,f5435])).
fof(f5435,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3802])).
fof(f3802,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f451,f421])).
fof(f451,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X13] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X13))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|16')).
fof(f31451,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31450,f5435])).
fof(f31450,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31449,f5435])).
fof(f31449,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31283,f5435])).
fof(f31283,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(superposition,[],[f5557,f5435])).
fof(f31448,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236)))))))) ) | $spl230),
  inference(cnf_transformation,[],[f31448_D])).
fof(f31448_D,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236)))))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f31447,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240)) ) | $spl18),
  inference(forward_demodulation,[],[f31446,f5435])).
fof(f31446,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(forward_demodulation,[],[f31445,f5435])).
fof(f31445,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(forward_demodulation,[],[f31282,f5435])).
fof(f31282,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(superposition,[],[f5557,f5435])).
fof(f31376,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl193),
  inference(cnf_transformation,[],[f31376_D])).
fof(f31376_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl193),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl193])])).
fof(f31378,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl194),
  inference(cnf_transformation,[],[f31378_D])).
fof(f31378_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f31438,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(forward_demodulation,[],[f31279,f5550])).
fof(f5550,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4951])).
fof(f4951,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f550,f2731])).
fof(f550,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f93])).
fof(f93,axiom,(
  ! [X13,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X13))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|31')).
fof(f31279,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl18),
  inference(superposition,[],[f5553,f5435])).
fof(f5553,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))))) ) | $spl18),
  inference(forward_demodulation,[],[f5034,f5012])).
fof(f5034,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f483])).
fof(f483,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f308])).
fof(f31436,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl229),
  inference(cnf_transformation,[],[f31436_D])).
fof(f31436_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f31434,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl18),
  inference(forward_demodulation,[],[f31273,f5029])).
fof(f5029,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f456])).
fof(f456,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f89])).
fof(f89,axiom,(
  ! [X13] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|27')).
fof(f31273,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(superposition,[],[f5515,f5435])).
fof(f5515,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4417])).
fof(f4417,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f563,f456])).
fof(f31429,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) | $spl226),
  inference(cnf_transformation,[],[f31429_D])).
fof(f31429_D,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f31364,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl173),
  inference(cnf_transformation,[],[f31364_D])).
fof(f31364_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl173),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl173])])).
fof(f31428,plain,(
  ( ! [X152,X153] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) | $spl18),
  inference(forward_demodulation,[],[f31130,f443])).
fof(f443,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f94])).
fof(f94,axiom,(
  ! [X13] : s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X13))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|32')).
fof(f31130,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1662,f5435])).
fof(f1662,plain,(
  ( ! [X30,X28,X29] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30) | ~p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X28))))) )),
  inference(superposition,[],[f683,f443])).
fof(f31427,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) | $spl224),
  inference(cnf_transformation,[],[f31427_D])).
fof(f31427_D,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f31426,plain,(
  ( ! [X151,X150] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) | $spl18),
  inference(forward_demodulation,[],[f31129,f443])).
fof(f31129,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1661,f5435])).
fof(f1661,plain,(
  ( ! [X26,X27,X25] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26) | p(s(bool,X26)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X25))))) )),
  inference(superposition,[],[f682,f443])).
fof(f31425,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) | $spl222),
  inference(cnf_transformation,[],[f31425_D])).
fof(f31425_D,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f31424,plain,(
  ( ! [X149,X148] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) | $spl18),
  inference(forward_demodulation,[],[f31128,f443])).
fof(f31128,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1660,f5435])).
fof(f1660,plain,(
  ( ! [X24,X23,X22] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24) | ~p(s(bool,X23)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X22))))) )),
  inference(superposition,[],[f666,f443])).
fof(f31423,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) | $spl220),
  inference(cnf_transformation,[],[f31423_D])).
fof(f31423_D,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f31422,plain,(
  ( ! [X146,X147] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) | $spl18),
  inference(forward_demodulation,[],[f31127,f443])).
fof(f31127,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1659,f5435])).
fof(f1659,plain,(
  ( ! [X21,X19,X20] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20) | ~p(s(bool,X20)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X19))))) )),
  inference(superposition,[],[f665,f443])).
fof(f31421,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) | $spl218),
  inference(cnf_transformation,[],[f31421_D])).
fof(f31421_D,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f31420,plain,(
  ( ! [X145] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) | $spl18),
  inference(forward_demodulation,[],[f31126,f443])).
fof(f31126,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1658,f5435])).
fof(f1658,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X17))))) )),
  inference(superposition,[],[f597,f443])).
fof(f31419,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) | $spl216),
  inference(cnf_transformation,[],[f31419_D])).
fof(f31419_D,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f31418,plain,(
  ( ! [X144] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) | $spl18),
  inference(forward_demodulation,[],[f31125,f443])).
fof(f31125,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1657,f5435])).
fof(f1657,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X15))))) )),
  inference(superposition,[],[f594,f443])).
fof(f31417,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) | $spl214),
  inference(cnf_transformation,[],[f31417_D])).
fof(f31417_D,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f31416,plain,(
  ( ! [X143] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) | $spl18),
  inference(forward_demodulation,[],[f31124,f443])).
fof(f31124,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1656,f5435])).
fof(f1656,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X13))))) )),
  inference(superposition,[],[f579,f443])).
fof(f31415,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl212),
  inference(cnf_transformation,[],[f31415_D])).
fof(f31415_D,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f31414,plain,(
  ( ! [X142] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31123,f443])).
fof(f31123,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5435])).
fof(f1655,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X11))))) )),
  inference(superposition,[],[f578,f443])).
fof(f31413,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) | $spl210),
  inference(cnf_transformation,[],[f31413_D])).
fof(f31413_D,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f31354,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl155),
  inference(cnf_transformation,[],[f31354_D])).
fof(f31354_D,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f31412,plain,(
  ( ! [X140,X141] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) | $spl18),
  inference(forward_demodulation,[],[f31118,f442])).
fof(f31118,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1617,f5435])).
fof(f1617,plain,(
  ( ! [X30,X28,X29] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30) | ~p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X28))))) )),
  inference(superposition,[],[f683,f442])).
fof(f31411,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) | $spl208),
  inference(cnf_transformation,[],[f31411_D])).
fof(f31411_D,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f31410,plain,(
  ( ! [X138,X139] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) | $spl18),
  inference(forward_demodulation,[],[f31117,f442])).
fof(f31117,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1616,f5435])).
fof(f1616,plain,(
  ( ! [X26,X27,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26) | p(s(bool,X26)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X25))))) )),
  inference(superposition,[],[f682,f442])).
fof(f31409,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) | $spl206),
  inference(cnf_transformation,[],[f31409_D])).
fof(f31409_D,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f31408,plain,(
  ( ! [X136,X137] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) | $spl18),
  inference(forward_demodulation,[],[f31116,f442])).
fof(f31116,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1615,f5435])).
fof(f1615,plain,(
  ( ! [X24,X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24) | ~p(s(bool,X23)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X22))))) )),
  inference(superposition,[],[f666,f442])).
fof(f31407,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) | $spl204),
  inference(cnf_transformation,[],[f31407_D])).
fof(f31407_D,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f31406,plain,(
  ( ! [X134,X135] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) | $spl18),
  inference(forward_demodulation,[],[f31115,f442])).
fof(f31115,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1614,f5435])).
fof(f1614,plain,(
  ( ! [X21,X19,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20) | ~p(s(bool,X20)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X19))))) )),
  inference(superposition,[],[f665,f442])).
fof(f31405,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) | $spl202),
  inference(cnf_transformation,[],[f31405_D])).
fof(f31405_D,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f31404,plain,(
  ( ! [X133] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) | $spl18),
  inference(forward_demodulation,[],[f31114,f442])).
fof(f31114,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1613,f5435])).
fof(f1613,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X17))))) )),
  inference(superposition,[],[f597,f442])).
fof(f31403,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) | $spl200),
  inference(cnf_transformation,[],[f31403_D])).
fof(f31403_D,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f31402,plain,(
  ( ! [X132] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) | $spl18),
  inference(forward_demodulation,[],[f31113,f442])).
fof(f31113,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1612,f5435])).
fof(f1612,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X15))))) )),
  inference(superposition,[],[f594,f442])).
fof(f31401,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) | $spl198),
  inference(cnf_transformation,[],[f31401_D])).
fof(f31401_D,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f31400,plain,(
  ( ! [X131] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) | $spl18),
  inference(forward_demodulation,[],[f31112,f442])).
fof(f31112,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1611,f5435])).
fof(f1611,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X13))))) )),
  inference(superposition,[],[f579,f442])).
fof(f31399,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl196),
  inference(cnf_transformation,[],[f31399_D])).
fof(f31399_D,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f31398,plain,(
  ( ! [X130] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f31111,f442])).
fof(f31111,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5435])).
fof(f1610,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X11))))) )),
  inference(superposition,[],[f578,f442])).
fof(f31374,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl190),
  inference(cnf_transformation,[],[f31374_D])).
fof(f31374_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f31379,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(forward_demodulation,[],[f31044,f5240])).
fof(f5240,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(backward_demodulation,[],[f5012,f2708])).
fof(f31044,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5593,f5435])).
fof(f5593,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f5592,f5012])).
fof(f5592,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl18),
  inference(forward_demodulation,[],[f5452,f5242])).
fof(f5242,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl18),
  inference(backward_demodulation,[],[f5012,f2731])).
fof(f5452,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f3925])).
fof(f3925,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f565,f420])).
fof(f31039,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(superposition,[],[f5515,f5435])).
fof(f31030,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5031,f5435])).
fof(f5031,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f478])).
fof(f478,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f306])).
fof(f31372,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38))) ) | $spl188),
  inference(cnf_transformation,[],[f31372_D])).
fof(f31372_D,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f30994,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1662,f5435])).
fof(f31371,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37))) ) | $spl186),
  inference(cnf_transformation,[],[f31371_D])).
fof(f31371_D,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f30993,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1661,f5435])).
fof(f31370,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34))) ) | $spl184),
  inference(cnf_transformation,[],[f31370_D])).
fof(f31370_D,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f30992,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1660,f5435])).
fof(f31369,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33))) ) | $spl182),
  inference(cnf_transformation,[],[f31369_D])).
fof(f31369_D,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f30991,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1659,f5435])).
fof(f31368,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31))) ) | $spl180),
  inference(cnf_transformation,[],[f31368_D])).
fof(f31368_D,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f30990,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1658,f5435])).
fof(f31367,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30))) ) | $spl178),
  inference(cnf_transformation,[],[f31367_D])).
fof(f31367_D,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f30989,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1657,f5435])).
fof(f31366,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29)) ) | $spl176),
  inference(cnf_transformation,[],[f31366_D])).
fof(f31366_D,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29)) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f30988,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1656,f5435])).
fof(f31365,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl174),
  inference(cnf_transformation,[],[f31365_D])).
fof(f31365_D,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f30987,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5435])).
fof(f31362,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26))) ) | $spl170),
  inference(cnf_transformation,[],[f31362_D])).
fof(f31362_D,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f30982,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1617,f5435])).
fof(f31361,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25))) ) | $spl168),
  inference(cnf_transformation,[],[f31361_D])).
fof(f31361_D,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f30981,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1616,f5435])).
fof(f31360,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22))) ) | $spl166),
  inference(cnf_transformation,[],[f31360_D])).
fof(f31360_D,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f30980,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1615,f5435])).
fof(f31359,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21))) ) | $spl164),
  inference(cnf_transformation,[],[f31359_D])).
fof(f31359_D,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f30979,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1614,f5435])).
fof(f31358,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19))) ) | $spl162),
  inference(cnf_transformation,[],[f31358_D])).
fof(f31358_D,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f30978,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1613,f5435])).
fof(f31357,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18))) ) | $spl160),
  inference(cnf_transformation,[],[f31357_D])).
fof(f31357_D,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f30977,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1612,f5435])).
fof(f31356,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17)) ) | $spl158),
  inference(cnf_transformation,[],[f31356_D])).
fof(f31356_D,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17)) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f30976,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1611,f5435])).
fof(f31355,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl156),
  inference(cnf_transformation,[],[f31355_D])).
fof(f31355_D,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f30975,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5435])).
fof(f30465,plain,(
  $false | ($spl18 | $spl32 | $spl35)),
  inference(subsumption_resolution,[],[f30464,f728])).
fof(f30464,plain,(
  p(s(bool,'F_0')) | ($spl18 | $spl32 | $spl35)),
  inference(forward_demodulation,[],[f30463,f15248])).
fof(f15248,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl18 | $spl35)),
  inference(subsumption_resolution,[],[f15176,f15247])).
fof(f15247,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl18 | $spl35)),
  inference(global_subsumption,[],[f13458,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f13394,f14919,f14922])).
fof(f14922,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f14899,f728])).
fof(f14899,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f1368,f445])).
fof(f14919,plain,(
  ( ! [X8,X7] : (s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f14896,f728])).
fof(f14896,plain,(
  ( ! [X8,X7] : (p(s(bool,'F_0')) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1368,f444])).
fof(f12912,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f417,f1155])).
fof(f12878,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f1154])).
fof(f12842,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f417,f1153])).
fof(f12795,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f1152])).
fof(f12265,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1766,f632])).
fof(f12231,plain,(
  ( ! [X0] : (~sP2('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f759,f753,f1765,f635])).
fof(f12163,plain,(
  ( ! [X0] : (~sP2('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f757,f751,f1762,f636])).
fof(f12128,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1702,f632])).
fof(f12094,plain,(
  ( ! [X0] : (~sP2('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f759,f753,f1701,f635])).
fof(f12020,plain,(
  ( ! [X0] : (~sP2('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f757,f751,f1698,f636])).
fof(f11983,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f1636,f632])).
fof(f11880,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.ODD_1'(s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f1634,f632])).
fof(f10306,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f3193,f567])).
fof(f10311,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f561])).
fof(f10312,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f3193,f3193,f561])).
fof(f10313,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f3193,f578])).
fof(f10314,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f3193,f579])).
fof(f10315,plain,(
  ( ! [X0] : (~sP1('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f593])).
fof(f10318,plain,(
  ( ! [X0] : (~sP1('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f593])).
fof(f10319,plain,(
  ( ! [X0,X1] : (~sP1('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f3193,f3193,f593])).
fof(f10321,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f594])).
fof(f10322,plain,(
  ( ! [X0] : (sP1('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f597])).
fof(f10325,plain,(
  ( ! [X0] : (~sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f633])).
fof(f10326,plain,(
  ( ! [X0,X1] : (~sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f3193,f728,f3193,f633])).
fof(f10333,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f755,f749,f763,f3193,f634])).
fof(f10338,plain,(
  ( ! [X0] : (~sP4('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f637])).
fof(f10347,plain,(
  ( ! [X0] : (~sP4('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f637])).
fof(f10348,plain,(
  ( ! [X0,X1] : (~sP4('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f3193,f728,f3193,f637])).
fof(f10356,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f3193,f638])).
fof(f10357,plain,(
  ( ! [X0] : (~sP3('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f641])).
fof(f10366,plain,(
  ( ! [X0] : (~sP3('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f641])).
fof(f10367,plain,(
  ( ! [X0,X1] : (~sP3('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f3193,f728,f3193,f641])).
fof(f10375,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f3193,f642])).
fof(f10376,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f3193,f646])).
fof(f10377,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f647])).
fof(f10378,plain,(
  ( ! [X2,X0,X1] : (sP2('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f648])).
fof(f10379,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f440,f3193,f650])).
fof(f10381,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f444,f3193,f650])).
fof(f10382,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f445,f3193,f650])).
fof(f10384,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f545,f3193,f650])).
fof(f10386,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f547,f3193,f650])).
fof(f10387,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f548,f3193,f650])).
fof(f10388,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f551,f3193,f650])).
fof(f10389,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f550,f3193,f650])).
fof(f10390,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f546,f3193,f650])).
fof(f10391,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))),'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f549,f3193,f650])).
fof(f10394,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f443,f3193,f650])).
fof(f10395,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.EVEN_1'(s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f442,f3193,f650])).
fof(f10396,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f440,f3193,f650])).
fof(f10398,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f444,f3193,f650])).
fof(f10399,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f445,f3193,f650])).
fof(f10401,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f545,f3193,f650])).
fof(f10403,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f547,f3193,f650])).
fof(f10404,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f548,f3193,f650])).
fof(f10405,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f551,f3193,f650])).
fof(f10406,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f550,f3193,f650])).
fof(f10407,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f546,f3193,f650])).
fof(f10408,plain,(
  ( ! [X2,X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f549,f3193,f650])).
fof(f10411,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num',X1)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f443,f3193,f650])).
fof(f10412,plain,(
  ( ! [X0,X1] : (sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num',X1)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f442,f3193,f650])).
fof(f10413,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f779,f3193,f651])).
fof(f10414,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f779,f3193,f651])).
fof(f10415,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f653])).
fof(f10417,plain,(
  ( ! [X0,X1] : (~sP7('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f654])).
fof(f10423,plain,(
  ( ! [X0] : (~sP6('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f728,f3193,f660])).
fof(f10428,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f3193,f661])).
fof(f10429,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f662])).
fof(f10430,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f665])).
fof(f10437,plain,(
  ( ! [X2,X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f3193,f3193,f665])).
fof(f10438,plain,(
  ( ! [X0,X1] : (sP7('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f666])).
fof(f10445,plain,(
  ( ! [X2,X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f3193,f666])).
fof(f10446,plain,(
  ( ! [X0] : (~sP7('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f728,f3193,f667])).
fof(f10447,plain,(
  ( ! [X0,X1] : (~sP9('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f671])).
fof(f10477,plain,(
  ( ! [X0] : (~sP8('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f417,f3193,f677])).
fof(f10485,plain,(
  ( ! [X0] : (~sP8('T_0','F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f728,f3193,f677])).
fof(f10486,plain,(
  ( ! [X0,X1] : (~sP8('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f3193,f728,f3193,f677])).
fof(f10493,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f679])).
fof(f10494,plain,(
  ( ! [X0] : (sP9('F_0','F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f728,f3193,f681])).
fof(f10497,plain,(
  ( ! [X0,X1] : (sP9('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f417,f3193,f683])).
fof(f10505,plain,(
  ( ! [X2,X0,X1] : (sP9('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f3193,f3193,f683])).
fof(f10506,plain,(
  ( ! [X0] : (~sP9('T_0','F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f417,f3193,f684])).
fof(f10509,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f417,f3193,f684])).
fof(f10510,plain,(
  ( ! [X0,X1] : (~sP9('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f3193,f684])).
fof(f10511,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f3193,f710])).
fof(f10522,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f773,f3193,f711])).
fof(f10526,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f775,f3193,f711])).
fof(f10528,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f767,f3193,f712])).
fof(f10530,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f769,f3193,f712])).
fof(f8380,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18))),s('type.num.num',X19)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X18)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))),s('type.num.num',X19))))) )),
  inference(superposition,[],[f611,f551])).
fof(f8379,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15))),s('type.num.num',X16)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14))),s('type.num.num',X16))))) )),
  inference(superposition,[],[f611,f547])).
fof(f8378,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num',X13))))) )),
  inference(superposition,[],[f611,f545])).
fof(f8377,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9))),s('type.num.num',X10)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num',X10))))) )),
  inference(superposition,[],[f611,f548])).
fof(f8238,plain,(
  ( ! [X94,X92,X93] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X92),s('type.num.num',X93))))))) | s('type.num.num',X94) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X92))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X93)))))) )),
  inference(superposition,[],[f565,f556])).
fof(f8076,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X89))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',X88))))))) | s('type.num.num',X89) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X87),s('type.num.num',X88)))))) )),
  inference(superposition,[],[f565,f555])).
fof(f8125,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) )),
  inference(forward_demodulation,[],[f8124,f552])).
fof(f8124,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) )),
  inference(forward_demodulation,[],[f8041,f446])).
fof(f8041,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f555,f552])).
fof(f7924,plain,(
  ( ! [X80,X81,X82] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X82))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X80),s('type.num.num',X81))))))) | s('type.num.num',X82) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X80))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X81)))))) )),
  inference(superposition,[],[f565,f554])).
fof(f7767,plain,(
  ( ! [X76,X77,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X75))),s('type.num.num',X76))))) | s('type.num.num',X77) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num',X76))),s('type.num.num',X76)))) )),
  inference(superposition,[],[f565,f553])).
fof(f7817,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f7816,f552])).
fof(f7816,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f7719,f446])).
fof(f7719,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f553,f552])).
fof(f7619,plain,(
  ( ! [X70,X68,X69] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X70))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X68),s('type.num.num',X69))))))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) )),
  inference(superposition,[],[f565,f552])).
fof(f7545,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f7454,f547])).
fof(f7454,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) )),
  inference(superposition,[],[f564,f547])).
fof(f7544,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) )),
  inference(forward_demodulation,[],[f7453,f545])).
fof(f7453,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) )),
  inference(superposition,[],[f564,f545])).
fof(f7543,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f7452,f548])).
fof(f7452,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4)))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) )),
  inference(superposition,[],[f564,f548])).
fof(f7406,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(subsumption_resolution,[],[f7375,f728])).
fof(f7375,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f568,f459])).
fof(f7231,plain,(
  ( ! [X59,X57,X58,X56] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num',X57))))) )),
  inference(superposition,[],[f712,f551])).
fof(f7230,plain,(
  ( ! [X54,X52,X55,X53] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))))) )),
  inference(superposition,[],[f711,f551])).
fof(f7228,plain,(
  ( ! [X47,X45,X48,X46] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48) | ~p(s(bool,X47)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))))) )),
  inference(superposition,[],[f683,f551])).
fof(f7227,plain,(
  ( ! [X43,X41,X44,X42] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43) | p(s(bool,X43)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num',X42))))) )),
  inference(superposition,[],[f682,f551])).
fof(f7226,plain,(
  ( ! [X39,X37,X38,X40] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40) | ~p(s(bool,X39)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))))) )),
  inference(superposition,[],[f666,f551])).
fof(f7225,plain,(
  ( ! [X35,X33,X36,X34] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35) | ~p(s(bool,X35)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))))) )),
  inference(superposition,[],[f665,f551])).
fof(f7224,plain,(
  ( ! [X30,X31,X32] : (sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31))))) | p(s(bool,X32)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(superposition,[],[f597,f551])).
fof(f7223,plain,(
  ( ! [X28,X29,X27] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29) | p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))))) )),
  inference(superposition,[],[f594,f551])).
fof(f7222,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X25))))) )),
  inference(superposition,[],[f579,f551])).
fof(f7221,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))))) )),
  inference(superposition,[],[f578,f551])).
fof(f7212,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f563,f551])).
fof(f7211,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f551,f459])).
fof(f7177,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f551,f652])).
fof(f7178,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f551,f650])).
fof(f7179,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f728,f551,f652])).
fof(f7180,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f417,f551,f650])).
fof(f4989,plain,(
  ( ! [X57,X54,X56,X55] : (sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~sP6('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num',X54))))) )),
  inference(superposition,[],[f712,f550])).
fof(f4988,plain,(
  ( ! [X52,X50,X53,X51] : (sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~sP8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X50))))) )),
  inference(superposition,[],[f711,f550])).
fof(f4986,plain,(
  ( ! [X45,X43,X46,X44] : (sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46) | ~p(s(bool,X45)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num',X43))))) )),
  inference(superposition,[],[f683,f550])).
fof(f4985,plain,(
  ( ! [X39,X41,X42,X40] : (sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41) | p(s(bool,X41)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X39))))) )),
  inference(superposition,[],[f682,f550])).
fof(f4984,plain,(
  ( ! [X37,X35,X38,X36] : (sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,X37)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X36),s('type.num.num',X35))))) )),
  inference(superposition,[],[f666,f550])).
fof(f4983,plain,(
  ( ! [X33,X31,X34,X32] : (sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33) | ~p(s(bool,X33)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X31))))) )),
  inference(superposition,[],[f665,f550])).
fof(f4982,plain,(
  ( ! [X30,X28,X29] : (sP1(X30,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))))) | p(s(bool,X30)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num',X28))))) )),
  inference(superposition,[],[f597,f550])).
fof(f4981,plain,(
  ( ! [X26,X27,X25] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27) | p(s(bool,X27)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num',X25))))) )),
  inference(superposition,[],[f594,f550])).
fof(f4980,plain,(
  ( ! [X24,X23,X22] : (sP0('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X22))))) )),
  inference(superposition,[],[f579,f550])).
fof(f4979,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X19))))) )),
  inference(superposition,[],[f578,f550])).
fof(f4970,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X2)))) )),
  inference(superposition,[],[f550,f459])).
fof(f4968,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f550,f421])).
fof(f4950,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f550,f421])).
fof(f4930,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f550,f652])).
fof(f4931,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f550,f650])).
fof(f4932,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f728,f550,f652])).
fof(f4933,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f417,f550,f650])).
fof(f4898,plain,(
  ( ! [X57,X54,X56,X55] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num',X54))))) )),
  inference(superposition,[],[f712,f549])).
fof(f4897,plain,(
  ( ! [X52,X50,X53,X51] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X50))))) )),
  inference(superposition,[],[f711,f549])).
fof(f4895,plain,(
  ( ! [X45,X43,X46,X44] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46) | ~p(s(bool,X45)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num',X43))))) )),
  inference(superposition,[],[f683,f549])).
fof(f4894,plain,(
  ( ! [X39,X41,X42,X40] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41) | p(s(bool,X41)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num',X39))))) )),
  inference(superposition,[],[f682,f549])).
fof(f4893,plain,(
  ( ! [X37,X35,X38,X36] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,X37)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X35))))) )),
  inference(superposition,[],[f666,f549])).
fof(f4892,plain,(
  ( ! [X33,X31,X34,X32] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33) | ~p(s(bool,X33)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X31))))) )),
  inference(superposition,[],[f665,f549])).
fof(f4891,plain,(
  ( ! [X30,X28,X29] : (sP1(X30,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))))) | p(s(bool,X30)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X29),s('type.num.num',X28))))) )),
  inference(superposition,[],[f597,f549])).
fof(f4890,plain,(
  ( ! [X26,X27,X25] : (sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27) | p(s(bool,X27)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num',X25))))) )),
  inference(superposition,[],[f594,f549])).
fof(f4889,plain,(
  ( ! [X24,X23,X22] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22))))) )),
  inference(superposition,[],[f579,f549])).
fof(f4888,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X19))))) )),
  inference(superposition,[],[f578,f549])).
fof(f4879,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2)))) )),
  inference(superposition,[],[f549,f459])).
fof(f4877,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f549,f421])).
fof(f4859,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f549,f421])).
fof(f4839,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f549,f652])).
fof(f4840,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f549,f650])).
fof(f4841,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f728,f549,f652])).
fof(f4842,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f417,f549,f650])).
fof(f4816,plain,(
  ( ! [X59,X57,X58,X56] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num',X57))))) )),
  inference(superposition,[],[f712,f548])).
fof(f4815,plain,(
  ( ! [X54,X52,X55,X53] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))))) )),
  inference(superposition,[],[f711,f548])).
fof(f4813,plain,(
  ( ! [X47,X45,X48,X46] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X46)))),X47,X48) | ~p(s(bool,X47)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))))) )),
  inference(superposition,[],[f683,f548])).
fof(f4812,plain,(
  ( ! [X43,X41,X44,X42] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X42)))),X44,X43) | p(s(bool,X43)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num',X42))))) )),
  inference(superposition,[],[f682,f548])).
fof(f4811,plain,(
  ( ! [X39,X37,X38,X40] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))),X39,X40) | ~p(s(bool,X39)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))))) )),
  inference(superposition,[],[f666,f548])).
fof(f4810,plain,(
  ( ! [X35,X33,X36,X34] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X34)))),X36,X35) | ~p(s(bool,X35)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))))) )),
  inference(superposition,[],[f665,f548])).
fof(f4809,plain,(
  ( ! [X30,X31,X32] : (sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X31))))) | p(s(bool,X32)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(superposition,[],[f597,f548])).
fof(f4808,plain,(
  ( ! [X28,X29,X27] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))),X29) | p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))))) )),
  inference(superposition,[],[f594,f548])).
fof(f4807,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25)))),X26) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X25))))) )),
  inference(superposition,[],[f579,f548])).
fof(f4806,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))))) )),
  inference(superposition,[],[f578,f548])).
fof(f4797,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(superposition,[],[f563,f548])).
fof(f4796,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f548,f459])).
fof(f4760,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f548,f652])).
fof(f4761,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f548,f650])).
fof(f4762,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f728,f548,f652])).
fof(f4763,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f417,f548,f650])).
fof(f4735,plain,(
  ( ! [X59,X57,X58,X56] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num',X57))))) )),
  inference(superposition,[],[f712,f547])).
fof(f4734,plain,(
  ( ! [X54,X52,X55,X53] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))))) )),
  inference(superposition,[],[f711,f547])).
fof(f4732,plain,(
  ( ! [X47,X45,X48,X46] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48) | ~p(s(bool,X47)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))))) )),
  inference(superposition,[],[f683,f547])).
fof(f4731,plain,(
  ( ! [X43,X41,X44,X42] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43) | p(s(bool,X43)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num',X42))))) )),
  inference(superposition,[],[f682,f547])).
fof(f4730,plain,(
  ( ! [X39,X37,X38,X40] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40) | ~p(s(bool,X39)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))))) )),
  inference(superposition,[],[f666,f547])).
fof(f4729,plain,(
  ( ! [X35,X33,X36,X34] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35) | ~p(s(bool,X35)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))))) )),
  inference(superposition,[],[f665,f547])).
fof(f4728,plain,(
  ( ! [X30,X31,X32] : (sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31))))) | p(s(bool,X32)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(superposition,[],[f597,f547])).
fof(f4727,plain,(
  ( ! [X28,X29,X27] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29) | p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))))) )),
  inference(superposition,[],[f594,f547])).
fof(f4726,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X25))))) )),
  inference(superposition,[],[f579,f547])).
fof(f4725,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))))) )),
  inference(superposition,[],[f578,f547])).
fof(f4716,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(superposition,[],[f563,f547])).
fof(f4715,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f547,f459])).
fof(f4679,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f547,f652])).
fof(f4680,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f547,f650])).
fof(f4681,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f728,f547,f652])).
fof(f4682,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f417,f547,f650])).
fof(f4659,plain,(
  ( ! [X57,X54,X56,X55] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X54),s('type.num.num',X55))))) )),
  inference(superposition,[],[f712,f546])).
fof(f4658,plain,(
  ( ! [X52,X50,X53,X51] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X50),s('type.num.num',X51))))) )),
  inference(superposition,[],[f711,f546])).
fof(f4656,plain,(
  ( ! [X45,X43,X46,X44] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46) | ~p(s(bool,X45)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X44))))) )),
  inference(superposition,[],[f683,f546])).
fof(f4655,plain,(
  ( ! [X39,X41,X42,X40] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41) | p(s(bool,X41)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X40))))) )),
  inference(superposition,[],[f682,f546])).
fof(f4654,plain,(
  ( ! [X37,X35,X38,X36] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,X37)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X35),s('type.num.num',X36))))) )),
  inference(superposition,[],[f666,f546])).
fof(f4653,plain,(
  ( ! [X33,X31,X34,X32] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33) | ~p(s(bool,X33)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num',X32))))) )),
  inference(superposition,[],[f665,f546])).
fof(f4652,plain,(
  ( ! [X30,X28,X29] : (sP1(X30,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))))) | p(s(bool,X30)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X28),s('type.num.num',X29))))) )),
  inference(superposition,[],[f597,f546])).
fof(f4651,plain,(
  ( ! [X26,X27,X25] : (sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27) | p(s(bool,X27)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num',X26))))) )),
  inference(superposition,[],[f594,f546])).
fof(f4650,plain,(
  ( ! [X24,X23,X22] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))))) )),
  inference(superposition,[],[f579,f546])).
fof(f4649,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))))) )),
  inference(superposition,[],[f578,f546])).
fof(f4640,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f546,f459])).
fof(f4660,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f4639,f435])).
fof(f4639,plain,(
  ( ! [X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f546,f2731])).
fof(f4638,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f546,f421])).
fof(f4620,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f546,f421])).
fof(f4600,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f546,f652])).
fof(f4601,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f546,f650])).
fof(f4602,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f728,f546,f652])).
fof(f4603,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f417,f546,f650])).
fof(f4583,plain,(
  ( ! [X59,X57,X58,X56] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X56),s('type.num.num',X57))))) )),
  inference(superposition,[],[f712,f545])).
fof(f4582,plain,(
  ( ! [X54,X52,X55,X53] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))))) )),
  inference(superposition,[],[f711,f545])).
fof(f4580,plain,(
  ( ! [X47,X45,X48,X46] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,X48) | ~p(s(bool,X47)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X46))))) )),
  inference(superposition,[],[f683,f545])).
fof(f4579,plain,(
  ( ! [X43,X41,X44,X42] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42)))),X44,X43) | p(s(bool,X43)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num',X42))))) )),
  inference(superposition,[],[f682,f545])).
fof(f4578,plain,(
  ( ! [X39,X37,X38,X40] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))),X39,X40) | ~p(s(bool,X39)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))))) )),
  inference(superposition,[],[f666,f545])).
fof(f4577,plain,(
  ( ! [X35,X33,X36,X34] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X36,X35) | ~p(s(bool,X35)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34))))) )),
  inference(superposition,[],[f665,f545])).
fof(f4576,plain,(
  ( ! [X30,X31,X32] : (sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))))) | p(s(bool,X32)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(superposition,[],[f597,f545])).
fof(f4575,plain,(
  ( ! [X28,X29,X27] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29) | p(s(bool,X29)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))))) )),
  inference(superposition,[],[f594,f545])).
fof(f4574,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X24),s('type.num.num',X25))))) )),
  inference(superposition,[],[f579,f545])).
fof(f4573,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))))) )),
  inference(superposition,[],[f578,f545])).
fof(f4564,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(superposition,[],[f563,f545])).
fof(f4563,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f545,f459])).
fof(f4561,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f545,f421])).
fof(f4543,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f545,f421])).
fof(f4523,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f545,f652])).
fof(f4524,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f545,f650])).
fof(f4525,plain,(
  ( ! [X0,X1] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f728,f545,f652])).
fof(f4526,plain,(
  ( ! [X0,X1] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f417,f545,f650])).
fof(f4498,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)))) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | sP7('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) )),
  inference(superposition,[],[f712,f457])).
fof(f4497,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33)))) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | sP9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) )),
  inference(superposition,[],[f711,f457])).
fof(f4495,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)))) | ~p(s(bool,X29)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30)) )),
  inference(superposition,[],[f683,f457])).
fof(f4494,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X25)))) | p(s(bool,X26)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26)) )),
  inference(superposition,[],[f682,f457])).
fof(f4493,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) | ~p(s(bool,X23)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24)) )),
  inference(superposition,[],[f666,f457])).
fof(f4492,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X19)))) | ~p(s(bool,X20)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20)) )),
  inference(superposition,[],[f665,f457])).
fof(f4491,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) | p(s(bool,X18)) | sP1(X18,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17)))))) )),
  inference(superposition,[],[f597,f457])).
fof(f4490,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)))) | p(s(bool,X16)) | sP1('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16)) )),
  inference(superposition,[],[f594,f457])).
fof(f4489,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)))) | sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) )),
  inference(superposition,[],[f579,f457])).
fof(f4488,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11)))) | sP0(X12,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f578,f457])).
fof(f4479,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f457,f459])).
fof(f4457,plain,(
  ( ! [X0] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f457,f652])).
fof(f4458,plain,(
  ( ! [X0] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f457,f650])).
fof(f4459,plain,(
  ( ! [X0] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f728,f457,f652])).
fof(f4460,plain,(
  ( ! [X0] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f417,f457,f650])).
fof(f4436,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.ZERO_0')))) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.num.|48|_0')),X38,X39) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.num.|48|_0')),X38,X39)) )),
  inference(superposition,[],[f712,f456])).
fof(f4435,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.ZERO_0')))) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.num.|48|_0')),X35,X36) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.num.|48|_0')),X35,X36)) )),
  inference(superposition,[],[f711,f456])).
fof(f4433,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X30)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.num.|48|_0')),X30,X31)) )),
  inference(superposition,[],[f683,f456])).
fof(f4432,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X27)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.num.|48|_0')),X28,X27)) )),
  inference(superposition,[],[f682,f456])).
fof(f4431,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X24)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.num.|48|_0')),X24,X25)) )),
  inference(superposition,[],[f666,f456])).
fof(f4430,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X21)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.num.|48|_0')),X22,X21)) )),
  inference(superposition,[],[f665,f456])).
fof(f4429,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X19)) | sP1(X19,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f597,f456])).
fof(f4428,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X17)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.num.|48|_0')),X17)) )),
  inference(superposition,[],[f594,f456])).
fof(f4427,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0')))) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.num.|48|_0')),X15)) )),
  inference(superposition,[],[f579,f456])).
fof(f4426,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0')))) | sP0(X13,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f578,f456])).
fof(f4416,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f456,f459])).
fof(f4437,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f4414,f444])).
fof(f4414,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f456,f421])).
fof(f4394,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f456,f652])).
fof(f4395,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f456,f650])).
fof(f4396,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f456,f652])).
fof(f4397,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f456,f650])).
fof(f4366,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)))) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.num.|48|_0')),X37,X38) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.num.|48|_0')),X37,X38)) )),
  inference(superposition,[],[f712,f455])).
fof(f4365,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33)))) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.num.|48|_0')),X34,X35) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.num.|48|_0')),X34,X35)) )),
  inference(superposition,[],[f711,f455])).
fof(f4363,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)))) | ~p(s(bool,X29)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.num.|48|_0')),X29,X30)) )),
  inference(superposition,[],[f683,f455])).
fof(f4362,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X25)))) | p(s(bool,X26)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.num.|48|_0')),X27,X26)) )),
  inference(superposition,[],[f682,f455])).
fof(f4361,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) | ~p(s(bool,X23)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.num.|48|_0')),X23,X24)) )),
  inference(superposition,[],[f666,f455])).
fof(f4360,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X19)))) | ~p(s(bool,X20)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.num.|48|_0')),X21,X20)) )),
  inference(superposition,[],[f665,f455])).
fof(f4359,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) | p(s(bool,X18)) | sP1(X18,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f597,f455])).
fof(f4358,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)))) | p(s(bool,X16)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.num.|48|_0')),X16)) )),
  inference(superposition,[],[f594,f455])).
fof(f4357,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)))) | sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.num.|48|_0')),X14)) )),
  inference(superposition,[],[f579,f455])).
fof(f4347,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f455,f459])).
fof(f4367,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f4346,f441])).
fof(f4346,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f455,f2731])).
fof(f4325,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f455,f652])).
fof(f4326,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f455,f650])).
fof(f4327,plain,(
  ( ! [X0] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f455,f652])).
fof(f4328,plain,(
  ( ! [X0] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f455,f650])).
fof(f4257,plain,(
  ( ! [X0] : (~sP2('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1492,f757,f751,f728,f636])).
fof(f4258,plain,(
  ( ! [X0] : (~sP2('F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1493,f757,f751,f728,f636])).
fof(f4261,plain,(
  ~sP2('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f1491,f760,f751,f728,f636])).
fof(f4263,plain,(
  ~sP2('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),'F_0')),
  inference(unit_resulting_resolution,[],[f1633,f758,f752,f728,f636])).
fof(f4274,plain,(
  ( ! [X0] : (~sP3('T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1496,f749,f763,f728,f636])).
fof(f4275,plain,(
  ( ! [X0] : (~sP3('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1497,f749,f763,f728,f636])).
fof(f4276,plain,(
  ( ! [X0] : (~sP3('T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1495,f749,f763,f728,f636])).
fof(f4282,plain,(
  sP5('F_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2872,f2865,f763,f728,f636])).
fof(f4290,plain,(
  ~sP3('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),'F_0')),
  inference(unit_resulting_resolution,[],[f1590,f750,f764,f728,f636])).
fof(f4294,plain,(
  sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f757,f751,f764,f728,f636])).
fof(f4295,plain,(
  sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2872,f2865,f764,f728,f636])).
fof(f4296,plain,(
  sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f758,f752,f764,f728,f636])).
fof(f4308,plain,(
  ~sP3('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f1588,f753,f766,f728,f636])).
fof(f4310,plain,(
  sP5('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f2873,f753,f766,f728,f636])).
fof(f4311,plain,(
  sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f760,f753,f766,f728,f636])).
fof(f4312,plain,(
  ~sP3('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f1494,f749,f766,f728,f636])).
fof(f4223,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f2890,f630])).
fof(f4190,plain,(
  ( ! [X0] : (~sP2('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1499,f759,f753,f728,f635])).
fof(f4191,plain,(
  ( ! [X0] : (~sP2('const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1500,f759,f753,f728,f635])).
fof(f4194,plain,(
  ~sP2('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1498,f758,f753,f728,f635])).
fof(f4201,plain,(
  sP5('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f759,f751,f761,f728,f635])).
fof(f4202,plain,(
  sP5('T_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f759,f2865,f761,f728,f635])).
fof(f4204,plain,(
  sP5('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f759,f751,f762,f728,f635])).
fof(f4205,plain,(
  sP5('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f759,f2865,f762,f728,f635])).
fof(f4206,plain,(
  sP5('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f759,f752,f762,f728,f635])).
fof(f4212,plain,(
  sP5('F_0','F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f759,f753,f766,f728,f635])).
fof(f4213,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f759,f2866,f766,f728,f635])).
fof(f4214,plain,(
  sP5('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f759,f754,f766,f728,f635])).
fof(f4163,plain,(
  ~sP5('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f2882,f630])).
fof(f4107,plain,(
  ( ! [X0] : (~sP3('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1489,f753,f765,f417,f634])).
fof(f4108,plain,(
  ( ! [X0] : (~sP3('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1490,f753,f765,f417,f634])).
fof(f4109,plain,(
  ( ! [X0] : (~sP3('const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1488,f753,f765,f417,f634])).
fof(f4112,plain,(
  sP5('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f2873,f753,f765,f417,f634])).
fof(f4115,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f2873,f2866,f765,f417,f634])).
fof(f4117,plain,(
  sP5('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f759,f754,f765,f417,f634])).
fof(f4118,plain,(
  sP5('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f2873,f754,f765,f417,f634])).
fof(f4119,plain,(
  sP5('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f760,f754,f765,f417,f634])).
fof(f4123,plain,(
  ~sP4('T_0','T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f1473,f760,f761,f417,f634])).
fof(f4132,plain,(
  sP5('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f755,f749,f763,f417,f634])).
fof(f4133,plain,(
  sP5('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f756,f749,f763,f417,f634])).
fof(f4137,plain,(
  sP5('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f756,f750,f764,f417,f634])).
fof(f4138,plain,(
  ~sP3('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1487,f753,f764,f417,f634])).
fof(f4067,plain,(
  ~sP5('F_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2874,f630])).
fof(f3961,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','T_0')),
  inference(unit_resulting_resolution,[],[f2867,f631])).
fof(f3924,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24)))))))) )),
  inference(superposition,[],[f565,f449])).
fof(f3923,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))))) )),
  inference(superposition,[],[f565,f448])).
fof(f3922,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f565,f730])).
fof(f3921,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) )),
  inference(superposition,[],[f565,f437])).
fof(f3920,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f565,f436])).
fof(f3919,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)))) )),
  inference(superposition,[],[f565,f439])).
fof(f3918,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f565,f429])).
fof(f3916,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f565,f731])).
fof(f3915,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f565,f732])).
fof(f3914,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f565,f431])).
fof(f3913,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(superposition,[],[f565,f430])).
fof(f3908,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f413,f565])).
fof(f3909,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f414,f565])).
fof(f3892,plain,(
  ~sP5('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f2860,f632])).
fof(f3881,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f3803,f420])).
fof(f3803,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f451,f2731])).
fof(f3694,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f449,f421])).
fof(f3487,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f446,f421])).
fof(f3257,plain,(
  ~sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f2826,f592])).
fof(f3259,plain,(
  ~sP1('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f592])).
fof(f3260,plain,(
  ~sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f2826,f592])).
fof(f3261,plain,(
  sP1('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f2826,f594])).
fof(f3262,plain,(
  sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f2826,f597])).
fof(f3263,plain,(
  ~sP5('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2826,f633])).
fof(f3264,plain,(
  ~sP4('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2826,f637])).
fof(f3269,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f639])).
fof(f3270,plain,(
  ( ! [X0,X1] : (sP4('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f640])).
fof(f3271,plain,(
  ~sP3('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2826,f641])).
fof(f3276,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f643])).
fof(f3277,plain,(
  ( ! [X0,X1] : (sP3('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f644])).
fof(f3278,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f645])).
fof(f3286,plain,(
  ~sP2('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f645])).
fof(f3287,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f2826,f728,f2826,f645])).
fof(f3294,plain,(
  ~sP2('F_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f645])).
fof(f3295,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f728,f2826,f645])).
fof(f3296,plain,(
  ~sP2('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f2826,f645])).
fof(f3297,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f2826,f2826,f645])).
fof(f3302,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f779,f2826,f649])).
fof(f3303,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f780,f2826,f649])).
fof(f3304,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f779,f2826,f649])).
fof(f3305,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f780,f2826,f649])).
fof(f3306,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f783,f2826,f652])).
fof(f3307,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f2826,f652])).
fof(f3308,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f438,f2826,f652])).
fof(f3309,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f440,f2826,f652])).
fof(f3310,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f444,f2826,f652])).
fof(f3311,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f445,f2826,f652])).
fof(f3312,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f435,f2826,f652])).
fof(f3313,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f441,f2826,f652])).
fof(f3314,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f800,f2826,f652])).
fof(f3315,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f443,f2826,f652])).
fof(f3316,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f442,f2826,f652])).
fof(f3317,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f783,f2826,f652])).
fof(f3318,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f434,f2826,f652])).
fof(f3319,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f438,f2826,f652])).
fof(f3320,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f440,f2826,f652])).
fof(f3321,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f444,f2826,f652])).
fof(f3322,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f445,f2826,f652])).
fof(f3323,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f435,f2826,f652])).
fof(f3324,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f441,f2826,f652])).
fof(f3325,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f800,f2826,f652])).
fof(f3326,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.ODD_1'(s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f443,f2826,f652])).
fof(f3327,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.EVEN_1'(s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f442,f2826,f652])).
fof(f3328,plain,(
  ( ! [X0] : (~sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f2826,f653])).
fof(f3329,plain,(
  ( ! [X0] : (~sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f2826,f654])).
fof(f3342,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f772,f2826,f659])).
fof(f3348,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f772,f2826,f659])).
fof(f3349,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f772,f2826,f659])).
fof(f3350,plain,(
  ~sP6('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f417,f728,f2826,f660])).
fof(f3356,plain,(
  ~sP6('T_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f728,f2826,f660])).
fof(f3357,plain,(
  ~sP6('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f2826,f2826,f660])).
fof(f3362,plain,(
  ( ! [X0,X1] : (sP6('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f663])).
fof(f3363,plain,(
  sP7('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f664])).
fof(f3368,plain,(
  sP7('F_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f664])).
fof(f3370,plain,(
  sP7('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f2826,f664])).
fof(f3373,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2826,f664])).
fof(f3374,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f2826,f728,f2826,f664])).
fof(f3375,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f2826,f664])).
fof(f3376,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f2826,f2826,f664])).
fof(f3377,plain,(
  ~sP7('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2826,f667])).
fof(f3381,plain,(
  ~sP7('T_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f417,f2826,f667])).
fof(f3382,plain,(
  ~sP7('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f417,f2826,f667])).
fof(f3385,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f2826,f670])).
fof(f3387,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f728,f2826,f670])).
fof(f3388,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f2826,f670])).
fof(f3392,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f2826,f671])).
fof(f3400,plain,(
  sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f778,f2826,f676])).
fof(f3401,plain,(
  ~sP8('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f2826,f677])).
fof(f3406,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f678])).
fof(f3407,plain,(
  ( ! [X0,X1] : (sP8('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2826,f680])).
fof(f3408,plain,(
  sP9('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2826,f681])).
fof(f3411,plain,(
  sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2826,f681])).
fof(f3412,plain,(
  sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f2826,f417,f2826,f681])).
fof(f3413,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f417,f2826,f682])).
fof(f3415,plain,(
  ~sP9('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f2826,f684])).
fof(f3418,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f417,f2826,f710])).
fof(f3419,plain,(
  ~sP0('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f2826,f742])).
fof(f3426,plain,(
  ~sP0('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f728,f2826,f742])).
fof(f3427,plain,(
  ~sP0('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f2826,f742])).
fof(f3433,plain,(
  sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))),
  inference(unit_resulting_resolution,[],[f2826,f820])).
fof(f3434,plain,(
  sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f2826,f826])).
fof(f3435,plain,(
  ( ! [X0] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f880])).
fof(f3436,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f984])).
fof(f3437,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f2826,f985])).
fof(f3438,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f1078])).
fof(f3439,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f2826,f1079])).
fof(f3440,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)))) )),
  inference(unit_resulting_resolution,[],[f2826,f1150])).
fof(f3441,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f2826,f1151])).
fof(f3241,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s('type.num.num',X4) != s('type.num.num',X5)) )),
  inference(subsumption_resolution,[],[f3190,f728])).
fof(f3190,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s('type.num.num',X4) != s('type.num.num',X5) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) )),
  inference(superposition,[],[f563,f459])).
fof(f3240,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f3189,f728])).
fof(f3189,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3)))) )),
  inference(superposition,[],[f563,f445])).
fof(f3193,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f3159,f732])).
fof(f3159,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f732,f563])).
fof(f3191,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(forward_demodulation,[],[f3161,f730])).
fof(f3161,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(unit_resulting_resolution,[],[f730,f563])).
fof(f2853,plain,(
  ~sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f2825,f592])).
fof(f2855,plain,(
  ~sP1('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f592])).
fof(f2856,plain,(
  ~sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f2825,f592])).
fof(f2857,plain,(
  sP1('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f2825,f594])).
fof(f2858,plain,(
  sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f2825,f597])).
fof(f2859,plain,(
  ~sP5('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2825,f633])).
fof(f2860,plain,(
  ~sP4('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2825,f637])).
fof(f2865,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f639])).
fof(f2866,plain,(
  ( ! [X0,X1] : (sP4('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f640])).
fof(f2867,plain,(
  ~sP3('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f417,f2825,f641])).
fof(f2872,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f643])).
fof(f2873,plain,(
  ( ! [X0,X1] : (sP3('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f644])).
fof(f2874,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f645])).
fof(f2882,plain,(
  ~sP2('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f645])).
fof(f2883,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f2825,f728,f2825,f645])).
fof(f2890,plain,(
  ~sP2('F_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f645])).
fof(f2891,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f728,f2825,f645])).
fof(f2892,plain,(
  ~sP2('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f2825,f645])).
fof(f2893,plain,(
  ~sP2('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f2825,f2825,f645])).
fof(f2898,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f779,f2825,f649])).
fof(f2899,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f780,f2825,f649])).
fof(f2900,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','F_0')),
  inference(unit_resulting_resolution,[],[f779,f2825,f649])).
fof(f2901,plain,(
  sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f780,f2825,f649])).
fof(f2902,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f783,f2825,f652])).
fof(f2903,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f2825,f652])).
fof(f2904,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f438,f2825,f652])).
fof(f2905,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f440,f2825,f652])).
fof(f2906,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f444,f2825,f652])).
fof(f2907,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f445,f2825,f652])).
fof(f2908,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f435,f2825,f652])).
fof(f2909,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f441,f2825,f652])).
fof(f2910,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f800,f2825,f652])).
fof(f2911,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f443,f2825,f652])).
fof(f2912,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f442,f2825,f652])).
fof(f2913,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f783,f2825,f652])).
fof(f2914,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f434,f2825,f652])).
fof(f2915,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f438,f2825,f652])).
fof(f2916,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f440,f2825,f652])).
fof(f2917,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f444,f2825,f652])).
fof(f2918,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f445,f2825,f652])).
fof(f2919,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f435,f2825,f652])).
fof(f2920,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f441,f2825,f652])).
fof(f2921,plain,(
  ~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f800,f2825,f652])).
fof(f2922,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.ODD_1'(s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f443,f2825,f652])).
fof(f2923,plain,(
  ( ! [X0] : (~sP5('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.EVEN_1'(s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f442,f2825,f652])).
fof(f2924,plain,(
  ( ! [X0] : (~sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f2825,f653])).
fof(f2925,plain,(
  ( ! [X0] : (~sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f2825,f654])).
fof(f2938,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f772,f2825,f659])).
fof(f2944,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f772,f2825,f659])).
fof(f2945,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f772,f2825,f659])).
fof(f2946,plain,(
  ~sP6('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f417,f728,f2825,f660])).
fof(f2952,plain,(
  ~sP6('T_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f728,f2825,f660])).
fof(f2953,plain,(
  ~sP6('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f2825,f2825,f660])).
fof(f2958,plain,(
  ( ! [X0,X1] : (sP6('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f663])).
fof(f2959,plain,(
  sP7('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f664])).
fof(f2964,plain,(
  sP7('F_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f664])).
fof(f2966,plain,(
  sP7('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f2825,f664])).
fof(f2969,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f2825,f664])).
fof(f2970,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f2825,f728,f2825,f664])).
fof(f2971,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f2825,f664])).
fof(f2972,plain,(
  sP7('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f2825,f2825,f664])).
fof(f2973,plain,(
  ~sP7('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2825,f667])).
fof(f2977,plain,(
  ~sP7('T_0','F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f417,f2825,f667])).
fof(f2978,plain,(
  ~sP7('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f417,f2825,f667])).
fof(f2981,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f2825,f670])).
fof(f2983,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f728,f2825,f670])).
fof(f2984,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f2825,f670])).
fof(f2988,plain,(
  ( ! [X0] : (~sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f2825,f671])).
fof(f2996,plain,(
  sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f778,f2825,f676])).
fof(f2997,plain,(
  ~sP8('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f2825,f677])).
fof(f3002,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f678])).
fof(f3003,plain,(
  ( ! [X0,X1] : (sP8('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f2825,f680])).
fof(f3004,plain,(
  sP9('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2825,f681])).
fof(f3007,plain,(
  sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f2825,f681])).
fof(f3008,plain,(
  sP9('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f2825,f417,f2825,f681])).
fof(f3009,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f417,f2825,f682])).
fof(f3011,plain,(
  ~sP9('T_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f2825,f684])).
fof(f3014,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f417,f2825,f710])).
fof(f3015,plain,(
  ~sP0('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f2825,f742])).
fof(f3022,plain,(
  ~sP0('F_0','const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f728,f2825,f742])).
fof(f3023,plain,(
  ~sP0('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f2825,f742])).
fof(f3029,plain,(
  sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))),
  inference(unit_resulting_resolution,[],[f2825,f820])).
fof(f3030,plain,(
  sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f2825,f826])).
fof(f3031,plain,(
  ( ! [X0] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f880])).
fof(f3032,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f984])).
fof(f3033,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f2825,f985])).
fof(f3034,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f1078])).
fof(f3035,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f2825,f1079])).
fof(f3036,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)))) )),
  inference(unit_resulting_resolution,[],[f2825,f1150])).
fof(f3037,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK10)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f2825,f1151])).
fof(f2752,plain,(
  ~sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f1633,f2731])).
fof(f2751,plain,(
  sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f1591,f2731])).
fof(f2750,plain,(
  ~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f1590,f2731])).
fof(f2749,plain,(
  sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f1589,f2731])).
fof(f2748,plain,(
  ~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f1588,f2731])).
fof(f2822,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(forward_demodulation,[],[f2746,f800])).
fof(f2746,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f443,f2731])).
fof(f2693,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f478,f436])).
fof(f2692,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f478,f439])).
fof(f2691,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f478,f429])).
fof(f2690,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f478,f731])).
fof(f2689,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f478,f732])).
fof(f2674,plain,(
  ~sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1633,f421])).
fof(f2671,plain,(
  sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f1591,f421])).
fof(f2657,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f1591,f632])).
fof(f2472,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0))) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f733,f733,f561])).
fof(f2473,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f733,f578])).
fof(f2474,plain,(
  ( ! [X0,X1] : (sP0('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f733,f579])).
fof(f2475,plain,(
  ( ! [X0] : (~sP1('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f733,f593])).
fof(f2477,plain,(
  ( ! [X0] : (~sP1('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f733,f593])).
fof(f2478,plain,(
  ( ! [X0,X1] : (~sP1('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f733,f733,f593])).
fof(f2479,plain,(
  ( ! [X0] : (sP1('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f733,f594])).
fof(f2480,plain,(
  ( ! [X0] : (sP1('F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f733,f597])).
fof(f2483,plain,(
  ( ! [X0] : (~sP5('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f633])).
fof(f2484,plain,(
  ( ! [X0,X1] : (~sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f733,f728,f733,f633])).
fof(f2485,plain,(
  ( ! [X0] : (~sP4('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f637])).
fof(f2491,plain,(
  ( ! [X0] : (~sP4('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f637])).
fof(f2492,plain,(
  ( ! [X0,X1] : (~sP4('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f733,f728,f733,f637])).
fof(f2497,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f733,f638])).
fof(f2498,plain,(
  ( ! [X0] : (~sP3('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f641])).
fof(f2504,plain,(
  ( ! [X0] : (~sP3('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f641])).
fof(f2505,plain,(
  ( ! [X0,X1] : (~sP3('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f733,f728,f733,f641])).
fof(f2510,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f733,f642])).
fof(f2511,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f733,f646])).
fof(f2512,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f733,f647])).
fof(f2513,plain,(
  ( ! [X2,X0,X1] : (sP2('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f733,f648])).
fof(f2514,plain,(
  ( ! [X0] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f783,f733,f650])).
fof(f2515,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f733,f650])).
fof(f2516,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f438,f733,f650])).
fof(f2517,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f440,f733,f650])).
fof(f2518,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f444,f733,f650])).
fof(f2519,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f445,f733,f650])).
fof(f2520,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f435,f733,f650])).
fof(f2521,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f441,f733,f650])).
fof(f2522,plain,(
  ( ! [X0] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f800,f733,f650])).
fof(f2523,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f443,f733,f650])).
fof(f2524,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))),'const.arithmetic.EVEN_1'(s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f442,f733,f650])).
fof(f2525,plain,(
  ( ! [X0] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f783,f733,f650])).
fof(f2526,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','const.arithmetic.>=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f434,f733,f650])).
fof(f2527,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f438,f733,f650])).
fof(f2528,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f440,f733,f650])).
fof(f2529,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f444,f733,f650])).
fof(f2530,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f445,f733,f650])).
fof(f2531,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f435,f733,f650])).
fof(f2532,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f441,f733,f650])).
fof(f2533,plain,(
  ( ! [X0] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f800,f733,f650])).
fof(f2534,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.ODD_1'(s('type.num.num',X1)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f443,f733,f650])).
fof(f2535,plain,(
  ( ! [X0,X1] : (sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.EVEN_1'(s('type.num.num',X1)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f442,f733,f650])).
fof(f2536,plain,(
  ( ! [X0] : (~sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f779,f733,f651])).
fof(f2537,plain,(
  ( ! [X0] : (~sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f780,f733,f651])).
fof(f2538,plain,(
  ( ! [X0] : (~sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f779,f733,f651])).
fof(f2539,plain,(
  ( ! [X0] : (~sP5('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f780,f733,f651])).
fof(f2540,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f733,f653])).
fof(f2544,plain,(
  ( ! [X0,X1] : (~sP7('F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f728,f733,f654])).
fof(f2552,plain,(
  ( ! [X0] : (~sP6('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f728,f733,f660])).
fof(f2557,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f733,f661])).
fof(f2558,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f733,f662])).
fof(f2559,plain,(
  ( ! [X0,X1] : (sP7('T_0',X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f417,f733,f665])).
fof(f2563,plain,(
  ( ! [X2,X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X2)))) )),
  inference(unit_resulting_resolution,[],[f733,f733,f665])).
fof(f2564,plain,(
  ( ! [X0,X1] : (sP7('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f417,f733,f666])).
fof(f2568,plain,(
  ( ! [X2,X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f733,f733,f666])).
fof(f2569,plain,(
  ( ! [X0] : (~sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f728,f733,f667])).
fof(f2570,plain,(
  ( ! [X0,X1] : (~sP9('F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f728,f733,f671])).
fof(f2589,plain,(
  ( ! [X0] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f778,f733,f676])).
fof(f2590,plain,(
  ( ! [X0] : (~sP8('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f417,f733,f677])).
fof(f2596,plain,(
  ( ! [X0] : (~sP8('T_0','F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f728,f733,f677])).
fof(f2597,plain,(
  ( ! [X0,X1] : (~sP8('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f733,f728,f733,f677])).
fof(f2602,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f733,f679])).
fof(f2603,plain,(
  ( ! [X0] : (sP9('F_0','F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f728,f733,f681])).
fof(f2606,plain,(
  ( ! [X0,X1] : (sP9('T_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f417,f733,f683])).
fof(f2610,plain,(
  ( ! [X2,X0,X1] : (sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f733,f733,f683])).
fof(f2611,plain,(
  ( ! [X0] : (~sP9('T_0','F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f417,f733,f684])).
fof(f2615,plain,(
  ( ! [X0] : (~sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f417,f733,f684])).
fof(f2616,plain,(
  ( ! [X0,X1] : (~sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'F_0','const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f728,f733,f733,f684])).
fof(f2617,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f733,f710])).
fof(f2618,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f773,f733,f711])).
fof(f2619,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f774,f733,f711])).
fof(f2620,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f775,f733,f711])).
fof(f2621,plain,(
  ( ! [X0,X1] : (sP9('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f776,f733,f711])).
fof(f2622,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f767,f733,f712])).
fof(f2623,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f768,f733,f712])).
fof(f2624,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f769,f733,f712])).
fof(f2625,plain,(
  ( ! [X0,X1] : (sP7('const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f770,f733,f712])).
fof(f2626,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X1)))) )),
  inference(unit_resulting_resolution,[],[f733,f851])).
fof(f2627,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f733,f862])).
fof(f2628,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f733,f894])).
fof(f2466,plain,(
  ~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f1590,f421])).
fof(f2441,plain,(
  sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1589,f421])).
fof(f2438,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.EVEN_1'(s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f1589,f632])).
fof(f2353,plain,(
  ~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f1588,f421])).
fof(f2261,plain,(
  ( ! [X0] : (sP1('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f1151])).
fof(f2125,plain,(
  ~sP9('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f2116,f672])).
fof(f2116,plain,(
  ~sP8('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f728,f677])).
fof(f2106,plain,(
  sP9('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f777,f417,f728,f676])).
fof(f2107,plain,(
  sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','T_0')),
  inference(unit_resulting_resolution,[],[f778,f417,f728,f676])).
fof(f1997,plain,(
  ~sP7('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1988,f655])).
fof(f1988,plain,(
  ~sP6('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f417,f728,f728,f660])).
fof(f1978,plain,(
  sP7('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f771,f728,f728,f659])).
fof(f1979,plain,(
  sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0','F_0')),
  inference(unit_resulting_resolution,[],[f772,f728,f728,f659])).
fof(f1942,plain,(
  ( ! [X0] : (sP4('T_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1464,f632])).
fof(f1929,plain,(
  ( ! [X0] : (sP4('T_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1463,f632])).
fof(f1922,plain,(
  ~sP5('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1913,f630])).
fof(f1913,plain,(
  ~sP2('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f728,f645])).
fof(f1907,plain,(
  ~sP5('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1898,f631])).
fof(f1898,plain,(
  ~sP3('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f417,f728,f417,f641])).
fof(f1869,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f417,f728,f417,f637])).
fof(f1762,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f445,f652])).
fof(f1763,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f445,f650])).
fof(f1765,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f445,f652])).
fof(f1766,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f445,f650])).
fof(f1750,plain,(
  ( ! [X0] : (sP4('T_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f1454,f632])).
fof(f1737,plain,(
  ( ! [X0] : (sP4('T_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f1453,f632])).
fof(f1698,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f444,f652])).
fof(f1699,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f444,f650])).
fof(f1701,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f444,f652])).
fof(f1702,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f444,f650])).
fof(f1686,plain,(
  ( ! [X0] : (sP4('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f1452,f632])).
fof(f1665,plain,(
  ( ! [X37,X38,X36] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X36))))) )),
  inference(superposition,[],[f712,f443])).
fof(f1664,plain,(
  ( ! [X35,X33,X34] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X33))))) )),
  inference(superposition,[],[f711,f443])).
fof(f1646,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f443,f459])).
fof(f1645,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f443,f421])).
fof(f1633,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f443,f652])).
fof(f1634,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.ODD_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f443,f650])).
fof(f1635,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f728,f443,f652])).
fof(f1636,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.ODD_1'(s('type.num.num',X0)),'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f417,f443,f650])).
fof(f1620,plain,(
  ( ! [X37,X38,X36] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~sP6('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X36))))) )),
  inference(superposition,[],[f712,f442])).
fof(f1619,plain,(
  ( ! [X35,X33,X34] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~sP8('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X33))))) )),
  inference(superposition,[],[f711,f442])).
fof(f1601,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f442,f459])).
fof(f1600,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f442,f421])).
fof(f1588,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f442,f652])).
fof(f1589,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f442,f650])).
fof(f1590,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f728,f442,f652])).
fof(f1591,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num',X0)),'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f417,f442,f650])).
fof(f1487,plain,(
  ~sP5('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f728,f783,f652])).
fof(f1488,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f434,f652])).
fof(f1489,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f438,f652])).
fof(f1490,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f728,f440,f652])).
fof(f1491,plain,(
  ~sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f800,f652])).
fof(f1492,plain,(
  ( ! [X0] : (~sP5('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f435,f652])).
fof(f1493,plain,(
  ( ! [X0] : (~sP5('F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f441,f652])).
fof(f1494,plain,(
  ~sP5('F_0','T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f728,f783,f652])).
fof(f1495,plain,(
  ( ! [X0] : (~sP5('F_0','T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f434,f652])).
fof(f1496,plain,(
  ( ! [X0] : (~sP5('F_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f438,f652])).
fof(f1497,plain,(
  ( ! [X0] : (~sP5('F_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f440,f652])).
fof(f1498,plain,(
  ~sP5('F_0','F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f728,f800,f652])).
fof(f1499,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f435,f652])).
fof(f1500,plain,(
  ( ! [X0] : (~sP5('F_0','F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f441,f652])).
fof(f1472,plain,(
  ~sP5('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f417,f779,f651])).
fof(f1473,plain,(
  ~sP5('T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f780,f651])).
fof(f1476,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f417,f779,f651])).
fof(f1477,plain,(
  ~sP5('T_0','T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f417,f780,f651])).
fof(f1451,plain,(
  sP5('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f417,f783,f650])).
fof(f1452,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f434,f650])).
fof(f1453,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f438,f650])).
fof(f1454,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f440,f650])).
fof(f1455,plain,(
  sP5('T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f417,f800,f650])).
fof(f1456,plain,(
  ( ! [X0] : (sP5('T_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f435,f650])).
fof(f1457,plain,(
  ( ! [X0] : (sP5('T_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f417,f441,f650])).
fof(f1458,plain,(
  sP5('T_0','T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f417,f783,f650])).
fof(f1459,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f434,f650])).
fof(f1460,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f438,f650])).
fof(f1461,plain,(
  ( ! [X0] : (sP5('T_0','T_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f440,f650])).
fof(f1462,plain,(
  sP5('T_0','F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f417,f800,f650])).
fof(f1463,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f417,f435,f650])).
fof(f1464,plain,(
  ( ! [X0] : (sP5('T_0','F_0','const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f417,f441,f650])).
fof(f1441,plain,(
  sP5('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f728,f779,f649])).
fof(f1442,plain,(
  sP5('F_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),'T_0')),
  inference(unit_resulting_resolution,[],[f728,f780,f649])).
fof(f1443,plain,(
  sP5('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f779,f649])).
fof(f1444,plain,(
  sP5('F_0','T_0','const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f728,f780,f649])).
fof(f1433,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f1150])).
fof(f1390,plain,(
  ( ! [X0] : (sP1('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f728,f1079])).
fof(f1338,plain,(
  ( ! [X0] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f1078])).
fof(f1271,plain,(
  ( ! [X0] : (sP1('F_0','const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f728,f985])).
fof(f1199,plain,(
  ( ! [X0] : (sP1('const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f984])).
fof(f1157,plain,(
  ( ! [X28,X29,X27] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X27)),X28,X29) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X27)),X28,X29)) )),
  inference(subsumption_resolution,[],[f1142,f417])).
fof(f1142,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X27)),X28,X29) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X27)),X28,X29)) )),
  inference(superposition,[],[f712,f440])).
fof(f1156,plain,(
  ( ! [X26,X24,X25] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X24)),X25,X26) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X24)),X25,X26)) )),
  inference(subsumption_resolution,[],[f1141,f417])).
fof(f1141,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X24)),X25,X26) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X24)),X25,X26)) )),
  inference(superposition,[],[f711,f440])).
fof(f1155,plain,(
  ( ! [X23,X21,X22] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X21)),X22,X23) | ~p(s(bool,X22))) )),
  inference(subsumption_resolution,[],[f1140,f417])).
fof(f1140,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X22)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X21)),X22,X23)) )),
  inference(superposition,[],[f683,f440])).
fof(f1154,plain,(
  ( ! [X19,X20,X18] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),X20,X19) | p(s(bool,X19))) )),
  inference(subsumption_resolution,[],[f1139,f417])).
fof(f1139,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X19)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X18)),X20,X19)) )),
  inference(superposition,[],[f682,f440])).
fof(f1153,plain,(
  ( ! [X17,X15,X16] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),X16,X17) | ~p(s(bool,X16))) )),
  inference(subsumption_resolution,[],[f1138,f417])).
fof(f1138,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)),X16,X17)) )),
  inference(superposition,[],[f666,f440])).
fof(f1152,plain,(
  ( ! [X14,X12,X13] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12)),X14,X13) | ~p(s(bool,X13))) )),
  inference(subsumption_resolution,[],[f1137,f417])).
fof(f1137,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12)),X14,X13)) )),
  inference(superposition,[],[f665,f440])).
fof(f1151,plain,(
  ( ! [X10,X11] : (sP1(X11,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10))) | p(s(bool,X11))) )),
  inference(subsumption_resolution,[],[f1136,f417])).
fof(f1136,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(X11,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X10)))) )),
  inference(superposition,[],[f597,f440])).
fof(f1150,plain,(
  ( ! [X8,X9] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8)),X9) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f1135,f417])).
fof(f1135,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X8)),X9)) )),
  inference(superposition,[],[f594,f440])).
fof(f1149,plain,(
  ( ! [X6,X7] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7)) )),
  inference(subsumption_resolution,[],[f1134,f417])).
fof(f1134,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)),X7)) )),
  inference(superposition,[],[f579,f440])).
fof(f1148,plain,(
  ( ! [X4,X5] : (sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f1133,f417])).
fof(f1133,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f578,f440])).
fof(f1085,plain,(
  ( ! [X28,X29,X27] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,X29) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,X29)) )),
  inference(subsumption_resolution,[],[f1070,f417])).
fof(f1070,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,X29) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,X29)) )),
  inference(superposition,[],[f712,f438])).
fof(f1084,plain,(
  ( ! [X26,X24,X25] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24)),X25,X26) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24)),X25,X26)) )),
  inference(subsumption_resolution,[],[f1069,f417])).
fof(f1069,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24)),X25,X26) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24)),X25,X26)) )),
  inference(superposition,[],[f711,f438])).
fof(f1083,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X22)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21)),X22,X23)) )),
  inference(subsumption_resolution,[],[f1068,f417])).
fof(f1068,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X22)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21)),X22,X23)) )),
  inference(superposition,[],[f683,f438])).
fof(f1082,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X19)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)),X20,X19)) )),
  inference(subsumption_resolution,[],[f1067,f417])).
fof(f1067,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X19)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)),X20,X19)) )),
  inference(superposition,[],[f682,f438])).
fof(f1081,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,X16)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)),X16,X17)) )),
  inference(subsumption_resolution,[],[f1066,f417])).
fof(f1066,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)),X16,X17)) )),
  inference(superposition,[],[f666,f438])).
fof(f1080,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,X13)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X14,X13)) )),
  inference(subsumption_resolution,[],[f1065,f417])).
fof(f1065,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X14,X13)) )),
  inference(superposition,[],[f665,f438])).
fof(f1079,plain,(
  ( ! [X10,X11] : (sP1(X11,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))) | p(s(bool,X11))) )),
  inference(subsumption_resolution,[],[f1064,f417])).
fof(f1064,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(X11,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) )),
  inference(superposition,[],[f597,f438])).
fof(f1078,plain,(
  ( ! [X8,X9] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X9) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f1063,f417])).
fof(f1063,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X9)) )),
  inference(superposition,[],[f594,f438])).
fof(f1077,plain,(
  ( ! [X6,X7] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)),X7)) )),
  inference(subsumption_resolution,[],[f1062,f417])).
fof(f1062,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)),X7)) )),
  inference(superposition,[],[f579,f438])).
fof(f1076,plain,(
  ( ! [X4,X5] : (sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f1061,f417])).
fof(f1061,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f578,f438])).
fof(f991,plain,(
  ( ! [X28,X29,X27] : (~sP6('const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28,X29) | sP7('const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28,X29)) )),
  inference(subsumption_resolution,[],[f976,f417])).
fof(f976,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28,X29) | sP7('const.arithmetic.>=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28,X29)) )),
  inference(superposition,[],[f712,f434])).
fof(f990,plain,(
  ( ! [X26,X24,X25] : (~sP8('const.arithmetic.>=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,X26) | sP9('const.arithmetic.>=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,X26)) )),
  inference(subsumption_resolution,[],[f975,f417])).
fof(f975,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.>=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,X26) | sP9('const.arithmetic.>=_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')),X25,X26)) )),
  inference(superposition,[],[f711,f434])).
fof(f989,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,X22)) | sP9('const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0')),X22,X23)) )),
  inference(subsumption_resolution,[],[f974,f417])).
fof(f974,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X22)) | sP9('const.arithmetic.>=_2'(s('type.num.num',X21),s('type.num.num','const.num.|48|_0')),X22,X23)) )),
  inference(superposition,[],[f683,f434])).
fof(f988,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X19)) | sP9('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),X20,X19)) )),
  inference(subsumption_resolution,[],[f973,f417])).
fof(f973,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | p(s(bool,X19)) | sP9('const.arithmetic.>=_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),X20,X19)) )),
  inference(superposition,[],[f682,f434])).
fof(f987,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,X16)) | sP7('const.arithmetic.>=_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),X16,X17)) )),
  inference(subsumption_resolution,[],[f972,f417])).
fof(f972,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | sP7('const.arithmetic.>=_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0')),X16,X17)) )),
  inference(superposition,[],[f666,f434])).
fof(f986,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,X13)) | sP7('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')),X14,X13)) )),
  inference(subsumption_resolution,[],[f971,f417])).
fof(f971,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | sP7('const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')),X14,X13)) )),
  inference(superposition,[],[f665,f434])).
fof(f985,plain,(
  ( ! [X10,X11] : (sP1(X11,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | p(s(bool,X11))) )),
  inference(subsumption_resolution,[],[f970,f417])).
fof(f970,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(X11,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f597,f434])).
fof(f984,plain,(
  ( ! [X8,X9] : (sP1('const.arithmetic.>=_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f969,f417])).
fof(f969,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | sP1('const.arithmetic.>=_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')),X9)) )),
  inference(superposition,[],[f594,f434])).
fof(f983,plain,(
  ( ! [X6,X7] : (sP0('const.arithmetic.>=_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7)) )),
  inference(subsumption_resolution,[],[f968,f417])).
fof(f968,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.>=_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7)) )),
  inference(superposition,[],[f579,f434])).
fof(f982,plain,(
  ( ! [X4,X5] : (sP0(X5,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f967,f417])).
fof(f967,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | sP0(X5,'const.arithmetic.>=_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f578,f434])).
fof(f942,plain,(
  ( ! [X0] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f894])).
fof(f930,plain,(
  ( ! [X0,X1] : (~sP6('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(subsumption_resolution,[],[f928,f417])).
fof(f928,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(superposition,[],[f712,f783])).
fof(f925,plain,(
  ( ! [X0] : (sP7('T_0',X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f768,f417,f712])).
fof(f927,plain,(
  ( ! [X0] : (sP7('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f770,f417,f712])).
fof(f912,plain,(
  ( ! [X0,X1] : (~sP8('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(subsumption_resolution,[],[f910,f417])).
fof(f910,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(superposition,[],[f711,f783])).
fof(f907,plain,(
  ( ! [X0] : (sP9('T_0',X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f774,f417,f711])).
fof(f909,plain,(
  ( ! [X0] : (sP9('T_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f776,f417,f711])).
fof(f898,plain,(
  ( ! [X0] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f880])).
fof(f894,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f892,f417])).
fof(f892,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(superposition,[],[f683,f783])).
fof(f891,plain,(
  ( ! [X0] : (sP9('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f417,f683])).
fof(f880,plain,(
  ( ! [X0,X1] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1,X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f878,f417])).
fof(f878,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1,X0)) )),
  inference(superposition,[],[f682,f783])).
fof(f877,plain,(
  ( ! [X0] : (sP9('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f417,f682])).
fof(f874,plain,(
  ( ! [X0] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f862])).
fof(f873,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f728,f671])).
fof(f867,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f728,f670])).
fof(f866,plain,(
  ( ! [X0] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f851])).
fof(f862,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f860,f417])).
fof(f860,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(superposition,[],[f666,f783])).
fof(f859,plain,(
  ( ! [X0] : (sP7('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f417,f666])).
fof(f851,plain,(
  ( ! [X0,X1] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1,X0) | ~p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f849,f417])).
fof(f849,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1,X0)) )),
  inference(superposition,[],[f665,f783])).
fof(f848,plain,(
  ( ! [X0] : (sP7('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f417,f665])).
fof(f845,plain,(
  sP1('F_0','const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f728,f826])).
fof(f844,plain,(
  ( ! [X0] : (~sP7('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f728,f654])).
fof(f841,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f728,f653])).
fof(f840,plain,(
  sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),'F_0')),
  inference(unit_resulting_resolution,[],[f728,f820])).
fof(f835,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f742])).
fof(f826,plain,(
  ( ! [X0] : (sP1(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f824,f417])).
fof(f824,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f597,f783])).
fof(f823,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f597])).
fof(f820,plain,(
  ( ! [X0] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f818,f417])).
fof(f818,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0)) )),
  inference(superposition,[],[f594,f783])).
fof(f817,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f417,f594])).
fof(f814,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f417,f417,f593])).
fof(f804,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f728,f728,f592])).
fof(f800,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f427,f475])).
fof(f780,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))),
  inference(unit_resulting_resolution,[],[f427,f470])).
fof(f777,plain,(
  ( ! [X0,X1] : (sP8('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f728,f680])).
fof(f778,plain,(
  ( ! [X0,X1] : (sP8('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f427,f680])).
fof(f775,plain,(
  ( ! [X0,X1] : (sP8(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f417,f679])).
fof(f776,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f419,f679])).
fof(f773,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f728,f678])).
fof(f774,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f427,f678])).
fof(f771,plain,(
  ( ! [X0,X1] : (sP6('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f728,f663])).
fof(f772,plain,(
  ( ! [X0,X1] : (sP6('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f427,f663])).
fof(f769,plain,(
  ( ! [X0,X1] : (sP6(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f417,f662])).
fof(f770,plain,(
  ( ! [X0,X1] : (sP6(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f419,f662])).
fof(f767,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f661])).
fof(f768,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f419,f661])).
fof(f765,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f417,f648])).
fof(f766,plain,(
  ( ! [X0,X1] : (sP2('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f419,f648])).
fof(f763,plain,(
  ( ! [X0,X1] : (sP2(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f417,f647])).
fof(f764,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f419,f647])).
fof(f761,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f646])).
fof(f762,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f419,f646])).
fof(f759,plain,(
  ( ! [X0,X1] : (sP3('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f728,f644])).
fof(f760,plain,(
  ( ! [X0,X1] : (sP3('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f427,f644])).
fof(f757,plain,(
  ( ! [X0,X1] : (sP3(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f728,f643])).
fof(f758,plain,(
  ( ! [X0,X1] : (sP3(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f427,f643])).
fof(f755,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f642])).
fof(f756,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f419,f642])).
fof(f753,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f728,f640])).
fof(f754,plain,(
  ( ! [X0,X1] : (sP4('const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f427,f640])).
fof(f751,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f728,f639])).
fof(f752,plain,(
  ( ! [X0,X1] : (sP4(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f427,f639])).
fof(f749,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f638])).
fof(f750,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f419,f638])).
fof(f747,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f417,f579])).
fof(f748,plain,(
  ( ! [X0] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f419,f579])).
fof(f745,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f417,f578])).
fof(f746,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f419,f578])).
fof(f696,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int',X3)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',X3)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f411])).
fof(f710,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f709])).
fof(f709,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f695])).
fof(f695,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f407])).
fof(f407,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f406])).
fof(f406,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f277])).
fof(f277,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X8,X21,X18,X22] : ((s(bool,X8) = s(bool,X21) & (p(s(bool,X21)) => s(bool,X18) = s(bool,X22))) => ((p(s(bool,X8)) => p(s(bool,X18))) <=> (p(s(bool,X21)) => p(s(bool,X22)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.bool.IMP_CONG')).
fof(f681,plain,(
  ( ! [X2,X0,X1] : (sP9(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f405])).
fof(f684,plain,(
  ( ! [X2,X0,X1] : (~sP9(X2,X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f405])).
fof(f677,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f402])).
fof(f402,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f401])).
fof(f401,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f293])).
fof(f678,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f403])).
fof(f679,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f403])).
fof(f680,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f403])).
fof(f670,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f400])).
fof(f671,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f400])).
fof(f672,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f400])).
fof(f674,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f400])).
fof(f675,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f400])).
fof(f676,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f400])).
fof(f664,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f397])).
fof(f667,plain,(
  ( ! [X2,X0,X1] : (~sP7(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f397])).
fof(f660,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f395])).
fof(f395,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(rectify,[],[f394])).
fof(f394,plain,(
  ! [X2,X0,X1] : ((~sP6(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP6(X2,X0,X1)))),
  inference(flattening,[],[f393])).
fof(f393,plain,(
  ! [X2,X0,X1] : ((~sP6(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP6(X2,X0,X1)))),
  inference(nnf_transformation,[],[f290])).
fof(f661,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f395])).
fof(f662,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f395])).
fof(f663,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f395])).
fof(f653,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f392])).
fof(f654,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f392])).
fof(f655,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f392])).
fof(f657,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f392])).
fof(f658,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f392])).
fof(f659,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f392])).
fof(f649,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f389])).
fof(f389,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP5(X2,X1,X0)) & (~sP5(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f289])).
fof(f289,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP5(X2,X1,X0))),
  inference(definition_folding,[],[f236,f288,f287,f286,f285])).
fof(f285,plain,(
  ! [X0,X1,X2] : (sP2(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f286,plain,(
  ! [X1,X0,X2] : (sP3(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f287,plain,(
  ! [X2,X0,X1] : (sP4(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f288,plain,(
  ! [X2,X1,X0] : (sP5(X2,X1,X0) <=> (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f236,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f235])).
fof(f235,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f110])).
fof(f110,axiom,(
  ! [X24,X11,X10] : ((p(s(bool,X10)) <=> s(bool,X11) = s(bool,X24)) <=> ((p(s(bool,X10)) | p(s(bool,X11)) | p(s(bool,X24))) & (p(s(bool,X10)) | ~p(s(bool,X24)) | ~p(s(bool,X11))) & (p(s(bool,X11)) | ~p(s(bool,X24)) | ~p(s(bool,X10))) & (p(s(bool,X24)) | ~p(s(bool,X11)) | ~p(s(bool,X10)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.sat.sat_2|49|_prove_ltb')).
fof(f650,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f389])).
fof(f651,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f389])).
fof(f652,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f389])).
fof(f645,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f388])).
fof(f388,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(flattening,[],[f387])).
fof(f387,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(nnf_transformation,[],[f285])).
fof(f646,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f388])).
fof(f647,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f388])).
fof(f648,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f388])).
fof(f641,plain,(
  ( ! [X2,X0,X1] : (~sP3(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f386,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f385])).
fof(f385,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(flattening,[],[f384])).
fof(f384,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(nnf_transformation,[],[f286])).
fof(f642,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f386])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f386])).
fof(f644,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f637,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f383])).
fof(f383,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f382])).
fof(f382,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(flattening,[],[f381])).
fof(f381,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(nnf_transformation,[],[f287])).
fof(f638,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f383])).
fof(f639,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f383])).
fof(f640,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f383])).
fof(f630,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f380])).
fof(f380,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP2(X2,X1,X0) & sP3(X1,X2,X0) & sP4(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP2(X2,X1,X0) | ~sP3(X1,X2,X0) | ~sP4(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f379])).
fof(f379,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP5(X2,X1,X0)))),
  inference(flattening,[],[f378])).
fof(f378,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP5(X2,X1,X0)))),
  inference(nnf_transformation,[],[f288])).
fof(f631,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP3(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f380])).
fof(f632,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP4(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f380])).
fof(f633,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f380])).
fof(f634,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | ~p(s(bool,X2)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f380])).
fof(f635,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X1)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f380])).
fof(f636,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X0)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f380])).
fof(f611,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f272])).
fof(f272,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f271])).
fof(f271,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X13,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X13)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X10))))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X10)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.LESS_EQ_TRANS')).
fof(f592,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f365])).
fof(f593,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f365])).
fof(f742,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f577,f728])).
fof(f577,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f358])).
fof(f567,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f352])).
fof(f352,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f214])).
fof(f214,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X13,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|5')).
fof(f568,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f352])).
fof(f566,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f351])).
fof(f564,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f350])).
fof(f557,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f210])).
fof(f210,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X13,X6] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X6))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|2')).
fof(f556,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f74])).
fof(f74,axiom,(
  ! [X13,X6] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|12')).
fof(f555,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f208])).
fof(f208,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X13] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X13)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT_SUC')).
fof(f554,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f207])).
fof(f207,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X13,X6] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|8')).
fof(f553,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X13] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X13))),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT|split|1')).
fof(f552,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X13,X6] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|5')).
fof(f551,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f102])).
fof(f102,axiom,(
  ! [X13,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|4')).
fof(f549,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f202])).
fof(f202,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f87])).
fof(f87,axiom,(
  ! [X13,X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X13))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|25')).
fof(f548,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f201])).
fof(f201,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f101])).
fof(f101,axiom,(
  ! [X13,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|3')).
fof(f547,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X13,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|6')).
fof(f546,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X13,X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|22')).
fof(f545,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X13,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|28')).
fof(f741,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f740,f421])).
fof(f740,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(forward_demodulation,[],[f739,f421])).
fof(f739,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(forward_demodulation,[],[f484,f421])).
fof(f484,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f310,plain,(
  ! [X0] : ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(flattening,[],[f309])).
fof(f309,plain,(
  ! [X0] : ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),
  inference(nnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X8] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> (s('type.integer.int',X8) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X8) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.integer.INT_DIVIDES_|49||split|1')).
fof(f738,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f737,f421])).
fof(f737,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f485,f421])).
fof(f485,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f736,plain,(
  ( ! [X0] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f735,f421])).
fof(f735,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f486,f421])).
fof(f486,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.integer.int',X0) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f310])).
fof(f474,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f304])).
fof(f731,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f450,f421])).
fof(f450,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT_LEFT_|49|')).
fof(f449,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f71])).
fof(f71,axiom,(
  ! [X13] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13)))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|9')).
fof(f448,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f72])).
fof(f72,axiom,(
  ! [X13] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X13)))))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|10')).
fof(f445,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f100])).
fof(f100,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|2')).
fof(f441,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|23')).
fof(f440,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f98])).
fof(f98,axiom,(
  ! [X13] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_lte|split|0')).
fof(f439,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X13] : s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.ADD|split|0')).
fof(f438,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f88])).
fof(f88,axiom,(
  ! [X13] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|26')).
fof(f437,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X13] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|6')).
fof(f436,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X13] : s('type.num.num',X13) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|7')).
fof(f435,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|20')).
fof(f434,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X13] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|29')).
fof(f431,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT_|48|')).
fof(f430,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.MULT_CLAUSES|split|0')).
fof(f429,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X13] : s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|1')).
fof(f428,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X13] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))),
  file('thm.int_arith.gcd2|49|_thm','thm.arithmetic.ZERO_LESS_EQ')).
fof(f427,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f96])).
fof(f96,axiom,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.|48|_0'))))),
  file('thm.int_arith.gcd2|49|_thm','thm.numeral.numeral_distrib|split|34')).
fof(f13458,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)) ) | $spl18),
  inference(forward_demodulation,[],[f13457,f443])).
fof(f13457,plain,(
  ( ! [X0] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f13431,f5433])).
fof(f13431,plain,(
  ( ! [X0] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X0) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1656,f5015])).
fof(f15176,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f475,f5142])).
fof(f5142,plain,(
  s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f1645])).
fof(f30463,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl32),
  inference(unit_resulting_resolution,[],[f728,f13392,f742])).
fof(f30409,plain,(
  $false | ($spl75 | $spl110)),
  inference(subsumption_resolution,[],[f30408,f417])).
fof(f30408,plain,(
  ~p(s(bool,'T_0')) | ($spl75 | $spl110)),
  inference(forward_demodulation,[],[f30407,f2821])).
fof(f30407,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.ZERO_0')))) | ($spl75 | $spl110)),
  inference(forward_demodulation,[],[f30119,f30139])).
fof(f30140,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl112),
  inference(cnf_transformation,[],[f30140_D])).
fof(f30140_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f30218,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl152),
  inference(cnf_transformation,[],[f30218_D])).
fof(f30218_D,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f30217,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | $spl18),
  inference(forward_demodulation,[],[f30216,f5432])).
fof(f5432,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3487])).
fof(f30216,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f30215,f5432])).
fof(f30215,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f30214,f5432])).
fof(f30214,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f30052,f5432])).
fof(f30052,plain,(
  ( ! [X243,X246,X244,X242,X247,X245] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,X242,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(superposition,[],[f5557,f5432])).
fof(f30213,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236)))))))) ) | $spl150),
  inference(cnf_transformation,[],[f30213_D])).
fof(f30213_D,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236)))))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f30212,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X236))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240)) ) | $spl18),
  inference(forward_demodulation,[],[f30211,f5432])).
fof(f30211,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(forward_demodulation,[],[f30210,f5432])).
fof(f30210,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(forward_demodulation,[],[f30051,f5432])).
fof(f30051,plain,(
  ( ! [X241,X239,X237,X240,X238,X236] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X237))),s('type.integer.int',X238)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X236) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X237) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X239))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X238),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X241,X239,X240,X238,X237,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X236)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X240) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X240))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X239),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X241),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X236))))))) | s('type.num.num',X240) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X236)))) ) | $spl18),
  inference(superposition,[],[f5557,f5432])).
fof(f30141,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl113),
  inference(cnf_transformation,[],[f30141_D])).
fof(f30141_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f30143,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl114),
  inference(cnf_transformation,[],[f30143_D])).
fof(f30143_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f30203,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(forward_demodulation,[],[f30048,f5550])).
fof(f30048,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl18),
  inference(superposition,[],[f5553,f5432])).
fof(f30201,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl149),
  inference(cnf_transformation,[],[f30201_D])).
fof(f30201_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl149),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl149])])).
fof(f30199,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl18),
  inference(forward_demodulation,[],[f30042,f5029])).
fof(f30042,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(superposition,[],[f5515,f5432])).
fof(f30194,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) | $spl146),
  inference(cnf_transformation,[],[f30194_D])).
fof(f30194_D,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f30129,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl93),
  inference(cnf_transformation,[],[f30129_D])).
fof(f30129_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl93),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl93])])).
fof(f30193,plain,(
  ( ! [X152,X153] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152))) ) | $spl18),
  inference(forward_demodulation,[],[f29899,f443])).
fof(f29899,plain,(
  ( ! [X152,X153] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X152,X153) | ~p(s(bool,X152)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1662,f5432])).
fof(f30192,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) | $spl144),
  inference(cnf_transformation,[],[f30192_D])).
fof(f30192_D,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f30191,plain,(
  ( ! [X151,X150] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151))) ) | $spl18),
  inference(forward_demodulation,[],[f29898,f443])).
fof(f29898,plain,(
  ( ! [X151,X150] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X150,X151) | p(s(bool,X151)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1661,f5432])).
fof(f30190,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) | $spl142),
  inference(cnf_transformation,[],[f30190_D])).
fof(f30190_D,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f30189,plain,(
  ( ! [X149,X148] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148))) ) | $spl18),
  inference(forward_demodulation,[],[f29897,f443])).
fof(f29897,plain,(
  ( ! [X149,X148] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X148,X149) | ~p(s(bool,X148)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1660,f5432])).
fof(f30188,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) | $spl140),
  inference(cnf_transformation,[],[f30188_D])).
fof(f30188_D,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f30187,plain,(
  ( ! [X146,X147] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147))) ) | $spl18),
  inference(forward_demodulation,[],[f29896,f443])).
fof(f29896,plain,(
  ( ! [X146,X147] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X146,X147) | ~p(s(bool,X147)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1659,f5432])).
fof(f30186,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) | $spl138),
  inference(cnf_transformation,[],[f30186_D])).
fof(f30186_D,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f30185,plain,(
  ( ! [X145] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145))) ) | $spl18),
  inference(forward_demodulation,[],[f29895,f443])).
fof(f29895,plain,(
  ( ! [X145] : (sP1(X145,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X145)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1658,f5432])).
fof(f30184,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) | $spl136),
  inference(cnf_transformation,[],[f30184_D])).
fof(f30184_D,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f30183,plain,(
  ( ! [X144] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144))) ) | $spl18),
  inference(forward_demodulation,[],[f29894,f443])).
fof(f29894,plain,(
  ( ! [X144] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X144) | p(s(bool,X144)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1657,f5432])).
fof(f30182,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) | $spl134),
  inference(cnf_transformation,[],[f30182_D])).
fof(f30182_D,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f30181,plain,(
  ( ! [X143] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143)) ) | $spl18),
  inference(forward_demodulation,[],[f29893,f443])).
fof(f29893,plain,(
  ( ! [X143] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X143) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1656,f5432])).
fof(f30180,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl132),
  inference(cnf_transformation,[],[f30180_D])).
fof(f30180_D,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f30179,plain,(
  ( ! [X142] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f29892,f443])).
fof(f29892,plain,(
  ( ! [X142] : (sP0(X142,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5432])).
fof(f30178,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) | $spl130),
  inference(cnf_transformation,[],[f30178_D])).
fof(f30178_D,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f30119,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl75),
  inference(cnf_transformation,[],[f30119_D])).
fof(f30119_D,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f30177,plain,(
  ( ! [X140,X141] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140))) ) | $spl18),
  inference(forward_demodulation,[],[f29887,f442])).
fof(f29887,plain,(
  ( ! [X140,X141] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X140,X141) | ~p(s(bool,X140)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1617,f5432])).
fof(f30176,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) | $spl128),
  inference(cnf_transformation,[],[f30176_D])).
fof(f30176_D,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f30175,plain,(
  ( ! [X138,X139] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139))) ) | $spl18),
  inference(forward_demodulation,[],[f29886,f442])).
fof(f29886,plain,(
  ( ! [X138,X139] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X138,X139) | p(s(bool,X139)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1616,f5432])).
fof(f30174,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) | $spl126),
  inference(cnf_transformation,[],[f30174_D])).
fof(f30174_D,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f30173,plain,(
  ( ! [X136,X137] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136))) ) | $spl18),
  inference(forward_demodulation,[],[f29885,f442])).
fof(f29885,plain,(
  ( ! [X136,X137] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X136,X137) | ~p(s(bool,X136)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1615,f5432])).
fof(f30172,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) | $spl124),
  inference(cnf_transformation,[],[f30172_D])).
fof(f30172_D,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f30171,plain,(
  ( ! [X134,X135] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135))) ) | $spl18),
  inference(forward_demodulation,[],[f29884,f442])).
fof(f29884,plain,(
  ( ! [X134,X135] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X134,X135) | ~p(s(bool,X135)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1614,f5432])).
fof(f30170,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) | $spl122),
  inference(cnf_transformation,[],[f30170_D])).
fof(f30170_D,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f30169,plain,(
  ( ! [X133] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133))) ) | $spl18),
  inference(forward_demodulation,[],[f29883,f442])).
fof(f29883,plain,(
  ( ! [X133] : (sP1(X133,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | p(s(bool,X133)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1613,f5432])).
fof(f30168,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) | $spl120),
  inference(cnf_transformation,[],[f30168_D])).
fof(f30168_D,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f30167,plain,(
  ( ! [X132] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132))) ) | $spl18),
  inference(forward_demodulation,[],[f29882,f442])).
fof(f29882,plain,(
  ( ! [X132] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X132) | p(s(bool,X132)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1612,f5432])).
fof(f30166,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) | $spl118),
  inference(cnf_transformation,[],[f30166_D])).
fof(f30166_D,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f30165,plain,(
  ( ! [X131] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131)) ) | $spl18),
  inference(forward_demodulation,[],[f29881,f442])).
fof(f29881,plain,(
  ( ! [X131] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X131) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1611,f5432])).
fof(f30164,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl116),
  inference(cnf_transformation,[],[f30164_D])).
fof(f30164_D,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f30163,plain,(
  ( ! [X130] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f29880,f442])).
fof(f29880,plain,(
  ( ! [X130] : (sP0(X130,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5432])).
fof(f30139,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl110),
  inference(cnf_transformation,[],[f30139_D])).
fof(f30139_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f30144,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(forward_demodulation,[],[f29813,f5240])).
fof(f29813,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5593,f5432])).
fof(f29808,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(superposition,[],[f5515,f5432])).
fof(f29799,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5031,f5432])).
fof(f30137,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38))) ) | $spl108),
  inference(cnf_transformation,[],[f30137_D])).
fof(f30137_D,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f29763,plain,(
  ( ! [X39,X38] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X38,X39) | ~p(s(bool,X38)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1662,f5432])).
fof(f30136,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37))) ) | $spl106),
  inference(cnf_transformation,[],[f30136_D])).
fof(f30136_D,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f29762,plain,(
  ( ! [X37,X36] : (sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X36,X37) | p(s(bool,X37)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1661,f5432])).
fof(f30135,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34))) ) | $spl104),
  inference(cnf_transformation,[],[f30135_D])).
fof(f30135_D,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f29761,plain,(
  ( ! [X35,X34] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X34,X35) | ~p(s(bool,X34)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1660,f5432])).
fof(f30134,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33))) ) | $spl102),
  inference(cnf_transformation,[],[f30134_D])).
fof(f30134_D,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f29760,plain,(
  ( ! [X33,X32] : (sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X32,X33) | ~p(s(bool,X33)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1659,f5432])).
fof(f30133,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31))) ) | $spl100),
  inference(cnf_transformation,[],[f30133_D])).
fof(f30133_D,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f29759,plain,(
  ( ! [X31] : (sP1(X31,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X31)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1658,f5432])).
fof(f30132,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30))) ) | $spl98),
  inference(cnf_transformation,[],[f30132_D])).
fof(f30132_D,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f29758,plain,(
  ( ! [X30] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X30) | p(s(bool,X30)) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1657,f5432])).
fof(f30131,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29)) ) | $spl96),
  inference(cnf_transformation,[],[f30131_D])).
fof(f30131_D,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f29757,plain,(
  ( ! [X29] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X29) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1656,f5432])).
fof(f30130,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl94),
  inference(cnf_transformation,[],[f30130_D])).
fof(f30130_D,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f29756,plain,(
  ( ! [X28] : (sP0(X28,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5432])).
fof(f30127,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26))) ) | $spl90),
  inference(cnf_transformation,[],[f30127_D])).
fof(f30127_D,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f29751,plain,(
  ( ! [X26,X27] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X26,X27) | ~p(s(bool,X26)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1617,f5432])).
fof(f30126,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25))) ) | $spl88),
  inference(cnf_transformation,[],[f30126_D])).
fof(f30126_D,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f29750,plain,(
  ( ! [X24,X25] : (sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X24,X25) | p(s(bool,X25)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1616,f5432])).
fof(f30125,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22))) ) | $spl86),
  inference(cnf_transformation,[],[f30125_D])).
fof(f30125_D,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f29749,plain,(
  ( ! [X23,X22] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X22,X23) | ~p(s(bool,X22)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1615,f5432])).
fof(f30124,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21))) ) | $spl84),
  inference(cnf_transformation,[],[f30124_D])).
fof(f30124_D,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f29748,plain,(
  ( ! [X21,X20] : (sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,X21) | ~p(s(bool,X21)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1614,f5432])).
fof(f30123,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19))) ) | $spl82),
  inference(cnf_transformation,[],[f30123_D])).
fof(f30123_D,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f29747,plain,(
  ( ! [X19] : (sP1(X19,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,X19)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1613,f5432])).
fof(f30122,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18))) ) | $spl80),
  inference(cnf_transformation,[],[f30122_D])).
fof(f30122_D,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f29746,plain,(
  ( ! [X18] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18) | p(s(bool,X18)) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1612,f5432])).
fof(f30121,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17)) ) | $spl78),
  inference(cnf_transformation,[],[f30121_D])).
fof(f30121_D,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f29745,plain,(
  ( ! [X17] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X17) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1611,f5432])).
fof(f30120,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl76),
  inference(cnf_transformation,[],[f30120_D])).
fof(f30120_D,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f29744,plain,(
  ( ! [X16] : (sP0(X16,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5432])).
fof(f20018,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007,f20009,f20011,f20013,f20015,f20017])).
fof(f20017,plain,(
  ( ! [X37,X38,X36] : (~sP6('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(subsumption_resolution,[],[f19590,f417])).
fof(f19590,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1620])).
fof(f20015,plain,(
  ( ! [X35,X33,X34] : (~sP8('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19589,f417])).
fof(f19589,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1619])).
fof(f20013,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X29)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30)) ) | $spl44),
  inference(subsumption_resolution,[],[f19588,f417])).
fof(f19588,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1617])).
fof(f20011,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19587,f417])).
fof(f19587,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP9('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1616])).
fof(f20009,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X23)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24)) ) | $spl44),
  inference(subsumption_resolution,[],[f19586,f417])).
fof(f19586,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1615])).
fof(f20007,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X20)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20)) ) | $spl44),
  inference(subsumption_resolution,[],[f19585,f417])).
fof(f19585,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X20)) | sP7('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1614])).
fof(f20005,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | $spl44),
  inference(subsumption_resolution,[],[f19584,f417])).
fof(f19584,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1613])).
fof(f20003,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | $spl44),
  inference(subsumption_resolution,[],[f19583,f417])).
fof(f19583,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1612])).
fof(f20001,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | $spl44),
  inference(subsumption_resolution,[],[f19582,f417])).
fof(f19582,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1611])).
fof(f19999,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19581,f417])).
fof(f19581,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1610])).
fof(f19997,plain,(
  ( ! [X37,X38,X36] : (~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(subsumption_resolution,[],[f19578,f417])).
fof(f19578,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1665])).
fof(f19995,plain,(
  ( ! [X35,X33,X34] : (~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19577,f417])).
fof(f19577,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1664])).
fof(f19993,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X29)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30)) ) | $spl44),
  inference(subsumption_resolution,[],[f19576,f417])).
fof(f19576,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1662])).
fof(f19991,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19575,f417])).
fof(f19575,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1661])).
fof(f19989,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X23)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24)) ) | $spl44),
  inference(subsumption_resolution,[],[f19574,f417])).
fof(f19574,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1660])).
fof(f19987,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X20)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20)) ) | $spl44),
  inference(subsumption_resolution,[],[f19573,f417])).
fof(f19573,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X20)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1659])).
fof(f19985,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | $spl44),
  inference(subsumption_resolution,[],[f19572,f417])).
fof(f19572,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1658])).
fof(f19983,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | $spl44),
  inference(subsumption_resolution,[],[f19571,f417])).
fof(f19571,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1657])).
fof(f19981,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | $spl44),
  inference(subsumption_resolution,[],[f19570,f417])).
fof(f19570,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1656])).
fof(f19979,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19569,f417])).
fof(f19569,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f1655])).
fof(f19932,plain,(
  ( ! [X57,X54,X56,X55] : (~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(subsumption_resolution,[],[f19530,f417])).
fof(f19530,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4898])).
fof(f19930,plain,(
  ( ! [X52,X50,X53,X51] : (~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(subsumption_resolution,[],[f19529,f417])).
fof(f19529,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4897])).
fof(f19928,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X45)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(subsumption_resolution,[],[f19528,f417])).
fof(f19528,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4895])).
fof(f19926,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X41)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(subsumption_resolution,[],[f19527,f417])).
fof(f19527,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X41)) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4894])).
fof(f19924,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(subsumption_resolution,[],[f19526,f417])).
fof(f19526,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4893])).
fof(f19922,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X33)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(subsumption_resolution,[],[f19525,f417])).
fof(f19525,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4892])).
fof(f19920,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X30)) | sP1(X30,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19524,f417])).
fof(f19524,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X30)) | sP1(X30,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4891])).
fof(f19918,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X27)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(subsumption_resolution,[],[f19523,f417])).
fof(f19523,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4890])).
fof(f19916,plain,(
  ( ! [X24,X23,X22] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(subsumption_resolution,[],[f19522,f417])).
fof(f19522,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4889])).
fof(f19914,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19521,f417])).
fof(f19521,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X21,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4888])).
fof(f19912,plain,(
  ( ! [X57,X54,X56,X55] : (~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(subsumption_resolution,[],[f19520,f417])).
fof(f19520,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'T_0')) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4659])).
fof(f19910,plain,(
  ( ! [X52,X50,X53,X51] : (~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(subsumption_resolution,[],[f19519,f417])).
fof(f19519,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4658])).
fof(f19908,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X45)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(subsumption_resolution,[],[f19518,f417])).
fof(f19518,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4656])).
fof(f19906,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X41)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(subsumption_resolution,[],[f19517,f417])).
fof(f19517,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X41)) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4655])).
fof(f19904,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(subsumption_resolution,[],[f19516,f417])).
fof(f19516,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4654])).
fof(f19902,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X33)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(subsumption_resolution,[],[f19515,f417])).
fof(f19515,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4653])).
fof(f19900,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X30)) | sP1(X30,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19514,f417])).
fof(f19514,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X30)) | sP1(X30,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4652])).
fof(f19898,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X27)) | sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(subsumption_resolution,[],[f19513,f417])).
fof(f19513,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4651])).
fof(f19896,plain,(
  ( ! [X24,X23,X22] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(subsumption_resolution,[],[f19512,f417])).
fof(f19512,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4650])).
fof(f19894,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19511,f417])).
fof(f19511,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X21,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4649])).
fof(f19829,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19828,f417])).
fof(f19828,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) ) | $spl44),
  inference(forward_demodulation,[],[f19827,f15224])).
fof(f19827,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19462,f417])).
fof(f19462,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9)))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7545])).
fof(f19825,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19824,f417])).
fof(f19824,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl44),
  inference(forward_demodulation,[],[f19823,f15224])).
fof(f19823,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19461,f417])).
fof(f19461,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7544])).
fof(f19821,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19820,f417])).
fof(f19820,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) ) | $spl44),
  inference(forward_demodulation,[],[f19819,f15224])).
fof(f19819,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) ) | $spl44),
  inference(subsumption_resolution,[],[f19460,f417])).
fof(f19460,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7543])).
fof(f19817,plain,(
  ( ! [X59,X57,X58,X56] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(subsumption_resolution,[],[f19458,f417])).
fof(f19458,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7231])).
fof(f19815,plain,(
  ( ! [X54,X52,X55,X53] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(subsumption_resolution,[],[f19457,f417])).
fof(f19457,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7230])).
fof(f19813,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(subsumption_resolution,[],[f19456,f417])).
fof(f19456,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7228])).
fof(f19811,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(subsumption_resolution,[],[f19455,f417])).
fof(f19455,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7227])).
fof(f19809,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(subsumption_resolution,[],[f19454,f417])).
fof(f19454,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7226])).
fof(f19807,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19453,f417])).
fof(f19453,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7225])).
fof(f19805,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19452,f417])).
fof(f19452,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7224])).
fof(f19803,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(subsumption_resolution,[],[f19451,f417])).
fof(f19451,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7223])).
fof(f19801,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19450,f417])).
fof(f19450,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7222])).
fof(f19799,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19449,f417])).
fof(f19449,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f7221])).
fof(f19797,plain,(
  ( ! [X57,X54,X56,X55] : (~sP6('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(subsumption_resolution,[],[f19447,f417])).
fof(f19447,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))),X56,X57)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4989])).
fof(f19795,plain,(
  ( ! [X52,X50,X53,X51] : (~sP8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(subsumption_resolution,[],[f19446,f417])).
fof(f19446,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X51)))),X52,X53)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4988])).
fof(f19793,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X45)) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(subsumption_resolution,[],[f19445,f417])).
fof(f19445,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X44)))),X45,X46)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4986])).
fof(f19791,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X41)) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(subsumption_resolution,[],[f19444,f417])).
fof(f19444,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X41)) | sP9('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40)))),X42,X41)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4985])).
fof(f19789,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(subsumption_resolution,[],[f19443,f417])).
fof(f19443,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4984])).
fof(f19787,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X33)) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(subsumption_resolution,[],[f19442,f417])).
fof(f19442,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP7('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32)))),X34,X33)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4983])).
fof(f19785,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X30)) | sP1(X30,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19441,f417])).
fof(f19441,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X30)) | sP1(X30,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4982])).
fof(f19783,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X27)) | sP1('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(subsumption_resolution,[],[f19440,f417])).
fof(f19440,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP1('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))),X27)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4981])).
fof(f19781,plain,(
  ( ! [X24,X23,X22] : (sP0('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(subsumption_resolution,[],[f19439,f417])).
fof(f19439,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))),X24)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4980])).
fof(f19779,plain,(
  ( ! [X21,X19,X20] : (sP0(X21,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19438,f417])).
fof(f19438,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X21,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4979])).
fof(f19777,plain,(
  ( ! [X59,X57,X58,X56] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(subsumption_resolution,[],[f19437,f417])).
fof(f19437,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4816])).
fof(f19775,plain,(
  ( ! [X54,X52,X55,X53] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(subsumption_resolution,[],[f19436,f417])).
fof(f19436,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4815])).
fof(f19773,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(subsumption_resolution,[],[f19435,f417])).
fof(f19435,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4813])).
fof(f19771,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(subsumption_resolution,[],[f19434,f417])).
fof(f19434,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4812])).
fof(f19769,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(subsumption_resolution,[],[f19433,f417])).
fof(f19433,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4811])).
fof(f19767,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19432,f417])).
fof(f19432,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4810])).
fof(f19765,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19431,f417])).
fof(f19431,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4809])).
fof(f19763,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(subsumption_resolution,[],[f19430,f417])).
fof(f19430,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4808])).
fof(f19761,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19429,f417])).
fof(f19429,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4807])).
fof(f19759,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19428,f417])).
fof(f19428,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4806])).
fof(f19757,plain,(
  ( ! [X59,X57,X58,X56] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(subsumption_resolution,[],[f19426,f417])).
fof(f19426,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4735])).
fof(f19755,plain,(
  ( ! [X54,X52,X55,X53] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(subsumption_resolution,[],[f19425,f417])).
fof(f19425,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4734])).
fof(f19753,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(subsumption_resolution,[],[f19424,f417])).
fof(f19424,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4732])).
fof(f19751,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(subsumption_resolution,[],[f19423,f417])).
fof(f19423,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4731])).
fof(f19749,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(subsumption_resolution,[],[f19422,f417])).
fof(f19422,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4730])).
fof(f19747,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19421,f417])).
fof(f19421,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4729])).
fof(f19745,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19420,f417])).
fof(f19420,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4728])).
fof(f19743,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(subsumption_resolution,[],[f19419,f417])).
fof(f19419,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4727])).
fof(f19741,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19418,f417])).
fof(f19418,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4726])).
fof(f19739,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19417,f417])).
fof(f19417,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4725])).
fof(f19737,plain,(
  ( ! [X59,X57,X58,X56] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(subsumption_resolution,[],[f19415,f417])).
fof(f19415,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))),X58,X59)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4583])).
fof(f19735,plain,(
  ( ! [X54,X52,X55,X53] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(subsumption_resolution,[],[f19414,f417])).
fof(f19414,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,X55)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4582])).
fof(f19733,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(subsumption_resolution,[],[f19413,f417])).
fof(f19413,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X47)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46)))),X47,X48)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4580])).
fof(f19731,plain,(
  ( ! [X43,X41,X44,X42] : (p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(subsumption_resolution,[],[f19412,f417])).
fof(f19412,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X42)))),X44,X43)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4579])).
fof(f19729,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(subsumption_resolution,[],[f19411,f417])).
fof(f19411,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))),X39,X40)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4578])).
fof(f19727,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(subsumption_resolution,[],[f19410,f417])).
fof(f19410,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X36,X35)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4577])).
fof(f19725,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19409,f417])).
fof(f19409,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | sP1(X32,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X30))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4576])).
fof(f19723,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(subsumption_resolution,[],[f19408,f417])).
fof(f19408,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X27))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4575])).
fof(f19721,plain,(
  ( ! [X26,X24,X25] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f19407,f417])).
fof(f19407,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X26)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4574])).
fof(f19719,plain,(
  ( ! [X23,X21,X22] : (sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19406,f417])).
fof(f19406,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X23,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f4573])).
fof(f19714,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f19713,f417])).
fof(f19713,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl44),
  inference(forward_demodulation,[],[f19712,f15224])).
fof(f19712,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl44),
  inference(subsumption_resolution,[],[f19401,f417])).
fof(f19401,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f564])).
fof(f19624,plain,(
  ( ! [X30,X31] : (s('type.num.num',X30) != s('type.num.num',X31)) ) | $spl44),
  inference(subsumption_resolution,[],[f19338,f3241])).
fof(f19338,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))) | s('type.num.num',X30) != s('type.num.num',X31)) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f18069])).
fof(f19621,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl44),
  inference(subsumption_resolution,[],[f19307,f15224])).
fof(f19307,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f474])).
fof(f18946,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,'T_0') != s(bool,f(s(X180,sK17(X181,X182,bool,X180)))) | s(fun(X180,bool),X181) = s(fun(X180,bool),X182) | s(bool,X183) = s(bool,g(s(X180,sK17(X181,X182,bool,X180)))) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f610,f1282])).
fof(f18945,plain,(
  ( ! [X177,X178,X176,X179] : (s(X178,f(s(bool,'T_0'))) != s(X178,g(s(bool,'T_0'))) | s(fun(bool,X178),X176) = s(fun(bool,X178),X177) | s(bool,X179) = s(bool,sK17(X176,X177,X178,bool)) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f610,f1282])).
fof(f19283,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X133),s('type.num.num',X132)))) | s(bool,X134) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X132))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X133))))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(subsumption_resolution,[],[f18925,f417])).
fof(f18925,plain,(
  ( ! [X134,X132,X133] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X133),s('type.num.num',X132)))) | s(bool,X134) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X132))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X133))))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f567,f1282])).
fof(f19280,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X106),s('type.num.num',X105)))) | s('type.num.num',X105) = s('type.num.num',X106) | s(bool,X107) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X105),s('type.num.num',X106))) | s(bool,'T_0') = s(bool,X107)) )),
  inference(subsumption_resolution,[],[f18911,f417])).
fof(f18911,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X106),s('type.num.num',X105)))) | s('type.num.num',X105) = s('type.num.num',X106) | s(bool,X107) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X105),s('type.num.num',X106))) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f564,f1282])).
fof(f19279,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X102),s('type.num.num',X103)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X103)))) | s(bool,X104) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X102))) | s(bool,'T_0') = s(bool,X104)) )),
  inference(subsumption_resolution,[],[f18910,f417])).
fof(f18910,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X102),s('type.num.num',X103)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X103)))) | s(bool,X104) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X101),s('type.num.num',X102))) | s(bool,'T_0') = s(bool,X104)) )),
  inference(superposition,[],[f611,f1282])).
fof(f19274,plain,(
  ( ! [X57,X54,X56,X55] : (~sP6(X54,X55,X56) | sP7(X54,X55,X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f18897,f417])).
fof(f18897,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'T_0')) | ~sP6(X54,X55,X56) | sP7(X54,X55,X56) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f712,f1282])).
fof(f19273,plain,(
  ( ! [X52,X50,X53,X51] : (~sP8(X50,X51,X52) | sP9(X50,X51,X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f18896,f417])).
fof(f18896,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | ~sP8(X50,X51,X52) | sP9(X50,X51,X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f711,f1282])).
fof(f19272,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,X44)) | sP9(X43,X44,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f18894,f417])).
fof(f18894,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X44)) | sP9(X43,X44,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f683,f1282])).
fof(f19271,plain,(
  ( ! [X39,X41,X42,X40] : (p(s(bool,X40)) | sP9(X39,X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f18893,f417])).
fof(f18893,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,X40)) | sP9(X39,X41,X40) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f682,f1282])).
fof(f19270,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | sP7(X35,X36,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f18892,f417])).
fof(f18892,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X36)) | sP7(X35,X36,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f666,f1282])).
fof(f19269,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X32)) | sP7(X31,X33,X32) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f18891,f417])).
fof(f18891,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | sP7(X31,X33,X32) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f665,f1282])).
fof(f19268,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f18890,f417])).
fof(f18890,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f597,f1282])).
fof(f19267,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f18889,f417])).
fof(f18889,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f594,f1282])).
fof(f19266,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f18888,f417])).
fof(f18888,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f579,f1282])).
fof(f19265,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f18887,f417])).
fof(f18887,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f578,f1282])).
fof(f19264,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f18886,f417])).
fof(f18886,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f561,f1282])).
fof(f19263,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f18882,f417])).
fof(f18882,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f474,f1282])).
fof(f18859,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f470,f1282])).
fof(f18785,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,X195) != s(bool,f(s(X192,sK17(X193,X194,bool,X192)))) | s(fun(X192,bool),X193) = s(fun(X192,bool),X194) | s(bool,'T_0') = s(bool,X195) | s(bool,'T_0') = s(bool,g(s(X192,sK17(X193,X194,bool,X192))))) )),
  inference(superposition,[],[f610,f1282])).
fof(f18784,plain,(
  ( ! [X191,X189,X190,X188] : (s(X190,f(s(bool,X191))) != s(X190,g(s(bool,X191))) | s(fun(bool,X190),X188) = s(fun(bool,X190),X189) | s(bool,'T_0') = s(bool,X191) | s(bool,'T_0') = s(bool,sK17(X188,X189,X190,bool))) )),
  inference(superposition,[],[f610,f1282])).
fof(f18679,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X61))) | s(bool,X62) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61))))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f1282,f442])).
fof(f18677,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X58))) | s(bool,X59) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f1282,f443])).
fof(f18674,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X52))) | s(bool,X54) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f1282,f550])).
fof(f18671,plain,(
  ( ! [X47,X45,X46] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num',X45))) | s(bool,X47) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X45))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X46))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f1282,f549])).
fof(f18669,plain,(
  ( ! [X41,X42,X40] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num',X41))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f1282,f546])).
fof(f18668,plain,(
  ( ! [X39,X37,X38] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))) | s(bool,X39) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X38))))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f1282,f551])).
fof(f18667,plain,(
  ( ! [X35,X36,X34] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num',X35))) | s(bool,X36) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X35))))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f1282,f547])).
fof(f18666,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X32))) | s(bool,X33) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f1282,f545])).
fof(f18665,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',X29))) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X29))))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f1282,f548])).
fof(f18648,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1282,f1282])).
fof(f18611,plain,(
  ( ! [X72,X71] : (s(bool,X72) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X71))) | s(bool,'T_0') = s(bool,X72) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71)))))) )),
  inference(superposition,[],[f1282,f442])).
fof(f18609,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X68)))))) )),
  inference(superposition,[],[f1282,f443])).
fof(f18605,plain,(
  ( ! [X61,X62,X63] : (s(bool,X63) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num',X61))) | s(bool,'T_0') = s(bool,X63) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X62)))))) )),
  inference(superposition,[],[f1282,f550])).
fof(f18602,plain,(
  ( ! [X54,X56,X55] : (s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num',X54))) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X54))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X55)))))) )),
  inference(superposition,[],[f1282,f549])).
fof(f18600,plain,(
  ( ! [X50,X51,X49] : (s(bool,X51) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num',X50))) | s(bool,'T_0') = s(bool,X51) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X49))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X50)))))) )),
  inference(superposition,[],[f1282,f546])).
fof(f18599,plain,(
  ( ! [X47,X48,X46] : (s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num',X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X46))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X47)))))) )),
  inference(superposition,[],[f1282,f551])).
fof(f18598,plain,(
  ( ! [X45,X43,X44] : (s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X43))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X44)))))) )),
  inference(superposition,[],[f1282,f547])).
fof(f18597,plain,(
  ( ! [X41,X42,X40] : (s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X42) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X40))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X41)))))) )),
  inference(superposition,[],[f1282,f545])).
fof(f18596,plain,(
  ( ! [X39,X37,X38] : (s(bool,X39) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X38))) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X38)))))) )),
  inference(superposition,[],[f1282,f548])).
fof(f18081,plain,(
  ( ! [X80,X78,X81,X79] : (~sP6('const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num',X79)),X80,X81) | sP7('const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num',X79)),X80,X81) | s('type.num.num',X78) != s('type.num.num',X79)) )),
  inference(subsumption_resolution,[],[f17996,f417])).
fof(f17996,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,'T_0')) | ~sP6('const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num',X79)),X80,X81) | sP7('const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num',X79)),X80,X81) | s('type.num.num',X78) != s('type.num.num',X79)) )),
  inference(superposition,[],[f712,f3241])).
fof(f18080,plain,(
  ( ! [X76,X74,X77,X75] : (~sP8('const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75)),X76,X77) | sP9('const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75)),X76,X77) | s('type.num.num',X74) != s('type.num.num',X75)) )),
  inference(subsumption_resolution,[],[f17995,f417])).
fof(f17995,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,'T_0')) | ~sP8('const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75)),X76,X77) | sP9('const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75)),X76,X77) | s('type.num.num',X74) != s('type.num.num',X75)) )),
  inference(superposition,[],[f711,f3241])).
fof(f18079,plain,(
  ( ! [X72,X71,X73] : (s(bool,X73) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))) | p(s(bool,X73)) | s('type.num.num',X71) != s('type.num.num',X72)) )),
  inference(subsumption_resolution,[],[f17994,f417])).
fof(f17994,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,'T_0')) | s(bool,X73) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X72))) | p(s(bool,X73)) | s('type.num.num',X71) != s('type.num.num',X72)) )),
  inference(superposition,[],[f710,f3241])).
fof(f18078,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X69)) | sP9('const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num',X68)),X69,X70) | s('type.num.num',X67) != s('type.num.num',X68)) )),
  inference(subsumption_resolution,[],[f17993,f417])).
fof(f17993,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X69)) | sP9('const.arithmetic.<=_2'(s('type.num.num',X67),s('type.num.num',X68)),X69,X70) | s('type.num.num',X67) != s('type.num.num',X68)) )),
  inference(superposition,[],[f683,f3241])).
fof(f18077,plain,(
  ( ! [X66,X64,X65,X63] : (p(s(bool,X65)) | sP9('const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64)),X66,X65) | s('type.num.num',X63) != s('type.num.num',X64)) )),
  inference(subsumption_resolution,[],[f17992,f417])).
fof(f17992,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | p(s(bool,X65)) | sP9('const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num',X64)),X66,X65) | s('type.num.num',X63) != s('type.num.num',X64)) )),
  inference(superposition,[],[f682,f3241])).
fof(f18076,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,X61)) | sP7('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,X62) | s('type.num.num',X59) != s('type.num.num',X60)) )),
  inference(subsumption_resolution,[],[f17991,f417])).
fof(f17991,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | ~p(s(bool,X61)) | sP7('const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60)),X61,X62) | s('type.num.num',X59) != s('type.num.num',X60)) )),
  inference(superposition,[],[f666,f3241])).
fof(f18075,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X57)) | sP7('const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num',X56)),X58,X57) | s('type.num.num',X55) != s('type.num.num',X56)) )),
  inference(subsumption_resolution,[],[f17990,f417])).
fof(f17990,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X57)) | sP7('const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num',X56)),X58,X57) | s('type.num.num',X55) != s('type.num.num',X56)) )),
  inference(superposition,[],[f665,f3241])).
fof(f18074,plain,(
  ( ! [X54,X52,X53] : (p(s(bool,X54)) | sP1(X54,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))) | s('type.num.num',X52) != s('type.num.num',X53)) )),
  inference(subsumption_resolution,[],[f17989,f417])).
fof(f17989,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | p(s(bool,X54)) | sP1(X54,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X53))) | s('type.num.num',X52) != s('type.num.num',X53)) )),
  inference(superposition,[],[f597,f3241])).
fof(f18073,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,X51)) | sP1('const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50)),X51) | s('type.num.num',X49) != s('type.num.num',X50)) )),
  inference(subsumption_resolution,[],[f17988,f417])).
fof(f17988,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X51)) | sP1('const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50)),X51) | s('type.num.num',X49) != s('type.num.num',X50)) )),
  inference(superposition,[],[f594,f3241])).
fof(f18072,plain,(
  ( ! [X47,X48,X46] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num',X47)),X48) | s('type.num.num',X46) != s('type.num.num',X47)) )),
  inference(subsumption_resolution,[],[f17987,f417])).
fof(f17987,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num',X47)),X48) | s('type.num.num',X46) != s('type.num.num',X47)) )),
  inference(superposition,[],[f579,f3241])).
fof(f18071,plain,(
  ( ! [X45,X43,X44] : (sP0(X45,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s('type.num.num',X43) != s('type.num.num',X44)) )),
  inference(subsumption_resolution,[],[f17986,f417])).
fof(f17986,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | sP0(X45,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s('type.num.num',X43) != s('type.num.num',X44)) )),
  inference(superposition,[],[f578,f3241])).
fof(f18070,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X42)) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s('type.num.num',X40) != s('type.num.num',X41)) )),
  inference(subsumption_resolution,[],[f17985,f417])).
fof(f17985,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X42)) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s('type.num.num',X40) != s('type.num.num',X41)) )),
  inference(superposition,[],[f561,f3241])).
fof(f18069,plain,(
  ( ! [X30,X31] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))) | s('type.num.num',X30) != s('type.num.num',X31)) )),
  inference(subsumption_resolution,[],[f17981,f417])).
fof(f17981,plain,(
  ( ! [X30,X31] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))) | s('type.num.num',X30) != s('type.num.num',X31)) )),
  inference(superposition,[],[f474,f3241])).
fof(f18068,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))) )),
  inference(subsumption_resolution,[],[f18067,f7212])).
fof(f18067,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))) )),
  inference(subsumption_resolution,[],[f17974,f417])).
fof(f17974,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))) )),
  inference(superposition,[],[f567,f3241])).
fof(f18066,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X3)))) | s('type.num.num',X1) != s('type.num.num',X2)) )),
  inference(subsumption_resolution,[],[f17960,f417])).
fof(f17960,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X3)))) | s('type.num.num',X1) != s('type.num.num',X2)) )),
  inference(superposition,[],[f611,f3241])).
fof(f17958,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X13))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X13)))) )),
  inference(superposition,[],[f3241,f551])).
fof(f17957,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X11)))) )),
  inference(superposition,[],[f3241,f547])).
fof(f17956,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))) )),
  inference(superposition,[],[f3241,f545])).
fof(f17955,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))) )),
  inference(superposition,[],[f3241,f548])).
fof(f17936,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))),s('type.num.num',X29))))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num',X29))),s('type.num.num',X29)))) )),
  inference(superposition,[],[f3241,f553])).
fof(f17932,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))))) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19)))))) )),
  inference(superposition,[],[f3241,f555])).
fof(f17909,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))),s('type.num.num',X29))),s('type.num.num',X30))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num',X29))),s('type.num.num',X29)))) )),
  inference(superposition,[],[f3241,f553])).
fof(f17905,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))),s('type.num.num',X20))) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19)))))) )),
  inference(superposition,[],[f3241,f555])).
fof(f20016,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007,f20009,f20011,f20013,f20015])).
fof(f20014,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007,f20009,f20011,f20013])).
fof(f20012,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007,f20009,f20011])).
fof(f20010,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007,f20009])).
fof(f20008,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005,f20007])).
fof(f20006,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003,f20005])).
fof(f20004,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001,f20003])).
fof(f20002,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999,f20001])).
fof(f20000,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997,f19999])).
fof(f19998,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995,f19997])).
fof(f19996,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993,f19995])).
fof(f19994,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991,f19993])).
fof(f19992,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989,f19991])).
fof(f19990,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987,f19989])).
fof(f19988,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985,f19987])).
fof(f19986,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983,f19985])).
fof(f19984,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981,f19983])).
fof(f19982,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979,f19981])).
fof(f19980,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932,f19979])).
fof(f19978,plain,(
  $false | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19567,f417])).
fof(f19567,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f10687])).
fof(f10687,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) ) | $spl18),
  inference(unit_resulting_resolution,[],[f3240,f5552])).
fof(f5552,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | $spl18),
  inference(forward_demodulation,[],[f5033,f5012])).
fof(f5033,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f482])).
fof(f19977,plain,(
  $false | ($spl18 | $spl23 | $spl44)),
  inference(subsumption_resolution,[],[f19566,f417])).
fof(f19566,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl23 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5248])).
fof(f5248,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ($spl18 | $spl23)),
  inference(backward_demodulation,[],[f5012,f2824])).
fof(f2824,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | $spl23),
  inference(unit_resulting_resolution,[],[f2712,f482])).
fof(f19976,plain,(
  $false | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19565,f417])).
fof(f19565,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f10651])).
fof(f10651,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) ) | $spl18),
  inference(unit_resulting_resolution,[],[f3239,f5552])).
fof(f19975,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19974,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19974,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19564,f417])).
fof(f19564,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5552])).
fof(f19973,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19972,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19972,plain,(
  ( ! [X37,X38,X36] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19556,f417])).
fof(f19556,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5602])).
fof(f5602,plain,(
  ( ! [X37,X38,X36] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36))))) ) | $spl18),
  inference(forward_demodulation,[],[f5542,f5012])).
fof(f5542,plain,(
  ( ! [X37,X38,X36] : (~sP6('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)))) | sP7('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36)))),X37,X38)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4498])).
fof(f19971,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19970,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19970,plain,(
  ( ! [X35,X33,X34] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19555,f417])).
fof(f19555,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5601])).
fof(f5601,plain,(
  ( ! [X35,X33,X34] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33))))) ) | $spl18),
  inference(forward_demodulation,[],[f5541,f5012])).
fof(f5541,plain,(
  ( ! [X35,X33,X34] : (~sP8('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33)))) | sP9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33)))),X34,X35)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4497])).
fof(f19969,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19968,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19968,plain,(
  ( ! [X37,X38,X36] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19554,f417])).
fof(f19554,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5598])).
fof(f5598,plain,(
  ( ! [X37,X38,X36] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38) | ~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36))))) ) | $spl18),
  inference(forward_demodulation,[],[f5509,f5012])).
fof(f5509,plain,(
  ( ! [X37,X38,X36] : (~sP6('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.ZERO_0')),X37,X38) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X36)))) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.num.|48|_0')),X37,X38)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4366])).
fof(f19967,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19966,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19966,plain,(
  ( ! [X35,X33,X34] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19553,f417])).
fof(f19553,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5597])).
fof(f5597,plain,(
  ( ! [X35,X33,X34] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35) | ~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33))))) ) | $spl18),
  inference(forward_demodulation,[],[f5508,f5012])).
fof(f5508,plain,(
  ( ! [X35,X33,X34] : (~sP8('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.ZERO_0')),X34,X35) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X33)))) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.num.|48|_0')),X34,X35)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4365])).
fof(f19965,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19964,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19964,plain,(
  ( ! [X30,X28,X29] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30) | ~p(s(bool,X29))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19552,f417])).
fof(f19552,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30) | ~p(s(bool,X29))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5540])).
fof(f5540,plain,(
  ( ! [X30,X28,X29] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28)))),X29,X30) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)))) | ~p(s(bool,X29))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4495])).
fof(f19963,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19962,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19962,plain,(
  ( ! [X26,X27,X25] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26) | p(s(bool,X26))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19551,f417])).
fof(f19551,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26) | p(s(bool,X26))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5539])).
fof(f5539,plain,(
  ( ! [X26,X27,X25] : (sP9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))),X27,X26) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X25)))) | p(s(bool,X26))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4494])).
fof(f19961,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19960,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19960,plain,(
  ( ! [X24,X23,X22] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24) | ~p(s(bool,X23))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19550,f417])).
fof(f19550,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24) | ~p(s(bool,X23))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5538])).
fof(f5538,plain,(
  ( ! [X24,X23,X22] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22)))),X23,X24) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) | ~p(s(bool,X23))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4493])).
fof(f19959,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19958,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19958,plain,(
  ( ! [X21,X19,X20] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20) | ~p(s(bool,X20))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19549,f417])).
fof(f19549,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20) | ~p(s(bool,X20))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5537])).
fof(f5537,plain,(
  ( ! [X21,X19,X20] : (sP7('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),X21,X20) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X19)))) | ~p(s(bool,X20))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4492])).
fof(f19957,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19956,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19956,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19548,f417])).
fof(f19548,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | p(s(bool,X18))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5536])).
fof(f5536,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) | p(s(bool,X18))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4491])).
fof(f19955,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19954,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19954,plain,(
  ( ! [X15,X16] : (sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19547,f417])).
fof(f19547,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | p(s(bool,X16))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5535])).
fof(f5535,plain,(
  ( ! [X15,X16] : (sP1('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))),X16) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)))) | p(s(bool,X16))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4490])).
fof(f19953,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19952,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19952,plain,(
  ( ! [X14,X13] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19546,f417])).
fof(f19546,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5534])).
fof(f5534,plain,(
  ( ! [X14,X13] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))),X14) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4489])).
fof(f19951,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19950,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19950,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19545,f417])).
fof(f19545,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5533])).
fof(f5533,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4488])).
fof(f19949,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19948,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19948,plain,(
  ( ! [X30,X28,X29] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.ZERO_0')),X29,X30) | ~p(s(bool,X29))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19544,f417])).
fof(f19544,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.ZERO_0')),X29,X30) | ~p(s(bool,X29))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5507])).
fof(f5507,plain,(
  ( ! [X30,X28,X29] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X28))),s('type.num.num','const.arithmetic.ZERO_0')),X29,X30) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X28)))) | ~p(s(bool,X29))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4363])).
fof(f19947,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19946,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19946,plain,(
  ( ! [X26,X27,X25] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0')),X27,X26) | p(s(bool,X26))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19543,f417])).
fof(f19543,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0')),X27,X26) | p(s(bool,X26))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5506])).
fof(f5506,plain,(
  ( ! [X26,X27,X25] : (sP9('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0')),X27,X26) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X25)))) | p(s(bool,X26))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4362])).
fof(f19945,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19944,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19944,plain,(
  ( ! [X24,X23,X22] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.ZERO_0')),X23,X24) | ~p(s(bool,X23))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19542,f417])).
fof(f19542,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.ZERO_0')),X23,X24) | ~p(s(bool,X23))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5505])).
fof(f5505,plain,(
  ( ! [X24,X23,X22] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.ZERO_0')),X23,X24) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X22)))) | ~p(s(bool,X23))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4361])).
fof(f19943,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19942,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19942,plain,(
  ( ! [X21,X19,X20] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.ZERO_0')),X21,X20) | ~p(s(bool,X20))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19541,f417])).
fof(f19541,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.ZERO_0')),X21,X20) | ~p(s(bool,X20))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5504])).
fof(f5504,plain,(
  ( ! [X21,X19,X20] : (sP7('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.ZERO_0')),X21,X20) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X19)))) | ~p(s(bool,X20))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4360])).
fof(f19941,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19940,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19940,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X18))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19540,f417])).
fof(f19540,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | sP1(X18,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X18))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5503])).
fof(f5503,plain,(
  ( ! [X17,X18] : (sP1(X18,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X17)))) | p(s(bool,X18))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4359])).
fof(f19939,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19938,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19938,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.ZERO_0')),X16) | p(s(bool,X16))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19539,f417])).
fof(f19539,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.ZERO_0')),X16) | p(s(bool,X16))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5502])).
fof(f5502,plain,(
  ( ! [X15,X16] : (sP1('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.ZERO_0')),X16) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X15)))) | p(s(bool,X16))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4358])).
fof(f19937,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19936,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19936,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19538,f417])).
fof(f19538,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5501])).
fof(f5501,plain,(
  ( ! [X14,X13] : (sP0('const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')),X14) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X13))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4357])).
fof(f19935,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19934,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19934,plain,(
  ( ! [X12,X11] : (sP0(X12,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19537,f417])).
fof(f19537,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | sP0(X12,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5500])).
fof(f19933,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930,f19932])).
fof(f19931,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928,f19930])).
fof(f19929,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926,f19928])).
fof(f19927,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924,f19926])).
fof(f19925,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922,f19924])).
fof(f19923,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920,f19922])).
fof(f19921,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918,f19920])).
fof(f19919,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916,f19918])).
fof(f19917,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914,f19916])).
fof(f19915,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912,f19914])).
fof(f19913,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910,f19912])).
fof(f19911,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908,f19910])).
fof(f19909,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906,f19908])).
fof(f19907,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904,f19906])).
fof(f19905,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902,f19904])).
fof(f19903,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900,f19902])).
fof(f19901,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898,f19900])).
fof(f19899,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896,f19898])).
fof(f19897,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894,f19896])).
fof(f19895,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829,f19894])).
fof(f19893,plain,(
  $false | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19508,f417])).
fof(f19508,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f17310])).
fof(f17310,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK10))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl18),
  inference(unit_resulting_resolution,[],[f9497,f567])).
fof(f9497,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK10)))))) | $spl18),
  inference(unit_resulting_resolution,[],[f6660,f568])).
fof(f6660,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK10),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(forward_demodulation,[],[f6638,f5550])).
fof(f6638,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK10)))))) | $spl18),
  inference(unit_resulting_resolution,[],[f5578,f5552])).
fof(f5578,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK10))) | $spl18),
  inference(forward_demodulation,[],[f5439,f5242])).
fof(f5439,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK10))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3908])).
fof(f19892,plain,(
  $false | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19507,f417])).
fof(f19507,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f15492])).
fof(f15492,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl18),
  inference(unit_resulting_resolution,[],[f8782,f567])).
fof(f8782,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11)))))) | $spl18),
  inference(unit_resulting_resolution,[],[f6659,f568])).
fof(f6659,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK11),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl18),
  inference(forward_demodulation,[],[f6639,f5550])).
fof(f6639,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK11)))))) | $spl18),
  inference(unit_resulting_resolution,[],[f5579,f5552])).
fof(f5579,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK11))) | $spl18),
  inference(forward_demodulation,[],[f5440,f5242])).
fof(f5440,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK11))) | $spl18),
  inference(backward_demodulation,[],[f5012,f3909])).
fof(f19891,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19504,f417])).
fof(f19504,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f15224,f10306])).
fof(f19890,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19889,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19889,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10)))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19503,f417])).
fof(f19503,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10)))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f6669])).
fof(f6669,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6668,f451])).
fof(f6668,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6654,f5550])).
fof(f6654,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10)))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))))) ) | $spl18),
  inference(superposition,[],[f5552,f451])).
fof(f19888,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19887,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19887,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19502,f417])).
fof(f19502,plain,(
  ( ! [X26] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18475])).
fof(f18475,plain,(
  ( ! [X26] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18474,f451])).
fof(f18474,plain,(
  ( ! [X26] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18410,f5029])).
fof(f18410,plain,(
  ( ! [X26] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X26))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f451])).
fof(f7542,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl18),
  inference(subsumption_resolution,[],[f7541,f417])).
fof(f7541,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl18),
  inference(forward_demodulation,[],[f7451,f440])).
fof(f7451,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl18),
  inference(superposition,[],[f564,f5029])).
fof(f19886,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19885,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19885,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19501,f417])).
fof(f19501,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18473])).
fof(f18473,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18472,f556])).
fof(f18472,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18409,f5029])).
fof(f18409,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X25)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f556])).
fof(f19884,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19883,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19883,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19500,f417])).
fof(f19500,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18461])).
fof(f18461,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18460,f554])).
fof(f18460,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18404,f5029])).
fof(f18404,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f554])).
fof(f19882,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19881,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19881,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19499,f417])).
fof(f19499,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18452])).
fof(f18452,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18451,f11600])).
fof(f11600,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl18),
  inference(backward_demodulation,[],[f11599,f557])).
fof(f11599,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X14)))))) ) | $spl18),
  inference(forward_demodulation,[],[f11598,f5024])).
fof(f5024,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f439])).
fof(f11598,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))))) ) | $spl18),
  inference(forward_demodulation,[],[f11457,f5024])).
fof(f11457,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X14)))))))) ) | $spl18),
  inference(superposition,[],[f557,f5242])).
fof(f18451,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18398,f5029])).
fof(f18398,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f11600])).
fof(f19880,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19879,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19879,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19498,f417])).
fof(f19498,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f6664])).
fof(f6664,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6663,f446])).
fof(f6663,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) ) | $spl18),
  inference(forward_demodulation,[],[f6648,f5550])).
fof(f6648,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) ) | $spl18),
  inference(superposition,[],[f5552,f446])).
fof(f19878,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19877,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19877,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19497,f417])).
fof(f19497,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18446])).
fof(f18446,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18445,f446])).
fof(f18445,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18393,f5029])).
fof(f18393,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f446])).
fof(f19876,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19875,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19875,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19496,f417])).
fof(f19496,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18443])).
fof(f18443,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f18442,f552])).
fof(f18442,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f18391,f5029])).
fof(f18391,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))))) ) | $spl18),
  inference(superposition,[],[f7542,f552])).
fof(f19874,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19873,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19873,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19494,f417])).
fof(f19494,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f18413])).
fof(f18413,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl18),
  inference(superposition,[],[f7542,f5029])).
fof(f19872,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19871,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19871,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19493,f417])).
fof(f19493,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f7542])).
fof(f19870,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19869,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19869,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19492,f417])).
fof(f19492,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f7462])).
fof(f7462,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1)) ) | $spl18),
  inference(forward_demodulation,[],[f7461,f5012])).
fof(f7461,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl18),
  inference(forward_demodulation,[],[f7460,f5012])).
fof(f7460,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl18),
  inference(subsumption_resolution,[],[f7459,f417])).
fof(f7459,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl18),
  inference(forward_demodulation,[],[f7419,f440])).
fof(f7419,plain,(
  ( ! [X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl18),
  inference(superposition,[],[f564,f5012])).
fof(f19868,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19867,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19867,plain,(
  ( ! [X39,X37,X38] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19491,f417])).
fof(f19491,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5600])).
fof(f5600,plain,(
  ( ! [X39,X37,X38] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39) | ~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f5525,f5012])).
fof(f5525,plain,(
  ( ! [X39,X37,X38] : (~sP6('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.arithmetic.ZERO_0')),X38,X39) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.ZERO_0')))) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X37))),s('type.num.num','const.num.|48|_0')),X38,X39)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4436])).
fof(f19866,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19865,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19865,plain,(
  ( ! [X35,X36,X34] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19490,f417])).
fof(f19490,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5599])).
fof(f5599,plain,(
  ( ! [X35,X36,X34] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36) | ~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f5524,f5012])).
fof(f5524,plain,(
  ( ! [X35,X36,X34] : (~sP8('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.ZERO_0')),X35,X36) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.ZERO_0')))) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))),s('type.num.num','const.num.|48|_0')),X35,X36)) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4435])).
fof(f19864,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19863,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19863,plain,(
  ( ! [X30,X31,X29] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.ZERO_0')),X30,X31) | ~p(s(bool,X30))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19488,f417])).
fof(f19488,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.ZERO_0')),X30,X31) | ~p(s(bool,X30))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5523])).
fof(f5523,plain,(
  ( ! [X30,X31,X29] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X29))),s('type.num.num','const.arithmetic.ZERO_0')),X30,X31) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X30))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4433])).
fof(f19862,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19861,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19861,plain,(
  ( ! [X28,X26,X27] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')),X28,X27) | p(s(bool,X27))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19487,f417])).
fof(f19487,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')),X28,X27) | p(s(bool,X27))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5522])).
fof(f5522,plain,(
  ( ! [X28,X26,X27] : (sP9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))),s('type.num.num','const.arithmetic.ZERO_0')),X28,X27) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X27))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4432])).
fof(f19860,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19859,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19859,plain,(
  ( ! [X24,X23,X25] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.ZERO_0')),X24,X25) | ~p(s(bool,X24))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19486,f417])).
fof(f19486,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.ZERO_0')),X24,X25) | ~p(s(bool,X24))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5521])).
fof(f5521,plain,(
  ( ! [X24,X23,X25] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.ZERO_0')),X24,X25) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X24))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4431])).
fof(f19858,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19857,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19857,plain,(
  ( ! [X21,X22,X20] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.ZERO_0')),X22,X21) | ~p(s(bool,X21))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19485,f417])).
fof(f19485,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.ZERO_0')),X22,X21) | ~p(s(bool,X21))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5520])).
fof(f5520,plain,(
  ( ! [X21,X22,X20] : (sP7('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.ZERO_0')),X22,X21) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.ZERO_0')))) | ~p(s(bool,X21))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4430])).
fof(f19856,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19855,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19855,plain,(
  ( ! [X19,X18] : (sP1(X19,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X19))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19484,f417])).
fof(f19484,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | sP1(X19,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.ZERO_0'))) | p(s(bool,X19))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5519])).
fof(f5519,plain,(
  ( ! [X19,X18] : (sP1(X19,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X19))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4429])).
fof(f19854,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19853,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19853,plain,(
  ( ! [X17,X16] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0')),X17) | p(s(bool,X17))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19483,f417])).
fof(f19483,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0')),X17) | p(s(bool,X17))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5518])).
fof(f5518,plain,(
  ( ! [X17,X16] : (sP1('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.ZERO_0')),X17) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.ZERO_0')))) | p(s(bool,X17))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4428])).
fof(f19852,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19851,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19851,plain,(
  ( ! [X14,X15] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19482,f417])).
fof(f19482,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5517])).
fof(f5517,plain,(
  ( ! [X14,X15] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.ZERO_0')),X15) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4427])).
fof(f19850,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19849,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19849,plain,(
  ( ! [X12,X13] : (sP0(X13,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19481,f417])).
fof(f19481,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | sP0(X13,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5516])).
fof(f5516,plain,(
  ( ! [X12,X13] : (sP0(X13,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f4426])).
fof(f19830,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825,f19829])).
fof(f19826,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821,f19825])).
fof(f19822,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817,f19821])).
fof(f19818,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815,f19817])).
fof(f19816,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813,f19815])).
fof(f19814,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811,f19813])).
fof(f19812,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809,f19811])).
fof(f19810,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807,f19809])).
fof(f19808,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805,f19807])).
fof(f19806,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803,f19805])).
fof(f19804,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801,f19803])).
fof(f19802,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799,f19801])).
fof(f19800,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797,f19799])).
fof(f19798,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795,f19797])).
fof(f19796,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793,f19795])).
fof(f19794,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791,f19793])).
fof(f19792,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789,f19791])).
fof(f19790,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787,f19789])).
fof(f19788,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785,f19787])).
fof(f19786,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783,f19785])).
fof(f19784,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781,f19783])).
fof(f19782,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779,f19781])).
fof(f19780,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777,f19779])).
fof(f19778,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775,f19777])).
fof(f19776,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773,f19775])).
fof(f19774,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771,f19773])).
fof(f19772,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769,f19771])).
fof(f19770,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767,f19769])).
fof(f19768,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765,f19767])).
fof(f19766,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763,f19765])).
fof(f19764,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761,f19763])).
fof(f19762,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759,f19761])).
fof(f19760,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757,f19759])).
fof(f19758,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755,f19757])).
fof(f19756,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753,f19755])).
fof(f19754,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751,f19753])).
fof(f19752,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749,f19751])).
fof(f19750,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747,f19749])).
fof(f19748,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745,f19747])).
fof(f19746,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743,f19745])).
fof(f19744,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741,f19743])).
fof(f19742,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739,f19741])).
fof(f19740,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737,f19739])).
fof(f19738,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735,f19737])).
fof(f19736,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733,f19735])).
fof(f19734,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731,f19733])).
fof(f19732,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729,f19731])).
fof(f19730,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727,f19729])).
fof(f19728,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725,f19727])).
fof(f19726,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723,f19725])).
fof(f19724,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721,f19723])).
fof(f19722,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719,f19721])).
fof(f19720,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714,f19719])).
fof(f19718,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19717,f417])).
fof(f19717,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(forward_demodulation,[],[f19716,f15224])).
fof(f19716,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19402,f417])).
fof(f19402,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) ) | $spl44),
  inference(backward_demodulation,[],[f15224,f567])).
fof(f19715,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624,f19714])).
fof(f19711,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19710,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19710,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19389,f417])).
fof(f19389,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5563])).
fof(f5563,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f5562,f5012])).
fof(f5562,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f5045,f5012])).
fof(f5045,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f741])).
fof(f19709,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19708,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19708,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19387,f417])).
fof(f19387,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (~p(s(bool,'T_0')) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f16693])).
fof(f16693,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | $spl18),
  inference(forward_demodulation,[],[f16692,f7814])).
fof(f7814,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f7717,f5041])).
fof(f5041,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f732])).
fof(f7717,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(superposition,[],[f553,f5041])).
fof(f16692,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f16691,f7814])).
fof(f16691,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f16690,f7814])).
fof(f16690,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f16637,f7814])).
fof(f16637,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(superposition,[],[f5557,f7814])).
fof(f19707,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19706,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19706,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19386,f417])).
fof(f19386,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (~p(s(bool,'T_0')) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f16954])).
fof(f16954,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253)) ) | $spl18),
  inference(forward_demodulation,[],[f16953,f8126])).
fof(f8126,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X5)))) ) | $spl18),
  inference(forward_demodulation,[],[f8042,f5040])).
fof(f5040,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f731])).
fof(f8042,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) ) | $spl18),
  inference(superposition,[],[f555,f5040])).
fof(f16953,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))))))) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))))) ) | $spl18),
  inference(forward_demodulation,[],[f16952,f8126])).
fof(f16952,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))))) ) | $spl18),
  inference(forward_demodulation,[],[f16951,f8126])).
fof(f16951,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))))) ) | $spl18),
  inference(forward_demodulation,[],[f16897,f8126])).
fof(f16897,plain,(
  ( ! [X253,X251,X249,X254,X252,X250,X248] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X248))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))),s('type.integer.int',X250))),s('type.integer.int',X251)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X249) | s('type.integer.int',X250) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X252))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X251),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X254,X252,X253,X251,X250,X249,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X253) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X253))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X252),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X249))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X254),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248))))))))) | s('type.num.num',X253) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X249),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X248)))))) ) | $spl18),
  inference(superposition,[],[f5557,f8126])).
fof(f19705,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19704,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19704,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))))) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19385,f417])).
fof(f19385,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))))) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9311])).
fof(f9311,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))))) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | $spl18),
  inference(forward_demodulation,[],[f9310,f553])).
fof(f9310,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))))) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9309,f553])).
fof(f9309,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))))))) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9308,f553])).
fof(f9308,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))))))) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9232,f553])).
fof(f9232,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,X87,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))))))) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X87),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)))))) ) | $spl18),
  inference(superposition,[],[f5557,f553])).
fof(f19703,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19702,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19702,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))))) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19384,f417])).
fof(f19384,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (~p(s(bool,'T_0')) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))))) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9299])).
fof(f9299,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))))) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | $spl18),
  inference(forward_demodulation,[],[f9298,f555])).
fof(f9298,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))))) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9297,f555])).
fof(f9297,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))))))) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9296,f555])).
fof(f9296,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))))))) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9229,f555])).
fof(f9229,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,X64,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))))))) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X64),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f555])).
fof(f19701,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19700,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19700,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))))) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19383,f417])).
fof(f19383,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))))) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9334])).
fof(f9334,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))))) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | $spl18),
  inference(forward_demodulation,[],[f9333,f451])).
fof(f9333,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))))) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9332,f451])).
fof(f9332,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))))))) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9331,f451])).
fof(f9331,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))))))) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9240,f451])).
fof(f9240,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,X145,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))))))) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X145),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f451])).
fof(f19699,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19698,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19698,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))))) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19382,f417])).
fof(f19382,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (~p(s(bool,'T_0')) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))))) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9291])).
fof(f9291,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))))) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | $spl18),
  inference(forward_demodulation,[],[f9290,f446])).
fof(f9290,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))))) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9289,f446])).
fof(f9289,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))))))) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9288,f446])).
fof(f9288,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))))))) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9227,f446])).
fof(f9227,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,X49,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))))))) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f446])).
fof(f19697,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19696,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19696,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))))) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19381,f417])).
fof(f19381,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (~p(s(bool,'T_0')) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))))) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9330])).
fof(f9330,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))))) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | $spl18),
  inference(forward_demodulation,[],[f9329,f556])).
fof(f9329,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))))) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9328,f556])).
fof(f9328,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))))))) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9327,f556])).
fof(f9327,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))))))) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9239,f556])).
fof(f9239,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,X138,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))))))) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f556])).
fof(f19695,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19694,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19694,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))))) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19380,f417])).
fof(f19380,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (~p(s(bool,'T_0')) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))))) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9319])).
fof(f9319,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))))) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | $spl18),
  inference(forward_demodulation,[],[f9318,f554])).
fof(f9318,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))))) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9317,f554])).
fof(f9317,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))))))) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9316,f554])).
fof(f9316,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))))))) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9235,f554])).
fof(f9235,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,X109,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))))))) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f554])).
fof(f19693,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19692,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19692,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19379,f417])).
fof(f19379,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f11606])).
fof(f11606,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11605,f11599])).
fof(f11605,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11604,f11599])).
fof(f11604,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11603,f11599])).
fof(f11603,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11601,f11599])).
fof(f11601,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(backward_demodulation,[],[f11599,f9307])).
fof(f9307,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f9306,f557])).
fof(f9306,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9305,f557])).
fof(f9305,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9304,f557])).
fof(f9304,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9231,f557])).
fof(f9231,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,X79,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f557])).
fof(f19691,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19690,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19690,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))))) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19378,f417])).
fof(f19378,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (~p(s(bool,'T_0')) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))))) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9283])).
fof(f9283,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))))) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | $spl18),
  inference(forward_demodulation,[],[f9282,f552])).
fof(f9282,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))))) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9281,f552])).
fof(f9281,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))))) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9280,f552])).
fof(f9280,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))))) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9225,f552])).
fof(f9225,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,X35,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))))) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))))))) ) | $spl18),
  inference(superposition,[],[f5557,f552])).
fof(f19689,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19688,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19688,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19377,f417])).
fof(f19377,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (~p(s(bool,'T_0')) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f16689])).
fof(f16689,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | $spl18),
  inference(forward_demodulation,[],[f16688,f7814])).
fof(f16688,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X242)))) ) | $spl18),
  inference(forward_demodulation,[],[f16687,f7814])).
fof(f16687,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X242)))) ) | $spl18),
  inference(forward_demodulation,[],[f16636,f7814])).
fof(f16636,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X242)))) ) | $spl18),
  inference(superposition,[],[f5557,f7814])).
fof(f19687,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19686,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19686,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19376,f417])).
fof(f19376,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (~p(s(bool,'T_0')) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f16950])).
fof(f16950,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))),s('type.num.num',X242))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246)) ) | $spl18),
  inference(forward_demodulation,[],[f16949,f8126])).
fof(f16949,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))),s('type.num.num',X242)))) ) | $spl18),
  inference(forward_demodulation,[],[f16948,f8126])).
fof(f16948,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))),s('type.num.num',X242)))) ) | $spl18),
  inference(forward_demodulation,[],[f16896,f8126])).
fof(f16896,plain,(
  ( ! [X243,X241,X246,X244,X242,X247,X245] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X241))))),s('type.integer.int',X243))),s('type.integer.int',X244)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X242) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))) | s('type.integer.int',X243) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X245))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X244),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X247,X245,X246,X244,X243,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241)),X242)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X246) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X246))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X245),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X247),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X242))))))) | s('type.num.num',X246) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X241))),s('type.num.num',X242)))) ) | $spl18),
  inference(superposition,[],[f5557,f8126])).
fof(f19683,plain,(
  $false | ($spl18 | $spl23 | $spl44)),
  inference(global_subsumption,[],[f19682,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19682,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4)) ) | ($spl18 | $spl23 | $spl44)),
  inference(subsumption_resolution,[],[f19374,f417])).
fof(f19374,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4)) ) | ($spl18 | $spl23 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9338])).
fof(f9338,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X1))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4)) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9337,f5015])).
fof(f9337,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X1))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9336,f5015])).
fof(f9336,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X1))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) ) | ($spl18 | $spl23)),
  inference(subsumption_resolution,[],[f9335,f5241])).
fof(f9335,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X1))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) ) | $spl18),
  inference(forward_demodulation,[],[f9241,f5015])).
fof(f9241,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X1))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) ) | $spl18),
  inference(superposition,[],[f5557,f5015])).
fof(f19681,plain,(
  $false | ($spl18 | $spl23 | $spl44)),
  inference(global_subsumption,[],[f19680,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19680,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120)) ) | ($spl18 | $spl23 | $spl44)),
  inference(subsumption_resolution,[],[f19373,f417])).
fof(f19373,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (~p(s(bool,'T_0')) | s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120)) ) | ($spl18 | $spl23 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9375])).
fof(f9375,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X117))),s('type.integer.int',X118)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120)) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9374,f5039])).
fof(f9374,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X117))),s('type.integer.int',X118)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120) | s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116)))) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f9373,f5039])).
fof(f9373,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X117))),s('type.integer.int',X118)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116)))) ) | ($spl18 | $spl23)),
  inference(subsumption_resolution,[],[f9372,f5241])).
fof(f9372,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X117))),s('type.integer.int',X118)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116)))) ) | $spl18),
  inference(forward_demodulation,[],[f9257,f5039])).
fof(f9257,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X117))),s('type.integer.int',X118)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X116) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.integer.int',X117) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X119))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X118),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X121,X119,X120,X118,X117,'const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0')),X116)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X120) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X120))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X119),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X121),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X116))))))) | s('type.num.num',X120) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X116)))) ) | $spl18),
  inference(superposition,[],[f5557,f5039])).
fof(f19679,plain,(
  $false | ($spl18 | $spl23 | $spl44)),
  inference(global_subsumption,[],[f19678,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19678,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X58))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62)) ) | ($spl18 | $spl23 | $spl44)),
  inference(subsumption_resolution,[],[f19372,f417])).
fof(f19372,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~p(s(bool,'T_0')) | s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X58))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62)) ) | ($spl18 | $spl23 | $spl44)),
  inference(backward_demodulation,[],[f15224,f10190])).
fof(f10190,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X58))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X59))),s('type.integer.int',X60)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62)) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f10189,f8689])).
fof(f10189,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X59))),s('type.integer.int',X60)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62) | s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))),s('type.num.num',X58)))) ) | ($spl18 | $spl23)),
  inference(forward_demodulation,[],[f10188,f8689])).
fof(f10188,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X59))),s('type.integer.int',X60)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))),s('type.num.num',X58)))) ) | ($spl18 | $spl23)),
  inference(subsumption_resolution,[],[f10187,f5241])).
fof(f10187,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X59))),s('type.integer.int',X60)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))),s('type.num.num',X58)))) ) | $spl18),
  inference(forward_demodulation,[],[f10154,f8689])).
fof(f10154,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int',X59))),s('type.integer.int',X60)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X58) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))) | s('type.integer.int',X59) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X61))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X60),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X63,X61,X62,X60,X59,'const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10)),X58)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X62) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X62))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X63),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X58))))))) | s('type.num.num',X62) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK11),s('type.num.num',sK10))),s('type.num.num',X58)))) ) | $spl18),
  inference(superposition,[],[f5557,f8689])).
fof(f19677,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19676,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19676,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))),s('type.num.num',X87))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19371,f417])).
fof(f19371,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'T_0')) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))),s('type.num.num',X87))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9365])).
fof(f9365,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))),s('type.num.num',X87))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91)) ) | $spl18),
  inference(forward_demodulation,[],[f9364,f553])).
fof(f9364,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))),s('type.num.num',X87)))) ) | $spl18),
  inference(forward_demodulation,[],[f9363,f553])).
fof(f9363,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))),s('type.num.num',X87)))) ) | $spl18),
  inference(forward_demodulation,[],[f9253,f553])).
fof(f9253,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X85))),s('type.num.num',X86))))),s('type.integer.int',X88))),s('type.integer.int',X89)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X87) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))) | s('type.integer.int',X88) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X90))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X89),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X92,X90,X91,X89,X88,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86)),X87)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X91) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X91))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X90),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X92),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X87))))))) | s('type.num.num',X91) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X85),s('type.num.num',X86))),s('type.num.num',X86))),s('type.num.num',X87)))) ) | $spl18),
  inference(superposition,[],[f5557,f553])).
fof(f19675,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19674,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19674,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))),s('type.num.num',X64))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19370,f417])).
fof(f19370,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (~p(s(bool,'T_0')) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))),s('type.num.num',X64))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9356])).
fof(f9356,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))),s('type.num.num',X64))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68)) ) | $spl18),
  inference(forward_demodulation,[],[f9355,f555])).
fof(f9355,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))),s('type.num.num',X64)))) ) | $spl18),
  inference(forward_demodulation,[],[f9354,f555])).
fof(f9354,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))),s('type.num.num',X64)))) ) | $spl18),
  inference(forward_demodulation,[],[f9250,f555])).
fof(f9250,plain,(
  ( ! [X68,X66,X64,X62,X69,X67,X65,X63] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',X63))))))),s('type.integer.int',X65))),s('type.integer.int',X66)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X64) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))) | s('type.integer.int',X65) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X67))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X66),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X69,X67,X68,X66,X65,'const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63)))),X64)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X68) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X68))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X67),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X69),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X64))))))) | s('type.num.num',X68) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X62),s('type.num.num',X63))))),s('type.num.num',X64)))) ) | $spl18),
  inference(superposition,[],[f5557,f555])).
fof(f19673,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19672,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19672,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))),s('type.num.num',X145))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19369,f417])).
fof(f19369,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (~p(s(bool,'T_0')) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))),s('type.num.num',X145))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9381])).
fof(f9381,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))),s('type.num.num',X145))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149)) ) | $spl18),
  inference(forward_demodulation,[],[f9380,f451])).
fof(f9380,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))),s('type.num.num',X145)))) ) | $spl18),
  inference(forward_demodulation,[],[f9379,f451])).
fof(f9379,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))),s('type.num.num',X145)))) ) | $spl18),
  inference(forward_demodulation,[],[f9261,f451])).
fof(f9261,plain,(
  ( ! [X146,X144,X149,X147,X145,X150,X148] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X144))))))),s('type.integer.int',X146))),s('type.integer.int',X147)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X145) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))) | s('type.integer.int',X146) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X148))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X147),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X150,X148,X149,X147,X146,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144)))),X145)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X149) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X149))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X148),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X150),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X145))))))) | s('type.num.num',X149) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X144))))),s('type.num.num',X145)))) ) | $spl18),
  inference(superposition,[],[f5557,f451])).
fof(f19671,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19670,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19670,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num',X49))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19368,f417])).
fof(f19368,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (~p(s(bool,'T_0')) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num',X49))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9350])).
fof(f9350,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))),s('type.num.num',X49))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53)) ) | $spl18),
  inference(forward_demodulation,[],[f9349,f446])).
fof(f9349,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))),s('type.num.num',X49)))) ) | $spl18),
  inference(forward_demodulation,[],[f9348,f446])).
fof(f9348,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))),s('type.num.num',X49)))) ) | $spl18),
  inference(forward_demodulation,[],[f9248,f446])).
fof(f9248,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X48))))))),s('type.integer.int',X50))),s('type.integer.int',X51)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X49) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))) | s('type.integer.int',X50) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X52))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X51),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X54,X52,X53,X51,X50,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48)))),X49)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X53) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X53))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X52),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X54),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X49))))))) | s('type.num.num',X53) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))))),s('type.num.num',X49)))) ) | $spl18),
  inference(superposition,[],[f5557,f446])).
fof(f19669,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19668,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19668,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))),s('type.num.num',X138))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19367,f417])).
fof(f19367,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (~p(s(bool,'T_0')) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))),s('type.num.num',X138))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9378])).
fof(f9378,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))),s('type.num.num',X138))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142)) ) | $spl18),
  inference(forward_demodulation,[],[f9377,f556])).
fof(f9377,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))),s('type.num.num',X138)))) ) | $spl18),
  inference(forward_demodulation,[],[f9376,f556])).
fof(f9376,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))),s('type.num.num',X138)))) ) | $spl18),
  inference(forward_demodulation,[],[f9260,f556])).
fof(f9260,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X136),s('type.num.num',X137))))))),s('type.integer.int',X139))),s('type.integer.int',X140)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X138) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))) | s('type.integer.int',X139) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X141))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X140),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X143,X141,X142,X140,X139,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137)))),X138)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X142) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X142))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X141),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X143),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X138))))))) | s('type.num.num',X142) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X136))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X137))))),s('type.num.num',X138)))) ) | $spl18),
  inference(superposition,[],[f5557,f556])).
fof(f19667,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19666,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19666,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))),s('type.num.num',X109))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19366,f417])).
fof(f19366,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (~p(s(bool,'T_0')) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))),s('type.num.num',X109))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9371])).
fof(f9371,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))),s('type.num.num',X109))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113)) ) | $spl18),
  inference(forward_demodulation,[],[f9370,f554])).
fof(f9370,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))),s('type.num.num',X109)))) ) | $spl18),
  inference(forward_demodulation,[],[f9369,f554])).
fof(f9369,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))),s('type.num.num',X109)))) ) | $spl18),
  inference(forward_demodulation,[],[f9256,f554])).
fof(f9256,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))),s('type.integer.int',X110))),s('type.integer.int',X111)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X109) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))) | s('type.integer.int',X110) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X112))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X111),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X114,X112,X113,X111,X110,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108)))),X109)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X113) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X113))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X112),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X114),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X109))))))) | s('type.num.num',X113) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X107))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X108))))),s('type.num.num',X109)))) ) | $spl18),
  inference(superposition,[],[f5557,f554])).
fof(f19665,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19664,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19664,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19365,f417])).
fof(f19365,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f11609])).
fof(f11609,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11608,f11599])).
fof(f11608,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11607,f11599])).
fof(f11607,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f11602,f11599])).
fof(f11602,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.num.num',X79))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(backward_demodulation,[],[f11599,f9362])).
fof(f9362,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))),s('type.num.num',X79))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83)) ) | $spl18),
  inference(forward_demodulation,[],[f9361,f557])).
fof(f9361,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))),s('type.num.num',X79)))) ) | $spl18),
  inference(forward_demodulation,[],[f9360,f557])).
fof(f9360,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))),s('type.num.num',X79)))) ) | $spl18),
  inference(forward_demodulation,[],[f9252,f557])).
fof(f9252,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))))),s('type.integer.int',X80))),s('type.integer.int',X81)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X79) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))) | s('type.integer.int',X80) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X82))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X81),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X84,X82,X83,X81,X80,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78)))),X79)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X83) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X83))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X82),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X84),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X79))))))) | s('type.num.num',X83) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X78))))),s('type.num.num',X79)))) ) | $spl18),
  inference(superposition,[],[f5557,f557])).
fof(f19663,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19662,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19662,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',X35))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19364,f417])).
fof(f19364,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (~p(s(bool,'T_0')) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',X35))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9344])).
fof(f9344,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',X35))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39)) ) | $spl18),
  inference(forward_demodulation,[],[f9343,f552])).
fof(f9343,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))),s('type.num.num',X35)))) ) | $spl18),
  inference(forward_demodulation,[],[f9342,f552])).
fof(f9342,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))),s('type.num.num',X35)))) ) | $spl18),
  inference(forward_demodulation,[],[f9246,f552])).
fof(f9246,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num',X34))))))),s('type.integer.int',X36))),s('type.integer.int',X37)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X35) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) | s('type.integer.int',X36) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X38))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X37),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X40,X38,X39,X37,X36,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X39) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X39))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X38),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X40),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X35))))))) | s('type.num.num',X39) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X33))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))),s('type.num.num',X35)))) ) | $spl18),
  inference(superposition,[],[f5557,f552])).
fof(f19661,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19660,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19660,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,X8,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19363,f417])).
fof(f19363,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,X8,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9383])).
fof(f9383,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,X8,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | $spl18),
  inference(forward_demodulation,[],[f9263,f5038])).
fof(f9263,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,X8,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | $spl18),
  inference(superposition,[],[f5557,f5038])).
fof(f19659,plain,(
  $false | ($spl4 | $spl18 | $spl44)),
  inference(global_subsumption,[],[f19658,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19658,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19362,f417])).
fof(f19362,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9382])).
fof(f9382,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',sK12))),s('type.integer.int',X2)))))) | s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f9262,f726])).
fof(f9262,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',sK12))),s('type.integer.int',X2)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,X2,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18)),
  inference(superposition,[],[f5557,f726])).
fof(f19657,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19656,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19656,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X8,X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19361,f417])).
fof(f19361,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X8,X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9386])).
fof(f9386,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X8,X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | $spl18),
  inference(forward_demodulation,[],[f9266,f5038])).
fof(f9266,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int',X8))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X7) | s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X11,X9,X10,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK14),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X8,X7,X6)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X10) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X10))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))) | s('type.num.num',X10) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))) ) | $spl18),
  inference(superposition,[],[f5557,f5038])).
fof(f19655,plain,(
  $false | ($spl4 | $spl18 | $spl44)),
  inference(global_subsumption,[],[f19654,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19654,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19360,f417])).
fof(f19360,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9385])).
fof(f9385,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',sK12)))))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',sK12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f9265,f726])).
fof(f9265,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))),s('type.integer.int',X2))),s('type.integer.int',sK12)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X3))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X5,X3,X4,'const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))),X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl4 | $spl18)),
  inference(superposition,[],[f5557,f726])).
fof(f19653,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19652,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19652,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (s('type.integer.int',X15) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X15,X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19355,f417])).
fof(f19355,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | s('type.integer.int',X15) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X15,X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9387])).
fof(f9387,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (s('type.integer.int',X15) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X15,X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int',X15))),s('type.integer.int',X12)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | $spl18),
  inference(forward_demodulation,[],[f9267,f5042])).
fof(f9267,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int',X15))),s('type.integer.int',X12)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.integer.int',X15) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X15,X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | $spl18),
  inference(superposition,[],[f5557,f5042])).
fof(f19651,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19650,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19650,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (s('type.integer.int',X12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,X15,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19354,f417])).
fof(f19354,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | s('type.integer.int',X12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,X15,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9384])).
fof(f9384,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (s('type.integer.int',X12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,X15,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int',X12))),s('type.integer.int',X15)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | $spl18),
  inference(forward_demodulation,[],[f9264,f5042])).
fof(f9264,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int',X12))),s('type.integer.int',X15)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X14) | s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X16))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X18,X16,X17,X15,'const.integer.int_div_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X14,X13)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X17) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X17))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X18),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X13))))))) | s('type.num.num',X17) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X14),s('type.num.num',X13)))) ) | $spl18),
  inference(superposition,[],[f5557,f5042])).
fof(f19649,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19648,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19648,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X93),s('type.num.num',X94))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19353,f417])).
fof(f19353,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (~p(s(bool,'T_0')) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X93),s('type.num.num',X94))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9368])).
fof(f9368,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X93),s('type.num.num',X94))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | $spl18),
  inference(forward_demodulation,[],[f9367,f5021])).
fof(f5021,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f436])).
fof(f9367,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X94)))) ) | $spl18),
  inference(forward_demodulation,[],[f9366,f5021])).
fof(f9366,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X94)))) ) | $spl18),
  inference(forward_demodulation,[],[f9254,f5021])).
fof(f9254,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')),X94)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))))) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X94)))) ) | $spl18),
  inference(superposition,[],[f5557,f5021])).
fof(f19647,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19646,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19646,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X70),s('type.num.num',X71))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19352,f417])).
fof(f19352,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X70),s('type.num.num',X71))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9359])).
fof(f9359,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X70),s('type.num.num',X71))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | $spl18),
  inference(forward_demodulation,[],[f9358,f5024])).
fof(f9358,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))),s('type.num.num',X71)))) ) | $spl18),
  inference(forward_demodulation,[],[f9357,f5024])).
fof(f9357,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))),s('type.num.num',X71)))) ) | $spl18),
  inference(forward_demodulation,[],[f9251,f5024])).
fof(f9251,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)),X71)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))))) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))),s('type.num.num',X71)))) ) | $spl18),
  inference(superposition,[],[f5557,f5024])).
fof(f19645,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19644,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19644,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X55),s('type.num.num',X56))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19351,f417])).
fof(f19351,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X55),s('type.num.num',X56))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9353])).
fof(f9353,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X55),s('type.num.num',X56))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | $spl18),
  inference(forward_demodulation,[],[f9352,f5016])).
fof(f5016,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl18),
  inference(backward_demodulation,[],[f5012,f429])).
fof(f9352,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X56)))) ) | $spl18),
  inference(forward_demodulation,[],[f9351,f5016])).
fof(f9351,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X56)))) ) | $spl18),
  inference(forward_demodulation,[],[f9249,f5016])).
fof(f9249,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')),X56)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))))) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X56)))) ) | $spl18),
  inference(superposition,[],[f5557,f5016])).
fof(f19643,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19642,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19642,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19350,f417])).
fof(f19350,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9347])).
fof(f9347,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | $spl18),
  inference(forward_demodulation,[],[f9346,f5040])).
fof(f9346,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))),s('type.num.num',X42)))) ) | $spl18),
  inference(forward_demodulation,[],[f9345,f5040])).
fof(f9345,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))),s('type.num.num',X42)))) ) | $spl18),
  inference(forward_demodulation,[],[f9247,f5040])).
fof(f9247,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)),X42)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))))) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))),s('type.num.num',X42)))) ) | $spl18),
  inference(superposition,[],[f5557,f5040])).
fof(f19641,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19640,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19640,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X19),s('type.num.num',X20))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19349,f417])).
fof(f19349,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X19),s('type.num.num',X20))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9341])).
fof(f9341,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X19),s('type.num.num',X20))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | $spl18),
  inference(forward_demodulation,[],[f9340,f5041])).
fof(f9340,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X20)))) ) | $spl18),
  inference(forward_demodulation,[],[f9339,f5041])).
fof(f9339,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X20)))) ) | $spl18),
  inference(forward_demodulation,[],[f9244,f5041])).
fof(f9244,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X20)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))))) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X20)))) ) | $spl18),
  inference(superposition,[],[f5557,f5041])).
fof(f19639,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19638,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19638,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num',X93))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))))) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19348,f417])).
fof(f19348,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (~p(s(bool,'T_0')) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num',X93))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))))) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9315])).
fof(f9315,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num',X93))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))))) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98)) ) | $spl18),
  inference(forward_demodulation,[],[f9314,f5021])).
fof(f9314,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))))))) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9313,f5021])).
fof(f9313,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9312,f5021])).
fof(f9312,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X93) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9233,f5021])).
fof(f9233,plain,(
  ( ! [X94,X99,X97,X95,X93,X98,X96] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X93))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))),s('type.integer.int',X95))),s('type.integer.int',X96)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X94) | s('type.integer.int',X95) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X97))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X96),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X99,X97,X98,X96,X95,X94,'const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X98) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X98))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X97),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X94))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X99),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X98) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X94),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(superposition,[],[f5557,f5021])).
fof(f19637,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19636,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19636,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))))) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19347,f417])).
fof(f19347,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))))) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9303])).
fof(f9303,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))))) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75)) ) | $spl18),
  inference(forward_demodulation,[],[f9302,f5024])).
fof(f9302,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))))))) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9301,f5024])).
fof(f9301,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))))))) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9300,f5024])).
fof(f9300,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X70) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))))))) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9230,f5024])).
fof(f9230,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X70))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))),s('type.integer.int',X72))),s('type.integer.int',X73)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X71) | s('type.integer.int',X72) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X74))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X73),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X76,X74,X75,X73,X72,X71,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X75) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X75))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X74),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X71))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X76),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70))))))))) | s('type.num.num',X75) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X70)))))) ) | $spl18),
  inference(superposition,[],[f5557,f5024])).
fof(f19635,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19634,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19634,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num',X55))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))))) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19346,f417])).
fof(f19346,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'T_0')) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num',X55))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))))) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9295])).
fof(f9295,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num',X55))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))))) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60)) ) | $spl18),
  inference(forward_demodulation,[],[f9294,f5016])).
fof(f9294,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))))))) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9293,f5016])).
fof(f9293,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9292,f5016])).
fof(f9292,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X55) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f9228,f5016])).
fof(f9228,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X55))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))),s('type.integer.int',X57))),s('type.integer.int',X58)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X56) | s('type.integer.int',X57) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X59))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X58),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X61,X59,X60,X58,X57,X56,'const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X60) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X60))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X59),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X56))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X61),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X60) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(superposition,[],[f5557,f5016])).
fof(f19633,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19632,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19632,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num',X41))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))))) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19345,f417])).
fof(f19345,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num',X41))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))))) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9287])).
fof(f9287,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num',X41))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))))) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46)) ) | $spl18),
  inference(forward_demodulation,[],[f9286,f5040])).
fof(f9286,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))))))) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9285,f5040])).
fof(f9285,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))))))) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9284,f5040])).
fof(f9284,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X41) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))))))) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))))) ) | $spl18),
  inference(forward_demodulation,[],[f9226,f5040])).
fof(f9226,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X41))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))),s('type.integer.int',X43))),s('type.integer.int',X44)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X42) | s('type.integer.int',X43) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X45))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X47,X45,X46,X44,X43,X42,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X46) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X46))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X45),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X42))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X47),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41))))))))) | s('type.num.num',X46) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X41)))))) ) | $spl18),
  inference(superposition,[],[f5557,f5040])).
fof(f19631,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19630,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19630,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num',X19))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))))) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19344,f417])).
fof(f19344,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num',X19))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))))) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f9279])).
fof(f9279,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num',X19))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))))) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24)) ) | $spl18),
  inference(forward_demodulation,[],[f9278,f5041])).
fof(f9278,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))))))) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9277,f5041])).
fof(f9277,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9276,f5041])).
fof(f9276,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X19) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(forward_demodulation,[],[f9223,f5041])).
fof(f9223,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X19))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))),s('type.integer.int',X21))),s('type.integer.int',X22)))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20) | s('type.integer.int',X21) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X23))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X22),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X25,X23,X24,X22,X21,X20,'const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X24) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X23),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X20))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X25),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X24) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl18),
  inference(superposition,[],[f5557,f5041])).
fof(f19629,plain,(
  $false | ($spl18 | $spl44)),
  inference(global_subsumption,[],[f19628,f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19628,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl18 | $spl44)),
  inference(subsumption_resolution,[],[f19342,f417])).
fof(f19342,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X1) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X5))),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK18(X6,X5,X4,X3,X2,X1,X0)),s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))))))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X4) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))) | s('type.num.num',X4) != s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | ($spl18 | $spl44)),
  inference(backward_demodulation,[],[f15224,f5557])).
fof(f19625,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621,f19624])).
fof(f19623,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f19309,f417])).
fof(f19309,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f15224,f728])).
fof(f19622,plain,(
  $false | $spl44),
  inference(global_subsumption,[],[f416,f415,f414,f413,f412,f417,f419,f420,f421,f727,f728,f427,f428,f429,f430,f431,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f730,f448,f449,f731,f451,f732,f733,f734,f455,f456,f457,f459,f471,f470,f475,f474,f479,f478,f483,f482,f736,f738,f741,f545,f546,f547,f548,f549,f550,f551,f552,f553,f554,f555,f556,f557,f561,f558,f564,f563,f566,f565,f568,f567,f579,f578,f742,f597,f594,f593,f592,f610,f611,f636,f635,f634,f633,f632,f631,f630,f640,f639,f638,f637,f644,f643,f642,f641,f648,f647,f646,f645,f652,f651,f650,f649,f659,f658,f657,f712,f655,f654,f653,f663,f662,f661,f660,f667,f666,f665,f664,f676,f675,f674,f711,f672,f671,f670,f680,f679,f678,f677,f684,f683,f682,f681,f744,f710,f698,f697,f696,f746,f745,f748,f747,f750,f749,f752,f751,f754,f753,f756,f755,f758,f757,f760,f759,f762,f761,f764,f763,f766,f765,f768,f767,f770,f769,f772,f771,f774,f773,f776,f775,f778,f777,f780,f779,f783,f800,f804,f814,f817,f820,f823,f826,f835,f840,f841,f844,f845,f848,f851,f859,f862,f866,f867,f873,f874,f877,f880,f891,f894,f898,f909,f907,f912,f927,f925,f930,f942,f982,f983,f984,f985,f986,f987,f988,f989,f990,f991,f1076,f1077,f1078,f1079,f1080,f1081,f1082,f1083,f1084,f1085,f1148,f1149,f1150,f1151,f1152,f1153,f1154,f1155,f1156,f1157,f1199,f1271,f1282,f1338,f1368,f1390,f1433,f1444,f1443,f1442,f1441,f1464,f1463,f1462,f1461,f1460,f1459,f1458,f1457,f1456,f1455,f1454,f1453,f1452,f1451,f1477,f1476,f1473,f1472,f1500,f1499,f1498,f1497,f1496,f1495,f1494,f1493,f1492,f1491,f1490,f1489,f1488,f1487,f1591,f1590,f1589,f1588,f1600,f1601,f1610,f1611,f1612,f1613,f1614,f1615,f1616,f1617,f1619,f1620,f1636,f1635,f1634,f1633,f1645,f1646,f1655,f1656,f1657,f1658,f1659,f1660,f1661,f1662,f1664,f1665,f1686,f1702,f1701,f1699,f1698,f1737,f1750,f1766,f1765,f1763,f1762,f1869,f1898,f1907,f1913,f1922,f1929,f1942,f1979,f1978,f1988,f1997,f2107,f2106,f2116,f2125,f2261,f2353,f2438,f2441,f2466,f2628,f2627,f2626,f2625,f2624,f2623,f2622,f2621,f2620,f2619,f2618,f2617,f2616,f2615,f2611,f2610,f2606,f2603,f2602,f2597,f2596,f2590,f2589,f2570,f2569,f2568,f2564,f2563,f2559,f2558,f2557,f2552,f2544,f2540,f2539,f2538,f2537,f2536,f2535,f2534,f2533,f2532,f2531,f2530,f2529,f2528,f2527,f2526,f2525,f2524,f2523,f2522,f2521,f2520,f2519,f2518,f2517,f2516,f2515,f2514,f2513,f2512,f2511,f2510,f2505,f2504,f2498,f2497,f2492,f2491,f2485,f2484,f2483,f2480,f2479,f2478,f2477,f2475,f2474,f2473,f2472,f2471,f2657,f2671,f2674,f2687,f2688,f2689,f2690,f2691,f2692,f2693,f2694,f2695,f2696,f2697,f2731,f2821,f2822,f2748,f2749,f2750,f2751,f2752,f2826,f2825,f3037,f3036,f3035,f3034,f3033,f3032,f3031,f3030,f3029,f3023,f3022,f3015,f3014,f3011,f3009,f3008,f3007,f3004,f3003,f3002,f2997,f2996,f2988,f2984,f2983,f2981,f2978,f2977,f2973,f2972,f2971,f2970,f2969,f2966,f2964,f2959,f2958,f2953,f2952,f2946,f2945,f2944,f2938,f2925,f2924,f2923,f2922,f2921,f2920,f2919,f2918,f2917,f2916,f2915,f2914,f2913,f2912,f2911,f2910,f2909,f2908,f2907,f2906,f2905,f2904,f2903,f2902,f2901,f2900,f2899,f2898,f2893,f2892,f2891,f2890,f2883,f2882,f2874,f2873,f2872,f2867,f2866,f2865,f2860,f2859,f2858,f2857,f2856,f2855,f2853,f2851,f3191,f3193,f3239,f3240,f3241,f3441,f3440,f3439,f3438,f3437,f3436,f3435,f3434,f3433,f3427,f3426,f3419,f3418,f3415,f3413,f3412,f3411,f3408,f3407,f3406,f3401,f3400,f3392,f3388,f3387,f3385,f3382,f3381,f3377,f3376,f3375,f3374,f3373,f3370,f3368,f3363,f3362,f3357,f3356,f3350,f3349,f3348,f3342,f3329,f3328,f3327,f3326,f3325,f3324,f3323,f3322,f3321,f3320,f3319,f3318,f3317,f3316,f3315,f3314,f3313,f3312,f3311,f3310,f3309,f3308,f3307,f3306,f3305,f3304,f3303,f3302,f3297,f3296,f3295,f3294,f3287,f3286,f3278,f3277,f3276,f3271,f3270,f3269,f3264,f3263,f3262,f3261,f3260,f3259,f3257,f3255,f3487,f3488,f3694,f3802,f3881,f3892,f3909,f3908,f3913,f3914,f3915,f3916,f3918,f3919,f3920,f3921,f3922,f3923,f3924,f3925,f3927,f3961,f4067,f4138,f4137,f4133,f4132,f4123,f4119,f4118,f4117,f4115,f4112,f4109,f4108,f4107,f4163,f4214,f4213,f4212,f4206,f4205,f4204,f4202,f4201,f4194,f4191,f4190,f4223,f4312,f4311,f4310,f4308,f4296,f4295,f4294,f4290,f4282,f4276,f4275,f4274,f4263,f4261,f4258,f4257,f4328,f4327,f4326,f4325,f4345,f4367,f4347,f4356,f4357,f4358,f4359,f4360,f4361,f4362,f4363,f4365,f4366,f4397,f4396,f4395,f4394,f4437,f4416,f4417,f4426,f4427,f4428,f4429,f4430,f4431,f4432,f4433,f4435,f4436,f4460,f4459,f4458,f4457,f4477,f4479,f4488,f4489,f4490,f4491,f4492,f4493,f4494,f4495,f4497,f4498,f4526,f4525,f4524,f4523,f4543,f4561,f4563,f4564,f4573,f4574,f4575,f4576,f4577,f4578,f4579,f4580,f4582,f4583,f4603,f4602,f4601,f4600,f4620,f4638,f4660,f4640,f4649,f4650,f4651,f4652,f4653,f4654,f4655,f4656,f4658,f4659,f4682,f4681,f4680,f4679,f4715,f4716,f4725,f4726,f4727,f4728,f4729,f4730,f4731,f4732,f4734,f4735,f4763,f4762,f4761,f4760,f4796,f4797,f4806,f4807,f4808,f4809,f4810,f4811,f4812,f4813,f4815,f4816,f4842,f4841,f4840,f4839,f4859,f4877,f4879,f4888,f4889,f4890,f4891,f4892,f4893,f4894,f4895,f4897,f4898,f4933,f4932,f4931,f4930,f4950,f4951,f4968,f4970,f4979,f4980,f4981,f4982,f4983,f4984,f4985,f4986,f4988,f4989,f3712,f3606,f7180,f7179,f7178,f7177,f7211,f7212,f7221,f7222,f7223,f7224,f7225,f7226,f7227,f7228,f7230,f7231,f7406,f7543,f7544,f7545,f7619,f7817,f7767,f7924,f8125,f8076,f8238,f8377,f8378,f8379,f8380,f8630,f8631,f10530,f10528,f10526,f10522,f10511,f10510,f10509,f10506,f10505,f10497,f10494,f10493,f10486,f10485,f10477,f10447,f10446,f10445,f10438,f10437,f10430,f10429,f10428,f10423,f10417,f10415,f10414,f10413,f10412,f10411,f10408,f10407,f10406,f10405,f10404,f10403,f10401,f10399,f10398,f10396,f10395,f10394,f10391,f10390,f10389,f10388,f10387,f10386,f10384,f10382,f10381,f10379,f10378,f10377,f10376,f10375,f10367,f10366,f10357,f10356,f10348,f10347,f10338,f10333,f10326,f10325,f10322,f10321,f10319,f10318,f10315,f10314,f10313,f10312,f10311,f10306,f11880,f11983,f12020,f12094,f12128,f12163,f12231,f12265,f12795,f12842,f12878,f12912,f14919,f14922,f17905,f17909,f17932,f17936,f17955,f17956,f17957,f17958,f18066,f18068,f18069,f18070,f18071,f18072,f18073,f18074,f18075,f18076,f18077,f18078,f18079,f18080,f18081,f18596,f18597,f18598,f18599,f18600,f18602,f18605,f18609,f18611,f18648,f18665,f18666,f18667,f18668,f18669,f18671,f18674,f18677,f18679,f18784,f18785,f18859,f19240,f19243,f19246,f19249,f19252,f19255,f19258,f19261,f19263,f19264,f19265,f19266,f19267,f19268,f19269,f19270,f19271,f19272,f19273,f19274,f19279,f19280,f19283,f18945,f18946,f19290,f19292,f19294,f19296,f19298,f19300,f19302,f19304,f15224,f19621])).
fof(f19262,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) ) | $spl72),
  inference(cnf_transformation,[],[f19262_D])).
fof(f19262_D,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f15224,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20)) ) | $spl44),
  inference(cnf_transformation,[],[f15224_D])).
fof(f15224_D,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f19304,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f19303])).
fof(f19303,plain,(
  ( ! [X66,X64,X67,X65] : (~sP6('T_0',X65,X66) | sP7('T_0',X65,X66) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f18966,f1368])).
fof(f18966,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,X64)) | ~sP6('T_0',X65,X66) | sP7('T_0',X65,X66) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f712,f1282])).
fof(f19259,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) | $spl70),
  inference(cnf_transformation,[],[f19259_D])).
fof(f19259_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f19302,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f19301])).
fof(f19301,plain,(
  ( ! [X61,X62,X60,X63] : (~sP8('T_0',X61,X62) | sP9('T_0',X61,X62) | s(bool,X60) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f18965,f1368])).
fof(f18965,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,X60)) | ~sP8('T_0',X61,X62) | sP9('T_0',X61,X62) | s(bool,X60) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f711,f1282])).
fof(f19256,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl68),
  inference(cnf_transformation,[],[f19256_D])).
fof(f19256_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f19300,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f19299])).
fof(f19299,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X54)) | sP9('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f18963,f1368])).
fof(f18963,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | ~p(s(bool,X54)) | sP9('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f683,f1282])).
fof(f19253,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | p(s(bool,X1))) ) | $spl66),
  inference(cnf_transformation,[],[f19253_D])).
fof(f19253_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f19298,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f19297])).
fof(f19297,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,X50)) | sP9('T_0',X51,X50) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f18962,f1368])).
fof(f18962,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | p(s(bool,X50)) | sP9('T_0',X51,X50) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f682,f1282])).
fof(f19250,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl64),
  inference(cnf_transformation,[],[f19250_D])).
fof(f19250_D,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f19296,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f19295])).
fof(f19295,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | sP7('T_0',X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f18961,f1368])).
fof(f18961,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | sP7('T_0',X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f666,f1282])).
fof(f19247,plain,(
  ( ! [X2,X1] : (sP7('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl62),
  inference(cnf_transformation,[],[f19247_D])).
fof(f19247_D,plain,(
  ( ! [X2,X1] : (sP7('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f19294,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X2,X1)) )),
  inference(condensation,[],[f19293])).
fof(f19293,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | sP7('T_0',X43,X42) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f18960,f1368])).
fof(f18960,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | sP7('T_0',X43,X42) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f665,f1282])).
fof(f19244,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl60),
  inference(cnf_transformation,[],[f19244_D])).
fof(f19244_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f19292,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f19291])).
fof(f19291,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,X39)) | sP1(X39,'T_0') | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f18959,f1368])).
fof(f18959,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | sP1(X39,'T_0') | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f597,f1282])).
fof(f19241,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl58),
  inference(cnf_transformation,[],[f19241_D])).
fof(f19241_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f19290,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f19289])).
fof(f19289,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,X36)) | sP1('T_0',X36) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f18958,f1368])).
fof(f18958,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,X35)) | p(s(bool,X36)) | sP1('T_0',X36) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f594,f1282])).
fof(f19261,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f19260])).
fof(f19260,plain,(
  ( ! [X66,X64,X67,X65] : (~sP6('T_0',X65,X66) | sP7('T_0',X65,X66) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) )),
  inference(subsumption_resolution,[],[f18877,f1368])).
fof(f18877,plain,(
  ( ! [X66,X64,X67,X65] : (~p(s(bool,X64)) | ~sP6('T_0',X65,X66) | sP7('T_0',X65,X66) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f712,f1282])).
fof(f19258,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f19257])).
fof(f19257,plain,(
  ( ! [X61,X62,X60,X63] : (~sP8('T_0',X61,X62) | sP9('T_0',X61,X62) | s(bool,X60) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f18876,f1368])).
fof(f18876,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,X60)) | ~sP8('T_0',X61,X62) | sP9('T_0',X61,X62) | s(bool,X60) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f711,f1282])).
fof(f19255,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f19254])).
fof(f19254,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X54)) | sP9('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f18874,f1368])).
fof(f18874,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | ~p(s(bool,X54)) | sP9('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f683,f1282])).
fof(f19252,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f19251])).
fof(f19251,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,X50)) | sP9('T_0',X51,X50) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f18873,f1368])).
fof(f18873,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | p(s(bool,X50)) | sP9('T_0',X51,X50) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f682,f1282])).
fof(f19249,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f19248])).
fof(f19248,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | sP7('T_0',X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f18872,f1368])).
fof(f18872,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | sP7('T_0',X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f666,f1282])).
fof(f19246,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X2,X1)) )),
  inference(condensation,[],[f19245])).
fof(f19245,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | sP7('T_0',X43,X42) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f18871,f1368])).
fof(f18871,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | sP7('T_0',X43,X42) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f665,f1282])).
fof(f19243,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f19242])).
fof(f19242,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,X39)) | sP1(X39,'T_0') | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f18870,f1368])).
fof(f18870,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | sP1(X39,'T_0') | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f597,f1282])).
fof(f19240,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f19239])).
fof(f19239,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,X36)) | sP1('T_0',X36) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f18869,f1368])).
fof(f18869,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,X35)) | p(s(bool,X36)) | sP1('T_0',X36) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f594,f1282])).
fof(f13392,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl32),
  inference(cnf_transformation,[],[f13392_D])).
fof(f13392_D,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f13394,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl35),
  inference(cnf_transformation,[],[f13394_D])).
fof(f13394_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f15180,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X3,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(superposition,[],[f578,f5142])).
fof(f15234,plain,(
  ( ! [X4] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4)) ) | $spl56),
  inference(cnf_transformation,[],[f15234_D])).
fof(f15234_D,plain,(
  ( ! [X4] : (sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f15181,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4)) ) | $spl18),
  inference(superposition,[],[f579,f5142])).
fof(f15231,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X8,X7)) ) | $spl54),
  inference(cnf_transformation,[],[f15231_D])).
fof(f15231_D,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X8,X7)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f15184,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X7)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X8,X7)) ) | $spl18),
  inference(superposition,[],[f665,f5142])).
fof(f15230,plain,(
  ( ! [X10,X9] : (~p(s(bool,X9)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X9,X10)) ) | $spl52),
  inference(cnf_transformation,[],[f15230_D])).
fof(f15230_D,plain,(
  ( ! [X10,X9] : (~p(s(bool,X9)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X9,X10)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f15185,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X9)) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X9,X10)) ) | $spl18),
  inference(superposition,[],[f666,f5142])).
fof(f15228,plain,(
  ( ! [X14,X13] : (~p(s(bool,X13)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X13,X14)) ) | $spl50),
  inference(cnf_transformation,[],[f15228_D])).
fof(f15228_D,plain,(
  ( ! [X14,X13] : (~p(s(bool,X13)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X13,X14)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f15187,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~p(s(bool,X13)) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X13,X14)) ) | $spl18),
  inference(superposition,[],[f683,f5142])).
fof(f15226,plain,(
  ( ! [X17,X16] : (~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17)) ) | $spl48),
  inference(cnf_transformation,[],[f15226_D])).
fof(f15226_D,plain,(
  ( ! [X17,X16] : (~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f15189,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~sP8('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17) | sP9('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X16,X17)) ) | $spl18),
  inference(superposition,[],[f711,f5142])).
fof(f15225,plain,(
  ( ! [X19,X18] : (~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19)) ) | $spl46),
  inference(cnf_transformation,[],[f15225_D])).
fof(f15225_D,plain,(
  ( ! [X19,X18] : (~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f15190,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | ~sP6('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19) | sP7('const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X18,X19)) ) | $spl18),
  inference(superposition,[],[f712,f5142])).
fof(f13393,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl34),
  inference(cnf_transformation,[],[f13393_D])).
fof(f13393_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f15223,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | ($spl18 | $spl40)),
  inference(duplicate_literal_removal,[],[f15222])).
fof(f15222,plain,(
  ( ! [X20] : (s(bool,'T_0') = s(bool,X20) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f15191,f15193])).
fof(f15191,plain,(
  ( ! [X20] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,X20) = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,X20)) ) | $spl18),
  inference(superposition,[],[f1368,f5142])).
fof(f15221,plain,(
  $false | ($spl18 | $spl35 | $spl40)),
  inference(subsumption_resolution,[],[f15220,f779])).
fof(f15220,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl18 | $spl35 | $spl40)),
  inference(backward_demodulation,[],[f15193,f15197])).
fof(f15197,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl18 | $spl35)),
  inference(subsumption_resolution,[],[f15176,f13394])).
fof(f15193,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl40),
  inference(cnf_transformation,[],[f15193_D])).
fof(f15193_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f15195,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl42),
  inference(cnf_transformation,[],[f15195_D])).
fof(f15195_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f15172,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f459,f5142])).
fof(f15171,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5142,f459])).
fof(f15047,plain,(
  $false | ($spl18 | $spl31 | $spl36)),
  inference(subsumption_resolution,[],[f15046,f779])).
fof(f15046,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl18 | $spl31 | $spl36)),
  inference(backward_demodulation,[],[f15019,f15023])).
fof(f15023,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl18 | $spl31)),
  inference(subsumption_resolution,[],[f15002,f13273])).
fof(f15002,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f475,f5141])).
fof(f5141,plain,(
  s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(backward_demodulation,[],[f5012,f1600])).
fof(f15019,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl36),
  inference(cnf_transformation,[],[f15019_D])).
fof(f15019_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f15021,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl38),
  inference(cnf_transformation,[],[f15021_D])).
fof(f15021_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f14998,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f459,f5141])).
fof(f14997,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl18),
  inference(superposition,[],[f5141,f459])).
fof(f13388,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5015])).
fof(f13391,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f13390,f443])).
fof(f13390,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f13364,f5433])).
fof(f13364,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1655,f5015])).
fof(f13273,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl31),
  inference(cnf_transformation,[],[f13273_D])).
fof(f13273_D,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f13271,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl28),
  inference(cnf_transformation,[],[f13271_D])).
fof(f13271_D,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f13267,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5015])).
fof(f13270,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl18),
  inference(forward_demodulation,[],[f13269,f442])).
fof(f13269,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(forward_demodulation,[],[f13243,f5433])).
fof(f13243,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl18),
  inference(superposition,[],[f1610,f5015])).
fof(f5005,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))) ) | $spl26),
  inference(cnf_transformation,[],[f5005_D])).
fof(f5005_D,plain,(
  ( ! [X16] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2701,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl9),
  inference(cnf_transformation,[],[f2701_D])).
fof(f2701_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f3606,plain,(
  ( ! [X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f478,f448])).
fof(f5003,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))))) ) | $spl24),
  inference(cnf_transformation,[],[f5003_D])).
fof(f5003_D,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f3712,plain,(
  ( ! [X17] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))))) )),
  inference(superposition,[],[f478,f449])).
fof(f4992,plain,(
  $false | $spl9),
  inference(subsumption_resolution,[],[f4991,f417])).
fof(f4991,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(forward_demodulation,[],[f4990,f438])).
fof(f4990,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl9),
  inference(backward_demodulation,[],[f4951,f2823])).
fof(f2823,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) | $spl9),
  inference(unit_resulting_resolution,[],[f2701,f482])).
fof(f2710,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl20),
  inference(cnf_transformation,[],[f2710_D])).
fof(f2710_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2712,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl23),
  inference(cnf_transformation,[],[f2712_D])).
fof(f2712_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f2697,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f478,f421])).
fof(f2708,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(cnf_transformation,[],[f2708_D])).
fof(f2708_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2696,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f478,f420])).
fof(f2704,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) ) | $spl14),
  inference(cnf_transformation,[],[f2704_D])).
fof(f2704_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2706,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl17),
  inference(cnf_transformation,[],[f2706_D])).
fof(f2706_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f2695,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f478,f730])).
fof(f2703,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | $spl12),
  inference(cnf_transformation,[],[f2703_D])).
fof(f2703_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2694,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) )),
  inference(superposition,[],[f478,f437])).
fof(f2702,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) | $spl10),
  inference(cnf_transformation,[],[f2702_D])).
fof(f2702_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2688,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f478,f431])).
fof(f2699,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl6),
  inference(cnf_transformation,[],[f2699_D])).
fof(f2699_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f2687,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f478,f430])).
fof(f722,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) | $spl0),
  inference(cnf_transformation,[],[f722_D])).
fof(f722_D,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f726,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | $spl4),
  inference(cnf_transformation,[],[f726_D])).
fof(f726_D,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f415,plain,(
  s('type.integer.int',sK12) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13))))))),
  inference(cnf_transformation,[],[f299])).
fof(f723,plain,(
  ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) | $spl1),
  inference(cnf_transformation,[],[f723_D])).
fof(f723_D,plain,(
  ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f724,plain,(
  ( ! [X6] : (s('type.integer.int',sK12) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))))) ) | $spl2),
  inference(cnf_transformation,[],[f724_D])).
fof(f724_D,plain,(
  ( ! [X6] : (s('type.integer.int',sK12) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10)))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f416,plain,(
  ( ! [X6] : (s('type.integer.int',sK12) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK14))),s('type.integer.int',sK13))),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK10))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK11))),s('type.integer.int',sK12))),s('type.integer.int',sK13))))))) )),
  inference(cnf_transformation,[],[f299])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1955
% Passive clauses: 5811
% Generated clauses: 84431
% Final active clauses: 1637
% Final passive clauses: 2388
% Input formulas: 112
% Initial clauses: 287
% 
% Duplicate literals: 370
% Trivial inequalities: 129
% Fw subsumption resolutions: 1923
% Fw demodulations: 26462
% Bw demodulations: 1482
% Condensations: 293
% Global subsumptions: 186
% 
% Simple tautologies: 150
% Equational tautologies: 122
% Forward subsumptions: 48446
% Fw demodulations to eq. taut.: 189
% Bw demodulations to eq. taut.: 23
% 
% Unit resulting resolution: 12528
% Factoring: 4
% Forward superposition: 26252
% Backward superposition: 13758
% Self superposition: 92
% Equality factoring: 34
% Equality resolution: 29
% 
% Split clauses: 151
% Split components: 307
% SAT solver clauses: 6500
% SAT solver unit clauses: 828
% SAT solver binary clauses: 3079
% 
% Sat splits: 151
% Sat splitting refutations: 199
% 
% Memory used [KB]: 56928
% Time elapsed: 3.468 s
% ------------------------------
% ------------------------------
% Success in time 4.797 s
