Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f11333,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11313,f1911,f4185])).
fof(f4185,plain,(
  ( ! [X6] : (s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),X6),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))) ) | $spl64),
  inference(cnf_transformation,[],[f4185_D])).
fof(f4185_D,plain,(
  ( ! [X6] : (s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),X6),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1911,plain,(
  ( ! [X11] : (s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),X11),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))) )),
  inference(subsumption_resolution,[],[f1880,f86])).
fof(f86,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.option.option_CLAUSES|split|13',aHL_TRUTH)).
fof(f1880,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),X11),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))) )),
  inference(superposition,[],[f104,f125])).
fof(f125,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))),
  inference(subsumption_resolution,[],[f121,f87])).
fof(f87,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.option.option_CLAUSES|split|13',aHL_FALSITY)).
fof(f121,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))),
  inference(superposition,[],[f84,f90])).
fof(f90,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.option_CLAUSES|split|13',aHL_BOOL_CASES)).
fof(f84,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))))),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))) & s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f73])).
fof(f73,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) & s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8)))) => s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8)))) => s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))))),
  file('thm.option.option_CLAUSES|split|13','thm.option.option_CLAUSES|split|13')).
fof(f104,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) | s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0')))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) | s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(ennf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X13,X8] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8)))) => s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s('type.option.option'(X6),X13),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))))),
  file('thm.option.option_CLAUSES|split|13','thm.option.option_28_prove_ltb')).
fof(f11313,plain,(
  $false | $spl64),
  inference(trivial_inequality_removal,[],[f11274])).
fof(f11274,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),sK2) | $spl64),
  inference(superposition,[],[f85,f4185])).
fof(f85,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(cnf_transformation,[],[f79])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 129
% Passive clauses: 1424
% Generated clauses: 11000
% Final active clauses: 111
% Final passive clauses: 1089
% Input formulas: 26
% Initial clauses: 30
% 
% Duplicate literals: 663
% Trivial inequalities: 171
% Fw subsumption resolutions: 889
% Fw demodulations: 1143
% Bw demodulations: 13
% 
% Simple tautologies: 202
% Equational tautologies: 41
% Forward subsumptions: 6272
% Fw demodulations to eq. taut.: 51
% 
% Binary resolution: 70
% Forward superposition: 4655
% Backward superposition: 3103
% Self superposition: 111
% Equality factoring: 72
% Equality resolution: 25
% 
% Split clauses: 100
% Split components: 200
% SAT solver clauses: 262
% SAT solver unit clauses: 16
% SAT solver binary clauses: 101
% SAT solver learnt clauses: 1
% 
% Sat splits: 100
% Sat splitting refutations: 23
% 
% TWLsolver clauses: 260
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 5756
% Time elapsed: 0.235 s
% ------------------------------
% ------------------------------
% Success in time 0.247 s
