Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quotient_list
% (58274)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1048
% Passive clauses: 5932
% Generated clauses: 33000
% Final active clauses: 963
% Final passive clauses: 4369
% Input formulas: 261
% Initial clauses: 515
% 
% Duplicate literals: 239
% Trivial inequalities: 71
% Fw subsumption resolutions: 1790
% Fw demodulations: 4003
% Bw demodulations: 73
% 
% Simple tautologies: 289
% Equational tautologies: 33
% Forward subsumptions: 20490
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 5829
% Factoring: 1294
% Forward superposition: 8762
% Backward superposition: 10166
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 21
% 
% Split clauses: 388
% Split components: 778
% SAT solver clauses: 603
% SAT solver unit clauses: 13
% SAT solver binary clauses: 75
% 
% Sat splits: 388
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 603
% TWLsolver calls for satisfiability: 447
% 
% Memory used [KB]: 17910
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quotient_list
% (58289)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 608
% Passive clauses: 2863
% Generated clauses: 28175
% Final active clauses: 580
% Final passive clauses: 2124
% Input formulas: 261
% Initial clauses: 515
% 
% Duplicate literals: 106
% Trivial inequalities: 24
% Fw subsumption resolutions: 924
% Fw demodulations: 4219
% Bw demodulations: 158
% Condensations: 122
% Global subsumptions: 25
% 
% Simple tautologies: 303
% Equational tautologies: 21
% Forward subsumptions: 15935
% Fw demodulations to eq. taut.: 38
% 
% Binary resolution: 2442
% Factoring: 307
% Forward superposition: 9715
% Backward superposition: 7108
% Self superposition: 92
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 4113
% SAT solver unit clauses: 622
% SAT solver binary clauses: 148
% SAT solver learnt clauses: 50
% SAT solver learnt literals: 12
% 
% Sat splits: 9
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 4013
% TWLsolver calls for satisfiability: 2917
% 
% Memory used [KB]: 29040
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quotient_list
% (58307)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1328
% Passive clauses: 10522
% Generated clauses: 354398
% Final active clauses: 1107
% Final passive clauses: 2723
% Input formulas: 261
% Initial clauses: 515
% Discarded non-redundant clauses: 51709
% 
% Duplicate literals: 9
% Trivial inequalities: 97
% Fw subsumption resolutions: 2068
% Fw demodulations: 137786
% Bw demodulations: 2290
% Condensations: 26
% 
% Simple tautologies: 218
% Equational tautologies: 110
% Forward subsumptions: 71581
% Fw demodulations to eq. taut.: 91478
% Bw demodulations to eq. taut.: 28
% 
% Unit resulting resolution: 164513
% Factoring: 2
% Forward superposition: 23118
% Backward superposition: 21568
% Self superposition: 249
% Equality factoring: 2
% Equality resolution: 49
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 12644
% SAT solver unit clauses: 5491
% SAT solver binary clauses: 5350
% 
% Sat splits: 8
% Sat splitting refutations: 2103
% 
% Memory used [KB]: 141106
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.quotient_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quotient_list
% SZS output start Proof for thm.quotient_list
fof(f94771,plain,(
  $false),
  inference(equality_resolution,[],[f94583])).
fof(f94583,plain,(
  ( ! [X36] : (s('type.list.list'(sK13),X36) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))) )),
  inference(subsumption_resolution,[],[f94551,f17540])).
fof(f17540,plain,(
  ( ! [X14] : (s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),X14) | s('type.list.list'(sK13),X14) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))) )),
  inference(trivial_inequality_removal,[],[f17495])).
fof(f17495,plain,(
  ( ! [X14] : (s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.NIL_0') | s('type.list.list'(sK13),X14) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),X14)) )),
  inference(superposition,[],[f2333,f742])).
fof(f742,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f552])).
fof(f552,plain,(
  ! [X0,X1] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f307])).
fof(f307,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X11] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X11))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X11))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.REVERSE_EQ_NIL')).
fof(f2333,plain,(
  ( ! [X1] : (s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X1))) | s('type.list.list'(sK13),X1) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))) )),
  inference(superposition,[],[f1904,f732])).
fof(f732,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f549])).
fof(f549,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f293])).
fof(f293,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X22,X23] : (s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X22))) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X23))) <=> s('type.list.list'(X6),X22) = s('type.list.list'(X6),X23))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.REVERSE_|49||49|')).
fof(f1904,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))))),
  inference(trivial_inequality_removal,[],[f1877])).
fof(f1877,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.NIL_0') | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))))),
  inference(superposition,[],[f1308,f741])).
fof(f741,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f552])).
fof(f1308,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))),
  inference(subsumption_resolution,[],[f1307,f745])).
fof(f745,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f313])).
fof(f313,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.REVERSE_DEF|split|0')).
fof(f1307,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))),
  inference(forward_demodulation,[],[f1306,f728])).
fof(f728,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f290])).
fof(f290,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f289])).
fof(f289,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X12] : s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X12),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.MAP|split|0')).
fof(f1306,plain,(
  s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))),
  inference(forward_demodulation,[],[f1305,f745])).
fof(f1305,plain,(
  s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.NIL_0'))))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))),
  inference(forward_demodulation,[],[f1187,f728])).
fof(f1187,plain,(
  s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.NIL_0'))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.NIL_0'))))))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17)))),
  inference(superposition,[],[f678,f741])).
fof(f678,plain,(
  s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17)))))))),
  inference(cnf_transformation,[],[f528])).
fof(f528,plain,(
  p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(sK12,fun(sK12,bool)),sK14),s(fun(sK12,sK13),sK15),s(fun(sK13,sK12),sK16)))) & s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),sK17)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f448])).
fof(f448,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) & ? [X5] : s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X5))) != s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),X11))) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X9),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),X11))) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X9),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X11))))))))),
  file('thm.quotient_list.REVERSE_PRS','thm.quotient_list.REVERSE_PRS')).
fof(f94551,plain,(
  ( ! [X36] : (s('type.list.list'(sK13),X36) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) | s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),X36)) )),
  inference(superposition,[],[f94406,f774])).
fof(f774,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),sK26(X1,X0)))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f567])).
fof(f567,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),sK26(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26])],[f340])).
fof(f340,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(flattening,[],[f339])).
fof(f339,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))))),
  inference(rectify,[],[f121])).
fof(f121,axiom,(
  ! [X6] : ! [X11] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X11) | ? [X15,X14] : s('type.list.list'(X6),X11) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X14))))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.list_CASES')).
fof(f94406,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177)))) )),
  inference(subsumption_resolution,[],[f94405,f744])).
fof(f744,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f311])).
fof(f311,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X11] : s('type.list.list'(X6),X11) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X11)))))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.REVERSE_REVERSE')).
fof(f94405,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177)))) )),
  inference(forward_demodulation,[],[f94404,f1168])).
fof(f1168,plain,(
  ( ! [X10,X11] : (s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X10),s('type.list.list'(sK13),X11))) = s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X10),s('type.list.list'(sK13),X11)))))))) )),
  inference(forward_demodulation,[],[f1038,f725])).
fof(f725,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f283])).
fof(f283,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : ! [X12,X15,X14] : s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X14))))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun(X6,X7),X12),s(X6,X15))),s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X12),s('type.list.list'(X6),X14)))))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.MAP|split|1')).
fof(f1038,plain,(
  ( ! [X10,X11] : (s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X10),s('type.list.list'(sK13),X11))) = s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,happ(s(fun(sK13,sK12),sK16),s(sK13,X10))),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),X11)))))))) )),
  inference(resolution,[],[f677,f722])).
fof(f722,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X6))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))) | ~p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4))))) )),
  inference(cnf_transformation,[],[f455])).
fof(f455,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) | ! [X5,X6] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X6))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(ennf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5,X6] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X6))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(flattening,[],[f277])).
fof(f277,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5,X6] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X5))) = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X6))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X4),s('type.list.list'(X1),X5))))))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X14,X15] : s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X15),s('type.list.list'(X7),X14))) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X15))),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X14))))))))),
  file('thm.quotient_list.REVERSE_PRS','thm.quotient_list.CONS_PRS')).
fof(f677,plain,(
  p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(sK12,fun(sK12,bool)),sK14),s(fun(sK12,sK13),sK15),s(fun(sK13,sK12),sK16))))),
  inference(cnf_transformation,[],[f528])).
fof(f94404,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177)))) )),
  inference(forward_demodulation,[],[f94403,f744])).
fof(f94403,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))))))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177)))) )),
  inference(forward_demodulation,[],[f94402,f726])).
fof(f726,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))) )),
  inference(cnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(flattening,[],[f285])).
fof(f285,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.REVERSE_1'(s('type.list.list'(X1),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X6] : ! [X12,X11] : s('type.list.list'(X7),'const.list.REVERSE_1'(s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X12),s('type.list.list'(X6),X11))))) = s('type.list.list'(X7),'const.list.MAP_2'(s(fun(X6,X7),X12),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X11)))))),
  file('thm.quotient_list.REVERSE_PRS','thm.rich_list.MAP_REVERSE')).
fof(f94402,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))))))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177)))) )),
  inference(forward_demodulation,[],[f94401,f740])).
fof(f740,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f305])).
fof(f305,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X13,X11] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X11))))) = s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X13),s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X11)))))),
  file('thm.quotient_list.REVERSE_PRS','thm.list.REVERSE_SNOC_DEF|split|1')).
fof(f94401,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.SNOC_2'(s(sK13,X176),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X177))))))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.SNOC_2'(s(sK13,X176),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X177)))))))))))) )),
  inference(forward_demodulation,[],[f94272,f744])).
fof(f94272,plain,(
  ( ! [X177,X176] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X176),s('type.list.list'(sK13),X177))))))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),'const.list.SNOC_2'(s(sK13,X176),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X177))))))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),'const.list.SNOC_2'(s(sK13,X176),s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X177)))))))))))) )),
  inference(superposition,[],[f1185,f740])).
fof(f1185,plain,(
  ( ! [X1] : (s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),sK17))) != s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X1))) | s('type.list.list'(sK13),'const.list.REVERSE_1'(s('type.list.list'(sK13),X1))) != s('type.list.list'(sK13),'const.list.MAP_2'(s(fun(sK12,sK13),sK15),s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),'const.list.MAP_2'(s(fun(sK13,sK12),sK16),s('type.list.list'(sK13),X1)))))))) )),
  inference(superposition,[],[f678,f731])).
fof(f731,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f549])).
% SZS output end Proof for thm.quotient_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 855
% Passive clauses: 28765
% Generated clauses: 94169
% Final active clauses: 556
% Final passive clauses: 12604
% Input formulas: 261
% Initial clauses: 348
% 
% Selected by SInE selection: 115
% SInE iterations: 1
% 
% Duplicate literals: 734
% Trivial inequalities: 2512
% Fw subsumption resolutions: 4104
% Fw demodulations: 13542
% Bw demodulations: 49
% 
% Simple tautologies: 1637
% Equational tautologies: 13
% Forward subsumptions: 41550
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 5613
% Forward superposition: 54848
% Backward superposition: 11700
% Self superposition: 8
% Equality resolution: 73
% 
% Split clauses: 1231
% Split components: 2517
% SAT solver clauses: 1326
% SAT solver unit clauses: 57
% SAT solver binary clauses: 529
% 
% Sat splits: 1231
% Sat splitting refutations: 78
% 
% Memory used [KB]: 45670
% Time elapsed: 2.753 s
% ------------------------------
% ------------------------------
% Success in time 14.48 s
