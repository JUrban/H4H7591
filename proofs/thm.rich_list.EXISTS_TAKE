Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (69077)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 139
% Passive clauses: 1682
% Generated clauses: 22015
% Final active clauses: 95
% Final passive clauses: 1382
% Input formulas: 13
% Initial clauses: 19
% 
% Duplicate literals: 1296
% Trivial inequalities: 332
% Fw subsumption resolutions: 3351
% Fw demodulations: 2455
% Bw demodulations: 43
% 
% Simple tautologies: 439
% Equational tautologies: 59
% Forward subsumptions: 10175
% 
% Binary resolution: 266
% Forward superposition: 7100
% Backward superposition: 6539
% Self superposition: 230
% Equality factoring: 169
% Equality resolution: 23
% 
% Split clauses: 1186
% Split components: 2475
% SAT solver clauses: 1876
% SAT solver unit clauses: 49
% SAT solver binary clauses: 307
% 
% Sat splits: 1186
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1875
% TWLsolver calls for satisfiability: 160
% 
% Memory used [KB]: 9210
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f294,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f293,f44,f67,f47,f70,f80,f83,f41,f65,f50,f72,f81,f85,f42,f63,f253,f255,f57,f76,f276,f277,f46,f69,f58,f77,f98,f103,f43,f61,f54,f74])).
fof(f74,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f54,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.rich_list.EXISTS_TAKE','thm.bool.EQ_CLAUSES|split|2')).
fof(f61,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f43,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) & (p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f31])).
fof(f31,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) & ? [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) & ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => ! [X3] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X3),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X7),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_TAKE','thm.rich_list.EXISTS_TAKE')).
fof(f103,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | $spl32),
  inference(cnf_transformation,[],[f103_D])).
fof(f103_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f98,plain,(
  s(bool,'F_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),sK2))) | ($spl1 | $spl18)),
  inference(resolution,[],[f74,f61])).
fof(f77,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) | $spl24),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f58,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3)))) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | ! [X4] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) | p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => ! [X4] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X7,X12,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X12))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => ! [X9] : (p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X12),s('type.list.list'(X6),X8)))))) => p(s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))))))),
  file('thm.rich_list.EXISTS_TAKE','thm.rich_list.EXISTS_SEG')).
fof(f69,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f46,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.EXISTS_TAKE',aHL_FALSITY)).
fof(f277,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl70),
  inference(cnf_transformation,[],[f277_D])).
fof(f277_D,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f276,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl9 | $spl24 | $spl32)),
  inference(subsumption_resolution,[],[f270,f69])).
fof(f270,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | ($spl24 | $spl32)),
  inference(superposition,[],[f77,f103])).
fof(f76,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2)))) ) | $spl22),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f57,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X11,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8)))))) => s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X11),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0'),s('type.list.list'(X6),X8))))),
  file('thm.rich_list.EXISTS_TAKE','thm.rich_list.TAKE_SEG')).
fof(f255,plain,(
  s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | $spl64),
  inference(cnf_transformation,[],[f255_D])).
fof(f255_D,plain,(
  s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f253,plain,(
  s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | ($spl6 | $spl22 | $spl28)),
  inference(subsumption_resolution,[],[f249,f67])).
fof(f249,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.rich_list.SEG_3'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK2))) | ($spl22 | $spl28)),
  inference(superposition,[],[f76,f83])).
fof(f63,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | $spl2),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f35])).
fof(f85,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | $spl30),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f81,plain,(
  s(bool,'T_0') = s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl14)),
  inference(resolution,[],[f72,f63])).
fof(f72,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.rich_list.EXISTS_TAKE','thm.bool.EQ_CLAUSES|split|0')).
fof(f65,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f41,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))),
  inference(cnf_transformation,[],[f35])).
fof(f83,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl28),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f80,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl14)),
  inference(resolution,[],[f72,f65])).
fof(f70,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl10),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f47,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.EXISTS_TAKE','thm.arithmetic.ADD_|48|')).
fof(f67,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f44,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.EXISTS_TAKE',aHL_TRUTH)).
fof(f293,plain,(
  $false | ($spl6 | $spl10 | $spl28 | $spl30 | $spl64 | $spl70)),
  inference(subsumption_resolution,[],[f292,f67])).
fof(f292,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl10 | $spl28 | $spl30 | $spl64 | $spl70)),
  inference(forward_demodulation,[],[f291,f83])).
fof(f291,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl10 | $spl30 | $spl64 | $spl70)),
  inference(forward_demodulation,[],[f290,f70])).
fof(f290,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl6 | $spl30 | $spl64 | $spl70)),
  inference(subsumption_resolution,[],[f289,f67])).
fof(f289,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl30 | $spl64 | $spl70)),
  inference(forward_demodulation,[],[f283,f85])).
fof(f283,plain,(
  ~p(s(bool,'const.list.EXISTS_2'(s(fun(sK0,bool),sK3),s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK1),s('type.list.list'(sK0),sK2)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | ($spl64 | $spl70)),
  inference(superposition,[],[f277,f255])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 48
% Generated clauses: 259
% Final active clauses: 21
% Final passive clauses: 7
% Input formulas: 13
% Initial clauses: 19
% 
% Duplicate literals: 4
% Trivial inequalities: 10
% Fw subsumption resolutions: 18
% Fw demodulations: 19
% Bw demodulations: 14
% Condensations: 1
% 
% Simple tautologies: 8
% Equational tautologies: 4
% Forward subsumptions: 92
% 
% Binary resolution: 17
% Forward superposition: 65
% Backward superposition: 24
% Self superposition: 3
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 70
% SAT solver unit clauses: 26
% SAT solver binary clauses: 16
% SAT solver learnt clauses: 1
% 
% Sat splits: 4
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 69
% TWLsolver calls for satisfiability: 90
% 
% Memory used [KB]: 895
% Time elapsed: 0.009 s
% ------------------------------
% ------------------------------
% Success in time 0.623 s
