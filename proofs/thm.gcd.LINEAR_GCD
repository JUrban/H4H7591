Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f6671,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6670,f4804,f4807,f4806,f4835])).
fof(f4835,plain,(
  $false | $spl96),
  inference(trivial_inequality_removal,[],[f4834])).
fof(f4834,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK12) | $spl96),
  inference(superposition,[],[f4824,f280])).
fof(f280,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))),
  file('thm.gcd.LINEAR_GCD','thm.arithmetic.MULT_LEFT_|49|')).
fof(f4824,plain,(
  ( ! [X2] : (s('type.num.num',sK12) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12)))) ) | $spl96),
  inference(forward_demodulation,[],[f4823,f3964])).
fof(f3964,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f338,f277])).
fof(f277,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.gcd.LINEAR_GCD','thm.arithmetic.ADD_|48|')).
fof(f338,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.gcd.LINEAR_GCD','thm.arithmetic.ADD_SYM')).
fof(f4823,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12)))) ) | $spl96),
  inference(forward_demodulation,[],[f4822,f279])).
fof(f279,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.gcd.LINEAR_GCD','thm.arithmetic.MULT_|48|')).
fof(f4822,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12)))) ) | $spl96),
  inference(forward_demodulation,[],[f4808,f278])).
fof(f278,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X21] : s('type.num.num',X21) = s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21)))),
  file('thm.gcd.LINEAR_GCD','thm.gcd.GCD_|48|L')).
fof(f4808,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12)))))) ) | $spl96),
  inference(backward_demodulation,[],[f4806,f269])).
fof(f269,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK13))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK13),s('type.num.num',sK12)))))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK12) & ! [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK13))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',sK13),s('type.num.num',sK12)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f128])).
fof(f128,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ! [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f53])).
fof(f53,plain,(
  ~! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) => ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ~! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) => ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) => ? [X8,X9] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X7))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) => ? [X8,X9] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X7))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6))))))),
  file('thm.gcd.LINEAR_GCD','thm.gcd.LINEAR_GCD')).
fof(f4806,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK13) | $spl96),
  inference(cnf_transformation,[],[f4806_D])).
fof(f4806_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK13) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f4807,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(sK12,sK13)),s('type.num.num',sK12)))) ) | $spl98),
  inference(cnf_transformation,[],[f4807_D])).
fof(f4807_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(sK12,sK13)),s('type.num.num',sK12)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f4804,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(sK12,sK13)),s('type.num.num',sK12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK13)) )),
  inference(subsumption_resolution,[],[f4778,f268])).
fof(f268,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK12)),
  inference(cnf_transformation,[],[f172])).
fof(f4778,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK12))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(sK12,sK13)),s('type.num.num',sK12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK13) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK12)) )),
  inference(superposition,[],[f269,f339])).
fof(f339,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(X1,X0)),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK23(X1,X0)),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f210])).
fof(f210,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK22(X1,X0)),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK23(X1,X0)),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) & s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK24(X1,X0)),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK25(X1,X0)),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23,sK24,sK25])],[f143])).
fof(f143,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | (? [X4,X5] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) | (? [X4,X5] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(ennf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) => (? [X4,X5] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0,X1] : ((~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) => (? [X4,X5] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X0))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1))))) & ? [X2,X3] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X7,X6] : ((~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) => (? [X8,X9] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X7))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6))))) & ? [X8,X9] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X6))),s('type.num.num','const.gcd.gcd_2'(s('type.num.num',X7),s('type.num.num',X6)))))))),
  file('thm.gcd.LINEAR_GCD','thm.gcd.gcd_33_prove_ltb')).
fof(f6670,plain,(
  $false | $spl98),
  inference(equality_resolution,[],[f4807])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 443
% Passive clauses: 2601
% Generated clauses: 6394
% Final active clauses: 440
% Final passive clauses: 1935
% Input formulas: 50
% Initial clauses: 197
% 
% Duplicate literals: 169
% Trivial inequalities: 33
% Fw subsumption resolutions: 379
% Fw demodulations: 27
% Bw demodulations: 1
% 
% Simple tautologies: 174
% Equational tautologies: 43
% Forward subsumptions: 2920
% 
% Binary resolution: 4123
% Factoring: 876
% Forward superposition: 375
% Backward superposition: 129
% Self superposition: 15
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 119
% Split components: 239
% SAT solver clauses: 281
% SAT solver unit clauses: 13
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 1
% 
% Sat splits: 119
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 280
% TWLsolver calls for satisfiability: 218
% 
% Memory used [KB]: 3454
% Time elapsed: 0.215 s
% ------------------------------
% ------------------------------
% Success in time 0.235 s
