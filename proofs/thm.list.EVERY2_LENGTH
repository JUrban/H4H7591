Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f4078,plain,(
  $false),
  inference(subsumption_resolution,[],[f4053,f200])).
fof(f200,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16)))),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),sK14),s('type.list.list'(sK12),sK15),s('type.list.list'(sK13),sK16)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16])],[f87])).
fof(f87,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X8),s('type.list.list'(X6),X9),s('type.list.list'(X7),X10)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X8),s('type.list.list'(X6),X9),s('type.list.list'(X7),X10)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))))),
  file('thm.list.EVERY2_LENGTH','thm.list.EVERY2_LENGTH')).
fof(f4053,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK16)))),
  inference(resolution,[],[f280,f199])).
fof(f199,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK12,fun(sK13,bool)),sK14),s('type.list.list'(sK12),sK15),s('type.list.list'(sK13),sK16))))),
  inference(cnf_transformation,[],[f127])).
fof(f280,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X0,X1),bool),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,bool)),X4))),s('type.list.list'('type.pair.prod'(X0,X1)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.pair.,_2'(s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6,X7] : ! [X9,X10,X15] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X15),s('type.list.list'(X6),X9),s('type.list.list'(X7),X10)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'(X6,X7),bool),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,bool)),X15))),s('type.list.list'('type.pair.prod'(X6,X7)),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X7),X10))))))))))),
  file('thm.list.EVERY2_LENGTH','thm.list.EVERY2_EVERY')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 312
% Passive clauses: 1250
% Generated clauses: 3874
% Final active clauses: 312
% Final passive clauses: 792
% Input formulas: 34
% Initial clauses: 158
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 254
% 
% Simple tautologies: 137
% Equational tautologies: 20
% Forward subsumptions: 2035
% 
% Binary resolution: 2392
% Factoring: 706
% Forward superposition: 110
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 77
% Split components: 155
% SAT solver clauses: 150
% SAT solver unit clauses: 6
% SAT solver binary clauses: 29
% 
% Sat splits: 77
% 
% TWLsolver clauses: 150
% TWLsolver calls for satisfiability: 132
% 
% Memory used [KB]: 1918
% Time elapsed: 0.094 s
% ------------------------------
% ------------------------------
% Success in time 0.096 s
