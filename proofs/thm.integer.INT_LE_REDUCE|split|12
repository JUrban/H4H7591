Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.integer
% (58102)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1307
% Passive clauses: 10241
% Generated clauses: 39403
% Final active clauses: 1213
% Final passive clauses: 8414
% Input formulas: 261
% Initial clauses: 531
% 
% Duplicate literals: 351
% Trivial inequalities: 94
% Fw subsumption resolutions: 2512
% Fw demodulations: 3222
% Bw demodulations: 90
% 
% Simple tautologies: 378
% Equational tautologies: 39
% Forward subsumptions: 22196
% Fw demodulations to eq. taut.: 8
% 
% Binary resolution: 12431
% Factoring: 1607
% Forward superposition: 10487
% Backward superposition: 7745
% Self superposition: 54
% Equality factoring: 2
% Equality resolution: 26
% 
% Split clauses: 421
% Split components: 843
% SAT solver clauses: 690
% SAT solver unit clauses: 18
% SAT solver binary clauses: 88
% 
% Sat splits: 421
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 687
% TWLsolver calls for satisfiability: 565
% 
% Memory used [KB]: 16502
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% (58112)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 559
% Passive clauses: 2658
% Generated clauses: 29100
% Final active clauses: 519
% Final passive clauses: 1787
% Input formulas: 261
% Initial clauses: 531
% 
% Duplicate literals: 259
% Trivial inequalities: 172
% Fw subsumption resolutions: 1442
% Fw demodulations: 3700
% Bw demodulations: 342
% Condensations: 472
% Global subsumptions: 24
% 
% Simple tautologies: 405
% Equational tautologies: 25
% Forward subsumptions: 16501
% Fw demodulations to eq. taut.: 12
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 1446
% Factoring: 12
% Forward superposition: 9374
% Backward superposition: 8527
% Self superposition: 84
% Equality factoring: 30
% Equality resolution: 14
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 3976
% SAT solver unit clauses: 665
% SAT solver binary clauses: 153
% SAT solver learnt clauses: 49
% SAT solver learnt literals: 13
% 
% Sat splits: 26
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 3879
% TWLsolver calls for satisfiability: 3371
% 
% Memory used [KB]: 23155
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f27274,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2548,f2552,f2550,f2582,f2586,f2590,f11213,f11215,f11214,f26293,f26297,f26303,f26318,f26326,f27001,f27021,f27026,f27050,f27057,f27061,f27063,f27068,f27075,f27092,f27097,f27100,f27104,f27105,f27108,f27114,f27118,f27135,f27137,f27141,f27151,f27156,f27161,f27170,f27173,f27176,f27185,f27186,f27189,f27196,f27198,f27200,f27202,f27203,f27205,f27207,f27208,f27209,f27210,f27211,f27213,f27214,f27215,f27217,f27219,f27221,f27222,f27225,f27228,f27230,f27232,f27234,f27237,f27240,f27243,f27246,f27248,f27251,f27254,f27255,f27256,f27257,f27258,f27260,f27261,f27262,f27264,f27266,f27267,f27268,f27269,f27270,f27271,f27272,f27273])).
fof(f27273,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26981,f26998])).
fof(f26998,plain,(
  ( ! [X0,X1] : (s('type.integer.int',X0) != s('type.integer.int',X1)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26338,f1380])).
fof(f1380,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f847,f837])).
fof(f837,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.INT_LE_REDUCE|split|12',aHL_TRUTH)).
fof(f847,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f634])).
fof(f634,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f264])).
fof(f264,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f41])).
fof(f41,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.NOT_CLAUSES|split|2')).
fof(f26338,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.integer.int',X0) != s('type.integer.int',X1)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1135])).
fof(f1135,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) != s('type.integer.int',X1)) )),
  inference(cnf_transformation,[],[f718])).
fof(f718,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int',X1)) & ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) & s('type.integer.int',X0) != s('type.integer.int',X1)) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(flattening,[],[f717])).
fof(f717,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int',X1))) & ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) & s('type.integer.int',X0) != s('type.integer.int',X1)) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f491])).
fof(f491,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int',X1)))),
  inference(rectify,[],[f98])).
fof(f98,axiom,(
  ! [X9,X10] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) <=> (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) | s('type.integer.int',X9) = s('type.integer.int',X10)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_LT')).
fof(f26333,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26332,f946])).
fof(f946,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f639])).
fof(f639,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f358])).
fof(f358,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f357])).
fof(f357,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X17] : (s(bool,'F_0') = s(bool,X17) <=> ~p(s(bool,X17)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.EQ_CLAUSES|split|2')).
fof(f26332,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2) | ~p(s(bool,X2))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26331,f2551])).
fof(f2551,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) | $spl2),
  inference(cnf_transformation,[],[f2551_D])).
fof(f2551_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f26331,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) | ~p(s(bool,X2))) ) | $spl0),
  inference(forward_demodulation,[],[f26330,f1066])).
fof(f1066,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f435])).
fof(f435,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f211])).
fof(f211,axiom,(
  ! [X7,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE')).
fof(f26330,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))) | ~p(s(bool,X2))) ) | $spl0),
  inference(forward_demodulation,[],[f26329,f1061])).
fof(f1061,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f430])).
fof(f430,plain,(
  ! [X0,X1] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X10] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X9))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_NEG')).
fof(f26329,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) ) | $spl0),
  inference(subsumption_resolution,[],[f26263,f837])).
fof(f26263,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | ~p(s(bool,X2)) | s(bool,X2) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) ) | $spl0),
  inference(superposition,[],[f1114,f2550])).
fof(f1114,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f592])).
fof(f592,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f591])).
fof(f591,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f480])).
fof(f480,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X18,X19] : ((p(s(bool,X18)) => p(s(bool,X19))) => ((p(s(bool,X19)) => p(s(bool,X18))) => s(bool,X18) = s(bool,X19)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.IMP_ANTISYM_AX')).
fof(f26981,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f4179])).
fof(f4179,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(backward_demodulation,[],[f4083,f1523])).
fof(f1523,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1522,f853])).
fof(f853,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f136])).
fof(f136,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.NUMERAL_DEF')).
fof(f1522,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1521,f853])).
fof(f1521,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1240,f853])).
fof(f1240,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) )),
  inference(cnf_transformation,[],[f779])).
fof(f779,plain,(
  ! [X0,X1] : ((~p(s(bool,sK41(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,sK41(X1,X0)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK41(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41])],[f778])).
fof(f778,plain,(
  ! [X0,X1] : ? [X2] : ((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,X2))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(flattening,[],[f777])).
fof(f777,plain,(
  ! [X0,X1] : ? [X2] : (((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,X2)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f541])).
fof(f541,plain,(
  ! [X0,X1] : ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f125])).
fof(f125,axiom,(
  ! [X7,X6] : ? [X15] : ((p(s(bool,X15)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_DIV_REDUCE|split|6')).
fof(f4083,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  inference(superposition,[],[f2638,f852])).
fof(f852,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f268])).
fof(f268,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f242])).
fof(f242,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X9)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.iZ')).
fof(f2638,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f875,f856])).
fof(f856,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f272])).
fof(f272,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f148])).
fof(f148,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.ADD_|48|')).
fof(f875,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f182])).
fof(f182,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_add|split|0')).
fof(f27272,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26977,f26998])).
fof(f26977,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f4178])).
fof(f4178,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(backward_demodulation,[],[f4083,f1516])).
fof(f1516,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1515,f853])).
fof(f1515,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1514,f853])).
fof(f1514,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1237,f853])).
fof(f1237,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) )),
  inference(cnf_transformation,[],[f776])).
fof(f776,plain,(
  ! [X0,X1] : ((~p(s(bool,sK40(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) | p(s(bool,sK40(X1,X0)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK40(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK40])],[f775])).
fof(f775,plain,(
  ! [X0,X1] : ? [X2] : ((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) | p(s(bool,X2))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(flattening,[],[f774])).
fof(f774,plain,(
  ! [X0,X1] : ? [X2] : (((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) | p(s(bool,X2)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f540])).
fof(f540,plain,(
  ! [X0,X1] : ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f126])).
fof(f126,axiom,(
  ! [X7,X6] : ? [X15] : ((p(s(bool,X15)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_DIV_REDUCE|split|5')).
fof(f27271,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26973,f26998])).
fof(f26973,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f4177])).
fof(f4177,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(backward_demodulation,[],[f4083,f1509])).
fof(f1509,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1508,f853])).
fof(f1508,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1507,f853])).
fof(f1507,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(forward_demodulation,[],[f1234,f853])).
fof(f1234,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) )),
  inference(cnf_transformation,[],[f773])).
fof(f773,plain,(
  ! [X0,X1] : ((~p(s(bool,sK39(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,sK39(X1,X0)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK39(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK39])],[f772])).
fof(f772,plain,(
  ! [X0,X1] : ? [X2] : ((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,X2))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(flattening,[],[f771])).
fof(f771,plain,(
  ! [X0,X1] : ? [X2] : (((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) | p(s(bool,X2)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(nnf_transformation,[],[f539])).
fof(f539,plain,(
  ! [X0,X1] : ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  inference(rectify,[],[f128])).
fof(f128,axiom,(
  ! [X7,X6] : ? [X15] : ((p(s(bool,X15)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_DIV_REDUCE|split|4')).
fof(f27270,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26956,f1380])).
fof(f26956,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f13059])).
fof(f13059,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.integer.int',X0))))) )),
  inference(unit_resulting_resolution,[],[f4159,f1139])).
fof(f1139,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X1) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f722])).
fof(f722,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK33(X1,X0)),s('type.integer.int',X0)))) & (! [X2] : s('type.integer.int',X1) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK33])],[f721])).
fof(f721,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ? [X3] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X3),s('type.integer.int',X0)))) & (! [X2] : s('type.integer.int',X1) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(rectify,[],[f720])).
fof(f720,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ? [X2] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0)))) & (! [X2] : s('type.integer.int',X1) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f494])).
fof(f494,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ? [X2] : s('type.integer.int',X1) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))))),
  inference(rectify,[],[f226])).
fof(f226,axiom,(
  ! [X11,X12] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X11),s('type.integer.int',X12)))) <=> ? [X7] : s('type.integer.int',X12) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X7),s('type.integer.int',X11))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_DIVIDES')).
fof(f4159,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(backward_demodulation,[],[f4083,f1397])).
fof(f1397,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f901,f853])).
fof(f901,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f229])).
fof(f229,axiom,(
  ! [X9] : s('type.integer.int',X9) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_MUL_RID')).
fof(f27269,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26955,f1380])).
fof(f26955,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f13101])).
fof(f13101,plain,(
  ( ! [X2,X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))))))) )),
  inference(forward_demodulation,[],[f13067,f1023])).
fof(f1023,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f402])).
fof(f402,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f204])).
fof(f204,axiom,(
  ! [X8] : ! [X18,X19] : s(X8,X19) = s(X8,'const.bool.COND_3'(s(bool,'F_0'),s(X8,X18),s(X8,X19)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.COND_CLAUSES|split|1')).
fof(f13067,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int',X1),s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X2),s('type.integer.int',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f1023,f1139])).
fof(f27268,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26947,f1380])).
fof(f26947,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f19141])).
fof(f19141,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4164,f1139])).
fof(f4164,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.integer.int',X0)))) )),
  inference(backward_demodulation,[],[f4083,f1407])).
fof(f1407,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X0)))) )),
  inference(forward_demodulation,[],[f913,f853])).
fof(f913,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f329])).
fof(f329,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X0)))),
  inference(rectify,[],[f252])).
fof(f252,axiom,(
  ! [X9] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.integer.int',X9)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_NEG_MINUS|49|')).
fof(f27267,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26921,f1380])).
fof(f26921,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f26311])).
fof(f26311,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num',sK13),s('type.num.num',sK14)))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26310,f1458])).
fof(f1458,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f1092,f1433])).
fof(f1433,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1432,f853])).
fof(f1432,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f1075,f853])).
fof(f1075,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f444])).
fof(f444,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f71])).
fof(f71,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|25')).
fof(f1092,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))) )),
  inference(cnf_transformation,[],[f461])).
fof(f461,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))))),
  inference(rectify,[],[f132])).
fof(f132,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7)))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LT_CALCULATE|split|1')).
fof(f26310,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26309,f10248])).
fof(f10248,plain,(
  s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))) | $spl2),
  inference(unit_resulting_resolution,[],[f9974,f1144])).
fof(f1144,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int',X1)) )),
  inference(cnf_transformation,[],[f725])).
fof(f725,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) != s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))) | s('type.integer.int',X0) = s('type.integer.int',X1)) & (s('type.integer.int',X0) != s('type.integer.int',X1) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(nnf_transformation,[],[f497])).
fof(f497,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))) <=> s('type.integer.int',X0) = s('type.integer.int',X1))),
  inference(rectify,[],[f190])).
fof(f190,axiom,(
  ! [X9,X10] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10))) <=> s('type.integer.int',X9) = s('type.integer.int',X10))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_EQ_NEG')).
fof(f9974,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))) | $spl2),
  inference(unit_resulting_resolution,[],[f5962,f1142])).
fof(f1142,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f724])).
fof(f724,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f496])).
fof(f496,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f147])).
fof(f147,axiom,(
  ! [X7,X6] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_INJ')).
fof(f5962,plain,(
  s('type.num.num',sK13) != s('type.num.num',sK14) | $spl2),
  inference(subsumption_resolution,[],[f5839,f1380])).
fof(f5839,plain,(
  p(s(bool,'F_0')) | s('type.num.num',sK13) != s('type.num.num',sK14) | $spl2),
  inference(superposition,[],[f1123,f2551])).
fof(f1123,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f713])).
fof(f713,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f712])).
fof(f712,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f487])).
fof(f487,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f151])).
fof(f151,axiom,(
  ! [X7,X6] : (s('type.num.num',X6) = s('type.num.num',X7) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.EQ_LESS_EQ')).
fof(f26309,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))) | $spl0),
  inference(subsumption_resolution,[],[f26252,f837])).
fof(f26252,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))) | $spl0),
  inference(superposition,[],[f1133,f2550])).
fof(f1133,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int',X1)) )),
  inference(cnf_transformation,[],[f718])).
fof(f27266,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27265,f27101])).
fof(f27101,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26513,f1380])).
fof(f26513,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.num.num',X0) != s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1123])).
fof(f27265,plain,(
  ( ! [X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X53)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26917,f1380])).
fof(f26917,plain,(
  ( ! [X53] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X53)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f12908])).
fof(f12908,plain,(
  ( ! [X53] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X53))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X53)))) )),
  inference(superposition,[],[f1424,f4161])).
fof(f4161,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f4083,f1400])).
fof(f1400,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f904,f853])).
fof(f904,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f320])).
fof(f320,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f155])).
fof(f155,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.TIMES2')).
fof(f1424,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1008,f1396])).
fof(f1396,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f1395,f1394])).
fof(f1394,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f899,f853])).
fof(f899,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|21')).
fof(f1395,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f900,f853])).
fof(f900,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f96])).
fof(f96,axiom,(
  ! [X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.num.|48|_0')))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|24')).
fof(f1008,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f679])).
fof(f679,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)))),
  inference(nnf_transformation,[],[f384])).
fof(f384,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(flattening,[],[f383])).
fof(f383,plain,(
  ! [X0] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f215])).
fof(f215,axiom,(
  ! [X6] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.NOT_ZERO_LT_ZERO')).
fof(f27264,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27263,f27101])).
fof(f27263,plain,(
  ( ! [X54,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26911,f1380])).
fof(f26911,plain,(
  ( ! [X54,X55] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f7866])).
fof(f7866,plain,(
  ( ! [X54,X55] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X54))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55)))) )),
  inference(superposition,[],[f1424,f1054])).
fof(f1054,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f423])).
fof(f423,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f130])).
fof(f130,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.ADD_SYM')).
fof(f27262,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26908,f1380])).
fof(f26908,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f8777])).
fof(f8777,plain,(
  ( ! [X34] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(subsumption_resolution,[],[f8676,f8773])).
fof(f8773,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X19)))) )),
  inference(subsumption_resolution,[],[f8772,f1380])).
fof(f8772,plain,(
  ( ! [X19] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X19)))) )),
  inference(forward_demodulation,[],[f8771,f862])).
fof(f862,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f97])).
fof(f97,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|23')).
fof(f8771,plain,(
  ( ! [X19] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X19)))) )),
  inference(forward_demodulation,[],[f8665,f1438])).
fof(f1438,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(backward_demodulation,[],[f1433,f1055])).
fof(f1055,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f157])).
fof(f157,axiom,(
  ! [X7,X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.LESS_EQ')).
fof(f8665,plain,(
  ( ! [X19] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X19)))) )),
  inference(superposition,[],[f954,f4160])).
fof(f4160,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f4083,f1398])).
fof(f1398,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f902,f853])).
fof(f902,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f318])).
fof(f318,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f119])).
fof(f119,axiom,(
  ! [X6] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.SUC_ONE_ADD')).
fof(f954,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f643])).
fof(f643,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f363])).
fof(f363,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f214])).
fof(f214,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X6))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.LESS_EQ_|48|')).
fof(f8676,plain,(
  ( ! [X34] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X34)))) )),
  inference(superposition,[],[f1424,f4160])).
fof(f27261,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26907,f1380])).
fof(f26907,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f7403])).
fof(f7403,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f7402,f1438])).
fof(f7402,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f7401,f1062])).
fof(f1062,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f116])).
fof(f116,axiom,(
  ! [X6,X7] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_lte|split|3')).
fof(f7401,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f7292,f887])).
fof(f887,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f303])).
fof(f303,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f192])).
fof(f192,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_suc|split|2')).
fof(f7292,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f887,f1123])).
fof(f27260,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27259,f27101])).
fof(f27259,plain,(
  ( ! [X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26903,f1380])).
fof(f26903,plain,(
  ( ! [X55] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f12759])).
fof(f12759,plain,(
  ( ! [X55] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X55))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X55)))) )),
  inference(superposition,[],[f1424,f4161])).
fof(f27258,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26900,f1380])).
fof(f26900,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f9001])).
fof(f9001,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9000,f1438])).
fof(f9000,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f8847,f1063])).
fof(f1063,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f432])).
fof(f432,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f187])).
fof(f187,axiom,(
  ! [X6,X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f8847,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f8768,f1123])).
fof(f8768,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(backward_demodulation,[],[f8643,f4162])).
fof(f4162,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(backward_demodulation,[],[f4083,f1401])).
fof(f1401,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f905,f1382])).
fof(f1382,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(backward_demodulation,[],[f853,f842])).
fof(f842,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f66])).
fof(f66,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|13')).
fof(f905,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f159])).
fof(f159,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.BIT|49|')).
fof(f8643,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f4160,f1054])).
fof(f27257,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26899,f1380])).
fof(f26899,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f6488])).
fof(f6488,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f1013,f1424])).
fof(f1013,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f389])).
fof(f389,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f206])).
fof(f206,axiom,(
  ! [X6] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.integer_386_prove_ltb|split|0')).
fof(f27256,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26898,f1380])).
fof(f26898,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f5890])).
fof(f5890,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f5770,f1438])).
fof(f5770,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f4146,f1123])).
fof(f4146,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(backward_demodulation,[],[f4083,f841])).
fof(f841,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f193])).
fof(f193,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_suc|split|0')).
fof(f27255,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26897,f1380])).
fof(f26897,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f6487])).
fof(f6487,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f1012,f1424])).
fof(f1012,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f388])).
fof(f388,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f387])).
fof(f387,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f205])).
fof(f205,axiom,(
  ! [X6] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.integer_386_prove_ltb|split|1')).
fof(f27254,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27253,f27101])).
fof(f27253,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27252,f27220])).
fof(f27220,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26991,f1380])).
fof(f26991,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'F_0'))) ) | ($spl0 | $spl2)),
  inference(condensation,[],[f26753])).
fof(f26753,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,X1)) | ~p(s(bool,X0))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1264])).
fof(f1264,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))) )),
  inference(cnf_transformation,[],[f790])).
fof(f790,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2))) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))))),
  inference(flattening,[],[f789])).
fof(f789,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & (((p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2)))) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))))),
  inference(nnf_transformation,[],[f554])).
fof(f554,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f553])).
fof(f553,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(rectify,[],[f236])).
fof(f236,axiom,(
  ! [X32,X18,X19] : (p(s(bool,'const.bool.COND_3'(s(bool,X32),s(bool,X18),s(bool,X19)))) <=> ((~p(s(bool,X32)) | p(s(bool,X18))) & (p(s(bool,X32)) | p(s(bool,X19)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.COND_EXPAND')).
fof(f27252,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26896,f1380])).
fof(f26896,plain,(
  ( ! [X21,X22] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22578])).
fof(f22578,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21)))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) )),
  inference(superposition,[],[f1502,f4161])).
fof(f1502,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f1501,f1438])).
fof(f1501,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f1210,f1438])).
fof(f1210,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f759])).
fof(f759,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(flattening,[],[f758])).
fof(f758,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) = s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f521])).
fof(f521,plain,(
  ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))))),
  inference(flattening,[],[f520])).
fof(f520,plain,(
  ! [X0,X1] : (~s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))))))),
  inference(rectify,[],[f145])).
fof(f145,axiom,(
  ! [X7,X6] : (~s('type.num.num',X6) = s('type.num.num',X7) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X6)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.NOT_NUM_EQ')).
fof(f27251,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27250,f27101])).
fof(f27250,plain,(
  ( ! [X30,X31] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27249,f27220])).
fof(f27249,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26895,f1380])).
fof(f26895,plain,(
  ( ! [X30,X31] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22552])).
fof(f22552,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))),s('type.num.num',X31)))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) )),
  inference(superposition,[],[f1502,f4161])).
fof(f27248,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27247,f27220])).
fof(f27247,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num',X37))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26892,f1380])).
fof(f26892,plain,(
  ( ! [X37,X36] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num',X37))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11034])).
fof(f11034,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36)))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num',X37))))) )),
  inference(forward_demodulation,[],[f11033,f1438])).
fof(f11033,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36))))),s('type.num.num',X37)))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num',X37))))) )),
  inference(forward_demodulation,[],[f10963,f1063])).
fof(f10963,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num',X37)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))))),s('type.num.num',X37))))) )),
  inference(superposition,[],[f1504,f8768])).
fof(f1504,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f1213,f1433])).
fof(f1213,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f760])).
fof(f760,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f523])).
fof(f523,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f522])).
fof(f522,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f135])).
fof(f135,axiom,(
  ! [X7,X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.NOT_LESS')).
fof(f27246,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27245,f27101])).
fof(f27245,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27244,f27220])).
fof(f27244,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26890,f1380])).
fof(f26890,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22584])).
fof(f22584,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32)))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) )),
  inference(superposition,[],[f1502,f1054])).
fof(f27243,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27242,f27101])).
fof(f27242,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27241,f27220])).
fof(f27241,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26889,f1380])).
fof(f26889,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22553])).
fof(f22553,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))),s('type.num.num',X34)))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) )),
  inference(superposition,[],[f1502,f1054])).
fof(f27240,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27239,f27101])).
fof(f27239,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27238,f27220])).
fof(f27238,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26884,f1380])).
fof(f26884,plain,(
  ( ! [X21,X22] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22547])).
fof(f22547,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21))),s('type.num.num',X22)))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) )),
  inference(superposition,[],[f1502,f4161])).
fof(f27237,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27236,f27101])).
fof(f27236,plain,(
  ( ! [X30,X31] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27235,f27220])).
fof(f27235,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26883,f1380])).
fof(f26883,plain,(
  ( ! [X30,X31] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22583])).
fof(f22583,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30)))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) )),
  inference(superposition,[],[f1502,f4161])).
fof(f27234,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27233,f27220])).
fof(f27233,plain,(
  ( ! [X26,X27] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))))),s('type.num.num',X27))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26881,f1380])).
fof(f26881,plain,(
  ( ! [X26,X27] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))))),s('type.num.num',X27))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11031])).
fof(f11031,plain,(
  ( ! [X26,X27] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26)))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))))),s('type.num.num',X27))))) )),
  inference(forward_demodulation,[],[f10959,f1438])).
fof(f10959,plain,(
  ( ! [X26,X27] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))))),s('type.num.num',X27)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26))))),s('type.num.num',X27))))) )),
  inference(superposition,[],[f1504,f887])).
fof(f27232,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27231,f27220])).
fof(f27231,plain,(
  ( ! [X25] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X25))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26880,f1380])).
fof(f26880,plain,(
  ( ! [X25] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X25))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11030])).
fof(f11030,plain,(
  ( ! [X25] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X25),s('type.num.num','const.num.|48|_0')))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f10958,f1438])).
fof(f10958,plain,(
  ( ! [X25] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X25)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X25))))) )),
  inference(superposition,[],[f1504,f4146])).
fof(f27230,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27229,f27101])).
fof(f27229,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26868,f1380])).
fof(f26868,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1424])).
fof(f27228,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27227,f27101])).
fof(f27227,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27226,f27220])).
fof(f27226,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26798,f1380])).
fof(f26798,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1502])).
fof(f27225,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27224,f27101])).
fof(f27224,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK45(X2,X1,X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27223,f27101])).
fof(f27223,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK45(X2,X1,X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK45(X2,X1,X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26790,f1380])).
fof(f26790,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK45(X2,X1,X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK45(X2,X1,X0))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1269])).
fof(f1269,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK45(X2,X1,X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK45(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f793])).
fof(f793,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ! [X4] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X4))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X4))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X4))))))) & (((s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK45(X2,X1,X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK45(X2,X1,X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK45(X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK45])],[f792])).
fof(f792,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ! [X4] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X4))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X4))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X4))))))) & (? [X3] : ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))))))),
  inference(rectify,[],[f791])).
fof(f791,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ! [X3] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))))) & (? [X3] : ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))))))),
  inference(nnf_transformation,[],[f609])).
fof(f609,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) <=> ! [X3] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3)))))))),
  inference(ennf_transformation,[],[f555])).
fof(f555,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) <=> ! [X3] : ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))) => p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3))) => p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3)))))))),
  inference(rectify,[],[f243])).
fof(f243,axiom,(
  ! [X32,X26,X21] : (p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num',X32)))))) <=> ! [X33] : ((s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X33))) => p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0'))))) & (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))) => p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num',X33)))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.arithmetic.SUB_ELIM_THM')).
fof(f27222,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26762,f1380])).
fof(f26762,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11376])).
fof(f11376,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,'T_0'),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f837,f837,f1266])).
fof(f1266,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2))))) )),
  inference(cnf_transformation,[],[f790])).
fof(f27221,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26988,f1380])).
fof(f26988,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(condensation,[],[f26758])).
fof(f26758,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | p(s(bool,X7))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11304])).
fof(f11304,plain,(
  ( ! [X8,X7] : (p(s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,'T_0')))) | p(s(bool,X7))) )),
  inference(forward_demodulation,[],[f11303,f865])).
fof(f865,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f281])).
fof(f281,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f74])).
fof(f74,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_distrib|split|26')).
fof(f11303,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))))) | p(s(bool,X7))) )),
  inference(subsumption_resolution,[],[f11286,f837])).
fof(f11286,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | p(s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))))) | p(s(bool,X7))) )),
  inference(superposition,[],[f1265,f865])).
fof(f1265,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f790])).
fof(f27219,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27218,f27101])).
fof(f27218,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26749,f1380])).
fof(f26749,plain,(
  ( ! [X33,X32] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20983])).
fof(f20983,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X34))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) )),
  inference(superposition,[],[f1170,f1054])).
fof(f1170,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f741])).
fof(f741,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))))),
  inference(flattening,[],[f740])).
fof(f740,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f509])).
fof(f509,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) <=> (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)))),
  inference(flattening,[],[f508])).
fof(f508,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) <=> (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f134])).
fof(f134,axiom,(
  ! [X6,X7] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7)))))) <=> (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LT_CALCULATE|split|2')).
fof(f27217,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27216,f27101])).
fof(f27216,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26748,f1380])).
fof(f26748,plain,(
  ( ! [X21] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20977])).
fof(f20977,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X22))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) )),
  inference(superposition,[],[f1170,f4161])).
fof(f27215,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26747,f1380])).
fof(f26747,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f21012])).
fof(f21012,plain,(
  ( ! [X50,X49] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X50))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))))))))) )),
  inference(subsumption_resolution,[],[f20990,f8773])).
fof(f20990,plain,(
  ( ! [X50,X49] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X50))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X49)))) )),
  inference(superposition,[],[f1170,f4160])).
fof(f27214,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26746,f1380])).
fof(f26746,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f21010])).
fof(f21010,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X44))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))))))) )),
  inference(subsumption_resolution,[],[f20987,f15539])).
fof(f15539,plain,(
  ( ! [X45,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(subsumption_resolution,[],[f15538,f1380])).
fof(f15538,plain,(
  ( ! [X45,X44] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(forward_demodulation,[],[f15537,f862])).
fof(f15537,plain,(
  ( ! [X45,X44] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(forward_demodulation,[],[f15324,f1438])).
fof(f15324,plain,(
  ( ! [X45,X44] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(superposition,[],[f954,f1063])).
fof(f20987,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X44))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))))) )),
  inference(superposition,[],[f1170,f1063])).
fof(f27213,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27212,f27101])).
fof(f27212,plain,(
  ( ! [X30] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26745,f1380])).
fof(f26745,plain,(
  ( ! [X30] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20982])).
fof(f20982,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X31))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) )),
  inference(superposition,[],[f1170,f4161])).
fof(f27211,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26744,f1380])).
fof(f26744,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20932])).
fof(f20932,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f1013,f1170])).
fof(f27210,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26743,f1380])).
fof(f26743,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f21002])).
fof(f21002,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f20933,f4146])).
fof(f20933,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f5717,f1170])).
fof(f5717,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f5716,f1380])).
fof(f5716,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f5648,f4150])).
fof(f4150,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f4083,f881])).
fof(f881,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f297])).
fof(f297,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f118])).
fof(f118,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_lte|split|1')).
fof(f5648,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f954,f4146])).
fof(f27209,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26742,f1380])).
fof(f26742,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20931])).
fof(f20931,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f1012,f1170])).
fof(f27208,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26741,f1380])).
fof(f26741,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20818])).
fof(f20818,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X44))))))) )),
  inference(subsumption_resolution,[],[f20751,f15539])).
fof(f20751,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X44)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))))) )),
  inference(superposition,[],[f1169,f1063])).
fof(f1169,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f741])).
fof(f27207,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27206,f27101])).
fof(f27206,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26740,f1380])).
fof(f26740,plain,(
  ( ! [X33,X32] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20747])).
fof(f20747,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X34)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33)))) )),
  inference(superposition,[],[f1169,f1054])).
fof(f27205,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27204,f27101])).
fof(f27204,plain,(
  ( ! [X21] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26739,f1380])).
fof(f26739,plain,(
  ( ! [X21] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20741])).
fof(f20741,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X22)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21)))) )),
  inference(superposition,[],[f1169,f4161])).
fof(f27203,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26738,f1380])).
fof(f26738,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20822])).
fof(f20822,plain,(
  ( ! [X50,X49] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X50))))))) )),
  inference(subsumption_resolution,[],[f20754,f8773])).
fof(f20754,plain,(
  ( ! [X50,X49] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X50)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X49)))) )),
  inference(superposition,[],[f1169,f4160])).
fof(f27202,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27201,f27101])).
fof(f27201,plain,(
  ( ! [X30] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26737,f1380])).
fof(f26737,plain,(
  ( ! [X30] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20746])).
fof(f20746,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X31)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30)))) )),
  inference(superposition,[],[f1169,f4161])).
fof(f27200,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27199,f27101])).
fof(f27199,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26736,f1380])).
fof(f26736,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1170])).
fof(f27198,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27197,f27101])).
fof(f27197,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26735,f1380])).
fof(f26735,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1169])).
fof(f27196,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27195,f26998])).
fof(f27195,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26733,f1380])).
fof(f26733,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f22457])).
fof(f22457,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(subsumption_resolution,[],[f22383,f837])).
fof(f22383,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f1133,f1446])).
fof(f1446,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f1445,f853])).
fof(f1445,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f1083,f853])).
fof(f1083,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))))) )),
  inference(cnf_transformation,[],[f452])).
fof(f452,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_REDUCE|split|11')).
fof(f27189,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26662,f1380])).
fof(f26662,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f12686])).
fof(f12686,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4161,f1123])).
fof(f27186,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26656,f1380])).
fof(f26656,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f7786])).
fof(f7786,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f1054,f1123])).
fof(f27185,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26654,f1380])).
fof(f26654,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f12682])).
fof(f12682,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4161,f1123])).
fof(f27176,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27175,f1380])).
fof(f27175,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27174,f26333])).
fof(f27174,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26641,f1380])).
fof(f26641,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20550])).
fof(f20550,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X34))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X32)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X34))))) )),
  inference(superposition,[],[f1167,f1054])).
fof(f1167,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f739])).
fof(f739,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f507])).
fof(f507,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f506])).
fof(f506,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f114])).
fof(f114,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))) <=> ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_lte|split|5')).
fof(f27173,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27172,f1380])).
fof(f27172,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27171,f26333])).
fof(f27171,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26639,f1380])).
fof(f26639,plain,(
  ( ! [X21,X22] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20544])).
fof(f20544,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X21)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))),s('type.num.num',X22))))) )),
  inference(superposition,[],[f1167,f4161])).
fof(f27170,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27169,f1380])).
fof(f27169,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27168,f26333])).
fof(f27168,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26637,f1380])).
fof(f26637,plain,(
  ( ! [X30,X31] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f20549])).
fof(f20549,plain,(
  ( ! [X30,X31] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X31))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30)))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X30))),s('type.num.num',X31))))) )),
  inference(superposition,[],[f1167,f4161])).
fof(f27161,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27160,f837])).
fof(f27160,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27159,f27109])).
fof(f27109,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26534,f1380])).
fof(f26534,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X2)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11071])).
fof(f11071,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f10998,f1380])).
fof(f10998,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(superposition,[],[f1504,f923])).
fof(f923,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.integer.INT_LE_REDUCE|split|12',aHL_BOOL_CASES)).
fof(f27159,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27158,f1380])).
fof(f27158,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'F_0'))) ) | ($spl0 | $spl2)),
  inference(condensation,[],[f27157])).
fof(f27157,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X61),s('type.num.num',X60)))) | ~p(s(bool,X62))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26630,f26333])).
fof(f26630,plain,(
  ( ! [X61,X62,X60,X63] : (p(s(bool,'const.bool.COND_3'(s(bool,X63),s(bool,'F_0'),s(bool,X62)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X61),s('type.num.num',X60)))) | ~p(s(bool,X62))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17498])).
fof(f17498,plain,(
  ( ! [X61,X62,X60,X63] : (p(s(bool,'const.bool.COND_3'(s(bool,X63),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X60))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X61))))),s(bool,X62)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X61),s('type.num.num',X60)))) | ~p(s(bool,X62))) )),
  inference(forward_demodulation,[],[f17497,f12103])).
fof(f12103,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f1438,f882])).
fof(f882,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f298])).
fof(f298,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f194])).
fof(f194,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_suc|split|1')).
fof(f17497,plain,(
  ( ! [X61,X62,X60,X63] : (p(s(bool,'const.bool.COND_3'(s(bool,X63),s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X61))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X60))))),s(bool,X62)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X61),s('type.num.num',X60)))) | ~p(s(bool,X62))) )),
  inference(forward_demodulation,[],[f17460,f1433])).
fof(f17460,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X61),s('type.num.num',X60)))) | ~p(s(bool,X62)) | p(s(bool,'const.bool.COND_3'(s(bool,X63),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X60))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X61))))),s(bool,X62))))) )),
  inference(superposition,[],[f1266,f1434])).
fof(f1434,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(backward_demodulation,[],[f1433,f1071])).
fof(f1071,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f440,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f261])).
fof(f261,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.numeral.numeral_lt|split|3')).
fof(f27156,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27155,f837])).
fof(f27155,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27154,f27109])).
fof(f27154,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27153,f1380])).
fof(f27153,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | ($spl0 | $spl2)),
  inference(condensation,[],[f27152])).
fof(f27152,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X57),s('type.num.num',X56)))) | p(s(bool,X58))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26629,f26333])).
fof(f26629,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,'const.bool.COND_3'(s(bool,X58),s(bool,X59),s(bool,'F_0')))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X57),s('type.num.num',X56)))) | p(s(bool,X58))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17496])).
fof(f17496,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,'const.bool.COND_3'(s(bool,X58),s(bool,X59),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X57),s('type.num.num',X56)))) | p(s(bool,X58))) )),
  inference(forward_demodulation,[],[f17495,f12103])).
fof(f17495,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,'const.bool.COND_3'(s(bool,X58),s(bool,X59),s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56)))))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X57),s('type.num.num',X56)))) | p(s(bool,X58))) )),
  inference(forward_demodulation,[],[f17459,f1433])).
fof(f17459,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X57),s('type.num.num',X56)))) | p(s(bool,'const.bool.COND_3'(s(bool,X58),s(bool,X59),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X56))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X57)))))))) | p(s(bool,X58))) )),
  inference(superposition,[],[f1265,f1434])).
fof(f27151,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27150,f837])).
fof(f27150,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27149,f27109])).
fof(f27149,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27148,f1380])).
fof(f27148,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'F_0'))) ) | ($spl0 | $spl2)),
  inference(condensation,[],[f27147])).
fof(f27147,plain,(
  ( ! [X54,X52,X53] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X53),s('type.num.num',X52)))) | ~p(s(bool,X54))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26628,f26333])).
fof(f26628,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,'const.bool.COND_3'(s(bool,X54),s(bool,'F_0'),s(bool,X55)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X53),s('type.num.num',X52)))) | ~p(s(bool,X54))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17494])).
fof(f17494,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,'const.bool.COND_3'(s(bool,X54),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53))))),s(bool,X55)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X53),s('type.num.num',X52)))) | ~p(s(bool,X54))) )),
  inference(forward_demodulation,[],[f17493,f12103])).
fof(f17493,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,'const.bool.COND_3'(s(bool,X54),s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))))),s(bool,X55)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X53),s('type.num.num',X52)))) | ~p(s(bool,X54))) )),
  inference(forward_demodulation,[],[f17458,f1433])).
fof(f17458,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X53),s('type.num.num',X52)))) | ~p(s(bool,X54)) | p(s(bool,'const.bool.COND_3'(s(bool,X54),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X53))))),s(bool,X55))))) )),
  inference(superposition,[],[f1264,f1434])).
fof(f27141,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27140,f837])).
fof(f27140,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27139,f27109])).
fof(f27139,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27138,f26333])).
fof(f27138,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X23) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26624,f945])).
fof(f945,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f639])).
fof(f26624,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') != s(bool,X23) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,X23))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17486])).
fof(f17486,plain,(
  ( ! [X23,X21,X22] : (s(bool,X23) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,X23))) )),
  inference(forward_demodulation,[],[f17485,f12103])).
fof(f17485,plain,(
  ( ! [X23,X21,X22] : (s(bool,X23) != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,X23))) )),
  inference(forward_demodulation,[],[f17449,f1433])).
fof(f17449,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,X23)) | s(bool,X23) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X21))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))) )),
  inference(superposition,[],[f1127,f1434])).
fof(f1127,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f715])).
fof(f715,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))) & (((~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X1)))) | s(bool,X0) = s(bool,X1)))),
  inference(flattening,[],[f714])).
fof(f714,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1))))) & (((~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X1)))) | s(bool,X0) = s(bool,X1)))),
  inference(nnf_transformation,[],[f489])).
fof(f489,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))))),
  inference(flattening,[],[f488])).
fof(f488,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) & p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X1)))))),
  inference(rectify,[],[f188])).
fof(f188,axiom,(
  ! [X18,X19] : (s(bool,X18) = s(bool,X19) <=> ((p(s(bool,X18)) & p(s(bool,X19))) | (~p(s(bool,X18)) & ~p(s(bool,X19)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.EQ_EXPAND')).
fof(f27137,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27136,f837])).
fof(f27136,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26995,f27109])).
fof(f26995,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))))) ) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f26621])).
fof(f26621,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17476])).
fof(f17476,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f17475,f12103])).
fof(f17475,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f17444,f1433])).
fof(f17444,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f945,f1434])).
fof(f27135,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27134,f27109])).
fof(f27134,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num',X5),s('type.num.num',X4)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26619,f1380])).
fof(f26619,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num',X5),s('type.num.num',X4)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17472])).
fof(f17472,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5)))))) | s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num',X5),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f17471,f12103])).
fof(f17471,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4)))))) | s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num',X5),s('type.num.num',X4)))) )),
  inference(forward_demodulation,[],[f17442,f1433])).
fof(f17442,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.>_2'(s('type.num.num',X5),s('type.num.num',X4))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))) )),
  inference(superposition,[],[f941,f1434])).
fof(f941,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f637])).
fof(f637,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f355])).
fof(f355,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X17] : (s(bool,'T_0') = s(bool,X17) <=> p(s(bool,X17)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.bool.EQ_CLAUSES|split|1')).
fof(f27118,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27117,f1380])).
fof(f27117,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27116,f26333])).
fof(f27116,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))),s('type.num.num',X37))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26588,f1380])).
fof(f26588,plain,(
  ( ! [X37,X36] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))),s('type.num.num',X37))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f15512])).
fof(f15512,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))),s('type.num.num',X37))))) )),
  inference(backward_demodulation,[],[f15293,f12166])).
fof(f12166,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))),s('type.num.num',X37)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36))))))))) )),
  inference(backward_demodulation,[],[f12103,f11061])).
fof(f11061,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X36)))))))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))))))) )),
  inference(forward_demodulation,[],[f10989,f1063])).
fof(f10989,plain,(
  ( ! [X37,X36] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))))))))) )),
  inference(superposition,[],[f1504,f8768])).
fof(f15293,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f1063,f8768])).
fof(f27114,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27113,f837])).
fof(f27113,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27112,f27109])).
fof(f27112,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26579,f1380])).
fof(f26579,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f17970])).
fof(f17970,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f17936,f1066])).
fof(f17936,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X7),s('type.num.num',X6)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))))))) )),
  inference(superposition,[],[f1134,f1437])).
fof(f1437,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(backward_demodulation,[],[f1433,f1064])).
fof(f1064,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f133])).
fof(f133,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LT_CALCULATE|split|0')).
fof(f1134,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f718])).
fof(f27108,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27107,f1380])).
fof(f27107,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27106,f26333])).
fof(f27106,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26523,f1380])).
fof(f26523,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1504])).
fof(f27105,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26521,f26998])).
fof(f26521,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1468])).
fof(f1468,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1467,f853])).
fof(f1467,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1466,f853])).
fof(f1466,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1465,f1058])).
fof(f1058,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f427])).
fof(f427,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(rectify,[],[f240])).
fof(f240,axiom,(
  ! [X9,X10] : s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.int_sub')).
fof(f1465,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1464,f853])).
fof(f1464,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f1107,f853])).
fof(f1107,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))))) )),
  inference(cnf_transformation,[],[f476])).
fof(f476,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))))))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6,X7] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))))))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X6)))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ADD_REDUCE|split|5')).
fof(f27104,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27103,f1380])).
fof(f27103,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27102,f26333])).
fof(f27102,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26516,f1380])).
fof(f26516,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1167])).
fof(f27100,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27099,f837])).
fof(f27099,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27098,f27014])).
fof(f27014,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26350,f1380])).
fof(f26350,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f9496])).
fof(f9496,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(subsumption_resolution,[],[f9471,f1380])).
fof(f9471,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) )),
  inference(superposition,[],[f1137,f923])).
fof(f1137,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f719])).
fof(f719,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f493])).
fof(f493,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(flattening,[],[f492])).
fof(f492,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X9,X10] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int',X10)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X10),s('type.integer.int',X9)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.int_le')).
fof(f27098,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X43))))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26508,f1380])).
fof(f26508,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,'F_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X43))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11570])).
fof(f11570,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int',X43))),s('type.integer.int',X45)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X43))))))) )),
  inference(forward_demodulation,[],[f11569,f1056])).
fof(f1056,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f425])).
fof(f425,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(rectify,[],[f254])).
fof(f254,axiom,(
  ! [X9,X10] : s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X10),s('type.integer.int',X9))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_NEG_SUB')).
fof(f11569,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X44),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X45),s('type.integer.int',X43)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X43),s('type.integer.int',X44))))),s('type.integer.int',X45))))) )),
  inference(forward_demodulation,[],[f11522,f1247])).
fof(f1247,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))) )),
  inference(cnf_transformation,[],[f545])).
fof(f545,plain,(
  ! [X0,X1,X2] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int',X2)))),
  inference(rectify,[],[f250])).
fof(f250,axiom,(
  ! [X9,X10,X20] : s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X20),s('type.integer.int',X10))))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10))),s('type.integer.int',X20)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LT_SUB_RADD')).
fof(f11522,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X44),s('type.integer.int',X43))),s('type.integer.int',X45)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X43),s('type.integer.int',X44))))),s('type.integer.int',X45))))) )),
  inference(superposition,[],[f1134,f1056])).
fof(f27097,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26506,f1380])).
fof(f26506,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f7656])).
fof(f7656,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0))))))) )),
  inference(unit_resulting_resolution,[],[f1053,f1135])).
fof(f1053,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f422])).
fof(f422,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))),
  inference(rectify,[],[f241])).
fof(f241,axiom,(
  ! [X10,X9] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X10),s('type.integer.int',X9)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ADD_SYM')).
fof(f27092,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27091,f837])).
fof(f27091,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27090,f27014])).
fof(f27090,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))),s('type.integer.int',X9))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26500,f1380])).
fof(f26500,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'F_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))),s('type.integer.int',X9))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f9214])).
fof(f9214,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))),s('type.integer.int',X9)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))),s('type.integer.int',X9))))) )),
  inference(superposition,[],[f1134,f1053])).
fof(f27075,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27074,f1380])).
fof(f27074,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27073,f26333])).
fof(f27073,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26482,f1380])).
fof(f26482,plain,(
  ( ! [X210,X211] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f25650])).
fof(f25650,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X210))),s('type.integer.int',X211)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f25649,f14231])).
fof(f14231,plain,(
  ( ! [X2,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f14195,f14093])).
fof(f14093,plain,(
  ( ! [X2,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(forward_demodulation,[],[f14040,f1078])).
fof(f1078,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f447])).
fof(f447,plain,(
  ! [X0,X1] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(rectify,[],[f253])).
fof(f253,axiom,(
  ! [X9,X10] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X10),s('type.integer.int',X9))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_SUB_LE')).
fof(f14040,plain,(
  ( ! [X2,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) )),
  inference(superposition,[],[f906,f1056])).
fof(f906,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f322])).
fof(f322,plain,(
  ! [X0] : s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9] : s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int',X9)))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_NEGL')).
fof(f14195,plain,(
  ( ! [X2,X1] : (s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1)))))) )),
  inference(superposition,[],[f907,f1056])).
fof(f907,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X9] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_NEGR')).
fof(f25649,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X210))),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f25648,f1058])).
fof(f25648,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X210))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X211))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f25455,f910])).
fof(f910,plain,(
  ( ! [X0] : (s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f326])).
fof(f326,plain,(
  ! [X0] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X9] : s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_NEG_GE|48|')).
fof(f25455,plain,(
  ( ! [X210,X211] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X210),s('type.integer.int',X211)))))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X210))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X211))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f1413,f1086])).
fof(f1086,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f455])).
fof(f455,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))),
  inference(rectify,[],[f224])).
fof(f224,axiom,(
  ! [X9,X10] : s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_NEG_ADD')).
fof(f1413,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) )),
  inference(forward_demodulation,[],[f925,f910])).
fof(f925,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f341])).
fof(f341,plain,(
  ! [X0] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X9] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X9)))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_NEGTOTAL')).
fof(f27068,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27067,f1380])).
fof(f27067,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27066,f26333])).
fof(f27066,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26477,f1380])).
fof(f26477,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f21931])).
fof(f21931,plain,(
  ( ! [X6,X5] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X5))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X5),s('type.integer.int',X6))))))) )),
  inference(superposition,[],[f1413,f1053])).
fof(f27063,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27062,f26998])).
fof(f27062,plain,(
  ( ! [X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26450,f26998])).
fof(f26450,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11890])).
fof(f11890,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f11888,f11818])).
fof(f11818,plain,(
  ( ! [X4,X3] : (s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X3),s('type.integer.int',X4))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X4))),s('type.integer.int',X3)))) )),
  inference(superposition,[],[f1058,f1053])).
fof(f11888,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f11818,f4180])).
fof(f4180,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f4083,f1528])).
fof(f1528,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1245,f853])).
fof(f1245,plain,(
  ( ! [X0,X1] : (s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f782])).
fof(f782,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ((~p(s(bool,sK43(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,sK43(X1,X0)))) & ((~p(s(bool,sK44(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,sK44(X1,X0)))) & s('type.integer.int',sK42(X1,X0)) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK44(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK43(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK42,sK43,sK44])],[f781])).
fof(f781,plain,(
  ! [X0,X1] : ? [X2] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X3] : ((~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,X3))) & ? [X4] : ((~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,X4))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(flattening,[],[f780])).
fof(f780,plain,(
  ! [X0,X1] : ? [X2] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X3] : (((~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,X3)))) & ? [X4] : (((~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,X4)))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(nnf_transformation,[],[f605])).
fof(f605,plain,(
  ! [X0,X1] : ? [X2] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(ennf_transformation,[],[f543])).
fof(f543,plain,(
  ! [X0,X1] : ? [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(flattening,[],[f542])).
fof(f542,plain,(
  ! [X0,X1] : ? [X2] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X13,X14] : ? [X12] : (~s('type.integer.int',X14) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X15] : ((p(s(bool,X15)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14)))))))) & ? [X16] : ((p(s(bool,X16)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14)))))) & s('type.integer.int',X12) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X14))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))))))))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.integer_259_prove_ltb')).
fof(f27061,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27060,f26998])).
fof(f27060,plain,(
  ( ! [X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26449,f26998])).
fof(f26449,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'F_0'),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f11889])).
fof(f11889,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f11887,f11818])).
fof(f11887,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f11818,f4170])).
fof(f4170,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f4083,f1475])).
fof(f1475,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1121,f853])).
fof(f1121,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f711])).
fof(f711,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ((~p(s(bool,sK31(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,sK31(X1,X0)))) & ((~p(s(bool,sK32(X1,X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,sK32(X1,X0)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK32(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,sK31(X1,X0)),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK31,sK32])],[f710])).
fof(f710,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X2] : ((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,X2))) & ? [X3] : ((~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,X3))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(flattening,[],[f709])).
fof(f709,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X2] : (((~p(s(bool,X2)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,X2)))) & ? [X3] : (((~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))) | p(s(bool,X3)))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(nnf_transformation,[],[f595])).
fof(f595,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(ennf_transformation,[],[f486])).
fof(f486,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(flattening,[],[f485])).
fof(f485,plain,(
  ! [X0,X1] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X2] : ((p(s(bool,X2)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X2),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X13,X14] : (~s('type.integer.int',X14) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X15] : ((p(s(bool,X15)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14)))))))) & ? [X16] : ((p(s(bool,X16)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14)))))) & s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X13),s('type.integer.int',X14))) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X14))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X14))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X16),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X13))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X13))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X15),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X13))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))))))))))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.int_div')).
fof(f27057,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27056,f837])).
fof(f27056,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27055,f27014])).
fof(f27055,plain,(
  ( ! [X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26437,f1380])).
fof(f26437,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f24975])).
fof(f24975,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))))))) )),
  inference(superposition,[],[f1134,f1084])).
fof(f1084,plain,(
  ( ! [X0,X1] : (s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) )),
  inference(cnf_transformation,[],[f453])).
fof(f453,plain,(
  ! [X0,X1] : s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))),
  inference(rectify,[],[f251])).
fof(f251,axiom,(
  ! [X9,X10] : s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X10))) = s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X10)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LT_ADDR')).
fof(f27050,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27049,f837])).
fof(f27049,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27048,f27014])).
fof(f27048,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26431,f1380])).
fof(f26431,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'F_0')) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7))))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f9228])).
fof(f9228,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X8),s('type.integer.int',X7)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X9),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))))) )),
  inference(superposition,[],[f1134,f1053])).
fof(f27026,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27025,f1380])).
fof(f27025,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27024,f26333])).
fof(f27024,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26384,f1380])).
fof(f26384,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1413])).
fof(f27021,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27020,f1380])).
fof(f27020,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f27019,f26333])).
fof(f27019,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26365,f1380])).
fof(f26365,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f21980])).
fof(f21980,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) )),
  inference(forward_demodulation,[],[f21979,f14231])).
fof(f21979,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1))))) )),
  inference(forward_demodulation,[],[f21978,f910])).
fof(f21978,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(forward_demodulation,[],[f21928,f14231])).
fof(f21928,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))) )),
  inference(superposition,[],[f1413,f1056])).
fof(f27001,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f27000,f1380])).
fof(f27000,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26999,f26333])).
fof(f26999,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26340,f1380])).
fof(f26340,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) ) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f26333,f1137])).
fof(f26326,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26325,f1380])).
fof(f26325,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26324,f2551])).
fof(f26324,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl0),
  inference(forward_demodulation,[],[f26323,f1066])).
fof(f26323,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl0),
  inference(forward_demodulation,[],[f26289,f1061])).
fof(f26289,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(trivial_inequality_removal,[],[f26257])).
fof(f26257,plain,(
  s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(superposition,[],[f941,f2550])).
fof(f26318,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26317,f1380])).
fof(f26317,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26316,f2551])).
fof(f26316,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl0),
  inference(forward_demodulation,[],[f26315,f1066])).
fof(f26315,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl0),
  inference(forward_demodulation,[],[f26314,f883])).
fof(f883,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f198])).
fof(f198,axiom,(
  ! [X6] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ABS_NUM')).
fof(f26314,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))))) | $spl0),
  inference(forward_demodulation,[],[f26313,f884])).
fof(f884,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f300])).
fof(f300,plain,(
  ! [X0] : s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f197])).
fof(f197,axiom,(
  ! [X11] : s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X11))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X11)))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ABS_NEG')).
fof(f26313,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))))))) | $spl0),
  inference(forward_demodulation,[],[f26312,f1061])).
fof(f26312,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(subsumption_resolution,[],[f26253,f837])).
fof(f26253,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(superposition,[],[f1163,f2550])).
fof(f1163,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f737])).
fof(f737,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) & ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0)))) & ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1))))))),
  inference(flattening,[],[f736])).
fof(f736,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1)))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))) & ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0)))) & ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f503])).
fof(f503,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))),s('type.integer.int',X1)))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X11,X12] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X11))))),s('type.integer.int',X12)))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12))),s('type.integer.int',X11)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X11),s('type.integer.int',X12))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ABS_LE|split|2')).
fof(f26303,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26302,f1380])).
fof(f26302,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26301,f2551])).
fof(f26301,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl0),
  inference(forward_demodulation,[],[f26300,f1066])).
fof(f26300,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl0),
  inference(forward_demodulation,[],[f26299,f883])).
fof(f26299,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))))) | $spl0),
  inference(forward_demodulation,[],[f26298,f884])).
fof(f26298,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))))))) | $spl0),
  inference(subsumption_resolution,[],[f26250,f837])).
fof(f26250,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))))))) | $spl0),
  inference(superposition,[],[f1151,f2550])).
fof(f1151,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))))) )),
  inference(cnf_transformation,[],[f729])).
fof(f729,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0)))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) & ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) & ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))))))),
  inference(flattening,[],[f728])).
fof(f728,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0)))))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) & ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))))))))),
  inference(nnf_transformation,[],[f499])).
fof(f499,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0)))))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X11,X12] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X12),s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X11)))))) <=> (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X12),s('type.integer.int',X11)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X11),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X12))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_ABS_LE|split|1')).
fof(f26297,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26296,f1380])).
fof(f26296,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26295,f2551])).
fof(f26295,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl0),
  inference(forward_demodulation,[],[f26294,f1066])).
fof(f26294,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl0),
  inference(forward_demodulation,[],[f26241,f1061])).
fof(f26241,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f2550,f941])).
fof(f26293,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f26292,f1380])).
fof(f26292,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f26291,f2551])).
fof(f26291,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl0),
  inference(forward_demodulation,[],[f26290,f1066])).
fof(f26290,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl0),
  inference(forward_demodulation,[],[f26246,f1061])).
fof(f26246,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f837,f2550,f1127])).
fof(f11214,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f11214_D])).
fof(f11214_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f11215,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,'F_0')))) | p(s(bool,X1))) ) | $spl6),
  inference(cnf_transformation,[],[f11215_D])).
fof(f11215_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,'F_0')))) | p(s(bool,X1))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f11213,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,'F_0')))) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f11167,f942])).
fof(f942,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f637])).
fof(f11167,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X1),s(bool,X2),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1262,f923])).
fof(f1262,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.bool.COND_3'(s(bool,X0),s(bool,X1),s(bool,X2)))) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f790])).
fof(f2590,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f2589,f837])).
fof(f2589,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(forward_demodulation,[],[f2588,f2555])).
fof(f2555,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) | $spl3),
  inference(unit_resulting_resolution,[],[f2552,f923])).
fof(f2588,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl3),
  inference(forward_demodulation,[],[f2587,f1066])).
fof(f2587,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl3),
  inference(forward_demodulation,[],[f2571,f1061])).
fof(f2571,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl3),
  inference(unit_resulting_resolution,[],[f2567,f942])).
fof(f2567,plain,(
  s(bool,'T_0') != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))))) | $spl3),
  inference(backward_demodulation,[],[f2555,f1385])).
fof(f1385,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))),
  inference(forward_demodulation,[],[f1383,f853])).
fof(f1383,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK14)))))))))),
  inference(backward_demodulation,[],[f853,f836])).
fof(f836,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK13))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK14)))))))))),
  inference(cnf_transformation,[],[f633])).
fof(f633,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK13))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK14)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14])],[f568])).
fof(f568,plain,(
  ? [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) != s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))))))),
  file('thm.integer.INT_LE_REDUCE|split|12','thm.integer.INT_LE_REDUCE|split|12')).
fof(f2586,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f2585,f837])).
fof(f2585,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(forward_demodulation,[],[f2584,f2555])).
fof(f2584,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl3),
  inference(forward_demodulation,[],[f2583,f1066])).
fof(f2583,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl3),
  inference(forward_demodulation,[],[f2574,f1061])).
fof(f2574,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl3),
  inference(unit_resulting_resolution,[],[f837,f2567,f1114])).
fof(f2582,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f2581,f837])).
fof(f2581,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(forward_demodulation,[],[f2580,f2555])).
fof(f2580,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13)))) | $spl3),
  inference(forward_demodulation,[],[f2579,f1066])).
fof(f2579,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13)))))) | $spl3),
  inference(forward_demodulation,[],[f2577,f1061])).
fof(f2577,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))) | $spl3),
  inference(unit_resulting_resolution,[],[f837,f2567,f1114])).
fof(f2550,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))))) | $spl0),
  inference(cnf_transformation,[],[f2550_D])).
fof(f2550_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2552,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) | $spl3),
  inference(cnf_transformation,[],[f2552_D])).
fof(f2552_D,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f2548,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK14),s('type.num.num',sK13))) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK13))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK14)))))))),
  inference(superposition,[],[f1385,f923])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 687
% Passive clauses: 2276
% Generated clauses: 26429
% Final active clauses: 578
% Final passive clauses: 846
% Input formulas: 261
% Initial clauses: 531
% 
% Duplicate literals: 7
% Trivial inequalities: 25
% Fw subsumption resolutions: 565
% Fw demodulations: 4765
% Bw demodulations: 810
% Condensations: 33
% Global subsumptions: 1
% 
% Simple tautologies: 142
% Equational tautologies: 29
% Forward subsumptions: 18308
% Fw demodulations to eq. taut.: 193
% Bw demodulations to eq. taut.: 31
% 
% Unit resulting resolution: 3474
% Factoring: 3
% Forward superposition: 11302
% Backward superposition: 4833
% Self superposition: 60
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 2366
% SAT solver unit clauses: 1133
% SAT solver binary clauses: 842
% 
% Sat splits: 2
% Sat splitting refutations: 83
% 
% Memory used [KB]: 16502
% Time elapsed: 0.507 s
% ------------------------------
% ------------------------------
% Success in time 1.873 s
