Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f7672,plain,(
  $false),
  inference(subsumption_resolution,[],[f7670,f368])).
fof(f368,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))),
  file('thm.rich_list.MEM_FOLDR_MAP','thm.rich_list.MEM_EXISTS')).
fof(f7670,plain,(
  s(bool,'const.bool.IN_2'(s(sK8,sK9),s(fun(sK8,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK8),sK10))))) != s(bool,'const.list.EXISTS_2'(s(fun(sK8,bool),'|dollar|equals_1'(s(sK8,sK9))),s('type.list.list'(sK8),sK10)))),
  inference(superposition,[],[f299,f370])).
fof(f370,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2] : s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.list.EXISTS_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9,X8] : s(bool,'const.list.EXISTS_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),X9),s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.MEM_FOLDR_MAP','thm.rich_list.EXISTS_FOLDR_MAP')).
fof(f299,plain,(
  s(bool,'const.bool.IN_2'(s(sK8,sK9),s(fun(sK8,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK8),sK10))))) != s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(sK8,bool),'|dollar|equals_1'(s(sK8,sK9))),s('type.list.list'(sK8),sK10)))))),
  inference(cnf_transformation,[],[f208])).
fof(f208,plain,(
  s(bool,'const.bool.IN_2'(s(sK8,sK9),s(fun(sK8,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK8),sK10))))) != s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(sK8,bool),'|dollar|equals_1'(s(sK8,sK9))),s('type.list.list'(sK8),sK10)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10])],[f179])).
fof(f179,plain,(
  ? [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) != s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X0,bool),'|dollar|equals_1'(s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8))))) = s(bool,'const.list.FOLDR_3'(s(fun(bool,fun(bool,bool)),'|dollar|or_0'),s(bool,'F_0'),s('type.list.list'(bool),'const.list.MAP_2'(s(fun(X6,bool),'|dollar|equals_1'(s(X6,X7))),s('type.list.list'(X6),X8)))))),
  file('thm.rich_list.MEM_FOLDR_MAP','thm.rich_list.MEM_FOLDR_MAP')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 393
% Passive clauses: 2770
% Generated clauses: 7373
% Final active clauses: 360
% Final passive clauses: 2124
% Input formulas: 69
% Initial clauses: 193
% 
% Duplicate literals: 152
% Trivial inequalities: 14
% Fw subsumption resolutions: 479
% Fw demodulations: 422
% Bw demodulations: 32
% 
% Simple tautologies: 134
% Equational tautologies: 18
% Forward subsumptions: 3363
% 
% Binary resolution: 3082
% Factoring: 732
% Forward superposition: 692
% Backward superposition: 1478
% Self superposition: 20
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 120
% Split components: 240
% SAT solver clauses: 234
% SAT solver unit clauses: 10
% SAT solver binary clauses: 43
% 
% Sat splits: 120
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 234
% TWLsolver calls for satisfiability: 184
% 
% Memory used [KB]: 5245
% Time elapsed: 0.121 s
% ------------------------------
% ------------------------------
% Success in time 0.122 s
