Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (59679)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 161
% Passive clauses: 2596
% Generated clauses: 22763
% Final active clauses: 126
% Final passive clauses: 2193
% Input formulas: 30
% Initial clauses: 62
% 
% Duplicate literals: 699
% Trivial inequalities: 285
% Fw subsumption resolutions: 3276
% Fw demodulations: 3436
% Bw demodulations: 28
% 
% Simple tautologies: 402
% Equational tautologies: 45
% Forward subsumptions: 10562
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 931
% Factoring: 6
% Forward superposition: 7075
% Backward superposition: 6508
% Self superposition: 191
% Equality factoring: 96
% Equality resolution: 29
% 
% Split clauses: 553
% Split components: 1129
% SAT solver clauses: 1308
% SAT solver unit clauses: 22
% SAT solver binary clauses: 226
% 
% Sat splits: 553
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1301
% TWLsolver calls for satisfiability: 235
% 
% Memory used [KB]: 9594
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f4637,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4562,f4509,f362,f369,f4195,f4197,f106,f175,f107,f177,f173,f1183,f1206,f123,f193,f210,f211,f116,f190,f212,f215,f105,f180,f119,f191,f259,f262,f260,f114,f187,f118,f192,f270,f111,f184,f158,f203,f112,f185,f108,f178,f176,f174,f4600,f1064,f1080,f1046,f1047,f161,f206,f275,f419,f420,f109,f182,f279,f289,f165,f207,f969,f983,f953,f954,f263,f115,f188])).
fof(f188,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl18),
  inference(cnf_transformation,[],[f188_D])).
fof(f188_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f115,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) => ! [X11] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num',X10))),s('type.num.num',X10))))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.MOD_EQ_|48|')).
fof(f263,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl58),
  inference(cnf_transformation,[],[f263_D])).
fof(f263_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f954,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl114),
  inference(cnf_transformation,[],[f954_D])).
fof(f954_D,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f953,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl18 | $spl28 | $spl84)),
  inference(subsumption_resolution,[],[f935,f193])).
fof(f935,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl18 | $spl84)),
  inference(superposition,[],[f188,f420])).
fof(f983,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) | $spl116),
  inference(cnf_transformation,[],[f983_D])).
fof(f983_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f969,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) | ($spl32 | $spl114)),
  inference(superposition,[],[f954,f203])).
fof(f207,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl40),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f165,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.bool.IMP_ANTISYM_AX')).
fof(f289,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl62),
  inference(cnf_transformation,[],[f289_D])).
fof(f289_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f279,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl28 | $spl40)),
  inference(resolution,[],[f207,f193])).
fof(f182,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f182_D])).
fof(f182_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f109,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.MULT_EQ_DIV',aHL_TRUTH)).
fof(f420,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | $spl84),
  inference(cnf_transformation,[],[f420_D])).
fof(f420_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f419,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl8 | $spl48 | $spl62)),
  inference(subsumption_resolution,[],[f413,f182])).
fof(f413,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl48 | $spl62)),
  inference(superposition,[],[f289,f215])).
fof(f275,plain,(
  $false | ($spl57 | $spl58)),
  inference(subsumption_resolution,[],[f262,f263])).
fof(f206,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl38),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f161,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X10,X12] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) => s('type.num.num',X12) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num',X10))),s('type.num.num',X10))))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.MULT_DIV')).
fof(f1047,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl126),
  inference(cnf_transformation,[],[f1047_D])).
fof(f1047_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f1046,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl28 | $spl38 | $spl84)),
  inference(subsumption_resolution,[],[f1026,f193])).
fof(f1026,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK2))),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X0)) ) | ($spl38 | $spl84)),
  inference(superposition,[],[f206,f420])).
fof(f1080,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) | $spl128),
  inference(cnf_transformation,[],[f1080_D])).
fof(f1080_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f1064,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num',sK2)))) ) | ($spl32 | $spl126)),
  inference(superposition,[],[f1047,f203])).
fof(f4600,plain,(
  $false | ($spl0 | $spl3 | $spl128)),
  inference(subsumption_resolution,[],[f4561,f176])).
fof(f4561,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | ($spl0 | $spl128)),
  inference(superposition,[],[f1080,f173])).
fof(f174,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f176,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | $spl3),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f178,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | $spl5),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f108,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) & (s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) & (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f77])).
fof(f77,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <~> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) => (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7))) <=> (s('type.num.num',X7) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X8))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7))) <=> (s('type.num.num',X7) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X8))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.MULT_EQ_DIV')).
fof(f185,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f185_D])).
fof(f185_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f112,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.ADD_|48|')).
fof(f203,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl32),
  inference(cnf_transformation,[],[f203_D])).
fof(f203_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f158,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9,X10] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.MULT_SYM')).
fof(f184,plain,(
  ~p(s(bool,'F_0')) | $spl11),
  inference(cnf_transformation,[],[f184_D])).
fof(f184_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f111,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.MULT_EQ_DIV',aHL_FALSITY)).
fof(f270,plain,(
  $false | ($spl11 | $spl54)),
  inference(resolution,[],[f260,f184])).
fof(f192,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) ) | $spl26),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f118,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.bool.EQ_CLAUSES|split|1')).
fof(f187,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f187_D])).
fof(f187_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f114,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.MULT_EQ_DIV',aHL_BOOL_CASES)).
fof(f260,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) | $spl54),
  inference(cnf_transformation,[],[f260_D])).
fof(f260_D,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f262,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl57),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl57),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl57])])).
fof(f259,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X2))) ) | ($spl16 | $spl26)),
  inference(subsumption_resolution,[],[f247,f192])).
fof(f247,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X2)) ) | ($spl16 | $spl26)),
  inference(superposition,[],[f192,f187])).
fof(f191,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f191_D])).
fof(f191_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f119,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f79])).
fof(f180,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl6),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f105,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f78])).
fof(f215,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl48),
  inference(cnf_transformation,[],[f215_D])).
fof(f215_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f212,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl6 | $spl24)),
  inference(resolution,[],[f191,f180])).
fof(f190,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) | $spl22),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f116,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) => ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num',X10))),s('type.num.num',X10))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X10))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X10))),s('type.num.num',X10))))))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.arithmetic.DIVISION')).
fof(f211,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl46),
  inference(cnf_transformation,[],[f211_D])).
fof(f211_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f210,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) ) | ($spl22 | $spl32)),
  inference(forward_demodulation,[],[f190,f203])).
fof(f193,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl28),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f123,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.arithmetic.MULT_EQ_DIV','thm.bool.EQ_CLAUSES|split|3')).
fof(f1206,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | $spl166),
  inference(cnf_transformation,[],[f1206_D])).
fof(f1206_D,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f1183,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) ) | ($spl28 | $spl46)),
  inference(resolution,[],[f211,f193])).
fof(f173,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f177,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | $spl4),
  inference(cnf_transformation,[],[f177_D])).
fof(f177_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f107,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f78])).
fof(f175,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | $spl2),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f106,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f78])).
fof(f4197,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) | $spl580),
  inference(cnf_transformation,[],[f4197_D])).
fof(f4197_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl580),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl580])])).
fof(f4195,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl4 | $spl32 | $spl48 | $spl57 | $spl166)),
  inference(subsumption_resolution,[],[f4194,f262])).
fof(f4194,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl4 | $spl32 | $spl48 | $spl166)),
  inference(forward_demodulation,[],[f4193,f215])).
fof(f4193,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl4 | $spl32 | $spl166)),
  inference(forward_demodulation,[],[f4192,f203])).
fof(f4192,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl4 | $spl166)),
  inference(forward_demodulation,[],[f4120,f177])).
fof(f4120,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK2),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl166)),
  inference(superposition,[],[f1206,f175])).
fof(f369,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | $spl73),
  inference(cnf_transformation,[],[f369_D])).
fof(f369_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f362,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | ($spl1 | $spl32)),
  inference(superposition,[],[f174,f203])).
fof(f4509,plain,(
  $false | ($spl12 | $spl73 | $spl580)),
  inference(subsumption_resolution,[],[f4476,f369])).
fof(f4476,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | ($spl12 | $spl580)),
  inference(superposition,[],[f4197,f185])).
fof(f4562,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK2))) | ($spl0 | $spl116)),
  inference(superposition,[],[f983,f173])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 82
% Passive clauses: 341
% Generated clauses: 4422
% Final active clauses: 70
% Final passive clauses: 232
% Input formulas: 30
% Initial clauses: 62
% 
% Duplicate literals: 261
% Trivial inequalities: 52
% Fw subsumption resolutions: 379
% Fw demodulations: 395
% Bw demodulations: 30
% Condensations: 283
% Global subsumptions: 8
% 
% Simple tautologies: 102
% Equational tautologies: 23
% Forward subsumptions: 1976
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 166
% Factoring: 2
% Forward superposition: 1276
% Backward superposition: 1016
% Self superposition: 75
% Equality factoring: 46
% Equality resolution: 9
% 
% Split clauses: 137
% Split components: 292
% SAT solver clauses: 664
% SAT solver unit clauses: 77
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 18
% SAT solver learnt literals: 1
% 
% Sat splits: 137
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 627
% TWLsolver calls for satisfiability: 245
% 
% Memory used [KB]: 3965
% Time elapsed: 0.165 s
% ------------------------------
% ------------------------------
% Success in time 0.779 s
