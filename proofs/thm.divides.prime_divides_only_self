Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.divides
% (93215)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 798
% Passive clauses: 9780
% Generated clauses: 22189
% Final active clauses: 702
% Final passive clauses: 8474
% Input formulas: 54
% Initial clauses: 209
% 
% Duplicate literals: 370
% Trivial inequalities: 36
% Fw subsumption resolutions: 2368
% Fw demodulations: 803
% Bw demodulations: 94
% 
% Simple tautologies: 266
% Equational tautologies: 67
% Forward subsumptions: 8072
% 
% Binary resolution: 11449
% Factoring: 1398
% Forward superposition: 2343
% Backward superposition: 2801
% Self superposition: 35
% Equality factoring: 30
% Equality resolution: 24
% 
% Split clauses: 452
% Split components: 910
% SAT solver clauses: 850
% SAT solver unit clauses: 27
% SAT solver binary clauses: 166
% 
% Sat splits: 452
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 846
% TWLsolver calls for satisfiability: 470
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.divides
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.divides
% SZS output start Proof for thm.divides
fof(f4120,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4110,f660,f666,f284,f521,f305,f534,f1049,f1057,f295,f531,f304,f535,f4040,f287,f515,f288,f523,f313,f541,f659,f664,f285,f519,f661,f668,f286,f517])).
fof(f517,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) | $spl2),
  inference(cnf_transformation,[],[f517_D])).
fof(f517_D,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f286,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13))))),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13)))) & s('type.num.num',sK12) != s('type.num.num',sK13)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f134])).
fof(f134,plain,(
  ? [X0,X1] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',X1)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ? [X0,X1] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',X1)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) & s('type.num.num',X0) != s('type.num.num',X1))),
  inference(ennf_transformation,[],[f56])).
fof(f56,plain,(
  ~! [X0,X1] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',X1)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) => s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',X7)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7))))) => s('type.num.num',X6) = s('type.num.num',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ((p(s(bool,'const.divides.prime_1'(s('type.num.num',X6)))) & p(s(bool,'const.divides.prime_1'(s('type.num.num',X7)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7))))) => s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.divides.prime_divides_only_self','thm.divides.prime_divides_only_self')).
fof(f668,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | $spl230),
  inference(cnf_transformation,[],[f668_D])).
fof(f668_D,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f661,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK13))) | ($spl2 | $spl16)),
  inference(resolution,[],[f534,f517])).
fof(f519,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) | $spl4),
  inference(cnf_transformation,[],[f519_D])).
fof(f519_D,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f285,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13))))),
  inference(cnf_transformation,[],[f187])).
fof(f664,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK13))) | $spl226),
  inference(cnf_transformation,[],[f664_D])).
fof(f664_D,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK13))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f659,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK13))) | ($spl4 | $spl16)),
  inference(resolution,[],[f534,f519])).
fof(f541,plain,(
  ( ! [X2,X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) ) | $spl30),
  inference(cnf_transformation,[],[f541_D])).
fof(f541_D,plain,(
  ( ! [X2,X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f313,plain,(
  ( ! [X2,X0] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) = s('type.num.num',X2) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14(X0)),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',sK14(X0)) & s('type.num.num',sK14(X0)) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14])],[f196])).
fof(f196,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X2] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X2) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f195])).
fof(f195,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0] : ((~p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) | (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) & s('type.num.num',X0) != s('type.num.num',X1) & s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | p(s(bool,'const.divides.prime_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(flattening,[],[f141])).
fof(f141,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(ennf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X0)))) <=> (~s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) => (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X19] : (p(s(bool,'const.divides.prime_1'(s('type.num.num',X19)))) <=> (~s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & ! [X20] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X20),s('type.num.num',X19)))) => (s('type.num.num',X19) = s('type.num.num',X20) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.divides.prime_divides_only_self','thm.divides.prime_def')).
fof(f523,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f523_D])).
fof(f523_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f288,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.divides.prime_divides_only_self',aHL_TRUTH)).
fof(f515,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13) | $spl1),
  inference(cnf_transformation,[],[f515_D])).
fof(f515_D,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f287,plain,(
  s('type.num.num',sK12) != s('type.num.num',sK13)),
  inference(cnf_transformation,[],[f187])).
fof(f4040,plain,(
  $false | ($spl1 | $spl8 | $spl30 | $spl226 | $spl230 | $spl1205)),
  inference(subsumption_resolution,[],[f4039,f523])).
fof(f4039,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl8 | $spl30 | $spl226 | $spl230 | $spl1205)),
  inference(forward_demodulation,[],[f4038,f664])).
fof(f4038,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) | ($spl1 | $spl8 | $spl30 | $spl230 | $spl1205)),
  inference(subsumption_resolution,[],[f4037,f2963])).
fof(f2963,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1205),
  inference(cnf_transformation,[],[f2963_D])).
fof(f2963_D,plain,(
  s('type.num.num',sK12) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1205),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1205])])).
fof(f4037,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) | ($spl1 | $spl8 | $spl30 | $spl230)),
  inference(subsumption_resolution,[],[f4036,f515])).
fof(f4036,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK13) | s('type.num.num',sK12) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) | ($spl8 | $spl30 | $spl230)),
  inference(subsumption_resolution,[],[f4000,f523])).
fof(f4000,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK12) = s('type.num.num',sK13) | s('type.num.num',sK12) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.divides.prime_1'(s('type.num.num',sK13)))) | ($spl30 | $spl230)),
  inference(superposition,[],[f541,f668])).
fof(f535,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f535_D])).
fof(f535_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f304,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.divides.prime_divides_only_self','thm.bool.EQ_CLAUSES|split|0')).
fof(f531,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl13),
  inference(cnf_transformation,[],[f531_D])).
fof(f531_D,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f295,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(flattening,[],[f40])).
fof(f40,axiom,(
  ~p(s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  file('thm.divides.prime_divides_only_self','thm.divides.NOT_PRIME_|49|')).
fof(f1057,plain,(
  s(bool,'T_0') != s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl391),
  inference(cnf_transformation,[],[f1057_D])).
fof(f1057_D,plain,(
  s(bool,'T_0') != s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl391),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl391])])).
fof(f1049,plain,(
  s(bool,'T_0') != s(bool,'const.divides.prime_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ($spl13 | $spl18)),
  inference(resolution,[],[f531,f535])).
fof(f534,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f534_D])).
fof(f534_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f305,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f190])).
fof(f521,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12)))) | $spl6),
  inference(cnf_transformation,[],[f521_D])).
fof(f521_D,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f284,plain,(
  p(s(bool,'const.divides.prime_1'(s('type.num.num',sK12))))),
  inference(cnf_transformation,[],[f187])).
fof(f666,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK12))) | $spl228),
  inference(cnf_transformation,[],[f666_D])).
fof(f666_D,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK12))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f660,plain,(
  s(bool,'T_0') = s(bool,'const.divides.prime_1'(s('type.num.num',sK12))) | ($spl6 | $spl16)),
  inference(resolution,[],[f534,f521])).
fof(f4110,plain,(
  $false | ($spl228 | $spl391 | $spl1204)),
  inference(subsumption_resolution,[],[f4052,f666])).
fof(f4052,plain,(
  s(bool,'T_0') != s(bool,'const.divides.prime_1'(s('type.num.num',sK12))) | ($spl391 | $spl1204)),
  inference(backward_demodulation,[],[f2964,f1057])).
fof(f2964,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1204),
  inference(cnf_transformation,[],[f2964_D])).
fof(f2964_D,plain,(
  s('type.num.num',sK12) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1204])])).
% SZS output end Proof for thm.divides
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 299
% Passive clauses: 919
% Generated clauses: 4065
% Final active clauses: 228
% Final passive clauses: 433
% Input formulas: 54
% Initial clauses: 209
% 
% Duplicate literals: 82
% Trivial inequalities: 11
% Fw subsumption resolutions: 260
% Fw demodulations: 242
% Bw demodulations: 242
% Condensations: 40
% Global subsumptions: 18
% 
% Simple tautologies: 187
% Equational tautologies: 6
% Forward subsumptions: 1286
% 
% Binary resolution: 1174
% Factoring: 52
% Forward superposition: 396
% Backward superposition: 267
% Self superposition: 7
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 16
% Split components: 32
% SAT solver clauses: 1201
% SAT solver unit clauses: 221
% SAT solver binary clauses: 74
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 11
% 
% Sat splits: 16
% Sat splitting refutations: 17
% 
% TWLsolver clauses: 1124
% TWLsolver calls for satisfiability: 1831
% 
% Memory used [KB]: 3965
% Time elapsed: 0.123 s
% ------------------------------
% ------------------------------
% Success in time 0.785 s
