Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (39790)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1168
% Passive clauses: 6433
% Generated clauses: 37554
% Final active clauses: 1133
% Final passive clauses: 4688
% Input formulas: 261
% Initial clauses: 600
% 
% Duplicate literals: 257
% Trivial inequalities: 58
% Fw subsumption resolutions: 2213
% Fw demodulations: 3634
% Bw demodulations: 32
% 
% Simple tautologies: 283
% Equational tautologies: 34
% Forward subsumptions: 24678
% Fw demodulations to eq. taut.: 14
% 
% Binary resolution: 7549
% Factoring: 1342
% Forward superposition: 13272
% Backward superposition: 8430
% Self superposition: 45
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 258
% Split components: 518
% SAT solver clauses: 496
% SAT solver unit clauses: 29
% SAT solver binary clauses: 90
% 
% Sat splits: 258
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 496
% TWLsolver calls for satisfiability: 436
% 
% Memory used [KB]: 18805
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (39807)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 584
% Passive clauses: 4094
% Generated clauses: 27460
% Final active clauses: 570
% Final passive clauses: 3184
% Input formulas: 261
% Initial clauses: 600
% 
% Duplicate literals: 98
% Trivial inequalities: 26
% Fw subsumption resolutions: 777
% Fw demodulations: 4854
% Bw demodulations: 338
% Condensations: 55
% Global subsumptions: 25
% 
% Simple tautologies: 302
% Equational tautologies: 10
% Forward subsumptions: 12506
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2685
% Factoring: 111
% Forward superposition: 7536
% Backward superposition: 6033
% Self superposition: 71
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 5311
% SAT solver unit clauses: 678
% SAT solver binary clauses: 241
% SAT solver learnt clauses: 50
% SAT solver learnt literals: 14
% 
% Sat splits: 9
% 
% TWLsolver clauses: 5211
% TWLsolver calls for satisfiability: 3646
% 
% Memory used [KB]: 33261
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f50112,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1022,f1650,f1649,f1021,f1652,f1648,f6116,f6119,f6117,f15142,f15165,f15163,f44696,f44700,f44698,f44831,f44928,f44860,f50098])).
fof(f50098,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f50097,f1023])).
fof(f1023,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19',aHL_TRUTH)).
fof(f50097,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f50078,f45652])).
fof(f45652,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f1023,f44851,f1401])).
fof(f1401,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f652])).
fof(f652,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f651])).
fof(f651,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f563])).
fof(f563,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X22,X23] : ((p(s(bool,X22)) => p(s(bool,X23))) => ((p(s(bool,X23)) => p(s(bool,X22))) => s(bool,X22) = s(bool,X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.bool.IMP_ANTISYM_AX')).
fof(f44851,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl0),
  inference(forward_demodulation,[],[f1648,f1040])).
fof(f1040,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f225])).
fof(f225,axiom,(
  ! [X24] : s('type.num.num',X24) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.arithmetic.NUMERAL_DEF')).
fof(f50078,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl2),
  inference(unit_resulting_resolution,[],[f1650,f1909])).
fof(f1909,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK114(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),sK113(X1,X0))))))))))))))) )),
  inference(backward_demodulation,[],[f1364,f1769])).
fof(f1769,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK114(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),sK113(X1,X0))))))))))))))) )),
  inference(forward_demodulation,[],[f1227,f1040])).
fof(f1227,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK114(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),sK113(X1,X0)))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f803])).
fof(f803,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK114(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK115(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK116(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK117(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK118(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK119(X1,X0)),s('type.list.list'(X0),sK113(X1,X0))))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK113,sK114,sK115,sK116,sK117,sK118,sK119])],[f802])).
fof(f802,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X9,X10,X11,X12,X13,X14,X15] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X9)))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f801])).
fof(f801,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))) & (! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))))),
  inference(flattening,[],[f423])).
fof(f423,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9,X10,X11,X12,X13,X14] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X8))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.quantHeuristics.LIST_LENGTH_7|split|18')).
fof(f1364,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f529])).
fof(f529,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X20,X21] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X21))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.arithmetic.GREATER_EQ')).
fof(f44860,plain,(
  $false | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f1652,f1650])).
fof(f44928,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f44927])).
fof(f44927,plain,(
  s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),sK14) | ($spl2 | $spl4)),
  inference(superposition,[],[f1650,f1652])).
fof(f44831,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f44830,f1660])).
fof(f1660,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f1034,f1023])).
fof(f1034,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f697])).
fof(f697,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f176])).
fof(f176,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.bool.NOT_CLAUSES|split|2')).
fof(f44830,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f44774,f2070])).
fof(f2070,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f2002,f1110])).
fof(f1110,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f703])).
fof(f703,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f337])).
fof(f337,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f336])).
fof(f336,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f161])).
fof(f161,axiom,(
  ! [X32] : (s(bool,'F_0') = s(bool,X32) <=> ~p(s(bool,X32)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.bool.EQ_CLAUSES|split|3')).
fof(f2002,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(forward_demodulation,[],[f1649,f1040])).
fof(f44774,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1652,f1910])).
fof(f1910,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))) )),
  inference(backward_demodulation,[],[f1364,f1768])).
fof(f1768,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))) )),
  inference(forward_demodulation,[],[f1228,f1040])).
fof(f1228,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))) )),
  inference(cnf_transformation,[],[f803])).
fof(f44698,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl15),
  inference(cnf_transformation,[],[f44698_D])).
fof(f44698_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f44700,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK26('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK27('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK28('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK29('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))))))))))) | $spl16),
  inference(cnf_transformation,[],[f44700_D])).
fof(f44700_D,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK26('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK27('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK28('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK29('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))))))))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f44696,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK26('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK27('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK28('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK29('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(forward_demodulation,[],[f44681,f1652])).
fof(f44681,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK26('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK27('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK28('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK29('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))))))))))) | $spl4),
  inference(superposition,[],[f1733,f1652])).
fof(f1733,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK29(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) )),
  inference(forward_demodulation,[],[f1191,f1040])).
fof(f1191,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK29(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f753])).
fof(f753,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK26(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK28(X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK29(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26,sK27,sK28,sK29])],[f752])).
fof(f752,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X7,X8,X9,X10,X11] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f751])).
fof(f751,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0')))))))))))) & (! [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(nnf_transformation,[],[f388])).
fof(f388,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))),
  inference(flattening,[],[f387])).
fof(f387,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X2,X3,X4,X5,X6] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.NIL_0'))))))))))))),
  inference(rectify,[],[f130])).
fof(f130,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ? [X9,X10,X11,X12,X13] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.NIL_0'))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.quantHeuristics.LIST_LENGTH_5|split|1')).
fof(f15163,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) | $spl10),
  inference(cnf_transformation,[],[f15163_D])).
fof(f15163_D,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f15165,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | $spl13),
  inference(cnf_transformation,[],[f15165_D])).
fof(f15165_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f15142,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) | $spl4),
  inference(superposition,[],[f1725,f1652])).
fof(f1725,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f1183,f1025])).
fof(f1025,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f221])).
fof(f221,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.arithmetic.ALT_ZERO')).
fof(f1183,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f747])).
fof(f747,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f380])).
fof(f380,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f379])).
fof(f379,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.list.LENGTH_NIL')).
fof(f6117,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl6),
  inference(cnf_transformation,[],[f6117_D])).
fof(f6117_D,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f6119,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl9),
  inference(cnf_transformation,[],[f6119_D])).
fof(f6119_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f6116,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f6097,f1659])).
fof(f1659,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1658,f1031])).
fof(f1031,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f76])).
fof(f76,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.numeral.numeral_suc|split|0')).
fof(f1658,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1032,f1025])).
fof(f1032,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f43])).
fof(f43,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.numeral.numeral_distrib|split|13')).
fof(f6097,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(superposition,[],[f1710,f1686])).
fof(f1686,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1685,f1659])).
fof(f1685,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f1074,f1025])).
fof(f1074,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f304])).
fof(f304,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.numeral.numeral_distrib|split|11')).
fof(f1710,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1113,f1025])).
fof(f1113,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f705])).
fof(f705,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f340])).
fof(f340,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X20))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.numeral.numeral_distrib|split|18')).
fof(f1648,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl0),
  inference(cnf_transformation,[],[f1648_D])).
fof(f1648_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1652,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) | $spl4),
  inference(cnf_transformation,[],[f1652_D])).
fof(f1652_D,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1021,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15))))))))))))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(cnf_transformation,[],[f696])).
fof(f696,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK17),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK18),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK19),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK20),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK21),s('type.list.list'(sK13),sK15)))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X4),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X5),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X6),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X7),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X8),s('type.list.list'(sK13),X2))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f695])).
fof(f695,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X9,X10,X11,X12,X13,X14,X15] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X9)))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))))),
  inference(rectify,[],[f694])).
fof(f694,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ! [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2)))))))))))))))),
  inference(nnf_transformation,[],[f628])).
fof(f628,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <~> ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X2,X3,X4,X5,X6,X7,X8] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X2))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X8))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ? [X8,X9,X10,X11,X12,X13,X14] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X8))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|19','thm.quantHeuristics.LIST_LENGTH_7|split|19')).
fof(f1649,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | $spl1),
  inference(cnf_transformation,[],[f1649_D])).
fof(f1649_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1650,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X4),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X5),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X6),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X7),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X8),s('type.list.list'(sK13),X2)))))))))))))) ) | $spl2),
  inference(cnf_transformation,[],[f1650_D])).
fof(f1650_D,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X4),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X5),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X6),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X7),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X8),s('type.list.list'(sK13),X2)))))))))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1022,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X4),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X5),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X6),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X7),s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X8),s('type.list.list'(sK13),X2))))))))))))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(cnf_transformation,[],[f696])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 884
% Passive clauses: 8273
% Generated clauses: 49085
% Final active clauses: 779
% Final passive clauses: 6866
% Input formulas: 261
% Initial clauses: 600
% 
% Duplicate literals: 9
% Trivial inequalities: 24
% Fw subsumption resolutions: 491
% Fw demodulations: 17140
% Bw demodulations: 207
% Condensations: 31
% Global subsumptions: 2
% 
% Simple tautologies: 158
% Equational tautologies: 38
% Forward subsumptions: 22758
% Fw demodulations to eq. taut.: 152
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 8886
% Factoring: 2
% Forward superposition: 15204
% Backward superposition: 6363
% Self superposition: 92
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 8291
% SAT solver unit clauses: 1479
% SAT solver binary clauses: 5587
% 
% Sat splits: 5
% Sat splitting refutations: 4
% 
% Memory used [KB]: 66011
% Time elapsed: 2.506 s
% ------------------------------
% ------------------------------
% Success in time 3.85 s
