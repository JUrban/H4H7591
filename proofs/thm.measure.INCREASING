Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% (56790)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 615
% Passive clauses: 9476
% Generated clauses: 17187
% Final active clauses: 614
% Final passive clauses: 8514
% Input formulas: 45
% Initial clauses: 204
% 
% Duplicate literals: 315
% Trivial inequalities: 39
% Fw subsumption resolutions: 1145
% Fw demodulations: 16
% Bw demodulations: 1
% 
% Simple tautologies: 224
% Equational tautologies: 57
% Forward subsumptions: 5700
% 
% Binary resolution: 11839
% Factoring: 1470
% Forward superposition: 864
% Backward superposition: 1221
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 18
% 
% Split clauses: 304
% Split components: 609
% SAT solver clauses: 571
% SAT solver unit clauses: 17
% SAT solver binary clauses: 149
% 
% Sat splits: 304
% 
% TWLsolver clauses: 571
% TWLsolver calls for satisfiability: 356
% 
% Memory used [KB]: 8955
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f8329,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8296,f269,f488,f489,f491,f312,f508,f616,f621,f264,f486,f286,f496,f617,f623,f265,f484,f618,f625,f267,f480,f619,f627,f266,f482,f1886,f1909,f268,f478,f290,f498])).
fof(f498,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f498_D])).
fof(f498_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f290,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X9] : (s(bool,'F_0') = s(bool,X9) <=> ~p(s(bool,X9)))),
  file('thm.measure.INCREASING','thm.bool.EQ_CLAUSES|split|2')).
fof(f478,plain,(
  ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15)))))) | $spl1),
  inference(cnf_transformation,[],[f478_D])).
fof(f478_D,plain,(
  ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f268,plain,(
  ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15))))))),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15)))) & p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) & p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f119])).
fof(f119,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(ennf_transformation,[],[f48])).
fof(f48,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ~! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9)))))))),
  file('thm.measure.INCREASING','thm.measure.INCREASING')).
fof(f1909,plain,(
  s(bool,'F_0') = s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15))))) | $spl668),
  inference(cnf_transformation,[],[f1909_D])).
fof(f1909_D,plain,(
  s(bool,'F_0') = s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15))))) <=> ~$spl668),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl668])])).
fof(f1886,plain,(
  s(bool,'F_0') = s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK14))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13),s(fun(sK12,bool),sK15))))) | ($spl1 | $spl20)),
  inference(resolution,[],[f478,f498])).
fof(f482,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | $spl4),
  inference(cnf_transformation,[],[f482_D])).
fof(f482_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f266,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))),
  inference(cnf_transformation,[],[f163])).
fof(f627,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) | $spl228),
  inference(cnf_transformation,[],[f627_D])).
fof(f627_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f619,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) | ($spl4 | $spl16)),
  inference(resolution,[],[f496,f482])).
fof(f480,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | $spl2),
  inference(cnf_transformation,[],[f480_D])).
fof(f480_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f267,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))),
  inference(cnf_transformation,[],[f163])).
fof(f625,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) | $spl226),
  inference(cnf_transformation,[],[f625_D])).
fof(f625_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f618,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))) | ($spl2 | $spl16)),
  inference(resolution,[],[f496,f480])).
fof(f484,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15)))) | $spl6),
  inference(cnf_transformation,[],[f484_D])).
fof(f484_D,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f265,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15))))),
  inference(cnf_transformation,[],[f163])).
fof(f623,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15))) | $spl224),
  inference(cnf_transformation,[],[f623_D])).
fof(f623_D,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15))) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f617,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15))) | ($spl6 | $spl16)),
  inference(resolution,[],[f496,f484])).
fof(f496,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f496_D])).
fof(f496_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f286,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.measure.INCREASING','thm.bool.EQ_CLAUSES|split|1')).
fof(f486,plain,(
  p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | $spl8),
  inference(cnf_transformation,[],[f486_D])).
fof(f486_D,plain,(
  p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f264,plain,(
  p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))),
  inference(cnf_transformation,[],[f163])).
fof(f621,plain,(
  s(bool,'T_0') = s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) | $spl222),
  inference(cnf_transformation,[],[f621_D])).
fof(f621_D,plain,(
  s(bool,'T_0') = s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f616,plain,(
  s(bool,'T_0') = s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) | ($spl8 | $spl16)),
  inference(resolution,[],[f496,f486])).
fof(f508,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) | $spl32),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f312,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) )),
  inference(cnf_transformation,[],[f184])).
fof(f184,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X4,X5] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5)))))))) & ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK16(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK17(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),sK16(X1,X0)),s(fun(X0,bool),sK17(X1,X0))))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),sK16(X1,X0)))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),sK17(X1,X0)))))))) | p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f183])).
fof(f183,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X4,X5] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5)))))))) & (? [X2,X3] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))) | p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(rectify,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))) & (? [X2,X3] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & ~p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))) | p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(nnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) | p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))))),
  inference(ennf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) <=> ! [X8,X9] : ((p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9))))) => p(s(bool,'const.real.real_lte_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))))),
  file('thm.measure.INCREASING','thm.measure.increasing_def')).
fof(f491,plain,(
  ~p(s(bool,'F_0')) | $spl13),
  inference(cnf_transformation,[],[f491_D])).
fof(f491_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f489,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f272,f269])).
fof(f272,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f19])).
fof(f19,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.measure.INCREASING','thm.bool.NOT_CLAUSES|split|2')).
fof(f488,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f488_D])).
fof(f488_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f269,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.measure.INCREASING','thm.bool.TRUTH')).
fof(f8296,plain,(
  $false | ($spl10 | $spl13 | $spl32 | $spl222 | $spl224 | $spl226 | $spl228 | $spl668)),
  inference(subsumption_resolution,[],[f8295,f488])).
fof(f8295,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl13 | $spl32 | $spl222 | $spl224 | $spl226 | $spl228 | $spl668)),
  inference(forward_demodulation,[],[f8294,f621])).
fof(f8294,plain,(
  ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl10 | $spl13 | $spl32 | $spl224 | $spl226 | $spl228 | $spl668)),
  inference(subsumption_resolution,[],[f8293,f488])).
fof(f8293,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl10 | $spl13 | $spl32 | $spl224 | $spl226 | $spl228 | $spl668)),
  inference(forward_demodulation,[],[f8292,f627])).
fof(f8292,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl10 | $spl13 | $spl32 | $spl224 | $spl226 | $spl668)),
  inference(subsumption_resolution,[],[f8291,f488])).
fof(f8291,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl10 | $spl13 | $spl32 | $spl224 | $spl226 | $spl668)),
  inference(forward_demodulation,[],[f8290,f625])).
fof(f8290,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl10 | $spl13 | $spl32 | $spl224 | $spl668)),
  inference(subsumption_resolution,[],[f8289,f488])).
fof(f8289,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl13 | $spl32 | $spl224 | $spl668)),
  inference(forward_demodulation,[],[f8288,f623])).
fof(f8288,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl13 | $spl32 | $spl668)),
  inference(subsumption_resolution,[],[f8201,f491])).
fof(f8201,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),sK14),s(fun(sK12,bool),sK15)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK15),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK12,bool),sK14),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))) | ~p(s(bool,'const.measure.increasing_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl32 | $spl668)),
  inference(superposition,[],[f508,f1909])).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 365
% Passive clauses: 1943
% Generated clauses: 8380
% Final active clauses: 335
% Final passive clauses: 1176
% Input formulas: 45
% Initial clauses: 204
% 
% Duplicate literals: 115
% Trivial inequalities: 24
% Fw subsumption resolutions: 755
% Fw demodulations: 417
% Bw demodulations: 424
% Condensations: 106
% Global subsumptions: 13
% 
% Simple tautologies: 224
% Equational tautologies: 6
% Forward subsumptions: 2802
% Bw demodulations to eq. taut.: 7
% 
% Binary resolution: 2643
% Factoring: 77
% Forward superposition: 822
% Backward superposition: 686
% Self superposition: 10
% Equality factoring: 6
% Equality resolution: 10
% 
% Split clauses: 39
% Split components: 79
% SAT solver clauses: 2129
% SAT solver unit clauses: 193
% SAT solver binary clauses: 65
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 39
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2076
% TWLsolver calls for satisfiability: 1782
% 
% Memory used [KB]: 8571
% Time elapsed: 0.361 s
% ------------------------------
% ------------------------------
% Success in time 0.977 s
