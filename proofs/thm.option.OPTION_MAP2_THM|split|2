Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f9350,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9343,f99,f103,f68,f105,f7324,f837,f2684,f6926,f6768,f8147,f8141,f9113])).
fof(f9113,plain,(
  $false | $spl160),
  inference(trivial_inequality_removal,[],[f9098])).
fof(f9098,plain,(
  s('type.option.option'(sK2),'const.option.NONE_0') != s('type.option.option'(sK2),'const.option.NONE_0') | $spl160),
  inference(superposition,[],[f65,f8270])).
fof(f8270,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X4,fun(X3,X2)),X1),s('type.option.option'(X4),'const.option.NONE_0'),s('type.option.option'(X3),X0)))) ) | $spl160),
  inference(forward_demodulation,[],[f8192,f91])).
fof(f91,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X8] : ! [X13,X14] : s(X8,X14) = s(X8,'const.bool.COND_3'(s(bool,'F_0'),s(X8,X13),s(X8,X14)))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.bool.COND_CLAUSES|split|1')).
fof(f8192,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X4,fun(X3,X2)),X1),s('type.option.option'(X4),'const.option.NONE_0'),s('type.option.option'(X3),X0))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,'F_0'),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X3,X2),happ(s(fun(X4,fun(X3,X2)),X1),s(X4,'const.option.THE_1'(s('type.option.option'(X4),'const.option.NONE_0'))))),s(X3,'const.option.THE_1'(s('type.option.option'(X3),X0))))))),s('type.option.option'(X2),'const.option.NONE_0')))) ) | $spl160),
  inference(superposition,[],[f98,f8141])).
fof(f98,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,sK6(X5,X4,X3,X2,X1,X0)),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,sK6(X5,X4,X3,X2,X1,X0))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))))) & (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))) | p(s(bool,sK6(X5,X4,X3,X2,X1,X0)))) & s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,sK6(X5,X4,X3,X2,X1,X0)),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ? [X6] : ((~p(s(bool,X6)) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))))) & (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))) | p(s(bool,X6))) & s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,X6),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0'))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ? [X6] : (((~p(s(bool,X6)) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))))) & ((~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) | ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5))))) | p(s(bool,X6)))) & s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,X6),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0'))))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ? [X6] : ((p(s(bool,X6)) <=> (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))))) & s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,X6),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0'))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : ? [X6] : ((p(s(bool,X6)) <=> (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5)))))) & s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X3),s('type.option.option'(X0),X4),s('type.option.option'(X1),X5))) = s('type.option.option'(X2),'const.bool.COND_3'(s(bool,X6),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,happ(s(fun(X1,X2),happ(s(fun(X0,fun(X1,X2)),X3),s(X0,'const.option.THE_1'(s('type.option.option'(X0),X4))))),s(X1,'const.option.THE_1'(s('type.option.option'(X1),X5))))))),s('type.option.option'(X2),'const.option.NONE_0'))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X7,X8] : ! [X10,X12,X9] : ? [X15] : ((p(s(bool,X15)) <=> (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X12)))) & p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X9)))))) & s('type.option.option'(X8),'const.option.OPTION_MAP2_3'(s(fun(X6,fun(X7,X8)),X10),s('type.option.option'(X6),X12),s('type.option.option'(X7),X9))) = s('type.option.option'(X8),'const.bool.COND_3'(s(bool,X15),s('type.option.option'(X8),'const.option.SOME_1'(s(X8,happ(s(fun(X7,X8),happ(s(fun(X6,fun(X7,X8)),X10),s(X6,'const.option.THE_1'(s('type.option.option'(X6),X12))))),s(X7,'const.option.THE_1'(s('type.option.option'(X7),X9))))))),s('type.option.option'(X8),'const.option.NONE_0'))))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.option.OPTION_MAP2_DEF')).
fof(f65,plain,(
  s('type.option.option'(sK2),'const.option.NONE_0') != s('type.option.option'(sK2),'const.option.OPTION_MAP2_3'(s(fun(sK0,fun(sK1,sK2)),sK4),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK3)))))),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  s('type.option.option'(sK2),'const.option.NONE_0') != s('type.option.option'(sK2),'const.option.OPTION_MAP2_3'(s(fun(sK0,fun(sK1,sK2)),sK4),s('type.option.option'(sK0),'const.option.NONE_0'),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.option.option'(X2),'const.option.NONE_0') != s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : ! [X3,X4] : s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.NONE_0'),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10] : s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),'const.option.OPTION_MAP2_3'(s(fun(X6,fun(X7,X8)),X10),s('type.option.option'(X6),'const.option.NONE_0'),s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10] : s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),'const.option.OPTION_MAP2_3'(s(fun(X6,fun(X7,X8)),X10),s('type.option.option'(X6),'const.option.NONE_0'),s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9)))))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.option.OPTION_MAP2_THM|split|2')).
fof(f8141,plain,(
  ( ! [X4,X2,X0,X5,X3] : (s(bool,'F_0') = s(bool,sK6(X2,'const.option.NONE_0',X3,X4,X5,X0))) ) | $spl160),
  inference(cnf_transformation,[],[f8141_D])).
fof(f8141_D,plain,(
  ( ! [X4,X2,X0,X5,X3] : (s(bool,'F_0') = s(bool,sK6(X2,'const.option.NONE_0',X3,X4,X5,X0))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f8147,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(bool,'F_0') = s(bool,sK6(X27,'const.option.NONE_0',X28,X29,X30,X26))) ) | ($spl5 | $spl78)),
  inference(subsumption_resolution,[],[f8117,f105])).
fof(f8117,plain,(
  ( ! [X30,X28,X26,X29,X27] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,sK6(X27,'const.option.NONE_0',X28,X29,X30,X26))) ) | $spl78),
  inference(superposition,[],[f7343,f69])).
fof(f69,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X8] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X8),'const.option.NONE_0')))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.option.IS_SOME_DEF|split|1')).
fof(f7343,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X15),X11)))) | s(bool,'F_0') = s(bool,sK6(X10,X11,X12,X13,X14,X15))) ) | $spl78),
  inference(resolution,[],[f2684,f95])).
fof(f95,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,sK6(X5,X4,X3,X2,X1,X0))) | p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X4))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f6768,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) ) | $spl122),
  inference(cnf_transformation,[],[f6768_D])).
fof(f6768_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f6926,plain,(
  ( ! [X170] : (s(bool,X170) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X170))))) | s(bool,'F_0') = s(bool,X170)) ) | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f6578,f103])).
fof(f6578,plain,(
  ( ! [X170] : (~p(s(bool,'T_0')) | s(bool,X170) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X170))))) | s(bool,'F_0') = s(bool,X170)) ) | $spl5),
  inference(superposition,[],[f105,f295])).
fof(f295,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))))) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f87,f107])).
fof(f107,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f70,f70])).
fof(f70,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.OPTION_MAP2_THM|split|2',aHL_BOOL_CASES)).
fof(f87,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X8] : ! [X12] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X12)))))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.option.IS_SOME_DEF|split|0')).
fof(f2684,plain,(
  ( ! [X195] : (p(s(bool,X195)) | s(bool,'F_0') = s(bool,X195)) ) | $spl78),
  inference(cnf_transformation,[],[f2684_D])).
fof(f2684_D,plain,(
  ( ! [X195] : (p(s(bool,X195)) | s(bool,'F_0') = s(bool,X195)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f837,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,X19)) ) | $spl18),
  inference(cnf_transformation,[],[f837_D])).
fof(f837_D,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,X19)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7324,plain,(
  ( ! [X39,X38] : (s(bool,'T_0') = s(bool,X39) | p(s(bool,X38)) | s(bool,'F_0') = s(bool,X38)) ) | ($spl2 | $spl122)),
  inference(duplicate_literal_removal,[],[f7323])).
fof(f7323,plain,(
  ( ! [X39,X38] : (s(bool,'T_0') = s(bool,X39) | p(s(bool,X38)) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X38)) ) | ($spl2 | $spl122)),
  inference(forward_demodulation,[],[f7264,f87])).
fof(f7264,plain,(
  ( ! [X39,X38] : (p(s(bool,X38)) | s(bool,X39) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))))) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X38)) ) | ($spl2 | $spl122)),
  inference(superposition,[],[f289,f6768])).
fof(f289,plain,(
  ( ! [X6,X7] : (p(s(bool,X6)) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl2),
  inference(superposition,[],[f103,f107])).
fof(f105,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f68,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.option.OPTION_MAP2_THM|split|2',aHL_FALSITY)).
fof(f103,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f103_D])).
fof(f103_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f99,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f88])).
fof(f88,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X8] : ! [X12] : (s(X8,X12) = s(X8,X12) <=> p(s(bool,'T_0')))),
  file('thm.option.OPTION_MAP2_THM|split|2','thm.bool.REFL_CLAUSE')).
fof(f9343,plain,(
  $false | ($spl2 | $spl5 | $spl18)),
  inference(subsumption_resolution,[],[f9126,f103])).
fof(f9126,plain,(
  ~p(s(bool,'T_0')) | ($spl5 | $spl18)),
  inference(backward_demodulation,[],[f837,f105])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 74
% Passive clauses: 1383
% Generated clauses: 9070
% Final active clauses: 35
% Final passive clauses: 949
% Input formulas: 19
% Initial clauses: 34
% 
% Duplicate literals: 516
% Trivial inequalities: 179
% Fw subsumption resolutions: 841
% Fw demodulations: 1132
% Bw demodulations: 25
% 
% Simple tautologies: 141
% Equational tautologies: 32
% Forward subsumptions: 4414
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 20
% Forward superposition: 2704
% Backward superposition: 3274
% Self superposition: 193
% Equality factoring: 84
% Equality resolution: 13
% 
% Split clauses: 255
% Split components: 510
% SAT solver clauses: 480
% SAT solver unit clauses: 20
% SAT solver binary clauses: 130
% SAT solver learnt clauses: 1
% 
% Sat splits: 255
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 474
% TWLsolver calls for satisfiability: 43
% 
% Memory used [KB]: 5756
% Time elapsed: 0.235 s
% ------------------------------
% ------------------------------
% Success in time 0.237 s
