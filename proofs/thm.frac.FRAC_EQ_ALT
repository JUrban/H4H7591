Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.frac
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.frac
% SZS output start Proof for thm.frac
fof(f199,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f198,f190,f52,f88,f53,f90,f86,f54,f91,f89,f87,f196])).
fof(f196,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f195])).
fof(f195,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f91,f86])).
fof(f87,plain,(
  s('type.frac.frac',sK0) != s('type.frac.frac',sK1) | $spl1),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  s('type.frac.frac',sK0) != s('type.frac.frac',sK1) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f89,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | $spl3),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f91,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) | $spl5),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f54,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | s('type.frac.frac',sK0) != s('type.frac.frac',sK1)),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  (s('type.frac.frac',sK0) = s('type.frac.frac',sK1) | (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))))) & (s('type.frac.frac',sK0) != s('type.frac.frac',sK1) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f37])).
fof(f37,plain,(
  ? [X0,X1] : ((s('type.frac.frac',X0) = s('type.frac.frac',X1) | (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) & (s('type.frac.frac',X0) != s('type.frac.frac',X1) | s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) | s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1)))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ? [X0,X1] : ((s('type.frac.frac',X0) = s('type.frac.frac',X1) | (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))) & (s('type.frac.frac',X0) != s('type.frac.frac',X1) | (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) | s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) != s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1))))))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ? [X0,X1] : (s('type.frac.frac',X0) = s('type.frac.frac',X1) <~> (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1)))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ~! [X0,X1] : (s('type.frac.frac',X0) = s('type.frac.frac',X1) <=> (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X1))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (s('type.frac.frac',X6) = s('type.frac.frac',X7) <=> (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X6))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X7))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X6))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (s('type.frac.frac',X6) = s('type.frac.frac',X7) <=> (s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X6))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X7))) & s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X6))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X7)))))),
  file('thm.frac.FRAC_EQ_ALT','thm.frac.FRAC_EQ_ALT')).
fof(f86,plain,(
  s('type.frac.frac',sK0) = s('type.frac.frac',sK1) | $spl0),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  s('type.frac.frac',sK0) = s('type.frac.frac',sK1) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f90,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) | $spl4),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f53,plain,(
  s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))) | s('type.frac.frac',sK0) = s('type.frac.frac',sK1)),
  inference(cnf_transformation,[],[f38])).
fof(f88,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | $spl2),
  inference(cnf_transformation,[],[f88_D])).
fof(f88_D,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f52,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) = s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK1))) | s('type.frac.frac',sK0) = s('type.frac.frac',sK1)),
  inference(cnf_transformation,[],[f38])).
fof(f190,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f189,f87])).
fof(f189,plain,(
  s('type.frac.frac',sK0) = s('type.frac.frac',sK1) | ($spl2 | $spl4)),
  inference(forward_demodulation,[],[f188,f58])).
fof(f58,plain,(
  ( ! [X0] : (s('type.frac.frac',X0) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0)))))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : s('type.frac.frac',X0) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X0)))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X14] : s('type.frac.frac',X14) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',X14))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',X14)))))))),
  file('thm.frac.FRAC_EQ_ALT','thm.frac.FRAC')).
fof(f188,plain,(
  s('type.frac.frac',sK1) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK0))))))) | ($spl2 | $spl4)),
  inference(forward_demodulation,[],[f185,f90])).
fof(f185,plain,(
  s('type.frac.frac',sK1) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))),s('type.integer.int','const.frac.frac_dnm_1'(s('type.frac.frac',sK1))))))) | $spl2),
  inference(superposition,[],[f58,f88])).
fof(f198,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f197])).
fof(f197,plain,(
  s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) != s('type.integer.int','const.frac.frac_nmr_1'(s('type.frac.frac',sK0))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f89,f86])).
% SZS output end Proof for thm.frac
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 19
% Passive clauses: 44
% Generated clauses: 144
% Final active clauses: 12
% Final passive clauses: 11
% Input formulas: 15
% Initial clauses: 32
% 
% Duplicate literals: 5
% Trivial inequalities: 4
% Fw subsumption resolutions: 8
% Fw demodulations: 6
% Bw demodulations: 1
% 
% Simple tautologies: 17
% Equational tautologies: 5
% Forward subsumptions: 36
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 22
% Factoring: 1
% Forward superposition: 23
% Backward superposition: 17
% Self superposition: 7
% Equality factoring: 2
% 
% Split clauses: 10
% Split components: 21
% SAT solver clauses: 29
% SAT solver unit clauses: 5
% SAT solver binary clauses: 15
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 10
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 27
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 639
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.016 s
