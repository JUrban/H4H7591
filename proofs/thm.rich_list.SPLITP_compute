Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% (46623)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 99
% Passive clauses: 3103
% Generated clauses: 19876
% Final active clauses: 88
% Final passive clauses: 2881
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 1110
% Trivial inequalities: 284
% Fw subsumption resolutions: 2761
% Fw demodulations: 1699
% Bw demodulations: 7
% 
% Simple tautologies: 376
% Equational tautologies: 91
% Forward subsumptions: 8058
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 28
% Forward superposition: 8624
% Backward superposition: 4622
% Self superposition: 318
% Equality factoring: 234
% Equality resolution: 21
% 
% Split clauses: 957
% Split components: 1933
% SAT solver clauses: 2358
% SAT solver unit clauses: 273
% SAT solver binary clauses: 603
% 
% Sat splits: 957
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2352
% TWLsolver calls for satisfiability: 113
% 
% Memory used [KB]: 8187
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (46806)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 50
% Passive clauses: 174
% Generated clauses: 7136
% Final active clauses: 47
% Final passive clauses: 117
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 1158
% Trivial inequalities: 53
% Fw subsumption resolutions: 173
% Fw demodulations: 106
% Bw demodulations: 4
% Condensations: 1933
% 
% Simple tautologies: 78
% Equational tautologies: 53
% Forward subsumptions: 2865
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 14
% Forward superposition: 1536
% Backward superposition: 1717
% Self superposition: 244
% Equality factoring: 181
% Equality resolution: 6
% 
% Split clauses: 83
% Split components: 166
% SAT solver clauses: 622
% SAT solver unit clauses: 16
% SAT solver binary clauses: 81
% 
% Sat splits: 83
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 622
% TWLsolver calls for satisfiability: 66
% 
% Memory used [KB]: 5373
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f5715,plain,(
  $false),
  inference(subsumption_resolution,[],[f5714,f38])).
fof(f38,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,bool),X1),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X12,X13] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.rich_list.SPLITP_2'(s(fun(X6,bool),X12),s('type.list.list'(X6),X13))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X6),'const.list.NIL_0'),s(fun(X6,bool),X12),s('type.list.list'(X6),X13)))),
  file('thm.rich_list.SPLITP_compute','thm.rich_list.rich_list_368_prove_ltb')).
fof(f5714,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),'const.rich_list.SPLITP_2'(s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),
  inference(forward_demodulation,[],[f5713,f39])).
fof(f39,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_0'),s(fun(X0,bool),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_0'),s(fun(X0,bool),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0] : ! [X1,X2] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_0'),s(fun(X0,bool),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X14,X15] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.rich_list.SPLITP_2'(s(fun(X6,bool),X14),s('type.list.list'(X6),X15))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),happ(s(fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),happ(s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_0'),s(fun(X6,bool),X14))),s('type.list.list'(X6),X15)))),
  file('thm.rich_list.SPLITP_compute','ARITY_0_2_const.rich_list.SPLITP')).
fof(f5713,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),
  inference(forward_demodulation,[],[f5710,f42])).
fof(f42,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),X1),s(fun(X0,bool),X2),s('type.list.list'(X0),X3))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X0),X1))),s(fun(X0,bool),X2))),s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),X1),s(fun(X0,bool),X2),s('type.list.list'(X0),X3))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X0),X1))),s(fun(X0,bool),X2))),s('type.list.list'(X0),X3)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X0),X1),s(fun(X0,bool),X2),s('type.list.list'(X0),X3))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),happ(s(fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),happ(s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X0),X1))),s(fun(X0,bool),X2))),s('type.list.list'(X0),X3)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X14,X15,X16] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.rich_list.SPLITP_AUX_3'(s('type.list.list'(X6),X14),s(fun(X6,bool),X15),s('type.list.list'(X6),X16))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),happ(s(fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),happ(s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X6),X14))),s(fun(X6,bool),X15))),s('type.list.list'(X6),X16)))),
  file('thm.rich_list.SPLITP_compute','ARITY_1_3_const.rich_list.SPLITP_AUX')).
fof(f5710,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)),happ(s(fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),s('type.list.list'(sK0),sK2(happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))),'type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))),
  inference(unit_resulting_resolution,[],[f1437,f45])).
fof(f45,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK2(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK2(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(rectify,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(nnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ! [X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X6] : ! [X10,X11] : (s(fun(X6,X9),X10) = s(fun(X6,X9),X11) <=> ! [X7] : s(X9,happ(s(fun(X6,X9),X10),s(X6,X7))) = s(X9,happ(s(fun(X6,X9),X11),s(X6,X7))))),
  file('thm.rich_list.SPLITP_compute','thm.bool.FUN_EQ_THM')).
fof(f1437,plain,(
  s(fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0'),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))))))) != s(fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0))),happ(s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0'))),s(fun(sK0,bool),sK2('const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')),'const.rich_list.SPLITP_0',fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))))))),
  inference(unit_resulting_resolution,[],[f34,f45])).
fof(f34,plain,(
  s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0') != s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_0') != s(fun(fun(sK0,bool),fun('type.list.list'(sK0),'type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f26])).
fof(f26,plain,(
  ? [X0] : s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_0') != s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ~! [X0] : s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_0') = s(fun(fun(X0,bool),fun('type.list.list'(X0),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_0') = s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_0') = s(fun(fun(X6,bool),fun('type.list.list'(X6),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)))),'const.rich_list.SPLITP_AUX_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.rich_list.SPLITP_compute','thm.rich_list.SPLITP_compute')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 50
% Passive clauses: 424
% Generated clauses: 5929
% Final active clauses: 30
% Final passive clauses: 153
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 837
% Trivial inequalities: 78
% Fw subsumption resolutions: 256
% Fw demodulations: 72
% Bw demodulations: 170
% Condensations: 1441
% Global subsumptions: 6
% 
% Simple tautologies: 113
% Equational tautologies: 313
% Forward subsumptions: 2379
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 547
% Forward superposition: 1204
% Backward superposition: 639
% Self superposition: 160
% Equality factoring: 150
% Equality resolution: 7
% 
% Split clauses: 62
% Split components: 125
% SAT solver clauses: 565
% SAT solver unit clauses: 24
% SAT solver binary clauses: 81
% 
% Sat splits: 62
% Sat splitting refutations: 9
% 
% Memory used [KB]: 2686
% Time elapsed: 0.540 s
% ------------------------------
% ------------------------------
% Success in time 1.854 s
