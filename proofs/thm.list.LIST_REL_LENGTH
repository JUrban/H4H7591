Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1373,plain,(
  $false),
  inference(subsumption_resolution,[],[f1356,f160])).
fof(f160,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),sK4)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f88])).
fof(f88,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X8),s('type.list.list'(X6),X9),s('type.list.list'(X7),X10)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X8),s('type.list.list'(X6),X9),s('type.list.list'(X7),X10)))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))))),
  file('thm.list.LIST_REL_LENGTH','thm.list.LIST_REL_LENGTH')).
fof(f1356,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))),
  inference(resolution,[],[f233,f159])).
fof(f159,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK2),s('type.list.list'(sK0),sK3),s('type.list.list'(sK1),sK4))))),
  inference(cnf_transformation,[],[f111])).
fof(f233,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4)))) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK12(X4,X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',sK12(X4,X3,X2,X1,X0)),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',sK12(X4,X3,X2,X1,X0)),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X6),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(rectify,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) | (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4))))))))) & ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) | ? [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) & ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4))))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) | p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(ennf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X2),s('type.list.list'(X0),X3),s('type.list.list'(X1),X4)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X4))) & ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) => p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),X2),s(X0,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X0),X3))))),s(X1,'const.list.EL_2'(s('type.num.num',X5),s('type.list.list'(X1),X4)))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X8,X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X8),s('type.list.list'(X6),X11),s('type.list.list'(X7),X12)))) <=> (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X12))) & ! [X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X11)))))) => p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),X8),s(X6,'const.list.EL_2'(s('type.num.num',X13),s('type.list.list'(X6),X11))))),s(X7,'const.list.EL_2'(s('type.num.num',X13),s('type.list.list'(X7),X12)))))))))),
  file('thm.list.LIST_REL_LENGTH','thm.list.LIST_REL_EL_EQN')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 35
% Passive clauses: 234
% Generated clauses: 1164
% Final active clauses: 34
% Final passive clauses: 176
% Input formulas: 37
% Initial clauses: 108
% 
% Duplicate literals: 104
% Trivial inequalities: 34
% Fw subsumption resolutions: 140
% Fw demodulations: 23
% Bw demodulations: 1
% 
% Simple tautologies: 117
% Equational tautologies: 33
% Forward subsumptions: 432
% 
% Binary resolution: 65
% Factoring: 1
% Forward superposition: 206
% Backward superposition: 367
% Self superposition: 46
% Equality factoring: 52
% Equality resolution: 8
% 
% Split clauses: 37
% Split components: 76
% SAT solver clauses: 53
% SAT solver unit clauses: 8
% SAT solver binary clauses: 33
% 
% Sat splits: 37
% 
% TWLsolver clauses: 53
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 1151
% Time elapsed: 0.031 s
% ------------------------------
% ------------------------------
% Success in time 0.033 s
