Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f1703,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1700])).
fof(f1700,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0)))))),
  inference(superposition,[],[f58,f913])).
fof(f913,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f912,f62])).
fof(f62,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0))) = s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0))) = s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X6))) = s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num',X6)))),
  file('thm.rich_list.COUNT_LIST_SNOC|split|1','thm.rich_list.COUNT_LIST_GENLIST')).
fof(f912,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0))))) = s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f895,f62])).
fof(f895,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.GENLIST_2'(s(fun('type.num.num','type.num.num'),'const.combin.I_0'),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f86,f142])).
fof(f142,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(forward_demodulation,[],[f81,f79])).
fof(f79,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,'const.combin.I_1'(s(X0,X1)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : ! [X9] : s(X7,X9) = s(X7,'const.combin.I_1'(s(X7,X9)))),
  file('thm.rich_list.COUNT_LIST_SNOC|split|1','thm.combin.I_THM')).
fof(f81,plain,(
  ( ! [X0,X1] : (s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1] : s(X0,'const.combin.I_1'(s(X0,X1))) = s(X0,happ(s(fun(X0,X0),'const.combin.I_0'),s(X0,X1)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7] : ! [X11] : s(X7,'const.combin.I_1'(s(X7,X11))) = s(X7,happ(s(fun(X7,X7),'const.combin.I_0'),s(X7,X11)))),
  file('thm.rich_list.COUNT_LIST_SNOC|split|1','ARITY_0_1_const.combin.I')).
fof(f86,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',X2))),s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',X2))),s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num',X2)))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',X2))),s('type.list.list'(X0),'const.list.GENLIST_2'(s(fun('type.num.num',X0),X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X7] : ! [X10,X6] : s('type.list.list'(X7),'const.list.GENLIST_2'(s(fun('type.num.num',X7),X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) = s('type.list.list'(X7),'const.list.SNOC_2'(s(X7,happ(s(fun('type.num.num',X7),X10),s('type.num.num',X6))),s('type.list.list'(X7),'const.list.GENLIST_2'(s(fun('type.num.num',X7),X10),s('type.num.num',X6)))))),
  file('thm.rich_list.COUNT_LIST_SNOC|split|1','thm.list.GENLIST|split|1')).
fof(f58,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) != s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',sK0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK0)))))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))))) != s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',sK0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f41])).
fof(f41,plain,(
  ? [X0] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) != s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) = s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) = s('type.list.list'('type.num.num'),'const.list.SNOC_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X6)))))),
  file('thm.rich_list.COUNT_LIST_SNOC|split|1','thm.rich_list.COUNT_LIST_SNOC|split|1')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 31
% Passive clauses: 141
% Generated clauses: 1569
% Final active clauses: 30
% Final passive clauses: 96
% Input formulas: 18
% Initial clauses: 30
% 
% Duplicate literals: 190
% Trivial inequalities: 40
% Fw subsumption resolutions: 92
% Fw demodulations: 133
% 
% Simple tautologies: 68
% Equational tautologies: 19
% Forward subsumptions: 825
% 
% Binary resolution: 3
% Forward superposition: 523
% Backward superposition: 431
% Self superposition: 67
% Equality factoring: 45
% Equality resolution: 4
% 
% Split clauses: 33
% Split components: 66
% SAT solver clauses: 69
% SAT solver unit clauses: 10
% SAT solver binary clauses: 35
% 
% Sat splits: 33
% 
% TWLsolver clauses: 69
% TWLsolver calls for satisfiability: 17
% 
% Memory used [KB]: 1151
% Time elapsed: 0.038 s
% ------------------------------
% ------------------------------
% Success in time 0.04 s
