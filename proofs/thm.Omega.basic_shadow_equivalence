Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.Omega
% (117684)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 749
% Passive clauses: 9835
% Generated clauses: 20643
% Final active clauses: 681
% Final passive clauses: 8530
% Input formulas: 42
% Initial clauses: 186
% 
% Duplicate literals: 462
% Trivial inequalities: 110
% Fw subsumption resolutions: 2070
% Fw demodulations: 275
% Bw demodulations: 67
% 
% Simple tautologies: 220
% Equational tautologies: 63
% Forward subsumptions: 7347
% 
% Binary resolution: 11303
% Factoring: 1275
% Forward superposition: 2503
% Backward superposition: 2097
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 32
% 
% Split clauses: 369
% Split components: 745
% SAT solver clauses: 742
% SAT solver unit clauses: 28
% SAT solver binary clauses: 170
% 
% Sat splits: 369
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 740
% TWLsolver calls for satisfiability: 459
% 
% Memory used [KB]: 10874
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.Omega
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.Omega
% SZS output start Proof for thm.Omega
fof(f6744,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6323,f6325,f2461,f2476,f246,f575,f583,f2286,f445,f6371,f301,f473,f572,f577,f244,f448,f245,f439,f2870,f2871,f249,f442,f440,f598,f603,f271,f462,f2248,f248,f444,f2293,f247,f441,f446,f267,f460,f573,f579,f243,f450,f453,f455,f347,f491,f250,f452,f302,f472,f2504,f2519,f6729,f438,f348,f492])).
fof(f492,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl66),
  inference(cnf_transformation,[],[f492_D])).
fof(f492_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(ennf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) => p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) => p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))),
  file('thm.Omega.basic_shadow_equivalence','thm.Omega.real_shadow_always_implied')).
fof(f438,plain,(
  ( ! [X2] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | $spl0),
  inference(cnf_transformation,[],[f438_D])).
fof(f438_D,plain,(
  ( ! [X2] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f6729,plain,(
  ( ! [X0] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl3 | $spl14 | $spl66 | $spl210 | $spl212)),
  inference(subsumption_resolution,[],[f6728,f452])).
fof(f6728,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl3 | $spl14 | $spl66 | $spl210 | $spl212)),
  inference(forward_demodulation,[],[f6727,f579])).
fof(f6727,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl3 | $spl14 | $spl66 | $spl210)),
  inference(subsumption_resolution,[],[f6726,f452])).
fof(f6726,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl3 | $spl66 | $spl210)),
  inference(forward_demodulation,[],[f6671,f577])).
fof(f6671,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl3 | $spl66)),
  inference(resolution,[],[f440,f492])).
fof(f2519,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | $spl936),
  inference(cnf_transformation,[],[f2519_D])).
fof(f2519_D,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) <=> ~$spl936),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl936])])).
fof(f2504,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | ($spl4 | $spl20)),
  inference(resolution,[],[f441,f460])).
fof(f472,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl36),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f302,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19])],[f122])).
fof(f122,plain,(
  ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | ? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(ennf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) => ? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) => ? [X8] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))))),
  file('thm.Omega.basic_shadow_equivalence','thm.Omega.Omega_74_prove_ltb')).
fof(f452,plain,(
  p(s(bool,'T_0')) | $spl14),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f250,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.Omega.basic_shadow_equivalence',aHL_TRUTH)).
fof(f491,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl64),
  inference(cnf_transformation,[],[f491_D])).
fof(f491_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f347,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(ennf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) => p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) => p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))),
  file('thm.Omega.basic_shadow_equivalence','thm.Omega.Omega_72_prove_ltb')).
fof(f455,plain,(
  ~p(s(bool,'F_0')) | $spl17),
  inference(cnf_transformation,[],[f455_D])).
fof(f455_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f453,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f253,f250])).
fof(f253,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f20])).
fof(f20,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.Omega.basic_shadow_equivalence','thm.bool.NOT_CLAUSES|split|1')).
fof(f450,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | $spl12),
  inference(cnf_transformation,[],[f450_D])).
fof(f450_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f243,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) & ((p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))))) | (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))))) & (! [X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f157])).
fof(f157,plain,(
  ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & (? [X3] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X3),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X3),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & (! [X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(rectify,[],[f156])).
fof(f156,plain,(
  ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & (? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & (! [X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & ((? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))) & (! [X2] : (~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) | (~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))))))),
  inference(nnf_transformation,[],[f107])).
fof(f107,plain,(
  ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & (? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) <~> (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ? [X0,X1] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) & (? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) <~> (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ~! [X0,X1] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) => (? [X2] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1))))) <=> (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) => (? [X8] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) <=> (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ((p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) => (? [X8] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6)))) & p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7))))) <=> (p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))) & p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X7)))))))),
  file('thm.Omega.basic_shadow_equivalence','thm.Omega.basic_shadow_equivalence')).
fof(f579,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))) | $spl212),
  inference(cnf_transformation,[],[f579_D])).
fof(f579_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f573,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))) | ($spl12 | $spl20)),
  inference(resolution,[],[f460,f450])).
fof(f460,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(cnf_transformation,[],[f460_D])).
fof(f460_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f267,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.Omega.basic_shadow_equivalence','thm.bool.EQ_CLAUSES|split|1')).
fof(f446,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | $spl8),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f441,plain,(
  p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl4),
  inference(cnf_transformation,[],[f441_D])).
fof(f441_D,plain,(
  p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f247,plain,(
  p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))),
  inference(cnf_transformation,[],[f158])).
fof(f2293,plain,(
  $false | ($spl4 | $spl17 | $spl218)),
  inference(subsumption_resolution,[],[f2292,f455])).
fof(f2292,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl218)),
  inference(forward_demodulation,[],[f441,f603])).
fof(f444,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl6),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f248,plain,(
  p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))))),
  inference(cnf_transformation,[],[f158])).
fof(f2248,plain,(
  ( ! [X0] : (~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl14 | $spl17 | $spl64 | $spl210 | $spl212 | $spl218)),
  inference(subsumption_resolution,[],[f2247,f452])).
fof(f2247,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl14 | $spl17 | $spl64 | $spl210 | $spl212 | $spl218)),
  inference(forward_demodulation,[],[f2246,f579])).
fof(f2246,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl14 | $spl17 | $spl64 | $spl210 | $spl218)),
  inference(subsumption_resolution,[],[f2245,f452])).
fof(f2245,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl17 | $spl64 | $spl210 | $spl218)),
  inference(forward_demodulation,[],[f2244,f577])).
fof(f2244,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl17 | $spl64 | $spl218)),
  inference(subsumption_resolution,[],[f2231,f455])).
fof(f2231,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl64 | $spl218)),
  inference(superposition,[],[f491,f603])).
fof(f462,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f462_D])).
fof(f462_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f271,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.Omega.basic_shadow_equivalence','thm.bool.EQ_CLAUSES|split|3')).
fof(f603,plain,(
  s(bool,'F_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | $spl218),
  inference(cnf_transformation,[],[f603_D])).
fof(f603_D,plain,(
  s(bool,'F_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f598,plain,(
  s(bool,'F_0') = s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | ($spl5 | $spl24)),
  inference(resolution,[],[f462,f442])).
fof(f440,plain,(
  ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl3),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f442,plain,(
  ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl5),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f249,plain,(
  ( ! [X2] : (~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',X2),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) )),
  inference(cnf_transformation,[],[f158])).
fof(f2871,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | $spl998),
  inference(cnf_transformation,[],[f2871_D])).
fof(f2871_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) <=> ~$spl998),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl998])])).
fof(f2870,plain,(
  ( ! [X0] : (~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl0 | $spl14 | $spl36 | $spl210)),
  inference(subsumption_resolution,[],[f2869,f452])).
fof(f2869,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl0 | $spl36 | $spl210)),
  inference(forward_demodulation,[],[f2854,f577])).
fof(f2854,plain,(
  ( ! [X0] : (~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))) ) | ($spl0 | $spl36)),
  inference(resolution,[],[f472,f438])).
fof(f439,plain,(
  p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl2),
  inference(cnf_transformation,[],[f439_D])).
fof(f439_D,plain,(
  p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f245,plain,(
  p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12))))),
  inference(cnf_transformation,[],[f158])).
fof(f448,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | $spl10),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f244,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))))),
  inference(cnf_transformation,[],[f158])).
fof(f577,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | $spl210),
  inference(cnf_transformation,[],[f577_D])).
fof(f577_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f572,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | ($spl10 | $spl20)),
  inference(resolution,[],[f460,f448])).
fof(f473,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) | $spl38),
  inference(cnf_transformation,[],[f473_D])).
fof(f473_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f301,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(X1,X0)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X1)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),X0))))) )),
  inference(cnf_transformation,[],[f185])).
fof(f6371,plain,(
  $false | ($spl14 | $spl38 | $spl210 | $spl212 | $spl906 | $spl936 | $spl2447)),
  inference(subsumption_resolution,[],[f6370,f452])).
fof(f6370,plain,(
  ~p(s(bool,'T_0')) | ($spl14 | $spl38 | $spl210 | $spl212 | $spl906 | $spl936 | $spl2447)),
  inference(forward_demodulation,[],[f6369,f579])).
fof(f6369,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl38 | $spl210 | $spl906 | $spl936 | $spl2447)),
  inference(subsumption_resolution,[],[f6368,f452])).
fof(f6368,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl38 | $spl210 | $spl906 | $spl936 | $spl2447)),
  inference(forward_demodulation,[],[f6367,f577])).
fof(f6367,plain,(
  ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl38 | $spl906 | $spl936 | $spl2447)),
  inference(subsumption_resolution,[],[f6366,f452])).
fof(f6366,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl38 | $spl906 | $spl936 | $spl2447)),
  inference(forward_demodulation,[],[f6365,f2476])).
fof(f6365,plain,(
  ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl38 | $spl936 | $spl2447)),
  inference(subsumption_resolution,[],[f6364,f452])).
fof(f6364,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl38 | $spl936 | $spl2447)),
  inference(forward_demodulation,[],[f6328,f2519])).
fof(f6328,plain,(
  ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.pair.prod'('type.num.num','type.integer.int'),bool),'const.Omega.fst_nzero_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl38 | $spl2447)),
  inference(resolution,[],[f6325,f473])).
fof(f445,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | $spl9),
  inference(cnf_transformation,[],[f445_D])).
fof(f445_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f2286,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl0 | $spl14 | $spl216)),
  inference(subsumption_resolution,[],[f2270,f452])).
fof(f2270,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl0 | $spl216)),
  inference(superposition,[],[f438,f583])).
fof(f583,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | $spl216),
  inference(cnf_transformation,[],[f583_D])).
fof(f583_D,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f575,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | ($spl6 | $spl20)),
  inference(resolution,[],[f460,f444])).
fof(f246,plain,(
  p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | p(s(bool,'const.Omega.evallower_2'(s('type.integer.int',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))))),
  inference(cnf_transformation,[],[f158])).
fof(f2476,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | $spl906),
  inference(cnf_transformation,[],[f2476_D])).
fof(f2476_D,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) <=> ~$spl906),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl906])])).
fof(f2461,plain,(
  s(bool,'T_0') = s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13))) | ($spl2 | $spl20)),
  inference(resolution,[],[f439,f460])).
fof(f6325,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | $spl2447),
  inference(cnf_transformation,[],[f6325_D])).
fof(f6325_D,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) <=> ~$spl2447),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2447])])).
fof(f6323,plain,(
  ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl212 | $spl906 | $spl936 | $spl998)),
  inference(subsumption_resolution,[],[f6322,f452])).
fof(f6322,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl212 | $spl906 | $spl936 | $spl998)),
  inference(forward_demodulation,[],[f6321,f2519])).
fof(f6321,plain,(
  ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl212 | $spl906 | $spl998)),
  inference(subsumption_resolution,[],[f6320,f452])).
fof(f6320,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl212 | $spl906 | $spl998)),
  inference(forward_demodulation,[],[f6319,f2476])).
fof(f6319,plain,(
  ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl14 | $spl212 | $spl998)),
  inference(subsumption_resolution,[],[f6278,f452])).
fof(f6278,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.Omega.real_shadow_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.dark_shadow_condition_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK13)))) | ~p(s(bool,'const.Omega.evalupper_2'(s('type.integer.int',sK19(sK13,sK12)),s('type.list.list'('type.pair.prod'('type.num.num','type.integer.int')),sK12)))) | ($spl212 | $spl998)),
  inference(superposition,[],[f2871,f579])).
% SZS output end Proof for thm.Omega
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 365
% Passive clauses: 1338
% Generated clauses: 7094
% Final active clauses: 253
% Final passive clauses: 896
% Input formulas: 42
% Initial clauses: 186
% 
% Duplicate literals: 173
% Trivial inequalities: 26
% Fw subsumption resolutions: 744
% Fw demodulations: 217
% Bw demodulations: 84
% Condensations: 140
% Global subsumptions: 13
% 
% Simple tautologies: 226
% Equational tautologies: 17
% Forward subsumptions: 2495
% 
% Binary resolution: 2206
% Factoring: 121
% Forward superposition: 504
% Backward superposition: 704
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 58
% Split components: 118
% SAT solver clauses: 1791
% SAT solver unit clauses: 181
% SAT solver binary clauses: 84
% SAT solver learnt clauses: 33
% SAT solver learnt literals: 19
% 
% Sat splits: 58
% Sat splitting refutations: 36
% 
% TWLsolver clauses: 1732
% TWLsolver calls for satisfiability: 1859
% 
% Memory used [KB]: 6652
% Time elapsed: 0.256 s
% ------------------------------
% ------------------------------
% Success in time 0.865 s
