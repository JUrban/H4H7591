Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (14500)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 768
% Passive clauses: 7128
% Generated clauses: 24495
% Final active clauses: 760
% Final passive clauses: 5950
% Input formulas: 132
% Initial clauses: 313
% 
% Duplicate literals: 256
% Trivial inequalities: 48
% Fw subsumption resolutions: 1050
% Fw demodulations: 3392
% Bw demodulations: 8
% 
% Simple tautologies: 236
% Equational tautologies: 40
% Forward subsumptions: 12388
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 6956
% Factoring: 1491
% Forward superposition: 6381
% Backward superposition: 4656
% Self superposition: 40
% Equality factoring: 2
% Equality resolution: 23
% 
% Split clauses: 196
% Split components: 394
% SAT solver clauses: 370
% SAT solver unit clauses: 11
% SAT solver binary clauses: 62
% 
% Sat splits: 196
% 
% TWLsolver clauses: 370
% TWLsolver calls for satisfiability: 335
% 
% Memory used [KB]: 14967
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (14517)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 401
% Passive clauses: 3235
% Generated clauses: 14567
% Final active clauses: 394
% Final passive clauses: 2678
% Input formulas: 132
% Initial clauses: 313
% 
% Duplicate literals: 93
% Trivial inequalities: 5
% Fw subsumption resolutions: 559
% Fw demodulations: 1581
% Bw demodulations: 160
% Condensations: 162
% Global subsumptions: 20
% 
% Simple tautologies: 190
% Equational tautologies: 13
% Forward subsumptions: 4718
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 2987
% Factoring: 355
% Forward superposition: 2741
% Backward superposition: 2265
% Self superposition: 48
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 4230
% SAT solver unit clauses: 349
% SAT solver binary clauses: 142
% SAT solver learnt clauses: 40
% SAT solver learnt literals: 10
% 
% Sat splits: 10
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 4150
% TWLsolver calls for satisfiability: 2188
% 
% Memory used [KB]: 19701
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f25354,plain,(
  $false),
  inference(subsumption_resolution,[],[f589,f25313])).
fof(f25313,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X5,bool),X7))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X4,X5),'_dst_x0x1_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X4,'type.pair.prod'(X4,'type.one.one')),'_dst_x1x0_2'(s(fun(X4,fun('type.one.one','type.pair.prod'(X4,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X5,bool),X7)))) )),
  inference(forward_demodulation,[],[f24914,f777])).
fof(f777,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))) )),
  inference(cnf_transformation,[],[f263])).
fof(f263,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X6,X7] : ! [X9,X12] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),X9),s(fun(X7,bool),X12))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X6,X7),X9),s(fun(X7,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X7,bool),X12)))))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|3','thm.quantHeuristics.GUESSES_NEG_REWRITE|split|0')).
fof(f24914,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X5,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X5,bool),X7))))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X4,X5),'_dst_x0x1_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X4,'type.pair.prod'(X4,'type.one.one')),'_dst_x1x0_2'(s(fun(X4,fun('type.one.one','type.pair.prod'(X4,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X5,bool),X7)))) )),
  inference(superposition,[],[f780,f777])).
fof(f780,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(flattening,[],[f268])).
fof(f268,plain,(
  ! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|3','thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|2')).
fof(f589,plain,(
  s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))) != s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),'_dst_x0x1_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK10,'type.pair.prod'(sK10,'type.one.one')),'_dst_x1x0_2'(s(fun(sK10,fun('type.one.one','type.pair.prod'(sK10,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(sK11,bool),sK12)))),
  inference(cnf_transformation,[],[f423])).
fof(f423,plain,(
  s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))) != s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(sK10,sK11),'_dst_x0x1_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK10,'type.pair.prod'(sK10,'type.one.one')),'_dst_x1x0_2'(s(fun(sK10,fun('type.one.one','type.pair.prod'(sK10,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(sK11,bool),sK12)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13])],[f345])).
fof(f345,plain,(
  ? [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) != s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_FORALL_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|3','thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|3')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 515
% Passive clauses: 3718
% Generated clauses: 25149
% Final active clauses: 400
% Final passive clauses: 2499
% Input formulas: 132
% Initial clauses: 313
% 
% Duplicate literals: 6
% Trivial inequalities: 12
% Fw subsumption resolutions: 228
% Fw demodulations: 8062
% Bw demodulations: 494
% Condensations: 36
% Global subsumptions: 4
% 
% Simple tautologies: 91
% Equational tautologies: 32
% Forward subsumptions: 9060
% Fw demodulations to eq. taut.: 3817
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 7803
% Factoring: 1
% Forward superposition: 4345
% Backward superposition: 3378
% Self superposition: 51
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 3812
% SAT solver unit clauses: 793
% SAT solver binary clauses: 2039
% 
% Sat splits: 10
% Sat splitting refutations: 68
% 
% Memory used [KB]: 25841
% Time elapsed: 1.046 s
% ------------------------------
% ------------------------------
% Success in time 2.39 s
