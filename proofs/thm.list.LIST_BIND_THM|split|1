Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f5296,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5289])).
fof(f5289,plain,(
  s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))),s(fun(sK0,'type.list.list'(sK1)),sK4))) != s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))),s(fun(sK0,'type.list.list'(sK1)),sK4)))),
  inference(superposition,[],[f55,f1961])).
fof(f1961,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))),s(fun(X1,'type.list.list'(X0)),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X4),s(fun(X1,'type.list.list'(X0)),X2)))))) )),
  inference(forward_demodulation,[],[f1960,f80])).
fof(f80,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X7,X6] : ! [X12,X10] : s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),X12),s(fun(X6,'type.list.list'(X7)),X10))) = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),'const.list.MAP_2'(s(fun(X6,'type.list.list'(X7)),X10),s('type.list.list'(X6),X12)))))),
  file('thm.list.LIST_BIND_THM|split|1','thm.list.LIST_BIND_def')).
fof(f1960,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X4),s(fun(X1,'type.list.list'(X0)),X2)))))) )),
  inference(forward_demodulation,[],[f1956,f80])).
fof(f1956,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X2),s('type.list.list'(X1),X4)))))))) )),
  inference(superposition,[],[f78,f82])).
fof(f82,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X10,X9,X8] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),X8))))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X9))),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X8)))))),
  file('thm.list.LIST_BIND_THM|split|1','thm.list.MAP|split|1')).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X1),s('type.list.list'('type.list.list'(X0)),X2)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X1),s('type.list.list'('type.list.list'(X0)),X2)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),X2))))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X1),s('type.list.list'('type.list.list'(X0)),X2)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : ! [X9,X8] : s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X9),s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),X8))))) = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),'const.list.CONS_2'(s('type.list.list'(X7),X9),s('type.list.list'('type.list.list'(X7)),X8)))))),
  file('thm.list.LIST_BIND_THM|split|1','thm.list.FLAT|split|1')).
fof(f55,plain,(
  s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))),s(fun(sK0,'type.list.list'(sK1)),sK4))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),happ(s(fun(sK0,'type.list.list'(sK1)),sK4),s(sK0,sK3))),s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),sK2),s(fun(sK0,'type.list.list'(sK1)),sK4)))))),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))),s(fun(sK0,'type.list.list'(sK1)),sK4))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),happ(s(fun(sK0,'type.list.list'(sK1)),sK4),s(sK0,sK3))),s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),sK2),s(fun(sK0,'type.list.list'(sK1)),sK4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) != s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))),s(fun(X0,'type.list.list'(X1)),X4))) = s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),happ(s(fun(X0,'type.list.list'(X1)),X4),s(X0,X3))),s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),X2),s(fun(X0,'type.list.list'(X1)),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))),s(fun(X6,'type.list.list'(X7)),X10))) = s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),happ(s(fun(X6,'type.list.list'(X7)),X10),s(X6,X9))),s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),X8),s(fun(X6,'type.list.list'(X7)),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))),s(fun(X6,'type.list.list'(X7)),X10))) = s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),happ(s(fun(X6,'type.list.list'(X7)),X10),s(X6,X9))),s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),X8),s(fun(X6,'type.list.list'(X7)),X10)))))),
  file('thm.list.LIST_BIND_THM|split|1','thm.list.LIST_BIND_THM|split|1')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 856
% Generated clauses: 4971
% Final active clauses: 37
% Final passive clauses: 795
% Input formulas: 17
% Initial clauses: 28
% 
% Duplicate literals: 475
% Trivial inequalities: 66
% Fw subsumption resolutions: 383
% Fw demodulations: 109
% 
% Simple tautologies: 137
% Equational tautologies: 86
% Forward subsumptions: 2139
% 
% Binary resolution: 19
% Forward superposition: 1959
% Backward superposition: 1464
% Self superposition: 270
% Equality factoring: 225
% Equality resolution: 3
% 
% Split clauses: 255
% Split components: 511
% SAT solver clauses: 733
% SAT solver unit clauses: 226
% SAT solver binary clauses: 244
% 
% Sat splits: 255
% 
% TWLsolver clauses: 733
% TWLsolver calls for satisfiability: 26
% 
% Memory used [KB]: 3070
% Time elapsed: 0.195 s
% ------------------------------
% ------------------------------
% Success in time 0.201 s
