Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f91,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f89,f27,f41,f39,f81,f26,f40,f38])).
fof(f38,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl1),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f40,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) | $spl2),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f26,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f21])).
fof(f21,plain,(
  ? [X0,X1] : ((~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ? [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <~> p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) <=> p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) <=> p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X7),s('type.integer.int',X6)))))),
  file('thm.integer.INT_NOT_LT','thm.integer.INT_NOT_LT')).
fof(f81,plain,(
  $false | ($spl1 | $spl3)),
  inference(subsumption_resolution,[],[f77,f38])).
fof(f77,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl3),
  inference(resolution,[],[f35,f41])).
fof(f35,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) | p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1))))))),
  inference(nnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X6),s('type.integer.int',X7)))) <=> ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X7),s('type.integer.int',X6)))))),
  file('thm.integer.INT_NOT_LT','thm.integer.int_le')).
fof(f39,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl0),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f41,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) | $spl3),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f27,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK1),s('type.integer.int',sK0)))) | p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f22])).
fof(f89,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f86,f39])).
fof(f86,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',sK0),s('type.integer.int',sK1)))) | $spl2),
  inference(resolution,[],[f40,f34])).
fof(f34,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) )),
  inference(cnf_transformation,[],[f24])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 28
% Generated clauses: 66
% Final active clauses: 9
% Final passive clauses: 8
% Input formulas: 8
% Initial clauses: 11
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% Fw subsumption resolutions: 5
% Bw demodulations: 2
% 
% Simple tautologies: 3
% Equational tautologies: 3
% Forward subsumptions: 21
% 
% Binary resolution: 8
% Forward superposition: 16
% Backward superposition: 8
% Self superposition: 4
% Equality factoring: 2
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 8
% SAT solver unit clauses: 2
% SAT solver binary clauses: 5
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 3
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 6
% TWLsolver calls for satisfiability: 4
% 
% Memory used [KB]: 639
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.015 s
